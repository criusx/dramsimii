<!-- saved from url=(0007)http:// -->
<HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<TITLE>WJ.MPR.Reader.MPRReader</TITLE>
<LINK REL=STYLESHEET HREF="../CommentReport.css" TYPE="text/css">
</HEAD>
<BODY topmargin=0 rightmargin=0 leftmargin=0 style="background-image: url(../titletile.jpg); background-repeat:repeat-x; background-position: 0 0;" >
<DIV CLASS="PageHeading">WJ.MPR.Reader.MPRReader Class</DIV>
<DIV CLASS="Description">

	This is the main class instantiated by Applications.
	- Manages a single WJ Multi-Protocol Reader.
	- Provides properties and methods for accessing features of the MPR.
	- Talks to the MPR via an MPRComm object.
	- Generates request frame payloads for MPR API commands.
	- Parses response frame payloads from MPR API commands.
	- Fires events when MPR public properties change
	- Manages an Inventory of Tags in the MPRs field of view.
	- Inventory can consist of Class 0 or Class 1 tags.
	- Periodically polls the MPR for its current Inventory to:
		1) add new tags when found
		2) expire old tags
	- Old Tags are expired if they have not been seen for at least "PersistTime"
	- InventoryUpdateGap is how long to wait between inventory requests to the MPR.
	- Has methods to enable bootloading new FW to the MPR.
	- Exposes MPR methods to Read/Program/Erase/Kill/Lock Tags.
<P>

</DIV>
<IMG src="../GradLeft.jpg" width=7 height=378 alt="" border="0" style="position:absolute; left:10; top:18;z-Index:2">
<IMG src="../GradTop.jpg" width=352 height=7 alt="" border="0" align="top" style="position:absolute; left:10; top:18; z-index:1">
<DIV CLASS="Remarks">
<SPAN CLASS="RemarkHdrX">Access: </SPAN>Public</DIV>
<DIV CLASS="Remarks">
<SPAN CLASS="RemarkHdrX">Base Classes: </SPAN>Object</DIV>
<DIV CLASS="Remarks">
<SPAN CLASS="RemarkHdrX">Implemented interfaces:  </SPAN>IDisposable</DIV>
<TABLE CLASS="InfoTable" cellpadding=0 cellspacing=0>
<TR height=20>
<TD width=20>&nbsp;</TD>
<TD valign=top align=left width=9 bgcolor="#cccc66"><IMG SRC="../graycorner.jpg" align=top></TD>
<TD CLASS="TableLightLabel" WIDTH=206>Members</TD>
<TD CLASS="TableLightLabel" >Description</TD>
<TD width=20>&nbsp;</TD>
</TR>
<TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP182.HTM" TARGET="CNTFRAME">MPRReader</A></TD>
<TD CLASS="TableLightDesc">
Construct a new MPRReader.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP183.HTM" TARGET="CNTFRAME">Connect</A></TD>
<TD CLASS="TableLightDesc">
Destroys any existing connection, 
then starts the attempt to connect to an MPR at the requested Serial Port and Baud Rate.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP184.HTM" TARGET="CNTFRAME">Connect</A></TD>
<TD CLASS="TableLightDesc">
Connect using the last (or default) SerialPortName and BaudRate
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP185.HTM" TARGET="CNTFRAME">Disconnect</A></TD>
<TD CLASS="TableLightDesc">
Disable Inventory Timer and close MPRComm.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP186.HTM" TARGET="CNTFRAME">Suspend</A></TD>
<TD CLASS="TableLightDesc">
Close MPRComm, but record that we should reconnect on Resume.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP187.HTM" TARGET="CNTFRAME">Resume</A></TD>
<TD CLASS="TableLightDesc">
Re-connect to the MPR if we were supposed to (as recorded in Suspend())
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP188.HTM" TARGET="CNTFRAME">Class0PlusRead</A></TD>
<TD CLASS="TableLightDesc">
Read bits from a Matrics Class 0+ Tag.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP190.HTM" TARGET="CNTFRAME">Class0PlusWrite</A></TD>
<TD CLASS="TableLightDesc">
Write a Row of data to a Matrics Class 0+ Tag.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP191.HTM" TARGET="CNTFRAME">Class0ZumaRowRead</A></TD>
<TD CLASS="TableLightDesc">
Zuma command to Read a row of data (or Tag ID).
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP193.HTM" TARGET="CNTFRAME">Class0ZumaRowWrite</A></TD>
<TD CLASS="TableLightDesc">
Zuma command to Write a row of data (or Tag ID).
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP194.HTM" TARGET="CNTFRAME">Class0ZumaInit</A></TD>
<TD CLASS="TableLightDesc">
Zuma command to Initialize a tag.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP195.HTM" TARGET="CNTFRAME">Class0Kill</A></TD>
<TD CLASS="TableLightDesc">
Kills a Class 0 Tag.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP196.HTM" TARGET="CNTFRAME">Class1Kill</A></TD>
<TD CLASS="TableLightDesc">
Kill Class1 Tag.
TagID represented as a byteList.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP197.HTM" TARGET="CNTFRAME">Class1Write</A></TD>
<TD CLASS="TableLightDesc">
Write 16 bits to a Class1 Tag.
Word Addresses address 16 bits.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP198.HTM" TARGET="CNTFRAME">Class1Write</A></TD>
<TD CLASS="TableLightDesc">
Write 16 bits to a Class1 Tag.
Word Addresses address 16 bits.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP199.HTM" TARGET="CNTFRAME">Class1Verify</A></TD>
<TD CLASS="TableLightDesc">
Read all bits of a Class1 tag's EPC and CRC.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP200.HTM" TARGET="CNTFRAME">Class1Verify</A></TD>
<TD CLASS="TableLightDesc">
Read all bits of a Class1 tag's EPC and CRC.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP201.HTM" TARGET="CNTFRAME">Class1Erase</A></TD>
<TD CLASS="TableLightDesc">
Erase a Class1 Tag.
Sets all bits of identifier, CRC and Passcode to all 0s.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP202.HTM" TARGET="CNTFRAME">Reset</A></TD>
<TD CLASS="TableLightDesc">
The MPR Series Reader can be reset by twiddling with the serial port.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP203.HTM" TARGET="CNTFRAME">EnterBootloader</A></TD>
<TD CLASS="TableLightDesc">
A shortcut for entering the Bootloader (same as Reset(true))
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP204.HTM" TARGET="CNTFRAME">BeginBootloadFromStream</A></TD>
<TD CLASS="TableLightDesc">
Given a Stream, enter the bootloader 
launch a new Thread (from the ThreadPool)
and send the Stream to the MPR's bootloader.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP205.HTM" TARGET="CNTFRAME">BootloadFromStream</A></TD>
<TD CLASS="TableLightDesc">
Send each row of the Stream to the MPR bootloader.
Will fail if parameter oStream is not a valid Stream,
or MPR not already in the bootloader.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP206.HTM" TARGET="CNTFRAME">activeAntenna</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP207.HTM" TARGET="CNTFRAME">ActiveAntenna</A></TD>
<TD CLASS="TableLightDesc">
The active antenna can be either A or B.  
Antenna A is the left antenna port when looking down on the card, with the antenna ports facing up.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP209.HTM" TARGET="CNTFRAME">txPower</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP210.HTM" TARGET="CNTFRAME">TxPower</A></TD>
<TD CLASS="TableLightDesc">
The Tx Power can range from 15-27 dBm for MPR5000/MPR6000, 
and 18-30 dBm for MPR7000.
Ranges are stored in card NVS, and can be read back.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP212.HTM" TARGET="CNTFRAME">txPowerMin</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP213.HTM" TARGET="CNTFRAME">TxPowerMin</A></TD>
<TD CLASS="TableLightDesc">
The minimum TxPower, as read from the MPR.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP215.HTM" TARGET="CNTFRAME">txPowerMax</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP216.HTM" TARGET="CNTFRAME">TxPowerMax</A></TD>
<TD CLASS="TableLightDesc">
The maximum TxPower, as read from the MPR.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP218.HTM" TARGET="CNTFRAME">singulationField</A></TD>
<TD CLASS="TableLightDesc">
Singulation Field for Class0 commands
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP219.HTM" TARGET="CNTFRAME">Class0SingulationField</A></TD>
<TD CLASS="TableLightDesc">
The Class0 Singulation Field can be 0, 1 or 2 for 
	0 = ID0 (Generated Random ID)
	1 = ID1 (Static Random ID)
	2 = ID2 (the EPC Code itself)
Used by the MPR to determine how to singulate tags.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP221.HTM" TARGET="CNTFRAME">CommParams</A></TD>
<TD CLASS="TableLightDesc">
A string describing the COM port and baud rate, or "No Comm" 
if the communications settings are not set.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP223.HTM" TARGET="CNTFRAME">persistTime</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP224.HTM" TARGET="CNTFRAME">PersistTime</A></TD>
<TD CLASS="TableLightDesc">
How long a tag that has been read will persist in the inventory,
without being read, while an inventory is running.

If an inventory is stopped, tags do not expire.
If a tag is re-read, it will live at least another peristTime.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP226.HTM" TARGET="CNTFRAME">invUpdateGap</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP227.HTM" TARGET="CNTFRAME">InvUpdateGap</A></TD>
<TD CLASS="TableLightDesc">
How much time to wait between calls to UpdateInventory when
an inventory loop is running.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP229.HTM" TARGET="CNTFRAME">invTimerEnabled</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP230.HTM" TARGET="CNTFRAME">InvTimerEnabled</A></TD>
<TD CLASS="TableLightDesc">
Whether an inventory is actively running.
When set to true, a timer is started that will expire after InvUpdateGap and call UpdateInventory()
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP232.HTM" TARGET="CNTFRAME">TagInventory</A></TD>
<TD CLASS="TableLightDesc">
Returns the inventory (list of tags) that have been read by the reader,
but not expired.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP234.HTM" TARGET="CNTFRAME">_DeviceModelNumber</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP235.HTM" TARGET="CNTFRAME">_DeviceSerialNumber</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP236.HTM" TARGET="CNTFRAME">_HardwareVersion</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP237.HTM" TARGET="CNTFRAME">_ManufactureDate</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP238.HTM" TARGET="CNTFRAME">_ManufacturerName</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP239.HTM" TARGET="CNTFRAME">_FirmwareVersion</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP240.HTM" TARGET="CNTFRAME">_FirmwareMinorVersion</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP241.HTM" TARGET="CNTFRAME">_FirmwareMajorVersion</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP242.HTM" TARGET="CNTFRAME">_BootLoaderVersion</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP243.HTM" TARGET="CNTFRAME">_BootLoaderMinorVersion</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP244.HTM" TARGET="CNTFRAME">_BootLoaderMajorVersion</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP245.HTM" TARGET="CNTFRAME">DeviceModelNumber</A></TD>
<TD CLASS="TableLightDesc">
Device Model Number is read and returned by the MPR "Get Information" Command.
A string of 8 ASCII bytes.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP247.HTM" TARGET="CNTFRAME">DeviceSerialNumber</A></TD>
<TD CLASS="TableLightDesc">
Device Serial Number is read and returned by the MPR "Get Information" Command.
A string of 12 ASCII bytes.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP249.HTM" TARGET="CNTFRAME">HardwareVersion</A></TD>
<TD CLASS="TableLightDesc">
Hardware Version Number is read and returned by the MPR "Get Information" Command.
A string of 8 ASCII bytes.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP251.HTM" TARGET="CNTFRAME">ManufactureDate</A></TD>
<TD CLASS="TableLightDesc">
Manufacture Date is read and returned by the MPR "Get Information" Command.
A string of 8 ASCII bytes.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP253.HTM" TARGET="CNTFRAME">ManufacturerName</A></TD>
<TD CLASS="TableLightDesc">
Manufacturer Name is read and returned by the MPR "Get Information" Command.
A string of 16 ASCII bytes.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP255.HTM" TARGET="CNTFRAME">FirmwareVersion</A></TD>
<TD CLASS="TableLightDesc">
Firmware Version Number is read and returned by the MPR "Get Information" Command as 2 bytes.
This is converted to a string with dotted decimal notation.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP257.HTM" TARGET="CNTFRAME">FirmwareMajorVersion</A></TD>
<TD CLASS="TableLightDesc">
Firmware Major Version is MSB of the FirmwareVersion
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP259.HTM" TARGET="CNTFRAME">FirmwareMinorVersion</A></TD>
<TD CLASS="TableLightDesc">
Firmware Major Version is LSB of the FirmwareVersion
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP261.HTM" TARGET="CNTFRAME">BootLoaderVersion</A></TD>
<TD CLASS="TableLightDesc">
Bootloader Version Number is read and returned by the MPR "Get Information" Command as 2 bytes.
This is converted to a string with dotted decimal notation.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP263.HTM" TARGET="CNTFRAME">BootloaderMajorVersion</A></TD>
<TD CLASS="TableLightDesc">
Bootloader Major Version is MSB of the BootloaderVersion
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP265.HTM" TARGET="CNTFRAME">BootloaderMinorVersion</A></TD>
<TD CLASS="TableLightDesc">
Bootloader Major Version is LSB of the BootloaderVersion
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP267.HTM" TARGET="CNTFRAME">UpdateReaderInfo</A></TD>
<TD CLASS="TableLightDesc">
Update the Reader's Manufacturing Information
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP268.HTM" TARGET="CNTFRAME">RecomputeTxPowerLimits</A></TD>
<TD CLASS="TableLightDesc">
Tx Power Limits are a function of the model type, as reported by the MPR
during a "Read Information" Command.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP269.HTM" TARGET="CNTFRAME">Class0Inventory</A></TD>
<TD CLASS="TableLightDesc">
Request the EPC Gen 1 Class 0 Inventory from the MPR.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP271.HTM" TARGET="CNTFRAME">Class1Inventory</A></TD>
<TD CLASS="TableLightDesc">
Request the EPC Gen 1 Class 1 Inventory from the MPR.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP273.HTM" TARGET="CNTFRAME">Gen2Inventory</A></TD>
<TD CLASS="TableLightDesc">
Request the UHF Gen 2 Class 1 Inventory from the MPR.
- not implemented yet.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP275.HTM" TARGET="CNTFRAME">InventoryUpdateCallback</A></TD>
<TD CLASS="TableLightDesc">
The method called when the InventoryUpdateTimer expires.
Updates the Inventories,
Fires an InvPollEvent,
and restarts the InventoryUpdateTimer, if still enabled.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP276.HTM" TARGET="CNTFRAME">TagsRead</A></TD>
<TD CLASS="TableLightDesc">
Form's copy of current persisted inventory
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP277.HTM" TARGET="CNTFRAME">CurrentInventory</A></TD>
<TD CLASS="TableLightDesc">
Returns an Inventory Object populated with the tags that have been read and not expired.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP279.HTM" TARGET="CNTFRAME">Class0InventoryEnabled</A></TD>
<TD CLASS="TableLightDesc">
Whether or not to perform EPC Class 0 inventories.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP280.HTM" TARGET="CNTFRAME">Class1InventoryEnabled</A></TD>
<TD CLASS="TableLightDesc">
Whether to perform EPC Class 1 inventories.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP281.HTM" TARGET="CNTFRAME">Gen2InventoryEnabled</A></TD>
<TD CLASS="TableLightDesc">
Whether to perform EPC UHF Gen2 inventories.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP282.HTM" TARGET="CNTFRAME">UpdateInventory</A></TD>
<TD CLASS="TableLightDesc">
A running inventory is called in a loop:
	A timer expires after InvUpdateGap.
	All enabled inventories are queried from the MPR.
	New tags are added, 
	and expired tags are removed.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP283.HTM" TARGET="CNTFRAME">ClearInventory</A></TD>
<TD CLASS="TableLightDesc">
Clear the Inventory by removing all tags.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP284.HTM" TARGET="CNTFRAME">isConnected</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP285.HTM" TARGET="CNTFRAME">IsConnected</A></TD>
<TD CLASS="TableLightDesc">
Whether we are connected to the MPR or not.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP287.HTM" TARGET="CNTFRAME">comm</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP288.HTM" TARGET="CNTFRAME">pt</A></TD>
<TD CLASS="TableLightDesc">
High Performance Timer
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP290.HTM" TARGET="CNTFRAME">InventoryUpdateTimer</A></TD>
<TD CLASS="TableLightDesc">
Inventory loop timer
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP291.HTM" TARGET="CNTFRAME">ReconnectOnResume</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP292.HTM" TARGET="CNTFRAME">SerialPortName</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP293.HTM" TARGET="CNTFRAME">BaudRate</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP294.HTM" TARGET="CNTFRAME">inventory</A></TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP295.HTM" TARGET="CNTFRAME">LogIt</A></TD>
<TD CLASS="TableLightDesc">
Asynchronously log some status by calling the commlogger
delegate (if it has been assigned).
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP296.HTM" TARGET="CNTFRAME">ProcMsgStat</A></TD>
<TD CLASS="TableLightDesc">
Process the Status byte of a message response, and 
log an error message if the message is not OK.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP297.HTM" TARGET="CNTFRAME">ProcMsgStat</A></TD>
<TD CLASS="TableLightDesc">

<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP298.HTM" TARGET="CNTFRAME">ProcessSummary</A></TD>
<TD CLASS="TableLightDesc">
Most frames end with three counts,
Tags Processed,
Under-run errors (Tags whose TagID had less bits than the EPC header suggests it should have had)
CRC errors
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP299.HTM" TARGET="CNTFRAME">InventoryParse</A></TD>
<TD CLASS="TableLightDesc">
Decode the Tag IDs in the accumulated frame payloads received in response to an inventory command.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP301.HTM" TARGET="CNTFRAME">Class0PlusReadParse</A></TD>
<TD CLASS="TableLightDesc">
Parse the response of a Class0+ read row command.
Each response frame consists of:
	The number of tags in its payload (1 byte)
	For each tag in the frame:
		the Tag ID
		3 bytes from the row being read.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP302.HTM" TARGET="CNTFRAME">Class0ZumaRowParse</A></TD>
<TD CLASS="TableLightDesc">
Parse the response from a Class 0 Zuma "Read Row" request message.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP303.HTM" TARGET="CNTFRAME">Class1VerifyParse</A></TD>
<TD CLASS="TableLightDesc">
Parse the response to a Class 1 Verify Command.
Each response frame of a Verify command's response consists of:
	The number of tags in this frame.
	The whole TagID of the tag.
	The Kill Passcode of the tag.
	The Lock Code of the tag.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP304.HTM" TARGET="CNTFRAME">KickInvTimer</A></TD>
<TD CLASS="TableLightDesc">
Reset 
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP305.HTM" TARGET="CNTFRAME">Dispose</A></TD>
<TD CLASS="TableLightDesc">
Release resources:
InventoryUpdateTimer and the MPRComm objects
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP306.HTM" TARGET="CNTFRAME">comm_IsOpenChanged</A></TD>
<TD CLASS="TableLightDesc">
Event Handler is called when comm up status changes
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR><TR height=20>
<TD width=20>&nbsp;</TD>
<TD CLASS="TableLightDesc">&nbsp;</TD>
<TD CLASS="TableLightDesc"><A HREF="CWP307.HTM" TARGET="CNTFRAME">comm_BLDataArrived</A></TD>
<TD CLASS="TableLightDesc">
Fires when ASCII data arrives from the bootloader.
Passes this data up by firing its own event, BootloaderBytesReceivedEvent.
<P>
</TD>
<TD width=20>&nbsp;</TD>
</TR></TABLE>
</BODY>
</HTML>
