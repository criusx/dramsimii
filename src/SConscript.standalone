import os
import sys
Import('env')

conf = Configure(env)

if not conf.CheckLib('boost_serialization'):
	print 'Boost serialization library not found, please install this.'
	print 'e.g. sudo apt-get install "libboost-serialization*"'
	Exit(1)
if not conf.CheckLib('boost_iostreams'):
	print 'Boost iostreams library not found, please install this.'
	print 'e.g. sudo apt-get install "libboost-iostreams*"'
	Exit(1)
if not conf.CheckCXXHeader('boost/circular_buffer.hpp'):
	print 'Need Boost 1.35 or newer with the circular buffer library.'
	print 'The circular buffer header files may also be copied from a newer Boost instance to an older one.'
	Exit(1)
if not conf.CheckLib('boost_thread'):
	print 'Boost thread library not found, please install this.'
	print 'e.g. sudo apt-get install "libboost-thread*"'
	Exit(1)
if not conf.CheckLib('boost_unit_test_framework'):
	print 'Boost unit test framework not found, please install this.'
	print 'e.g. sudo apt-get install "libboost-test*"'
	Exit(1)
if not conf.CheckLib('boost_signals'):
	print 'Boost signals library not found, please install this.'
	print 'e.g. sudo apt-get install "libboost-signals*"'
	Exit(1)
if not conf.CheckCXXHeader('vector'):
   print 'vector must be installed!'
   Exit(1)
if not conf.CheckLib('boost_filesystem'):
	print 'Boost filesystem library not found, please install this.'
	print 'e.g. sudo apt-get install "libboost-filesystem*"'
	Exit(1)
if not conf.CheckLib('boost_program_options'):
	print 'Boost program options library not found, please install this.'
	print 'e.g. sudo apt-get install libboost-program-options-dev*"'
	Exit(1)
if not conf.CheckLib('xml2'):
	print "Need libxml2 to compile this."
	print "e.g. sudo apt-get install \".*libxml2.*\""
	Exit(1)
#if not conf.CheckLib('gomp'):
#	print 'need a compiler that supports OpenMP.'
#	print 'such as gcc 4.2+, icc 11+, Visual Studio 2005+, etc.'
#	Exit(1)



sourceBase = """
			reporting/soapC.cpp
			reporting/soapClient.cpp
			reporting/stdsoap2.cpp
			Address.cpp
			Bank.cpp
			busEvent.cpp
			command.cpp
			Algorithm.cpp
			Channel.cpp
			Statistics.cpp
			System.cpp
			Settings.cpp
			SettingsXML.cpp
			SystemConfiguration.cpp
			TimingSpecification.cpp
			event.cpp
			fbdAMB.cpp
			fbdChannel.cpp
			fbdFrame.cpp
			fbdSystem.cpp
			globals.cpp
			InputStream.cpp
			powerConfig.cpp
			Rank.cpp
			simulationParameters.cpp
			transaction.cpp"""

sourceFile = Split(sourceBase + "\nmain.cpp")
sourcesTest = Split(sourceBase + "\nunitTest.cpp")

env = conf.Finish()

ROOT = Dir('.').abspath
SRCDIR = os.path.join(ROOT,'src')


# This function adds the specified sources to the given build
# environment, and returns a list of all the corresponding SCons
# Object nodes (including an extra one for date.cc).  We explicitly
# add the Object nodes so we can set up special dependencies for
# date.cc.
def make_objs(sourceFiles, env):
    objs = [env.Object(s) for s in sourceFiles]
    # make date.cc depend on all other objects so it always gets
    # recompiled whenever anything else does
    #date_obj = env.Object('base/date.cc')
    #env.Depends(date_obj, objs)
    #objs.append(date_obj)
    return objs

platform = ARGUMENTS.get("build",Platform())

if platform == 'debug':
	envDebug = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.og')
	envDebug.Append(CCFLAGS = '-g -O -Weffc++ -Wall -Wextra -Wswitch-default -Wfloat-equal -DDEBUG')
	debug = envDebug.Program('dramSimII.debug',sourceFile)
	envDebug.Install(os.path.abspath('..') + "/bin", debug)
elif platform == 'debugOpt':
	envDebug = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.ogO')
	envDebug.Append(CCFLAGS = '-g -O3 -Weffc++ -Wall -Wextra -Wswitch-default -Wfloat-equal -DDEBUG')
	debug = envDebug.Program('dramSimII.debugOpt',sourceFile)
	envDebug.Install(os.path.abspath('..') + "/bin", debug)
elif platform == 'debugsimple':
	envDebugSimple = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.ogs')
	envDebugSimple.Append(CCFLAGS = '-g -Weffc++ -Wall -Wextra -Wswitch-default -Wfloat-equal -DDEBUG')
	debugSimple = envDebugSimple.Program('dramSimII.debugsimple',sourceFile)
	envDebugSimple.Install(os.path.abspath('..') + "/bin", debugSimple)
elif platform == 'test':
	envTest = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.ot')
	envTest.Append(CCFLAGS = '-g -O -Wall -Wextra -Weffc++ -DDEBUG')
	test = envTest.Program('dramSimII.test',sourcesTest)
	envTest.Install(os.path.abspath('..') + "/bin", test)
elif platform == 'prof':
	envProf = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.op')
	envProf.Append(CCFLAGS = '-g -O3 -funroll-loops -Wall -Wextra -Weffc++ -ffast-math -fomit-frame-pointer -finline-functions -march=athlon64 -DNDEBUG')
	prof = envProf.Program('dramSimII.prof',sourceFile)
	envProf.Install(os.path.abspath('..') + "/bin", prof)
elif platform == 'profgen':
	envProfgen = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.opg')
	envProfgen.Append(CCFLAGS = '-O3 -Wall -Wextra -funroll-loops -Weffc++ -ffast-math -fomit-frame-pointer -finline-functions -march=athlon64 -fprofile-generate -DNDEBUG')
	profgen = envProfgen.Program('dramSimII.profgen', sourceFile)
	envProfgen.Install(os.path.abspath('..') + "/bin", profgen)
elif platform == 'profuse':
	envProfuse = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.opu')
	envProfuse.Append(LIBS = 'gcov')
	profuse = envProfuse.Program('dramSimII.profuse', sourceFile)
	envProfuse.Install(os.path.abspath('..') + "/bin", profuse)
elif platform == 'all':
	envDebug = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.og')
	envDebug.Append(CCFLAGS = '-g -O -Weffc++ -Wall -Wextra -Wswitch-default -Wfloat-equal -DDEBUG')
	debug = envDebug.Program('dramSimII.debug',sourceFile)
	envDebug.Install(os.path.abspath('..') + "/bin", debug)
	envTest = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.ot')
	envTest.Append(CCFLAGS = '-g -O -Wall -Wextra -Weffc++ -DDEBUG')
	test = envTest.Program('dramSimII.test',sourcesTest)
	envTest.Install(os.path.abspath('..') + "/bin", test)
	envProf = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.op')
	envProf.Append(CCFLAGS = '-g -O3 -funroll-loops -Wall -Wextra -Weffc++ -ffast-math -fomit-frame-pointer -finline-functions -march=athlon64 -DNDEBUG')
	prof = envProf.Program('dramSimII.prof',sourceFile)
	envProf.Install(os.path.abspath('..') + "/bin", prof)
	envProfgen = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.opg')
	envProfgen.Append(CCFLAGS = '-O3 -Wall -Wextra -funroll-loops -Weffc++ -ffast-math -fomit-frame-pointer -finline-functions -march=athlon64 -fprofile-generate -DNDEBUG')
	profgen = envProfgen.Program('dramSimII.profgen', sourceFile)
	envProfgen.Install(os.path.abspath('..') + "/bin", profgen)
	envProfuse = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.opu')
	envProfuse.Append(LIBS = 'gcov')
	profuse = envProfuse.Program('dramSimII.profuse', sourceFile)
	envProfuse.Install(os.path.abspath('..') + "/bin", profuse)
	envOpt = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.of')
	envOpt.Append(CCFLAGS = '-O3 -funroll-loops -Wall -Wextra -Weffc++ -ffast-math -fomit-frame-pointer -finline-functions -march=athlon64 -DNDEBUG')
	opt = envOpt.Program('dramSimII.opt',sourceFile)
	envOpt.Install(os.path.abspath('..') + "/bin", opt)
else:
	envOpt = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.of')
	envOpt.Append(CCFLAGS = '-O3 -funroll-loops -Wall -Wextra -Wunused -pedantic -Weffc++ -ffast-math -fomit-frame-pointer -finline-functions -march=native -DNDEBUG')
	opt = envOpt.Program('dramSimII.opt',sourceFile)
	envOpt.Install(os.path.abspath('..') + "/bin", opt)