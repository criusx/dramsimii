import os
import sys
#Import(`env`)

sourceFile = Split("""
			reporting/soapC.cpp
			reporting/soapClient.cpp
			reporting/stdsoap2.cpp
			Address.cpp
			Bank.cpp
			busEvent.cpp
			command.cpp
			Algorithm.cpp
			Channel.cpp			
			Statistics.cpp
			System.cpp
			Settings.cpp
			SystemConfiguration.cpp
			TimingSpecification.cpp
			event.cpp
			executeCommand.cpp
			fbdAMB.cpp
			fbdChannel.cpp
			fbdFrame.cpp
			fbdSystem.cpp
			getNextCommand.cpp
			globals.cpp
			InputStream.cpp			
			powerConfig.cpp
			minProtocolGap.cpp
			Rank.cpp
			runSimulations.cpp
			simulationParameters.cpp
			transaction.cpp
			transaction2commands.cpp
			main.cpp""")
			
sourcesTest = Split("""
			reporting/soapC.cpp
			reporting/soapClient.cpp
			reporting/stdsoap2.cpp
			Address.cpp
			Bank.cpp
			busEvent.cpp
			command.cpp
			Algorithm.cpp
			Channel.cpp			
			Statistics.cpp
			System.cpp
			Settings.cpp
			SystemConfiguration.cpp
			TimingSpecification.cpp
			event.cpp
			executeCommand.cpp
			fbdAMB.cpp
			fbdChannel.cpp
			fbdFrame.cpp
			fbdSystem.cpp
			getNextCommand.cpp
			globals.cpp
			InputStream.cpp			
			powerConfig.cpp
			minProtocolGap.cpp
			Rank.cpp
			runSimulations.cpp
			simulationParameters.cpp
			transaction.cpp
			transaction2commands.cpp
			unitTest.cpp""")


ROOT = Dir('.').abspath
SRCDIR = os.path.join(ROOT,'src')

env = Environment(CCFLAGS = '-g -O -Weffc++ -DDEBUG',
			OBJSUFFIX = ".og",
			CPPPATH = '/usr/include/libxml2/')

envOpt = Environment(CCFLAGS = '-O3 -funroll-loops -Weffc++ -ffast-math -fomit-frame-pointer -finline-functions -march=athlon64',
			OBJSUFFIX = ".of",
			CPPPATH = '/usr/include/libxml2/')

envProf = Environment(CCFLAGS = '-g -O3 -funroll-loops -Weffc++ -ffast-math -fomit-frame-pointer -finline-functions -march=athlon64',
			OBJSUFFIX = ".prof",
			CPPPATH = '/usr/include/libxml2/')
			
envTest = Environment(CCFLAGS = '-g -O -Weffc++ -DDEBUG',
			OBJSUFFIX = ".ot",
			CPPPATH = '/usr/include/libxml2/')

envProfgen = Environment(CCFLAGS = '-O3 -funroll-loops -Weffc++ -ffast-math -fomit-frame-pointer -finline-functions -march=athlon64 -fprofile-generate',
			OBJSUFFIX = ".opg",
			CPPPATH = '/usr/include/libxml2/')

envProfuse = Environment(CCFLAGS = '-O3 -funroll-loops -Weffc++ -ffast-math -fomit-frame-pointer -finline-functions -march=athlon64 -fprofile-use',
			OBJSUFFIX = ".opu",
			CPPPATH = '/usr/include/libxml2/')

                  
# This function adds the specified sources to the given build
# environment, and returns a list of all the corresponding SCons
# Object nodes (including an extra one for date.cc).  We explicitly
# add the Object nodes so we can set up special dependencies for
# date.cc.
def make_objs(sourceFiles, env):
    objs = [env.Object(s) for s in sourceFiles]
    # make date.cc depend on all other objects so it always gets
    # recompiled whenever anything else does
    date_obj = env.Object('base/date.cc')
    env.Depends(date_obj, objs)
    objs.append(date_obj)
    return objs                  

# Function to create a new build environment as clone of current
# environment 'env' with modified object suffix and optional stripped
# binary.  Additional keyword arguments are appended to corresponding
# build environment vars.
def makeEnv(label, objsfx, strip = False, **kwargs):
    newEnv = env.Copy(OBJSUFFIX=objsfx)
    newEnv.Label = label
    newEnv.Append(**kwargs)
    exe = 'm5.' + label  # final executable
    bin = exe + '.bin'   # executable w/o appended Python zip archive
    newEnv.Program(bin, make_objs(sources, newEnv))
    if strip:
        stripped_bin = bin + '.stripped'
        newEnv.Command(stripped_bin, bin, 'strip $SOURCE -o $TARGET')
        bin = stripped_bin
    #targets = newEnv.Concat(exe, [bin, 'python/m5py.zip'])
    newEnv.M5Binary = targets[0]
    envList.append(newEnv)

#makeEnv('opt', '.o', CCFLAGS = Split('-g -O3'),CPPDEFINES = ['TRACING_ON=1'])

env.Program('dramSimII.debug',sourceFile, LIBS=['boost_thread', 'boost_iostreams', 'libxml2', 'boost_serialization', 'boost_unit_test_framework'])
envOpt.Program('dramSimII.opt',sourceFile, LIBS=['boost_thread', 'boost_iostreams', 'libxml2', 'boost_serialization', 'boost_unit_test_framework'])
envTest.Program('dramSimII.test',sourcesTest, LIBS=['boost_thread', 'boost_iostreams', 'libxml2', 'boost_serialization', 'boost_unit_test_framework'])
envProf.Program('dramSimII.prof',sourceFile, LIBS=['boost_thread', 'boost_iostreams', 'libxml2', 'boost_serialization', 'boost_unit_test_framework'])
envProfgen.Program('dramSimII.profgen',sourceFile, LIBS=['boost_thread', 'boost_iostreams', 'libxml2', 'boost_serialization', 'boost_unit_test_framework', 'gcov'])
envProfuse.Program('dramSimII.profuse',sourceFile, LIBS=['boost_thread', 'boost_iostreams', 'libxml2', 'boost_serialization', 'boost_unit_test_framework', 'gcov'])
