import os
import sys
Import('env')

conf = Configure(env)

try:
	platform = ARGUMENTS.get("build",Platform())
except AttributeError:
	platform = 'opt'

if not conf.CheckLib('boost_iostreams'):
	print 'Boost iostreams library not found, please install this.'
	print 'e.g. sudo apt-get install "libboost-iostreams*"'
	Exit(1)
if not conf.CheckLib('boost_serialization'):
	print 'Boost serialization library not found, please install this.'
	print 'e.g. sudo apt-get install "libboost-serialization*"'
	Exit(1)
if not conf.CheckCXXHeader('boost/circular_buffer.hpp'):
	print 'Need Boost 1.35 or newer with the circular buffer library.'
	print 'The circular buffer header files may also be copied from a newer Boost instance to an older one.'
	Exit(1)
if not conf.CheckLib('boost_unit_test_framework'):
	print 'Boost unit test framework not found, please install this.'
	print 'e.g. sudo apt-get install "libboost-test*"'
	Exit(1)
if not conf.CheckLib('boost_filesystem'):
	print 'Boost filesystem library not found, please install this.'
	print 'e.g. sudo apt-get install "libboost-filesystem*"'
	Exit(1)
if not conf.CheckLib('boost_program_options'):
	print 'Boost program options library not found, please install this.'
	print 'e.g. sudo apt-get install libboost-program-options-dev*"'
	Exit(1)
if not conf.CheckLib('xml2'):
	print "Need libxml2 to compile this."
	print "e.g. sudo apt-get install \".*libxml2.*\""
	Exit(1)
if (platform == 'script' or platform == 'scriptDebug'):
	if not conf.CheckLib('boost_thread'):
		print 'Boost thread library not found, please install this.'
		print 'e.g. sudo apt-get install libboost-thread-dev*"'
		Exit(1)
	if not conf.CheckLib('boost_signals'):
		print 'Boost signals library not found, please install this.'
		print 'e.g. sudo apt-get install "libboost-signals*"'
		Exit(1)
	if not conf.CheckLib('boost_regex'):
		print 'Boost regex library not found, please install this.'
		print 'e.g. sudo apt-get install "libboost-regex*"'
		Exit(1)


sourceBase = ['cache/cache.cc',
			'Address.cc',
			'Bank.cc',
			'command.cc',
			'Channel.cc',
			'Statistics.cc',
			'System.cc',
			'Settings.cc',
			'SettingsXML.cc',
			'SystemConfiguration.cc',
			'TimingSpecification.cc',
			'event.cc',
			'fbdAMB.cc',
			'fbdChannel.cc',
			'fbdFrame.cc',
			'fbdSystem.cc',
			'InputStream.cc',
			'powerConfig.cc',
			'Rank.cc',
			'simulationParameters.cc',
			'transaction.cc']

scriptBase = ['../scripts/globals.cc',
				'../scripts/processStats.cc',
				'../scripts/statsScripts.cc',
				'../scripts/powerScripts.cc',
				'../scripts/util.cc',
				'../scripts/summaryStats.cc',
				'../scripts/resultSet.cc']

sourceFile = sourceBase + ['main.cc']
sourcesTest = sourceBase + ['unitTest.cc']


#if platform == 'script' or platform == 'scriptDebug':
#	if not conf.CheckLib('Magick++'):
#		print 'Magick++ libraries to do graphics editing, please install.'
		#Exit(1)

env = conf.Finish()
#env.Append(CPPPATH = ['/usr/include/ImageMagick','/usr/include/libxml2'])
env.Append(CPPPATH = ['/usr/include/libxml2'])

baseDefines = ['__STDC_LIMIT_MACROS']
debugDefines = baseDefines + ['DEBUG']
optDefines = baseDefines + ['NDEBUG']
baseFlags = [ '-Wconversion', '-Wuninitialized', '-std=c++0x', '-Wall', '-Wextra', '-Wunused', '-pedantic', '-Weffc++','-Wswitch-default', '-Wfloat-equal']
simpleFlags = [ '-Wuninitialized', '-std=c++0x', '-Wall', '-Wswitch-default', '-Wfloat-equal']
optFlags = baseFlags + ['-O3', '-funroll-all-loops', '-ffast-math', '-fprefetch-loop-arrays',  '-march=k8-sse3','-fomit-frame-pointer', '-finline-functions']
debugFlags = baseFlags + ['-g', '-ggdb3', '-O0']


ROOT = Dir('.').abspath
SRCDIR = os.path.join(ROOT,'src')

if platform == 'script':
	env.Append(OBJSUFFIX='.os')
	env.Append(CCFLAGS = simpleFlags + ['-fopenmp'])
	#env.Append(CPPDEFINES = optDefines + ['-D_GLIBCXX_PARALLEL'])
	env.Append(CPPDEFINES = optDefines)
	env.Append(LINKFLAGS = ['-fopenmp'])
	script = env.Program('processStats',scriptBase)
	env.Install(os.path.abspath('../scripts'),script)
elif platform == 'scriptDebug':
	envScriptD = env.Clone(OBJSUFFIX='.osd')
	envScriptD.Append(CCFLAGS = debugFlags )
	envScriptD.Append(CPPDEFINES = debugDefines)
	envScriptD.Append(LINKFLAGS = ['-fopenmp'])
	script = envScriptD.Program('processStats.debug',scriptBase)
	envScriptD.Install(os.path.abspath('../scripts'),script)
elif platform == 'debug':
	env.Append(OBJSUFFIX='.og')
	env.Append(CCFLAGS = debugFlags)
	env.Append(CPPDEFINES = debugDefines)
	debug = env.Program('dramSimII.debug',sourceFile)
	env.Install(os.path.abspath('..') + "/bin", debug)
elif platform == 'debugOpt':
	envDebug = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.ogO')
	envDebug.Append(CCFLAGS = '-g -O3 -Weffc++ -Wall -Wextra -Wswitch-default -mtune=native -march=native -Wfloat-equal -DDEBUG -Wconversion -Wuninitialized -D__STDC_LIMIT_MACROS')
	debug = envDebug.Program('dramSimII.debugOpt',sourceFile)
	envDebug.Install(os.path.abspath('..') + "/bin", debug)
elif platform == 'debugOpt2':
	envDebug = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.ogO2')
	envDebug.Append(CCFLAGS = '-g -O3 -DNDEBUG -Weffc++ -Wall -Wextra -Wswitch-default -mtune=athlon64 -march=athlon64 -Wfloat-equal -DDEBUG -Wconversion -Wuninitialized -D__STDC_LIMIT_MACROS')
	debug = envDebug.Program('dramSimII.debugOpt2',sourceFile)
	envDebug.Install(os.path.abspath('..') + "/bin", debug)
elif platform == 'debugsimple':
	envDebugSimple = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.ogs')
	envDebugSimple.Append(CCFLAGS = '-g -Weffc++ -Wall -Wextra -Wswitch-default -mtune=native -march=native -Wfloat-equal -DDEBUG -Wconversion -Wuninitialized -D__STDC_LIMIT_MACROS')
	debugSimple = envDebugSimple.Program('dramSimII.debugsimple',sourceFile)
	envDebugSimple.Install(os.path.abspath('..') + "/bin", debugSimple)
elif platform == 'test':
	envTest = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.ot')
	envTest.Append(CCFLAGS = '-g -Wall -Wextra -Weffc++ -DDEBUG -Wconversion -Wuninitialized -D__STDC_LIMIT_MACROS')
	test = envTest.Program('dramSimII.test',sourcesTest)
	envTest.Install(os.path.abspath('..') + "/bin", test)
elif platform == 'testOpt':
	envTest = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.oto')
	envTest.Append(CCFLAGS = '-g -Wall -Wextra -O2 -mtune=native -march=native -Weffc++ -DDEBUG -D__STDC_LIMIT_MACROS -Wconversion -Wuninitialized')
	test = envTest.Program('dramSimII.testOpt',sourcesTest)
	envTest.Install(os.path.abspath('..') + "/bin", test)
elif platform == 'prof':
	envProf = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.op')
	envProf.Append(CCFLAGS = '-g -O3 -mtune=native -march=native -funroll-loops -Wall -Wextra -Weffc++ -ffast-math -fomit-frame-pointer -finline-functions -march=athlon64 -DNDEBUG -Wconversion -Wuninitialized')
	prof = envProf.Program('dramSimII.prof',sourceFile)
	envProf.Install(os.path.abspath('..') + "/bin", prof)
elif platform == 'profgen':
	envProfgen = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.opg')
	envProfgen.Append(CCFLAGS = '-O3 -mtune=native -march=native -Wall -Wextra -funroll-loops -Weffc++ -ffast-math -fomit-frame-pointer -finline-functions -march=athlon64 -fprofile-generate -DNDEBUG -D__STDC_LIMIT_MACROS',
	LINKFLAGS = "-fprofile-generate")
	profgen = envProfgen.Program('dramSimII.profgen', sourceFile)
	envProfgen.Install(os.path.abspath('..') + "/bin", profgen)
elif platform == 'profuse':
	envProfuse = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.opu')
	envProfuse.Append(CCFLAGS = '-O3 -mtune=native -march=native -Wall -Wextra -funroll-loops -Weffc++ -ffast-math -fomit-frame-pointer -finline-functions -march=athlon64 -fprofile-use -DNDEBUG -D__STDC_LIMIT_MACROS',
	LINKFLAGS = "-fprofile-use")
	profuse = envProfuse.Program('dramSimII.profuse', sourceFile)
	envProfuse.Install(os.path.abspath('..') + "/bin", profuse)
elif platform == 'all':
	envDebug = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.og')
	envDebug.Append(CCFLAGS = '-g -O -mtune=native -march=native -Weffc++ -Wall -Wextra -Wswitch-default -Wfloat-equal -DDEBUG -D__STDC_LIMIT_MACROS')
	debug = envDebug.Program('dramSimII.debug',sourceFile)
	envDebug.Install(os.path.abspath('..') + "/bin", debug)
	envTest = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.ot')
	envTest.Append(CCFLAGS = '-g -O -mtune=native -march=native -Wall -Wextra -Weffc++ -DDEBUG')
	test = envTest.Program('dramSimII.test',sourcesTest)
	envTest.Install(os.path.abspath('..') + "/bin", test)
	envProf = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.op')
	envProf.Append(CCFLAGS = '-g -O3 -funroll-loops -Wall -Wextra -Weffc++ -ffast-math -fomit-frame-pointer -finline-functions -mtune=native -march=native -DNDEBUG -Wconversion -Wuninitialized -D__STDC_LIMIT_MACROS')
	prof = envProf.Program('dramSimII.prof',sourceFile)
	envProf.Install(os.path.abspath('..') + "/bin", prof)
	envProfgen = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.opg')
	envProfgen.Append(CCFLAGS = '-O3 -Wall -Wextra -funroll-loops -Weffc++ -ffast-math -fomit-frame-pointer -finline-functions -mtune=native -march=native -fprofile-generate -DNDEBUG -Wconversion -Wuninitialized -D__STDC_LIMIT_MACROS')
	profgen = envProfgen.Program('dramSimII.profgen', sourceFile)
	envProfgen.Install(os.path.abspath('..') + "/bin", profgen)
	envProfuse = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.opu')
	envProfuse.Append(LIBS = 'gcov')
	profuse = envProfuse.Program('dramSimII.profuse', sourceFile)
	envProfuse.Install(os.path.abspath('..') + "/bin", profuse)
	envOpt = env.Clone(CPPPATH = '/usr/include/libxml2', OBJSUFFIX='.of')
	envOpt.Append(CCFLAGS = '-O3 -funroll-loops -Wall -Wextra -Weffc++ -ffast-math -fomit-frame-pointer -finline-functions -mtune=native -march=native -DNDEBUG -D__STDC_LIMIT_MACROS')
	opt = envOpt.Program('dramSimII.opt',sourceFile)
	envOpt.Install(os.path.abspath('..') + "/bin", opt)
else:
	env.Append(OBJSUFFIX='.of')
	env.Append(CCFLAGS = optFlags)
	env.Append(CPPDEFINES = optDefines)
	opt = env.Program(target = 'dramSimII.opt',source = sourceFile)
	env.Install(os.path.abspath('..') + "/bin", opt)