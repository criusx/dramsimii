/* reporting.h
   Generated by wsdl2h 1.2.10 from http://id2.gentag.com:7777/DRAMsim/DRAMsimWSSoapHttpPort?WSDL and typemap.dat
   2008-06-25 19:08:12 GMT
   Copyright (C) 2001-2008 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'WS/typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * http://DRAMsimReporter/                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://DRAMsimReporter/"
ns2 = "http://DRAMsimReporter/types/"

*/

//gsoap ns2   schema namespace:	http://DRAMsimReporter/types/
//gsoap ns2   schema elementForm:	qualified
//gsoap ns2   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class _ns2__submitEpochResultElement.
class _ns2__submitEpochResultElement;

//  Forward declaration of class _ns2__submitEpochResultResponseElement.
class _ns2__submitEpochResultResponseElement;


/// Element "http://DRAMsimReporter/types/":submitEpochResultElement of complexType.

/// "http://DRAMsimReporter/types/":submitEpochResultElement is a complexType.
class _ns2__submitEpochResultElement
{ public:
/// Element sessionID of type xs:string.
    char*                                sessionID                     ;	///< Nullable pointer.
/// Element epoch of type xs:long.
    LONG64                               epoch                          1;	///< Required element.
/// Size of array of int is 0..unbounded
    int                                  __sizechannel                 ;
/// Pointer to array of length 0..unbounded
    int                                 *channel                        0;
/// Size of array of int is 0..unbounded
    int                                  __sizerank                    ;
/// Pointer to array of length 0..unbounded
    int                                 *rank                           0;
/// Size of array of float is 0..unbounded
    int                                  __sizePsysACTSTBY             ;
/// Pointer to array of length 0..unbounded
    float                               *PsysACTSTBY                    0;
/// Size of array of float is 0..unbounded
    int                                  __sizePsysACT                 ;
/// Pointer to array of length 0..unbounded
    float                               *PsysACT                        0;
/// Element PsysRD of type xs:float.
    float                                PsysRD                         1;	///< Required element.
/// Element PsysWR of type xs:float.
    float                                PsysWR                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://DRAMsimReporter/types/":submitEpochResultResponseElement of complexType.

/// "http://DRAMsimReporter/types/":submitEpochResultResponseElement is a complexType.
class _ns2__submitEpochResultResponseElement
{ public:
/// Element result of type xs:boolean.
    bool                                 result                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	DRAMsimWSSoapHttp 
//gsoap ns1  service type:	DRAMsimWS 
//gsoap ns1  service port:	http://id2.gentag.com:7777/DRAMsim/DRAMsimWSSoapHttpPort 
//gsoap ns1  service namespace:	http://DRAMsimReporter/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage DRAMsimWS Definitions

@section DRAMsimWS_bindings Bindings
  - @ref DRAMsimWSSoapHttp

*/

/**

@page DRAMsimWSSoapHttp Binding "DRAMsimWSSoapHttp"

@section DRAMsimWSSoapHttp_operations Operations of Binding  "DRAMsimWSSoapHttp"
  - @ref __ns1__submitEpochResult

@section DRAMsimWSSoapHttp_ports Endpoints of Binding  "DRAMsimWSSoapHttp"
  - http://id2.gentag.com:7777/DRAMsim/DRAMsimWSSoapHttpPort

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * DRAMsimWSSoapHttp                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * __ns1__submitEpochResult                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__submitEpochResult" of service binding "DRAMsimWSSoapHttp"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://DRAMsimReporter//submitEpochResult"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__submitEpochResult(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns2__submitEpochResultElement*     ns2__submitEpochResultElement,
    // response parameters:
    _ns2__submitEpochResultResponseElement* ns2__submitEpochResultResponseElement
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__submitEpochResult(
    struct soap *soap,
    // request parameters:
    _ns2__submitEpochResultElement*     ns2__submitEpochResultElement,
    // response parameters:
    _ns2__submitEpochResultResponseElement* ns2__submitEpochResultResponseElement
  );
@endcode

C++ proxy class (defined in soapDRAMsimWSSoapHttpProxy.h):
  class DRAMsimWSSoapHttp;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	submitEpochResult document
//gsoap ns1  service method-encoding:	submitEpochResult literal
//gsoap ns1  service method-action:	submitEpochResult http://DRAMsimReporter//submitEpochResult
int __ns1__submitEpochResult(
    _ns2__submitEpochResultElement*     ns2__submitEpochResultElement,	///< Request parameter
    _ns2__submitEpochResultResponseElement* ns2__submitEpochResultResponseElement	///< Response parameter
);

/* End of reporting.h */
