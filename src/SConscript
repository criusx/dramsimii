Import('*')
import shutil
import re

conf = Configure(env)

if not conf.CheckCXXHeader('boost/circular_buffer.hpp'):
	print 'Need Boost 1.35 or newer with the circular buffer library.'
	print 'The circular buffer header files may also be copied from a newer Boost instance to an older one.'
	Exit(1)


try:
	if 'fast' in re.split('[/.]',COMMAND_LINE_TARGETS[0]):
		env.Append(CCFLAGS = ['-I/usr/include/libxml2', '-fprefetch-loop-arrays','-ffast-math', '-funroll-all-loops', '-fomit-frame-pointer', '-Wuninitialized', '-Wno-conversion',
			 '-finline-functions', '-Wno-unused-variable'],CPPDEFINES = ['M5', '__STDC_LIMIT_MACROS'])

		env.Append(CCFLAGS = ['-march=k8-sse3'])
		#env.Append(CCFLAGS = ['-march=native', '-mtune=native'])
		#env.Append(CCFLAGS = ['-march=amdfam10', '-mtune=amdfam10'])

		#env.Append(CPPDEFINES = ['TRACE_GENERATE']
		#env.Append(CCFLAGS = ['-fprofile-generate'], LINKFLAGS = ['-fprofile-generate'])
		env.Append(CCFLAGS = ['-fprofile-use'], LINKFLAGS = ['-fprofile-use'])
	elif 'opt' in re.split('[/.]',COMMAND_LINE_TARGETS[0]):
		env.Append(
		CCFLAGS = ['-I/usr/include/libxml2', '-march=k8-sse3', '-mtune=k8-sse3'],
		CPPDEFINES = ['M5DEBUG', 'DEBUG', 'M5', '__STDC_LIMIT_MACROS'])
	elif 'prof' in re.split('[/.]',COMMAND_LINE_TARGETS[0]):
		env.Append(
			CCFLAGS = ['-I/usr/include/libxml2', '-funroll-loops',
			'-ffast-math', '-finline-functions', '-march=k8-sse','-Wno-unused-variable']
			,CPPDEFINES = ['__STDC_LIMIT_MACROS']
			)
		try:
			env.Replace(CCFLAGS = env._dict['CCFLAGS'].remove('-g'))
		except ValueError:
			pass

	else:
		raise IndexError
except IndexError:
	# then this must be a debug build
	env.Append(
		CCFLAGS = ['-I/usr/include/libxml2'],
		CPPDEFINES = ['M5DEBUG', 'DEBUG', 'M5', '__STDC_LIMIT_MACROS'])


SimObject('M5dramSystem.py')

Source('Address.cc')
Source('Bank.cc')
Source('command.cc')
Source('Channel.cc')
Source('event.cc')
Source('m5-dramSystem.cc')
Source('powerConfig.cc')
Source('Rank.cc')
Source('Settings.cc')
Source('Statistics.cc')
Source('System.cc')
Source('SystemConfiguration.cc')
Source('TimingSpecification.cc')
Source('transaction.cc')

env = conf.Finish()

