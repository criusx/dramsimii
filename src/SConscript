Import('*')
import shutil
import re

conf = Configure(env)

if not conf.CheckLib('boost_serialization'):
	print 'Boost serialization library not found, please install this.'
	print 'e.g. sudo apt-get install "libboost-serialization*"'
	Exit(1)
if not conf.CheckLib('boost_iostreams'):
	print 'Boost iostreams library not found, please install this.'
	print 'e.g. sudo apt-get install "libboost-iostreams*"'
	Exit(1)
if not conf.CheckCXXHeader('boost/circular_buffer.hpp'):
	print 'Need Boost 1.35 or newer with the circular buffer library.'
	print 'The circular buffer header files may also be copied from a newer Boost instance to an older one.'
	Exit(1)
if not conf.CheckLib('boost_thread'):
	print 'Boost thread library not found, please install this.'
	print 'e.g. sudo apt-get install "libboost-thread*"'
	Exit(1)
if not conf.CheckLib('boost_unit_test_framework'):
	print 'Boost unit test framework not found, please install this.'
	print 'e.g. sudo apt-get install "libboost-test*"'
	Exit(1)
if not conf.CheckLib('boost_signals'):
	print 'Boost signals library not found, please install this.'
	print 'e.g. sudo apt-get install "libboost-signals*"'
	Exit(1)
if not conf.CheckCXXHeader('vector'):
   print 'vector must be installed!'
   Exit(1)
if not conf.CheckLib('boost_filesystem'):
	print 'Boost filesystem library not found, please install this.'
	print 'e.g. sudo apt-get install "libboost-filesystem*"'
	Exit(1)
if not conf.CheckLib('boost_program_options'):
	print 'Boost program options library not found, please install this.'
	print 'e.g. sudo apt-get install libboost-program-options-dev*"'
	Exit(1)
#if not conf.CheckCHeader('xmlreader.h'):
#	print 'Missing xmlreader.h from libxml2'
#	Exit(1)
#if not conf.CheckCHeader('libxml2/libxml/parser.h'):
#	print 'Missing parser.h from libxml2'
#	Exit(1)
#if not conf.CheckCHeader('libxml2/libxml/tree.h'):
#	print 'Missing tree.h from libxml2'
#	Exit(1)
if not conf.CheckLib('xml2'):
	print 'libxml2 not found, please install this.'
	print 'e.g. sudo apt-get install "libxml2-*"'
	Exit(1)
#if not conf.CheckLib('gomp'):
#	print 'need a compiler that supports OpenMP.'
#	print 'such as gcc 4.2+, icc 11+, Visual Studio 2005+, etc.'
#	Exit(1)

#try:
#	env.Replace(CCFLAGS = env._dict['CCFLAGS'].remove('-Werror'))
#except ValueError:
#	pass

try:
	if 'fast' in re.split('[/.]',COMMAND_LINE_TARGETS[0]):
		print COMMAND_LINE_TARGETS[0]
		env.Append(
			CCFLAGS = ['-I/usr/include/libxml2', '-funroll-loops','-ffast-math', '-fomit-frame-pointer',
			# '-finline-functions', '-march=native','-Wno-unused-variable','-fprofile-use', '-mtune=native']
			 '-finline-functions', '-march=native','-Wno-unused-variable', '-mtune=native']
			,CPPDEFINES = ['M5'])
			#,LINKFLAGS = ['-fprofile-use'])
	elif 'opt' in re.split('[/.]',COMMAND_LINE_TARGETS[0]):
		env.Append(
		CCFLAGS = ['-I/usr/include/libxml2', '-march=native', '-mtune=native'],
		CPPDEFINES = ['M5DEBUG', 'DEBUG', 'M5'])
	elif 'prof' in re.split('[/.]',COMMAND_LINE_TARGETS[0]):
		#print viableTargets
		env.Append(
			CCFLAGS = ['-I/usr/include/libxml2', '-funroll-loops',
			#'-Weffc++',
			#'-Wsign-compare',
			#'-Wdeprecated',
			'-ffast-math', '-finline-functions', '-march=native','-Wno-unused-variable']
			#,CPPDEFINES = ['M5DEBUG']
			)
		try:
			env.Replace(CCFLAGS = env._dict['CCFLAGS'].remove('-g'))
		except ValueError:
			pass

	else:
		raise IndexError
except IndexError:
	# then this must be a debug build
	env.Append(
		CCFLAGS = ['-I/usr/include/libxml2'],
		CPPDEFINES = ['M5DEBUG', 'DEBUG', 'M5'])


SimObject('M5dramSystem.py')

Source('Address.cpp')
Source('Algorithm.cpp')
Source('Bank.cpp')
Source('busEvent.cpp')
Source('command.cpp')
Source('Channel.cpp')
Source('event.cpp')
Source('fbdAMB.cpp')
Source('fbdChannel.cpp')
Source('fbdFrame.cpp')
Source('fbdSystem.cpp')
Source('globals.cpp')
Source('InputStream.cpp')
Source('m5-dramSystem.cpp')

Source('powerConfig.cpp')
Source('Rank.cpp')
Source('Settings.cpp')
Source('SettingsXML.cpp')
Source('simulationParameters.cpp')
Source('Statistics.cpp')
Source('System.cpp')
Source('SystemConfiguration.cpp')
Source('TimingSpecification.cpp')
Source('transaction.cpp')
Source('reporting/soapC.cpp')
Source('reporting/soapClient.cpp')
Source('reporting/stdsoap2.cpp')

env = conf.Finish()

