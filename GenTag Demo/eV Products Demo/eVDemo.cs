using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using ZedGraph;
using System.IO;
using SiritReader;
using System.Net;
using System.Net.Sockets;
using System.Threading;

namespace eV_Products_Demo
{
    public partial class eVDemo : Form
    {
        public eVDemo()
        {
            InitializeComponent();

            //////////////////////////////////////////////////////////////////////////            
            // init eV demo parts
            totalcounts = 0;
            totaltime = 0;
            ctoe = 0;
            d = -1.0;

            Com = new iGEMComm(this);
            Cal = new Calibration(this);
            Cfg = new Configure(this);
            fm = new FWHM(this);
            collecttime = new time();

            Staticdata = new iGEMData();
            Activedata = new iGEMData();

            currentHVSetting = 1;   //forces initial setting of HV bias
            targetHVSetting = 0;

            Cfg = new Configure(this);
            Cal = new Calibration(this);
            fm = new FWHM(this);

            //////////////////////////////////////////////////////////////////////////
        }
        #region demoSpectrum
        private static float[] spectrum =
            new float[]{0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
2.0286F,
0F,
5.0707F,
8.0802F,
13.1559F,
11.1354F,
14.159F,
15.2027F,
13.1527F,
27.3042F,
25.2966F,
35.4946F,
26.3573F,
32.4272F,
41.5732F,
27.3367F,
45.4958F,
38.4715F,
40.5079F,
45.5991F,
36.4422F,
44.592F,
39.5121F,
49.6021F,
33.3636F,
37.4268F,
53.6651F,
33.3988F,
47.5126F,
40.4943F,
32.3706F,
35.477F,
57.7585F,
46.5567F,
44.5138F,
34.4689F,
45.5386F,
30.3585F,
37.3784F,
36.474F,
46.5595F,
40.623F,
33.4569F,
41.5267F,
52.6167F,
51.6605F,
32.3961F,
38.4497F,
43.5639F,
44.5446F,
40.5251F,
41.5804F,
34.4896F,
35.4193F,
29.4113F,
32.3765F,
35.3956F,
34.4558F,
43.5061F,
33.4328F,
43.513F,
46.6166F,
43.4599F,
29.4279F,
59.7907F,
33.4088F,
44.6325F,
41.4951F,
44.5319F,
35.5044F,
42.5345F,
40.5266F,
43.5879F,
54.6489F,
48.5855F,
42.5291F,
41.418F,
52.7722F,
43.5105F,
48.6073F,
41.5589F,
36.5024F,
51.6657F,
49.6336F,
45.6074F,
54.7522F,
54.6442F,
44.6289F,
42.5323F,
51.5868F,
43.5148F,
48.6083F,
51.7285F,
52.6989F,
52.7169F,
39.4958F,
51.6097F,
49.5486F,
58.5822F,
55.6629F,
65.7762F,
53.6448F,
59.8136F,
53.6205F,
58.6453F,
61.8036F,
47.5766F,
75.9552F,
44.5299F,
54.7219F,
71.9244F,
74.7502F,
69.827F,
69.7766F,
58.7179F,
64.7898F,
48.5972F,
54.672F,
53.6436F,
63.7412F,
89.0711F,
60.6481F,
51.5945F,
82.9577F,
65.8096F,
69.8743F,
63.7644F,
48.539F,
57.6782F,
93.032F,
57.6418F,
53.6712F,
59.6994F,
50.7328F,
63.8387F,
67.921F,
63.809F,
64.8125F,
66.756F,
63.6962F,
81.9579F,
56.7044F,
65.8374F,
70.7558F,
86.0758F,
69.8364F,
71.891F,
77.8064F,
71.8096F,
99.2841F,
82.9747F,
68.755F,
77.9141F,
86.9972F,
68.8352F,
85.9921F,
70.8638F,
74.9165F,
90.1253F,
91.1317F,
90.0506F,
95.0863F,
99.1431F,
91.1604F,
80.0333F,
98.2627F,
90.9684F,
82.107F,
97.1978F,
115.3648F,
101.4052F,
102.3431F,
101.3001F,
89.142F,
95.2562F,
92.1885F,
112.3517F,
103.1932F,
92.1698F,
121.5886F,
116.3631F,
120.598F,
142.6978F,
123.4561F,
127.465F,
137.7279F,
136.6653F,
129.4617F,
167.0357F,
157.9635F,
155.8401F,
172.0451F,
188.0042F,
181.2053F,
150.8659F,
157.9452F,
155.8402F,
153.8031F,
169.1819F,
149.6534F,
149.8743F,
139.775F,
172.1314F,
154.8225F,
107.2524F,
131.4668F,
127.5658F,
129.5779F,
119.4505F,
111.4054F,
120.4334F,
96.216F,
133.6624F,
115.3988F,
93.1186F,
99.1883F,
121.6203F,
109.1481F,
122.4537F,
125.3446F,
121.463F,
119.4089F,
151.9985F,
127.4441F,
147.8543F,
122.4549F,
121.4696F,
136.6129F,
119.3442F,
139.8148F,
114.3671F,
135.6098F,
140.7469F,
166.0353F,
140.8973F,
119.559F,
132.6201F,
167.9277F,
144.8122F,
156.9471F,
152.7547F,
180.1357F,
186.2696F,
163.8533F,
172.1384F,
178.3042F,
194.5009F,
157.0718F,
181.3239F,
163.9722F,
165.8873F,
176.1359F,
162.0042F,
178.2908F,
154.9999F,
143.7215F,
139.7891F,
138.5826F,
143.8206F,
137.7756F,
132.6349F,
138.7562F,
122.4945F,
121.4209F,
100.2522F,
90.231F,
87.0326F,
104.2549F,
63.729F,
59.7572F,
70.8515F,
67.74F,
54.6373F,
54.776F,
59.6835F,
61.7181F,
57.6174F,
36.5263F,
61.708F,
53.6308F,
57.7011F,
59.8019F,
57.8264F,
50.533F,
53.602F,
57.7949F,
50.6481F,
45.5189F,
74.8762F,
58.6608F,
50.6246F,
64.9041F,
56.6934F,
62.7497F,
66.8123F,
63.7154F,
62.7275F,
74.871F,
64.7865F,
63.611F,
76.8981F,
69.8553F,
71.8075F,
63.7657F,
72.8083F,
56.7052F,
59.696F,
63.7932F,
63.7504F,
52.7105F,
51.5637F,
47.5656F,
55.7371F,
58.7068F,
47.5999F,
46.649F,
46.5565F,
33.4102F,
37.4287F,
30.3186F,
33.4251F,
38.4974F,
31.4158F,
38.4243F,
31.3326F,
30.3521F,
41.4785F,
28.3841F,
28.3624F,
23.2713F,
37.555F,
32.3917F,
23.2447F,
20.2248F,
42.5639F,
42.5552F,
31.3988F,
24.2604F,
27.3205F,
22.2302F,
37.487F,
34.3941F,
30.3221F,
28.3314F,
28.3129F,
17.2008F,
34.4267F,
32.3867F,
25.3291F,
31.3574F,
28.3284F,
41.4112F,
27.316F,
41.4879F,
24.3371F,
29.4011F,
40.5164F,
23.2675F,
31.3555F,
22.2613F,
35.5168F,
33.3979F,
38.4145F,
38.5288F,
33.3947F,
36.4791F,
28.3647F,
35.4283F,
29.4261F,
34.4033F,
29.3437F,
31.3611F,
32.3379F,
27.3179F,
39.4743F,
35.4352F,
32.4456F,
33.3648F,
30.3404F,
35.4106F,
26.2923F,
22.2343F,
33.4019F,
24.3543F,
41.4811F,
34.4503F,
51.6693F,
33.3934F,
27.3132F,
34.41F,
37.48F,
36.4966F,
45.6001F,
33.4189F,
31.4336F,
27.3499F,
32.3205F,
29.4272F,
40.5045F,
29.3268F,
36.4037F,
40.5001F,
38.4432F,
30.4264F,
36.4253F,
29.3296F,
34.3568F,
36.4141F,
31.3521F,
44.5698F,
36.4601F,
34.4608F,
39.4709F,
33.4078F,
28.3077F,
24.2857F,
49.5569F,
32.3843F,
33.4253F,
35.4106F,
38.4337F,
37.4561F,
36.4787F,
27.3618F,
28.393F,
29.3845F,
28.3724F,
33.3756F,
30.4296F,
36.4104F,
32.3867F,
31.3198F,
34.4804F,
27.3884F,
29.4662F,
40.4411F,
33.3963F,
25.3539F,
28.3614F,
37.4777F,
33.3042F,
29.3325F,
38.4678F,
30.3721F,
28.3762F,
30.4183F,
24.2838F,
25.2437F,
25.2787F,
31.3923F,
35.42F,
28.4064F,
37.4802F,
28.2817F,
24.3078F,
29.4262F,
32.4453F,
22.2294F,
26.3097F,
43.5756F,
31.2978F,
27.3986F,
34.4078F,
30.3972F,
30.366F,
20.1995F,
27.3297F,
41.4594F,
18.2129F,
28.3007F,
35.3783F,
37.481F,
20.26F,
30.4304F,
26.3766F,
30.3334F,
34.4641F,
22.3272F,
26.3478F,
19.2695F,
28.3687F,
30.3458F,
25.3042F,
24.3612F,
25.331F,
35.4485F,
29.3396F,
30.3007F,
44.5033F,
29.3738F,
30.3681F,
23.3209F,
22.2125F,
21.2691F,
24.2972F,
20.2198F,
25.3317F,
36.4607F,
25.2774F,
26.3143F,
28.3856F,
35.4211F,
24.3053F,
29.3536F,
20.2361F,
27.3678F,
37.5263F,
40.4646F,
34.5135F,
33.3706F,
32.3688F,
30.3945F,
42.5244F,
38.3352F,
44.5812F,
35.4725F,
30.387F,
32.3926F,
47.5888F,
42.5316F,
27.3325F,
46.6168F,
50.7085F,
45.5773F,
36.4073F,
33.405F,
44.5646F,
46.6039F,
46.5038F,
44.5375F,
48.5611F,
60.73F,
50.6321F,
55.7846F,
37.5062F,
43.5721F,
50.5749F,
38.4508F,
35.438F,
33.3767F,
29.4093F,
38.4789F,
29.3113F,
34.3767F,
26.311F,
35.4454F,
30.3845F,
24.3043F,
29.4258F,
20.2342F,
16.1946F,
21.243F,
20.2446F,
37.4359F,
23.3066F,
23.3479F,
25.3329F,
26.3098F,
18.1871F,
27.3679F,
23.2456F,
29.3061F,
17.2533F,
23.2712F,
23.2811F,
21.2851F,
25.3123F,
22.2708F,
17.2189F,
18.2489F,
27.3442F,
17.2136F,
28.3597F,
24.2732F,
15.1712F,
18.2762F,
20.2576F,
28.381F,
20.2781F,
22.3178F,
18.2392F,
17.2619F,
19.2557F,
29.3211F,
14.2022F,
27.2899F,
20.2944F,
22.2195F,
21.1686F,
21.2347F,
28.3508F,
20.2592F,
10.1219F,
21.2851F,
22.251F,
28.3622F,
22.2731F,
16.1872F,
31.3427F,
20.2217F,
15.1488F,
27.3075F,
22.2874F,
16.1878F,
19.2417F,
22.2846F,
18.2246F,
13.1635F,
20.2204F,
16.2164F,
19.2224F,
14.1716F,
24.2911F,
16.1873F,
14.1478F,
18.1988F,
17.1815F,
21.2793F,
20.2635F,
19.2219F,
19.1925F,
18.238F,
21.3094F,
17.2258F,
17.1865F,
15.211F,
12.1581F,
20.2554F,
18.1821F,
12.1509F,
15.2378F,
18.2324F,
13.1667F,
12.1575F,
30.3135F,
17.1905F,
14.1747F,
22.2369F,
20.223F,
17.2563F,
17.2685F,
12.2133F,
21.305F,
24.3149F,
16.1935F,
14.1796F,
11.1547F,
24.2959F,
21.2916F,
14.1603F,
24.2102F,
17.1728F,
17.2287F,
15.1831F,
25.2808F,
20.2378F,
17.1911F,
18.1745F,
24.217F,
23.3141F,
17.1997F,
15.174F,
22.247F,
27.3231F,
22.2373F,
18.2507F,
12.1304F,
20.2095F,
20.2446F,
20.2002F,
23.2751F,
21.2838F,
19.2506F,
15.1351F,
25.3484F,
22.3064F,
27.3529F,
18.2342F,
22.2432F,
23.3108F,
31.3385F,
33.3881F,
24.2966F,
14.1523F,
19.2879F,
36.4555F,
26.4091F,
20.2698F,
27.3715F,
27.3031F,
22.2534F,
32.425F,
31.3912F,
37.4547F,
42.552F,
36.4652F,
27.3438F,
27.3056F,
33.3717F,
26.3054F,
41.5228F,
30.385F,
27.2726F,
21.2623F,
27.2723F,
30.3289F,
31.3285F,
24.2903F,
25.3042F,
32.378F,
24.3114F,
24.2087F,
22.2372F,
26.3325F,
21.211F,
21.2726F,
14.2093F,
15.2155F,
17.1336F,
29.4025F,
19.2802F,
14.1818F,
10.152F,
15.1584F,
9.0818F,
14.1886F,
20.2527F,
15.1911F,
15.1376F,
15.2074F,
16.2027F,
18.2478F,
12.1518F,
16.2567F,
17.243F,
8.0923F,
15.2299F,
9.1188F,
11.1345F,
12.1478F,
21.2839F,
15.1632F,
10.1523F,
18.2304F,
8.0772F,
19.2376F,
15.2311F,
20.2421F,
17.2462F,
12.1073F,
21.2385F,
12.1638F,
9.0834F,
16.2058F,
14.1862F,
15.197F,
15.1659F,
13.2061F,
14.1767F,
17.2172F,
15.18F,
12.1629F,
19.273F,
15.1878F,
16.2277F,
13.1557F,
7.0823F,
10.128F,
18.2219F,
16.1755F,
8.0815F,
11.1706F,
15.2006F,
16.1892F,
21.2623F,
7.1146F,
17.1912F,
13.1338F,
15.1851F,
12.1581F,
14.172F,
13.2145F,
15.196F,
18.1874F,
9.124F,
20.2822F,
12.1098F,
9.0858F,
17.2877F,
15.1516F,
16.1921F,
15.2163F,
17.1939F,
14.2411F,
16.2016F,
13.1838F,
11.1385F,
9.1051F,
12.1299F,
18.2193F,
10.0987F,
18.1851F,
11.1527F,
25.3533F,
10.0941F,
19.2443F,
17.2092F,
18.1638F,
15.1653F,
4.0532F,
12.1528F,
14.1498F,
21.2845F,
11.1326F,
25.3483F,
16.1635F,
19.2407F,
22.2448F,
15.1526F,
13.1843F,
15.1784F,
16.1938F,
11.1635F,
18.2316F,
24.3F,
15.2327F,
23.2972F,
13.2127F,
18.2215F,
24.2679F,
20.3278F,
15.1311F,
21.2892F,
24.3123F,
13.1444F,
20.2187F,
19.2063F,
23.2721F,
20.2026F,
29.3094F,
19.2352F,
18.1944F,
30.3202F,
23.2389F,
22.3034F,
20.2473F,
28.3648F,
36.4601F,
35.4258F,
31.3644F,
40.4377F,
31.374F,
33.3716F,
34.3941F,
49.6105F,
41.5193F,
54.6581F,
43.5944F,
40.5539F,
39.4545F,
40.4655F,
39.4516F,
37.4412F,
43.5526F,
34.4663F,
42.6406F,
34.4398F,
39.4405F,
37.5179F,
22.3519F,
30.453F,
27.3718F,
26.2958F,
16.1568F,
22.2438F,
25.2617F,
21.2819F,
12.1137F,
15.1776F,
13.1218F,
11.1645F,
13.1363F,
8.0997F,
13.1291F,
6.0636F,
12.1662F,
13.1925F,
11.1279F,
10.1226F,
5.0777F,
8.1049F,
10.1345F,
10.1643F,
7.1079F,
8.1134F,
10.1065F,
10.1035F,
6.0625F,
10.1479F,
6.0812F,
9.1117F,
11.141F,
11.1406F,
12.1857F,
9.1124F,
8.1361F,
9.1309F,
4.0397F,
10.0992F,
9.0801F,
15.211F,
9.1104F,
10.0855F,
6.0715F,
7.0951F,
8.0953F,
9.0708F,
10.1631F,
15.1567F,
12.1602F,
7.0937F,
10.1071F,
9.0979F,
7.0767F,
11.136F,
10.1666F,
8.0813F,
10.1109F,
11.1472F,
3.0228F,
12.1343F,
7.1338F,
8.0834F,
9.1456F,
10.1446F,
15.1718F,
11.174F,
10.1436F,
9.0825F,
9.1609F,
19.1639F,
12.1503F,
11.1301F,
6.0736F,
6.0504F,
11.1242F,
11.1416F,
12.1581F,
4.0465F,
10.1713F,
15.2148F,
11.1434F,
12.203F,
9.134F,
5.0406F,
10.1436F,
10.1284F,
9.1124F,
10.1178F,
4.0429F,
8.0741F,
9.1119F,
15.2028F,
11.1324F,
10.1363F,
9.1322F,
10.0998F,
11.1438F,
19.1953F,
20.2946F,
12.0855F,
17.2094F,
15.2114F,
8.1041F,
12.1449F,
14.1706F,
17.2054F,
14.1806F,
17.23F,
16.2145F,
18.2137F,
17.1727F,
15.2196F,
11.1251F,
20.214F,
12.1412F,
14.1468F,
10.1189F,
15.1349F,
8.1239F,
15.1853F,
12.1532F,
22.2883F,
20.2193F,
16.1754F,
22.2877F,
14.1507F,
18.222F,
13.1404F,
22.258F,
20.2766F,
19.2233F,
17.229F,
16.1711F,
32.3879F,
28.3378F,
27.2636F,
27.303F,
14.1486F,
30.4028F,
30.3368F,
23.303F,
35.5119F,
28.3398F,
36.3686F,
34.3724F,
38.4539F,
37.4246F,
49.6313F,
42.5654F,
36.4266F,
41.4912F,
56.6607F,
31.4077F,
35.3873F,
38.4404F,
50.5669F,
54.646F,
41.4819F,
47.5597F,
49.6549F,
37.4007F,
42.4089F,
34.4368F,
46.6249F,
36.4593F,
41.572F,
30.3433F,
31.3691F,
17.2215F,
33.431F,
23.2724F,
25.295F,
35.4811F,
17.1711F,
19.257F,
9.145F,
16.2272F,
12.1513F,
13.1715F,
7.0831F,
13.1757F,
9.0981F,
11.1661F,
11.1216F,
7.0846F,
8.0431F,
6.1143F,
10.1357F,
5.0416F,
9.1249F,
5.0444F,
6.0749F,
1.0225F,
10.1321F,
7.0741F,
5.0696F,
2.0774F,
6.0768F,
2.0096F,
7.063F,
9.1277F,
7.0933F,
7.0764F,
3.0154F,
5.0693F,
1.0089F,
6.0784F,
2.0182F,
7.0566F,
7.0868F,
6.0857F,
6.0929F,
7.109F,
3.0497F,
3.0269F,
8.1392F,
4.0388F,
9.0997F,
9.1203F,
6.0704F,
9.1017F,
8.0545F,
4.046F,
1.0197F,
2.0169F,
6.0621F,
7.0432F,
7.0895F,
9.0869F,
3.0252F,
1.0085F,
1.0047F,
10.1989F,
7.0485F,
2.0261F,
7.0882F,
4.0685F,
2.0282F,
13.1583F,
3.0602F,
6.0635F,
4.0219F,
5.0585F,
7.09F,
7.1201F,
7.0806F,
4.0316F,
6.0857F,
3.0171F,
4.0562F,
7.0991F,
8.1011F,
7.1078F,
10.1514F,
6.0933F,
6.0742F,
12.1584F,
3.0345F,
5.0598F,
6.0698F,
5.077F,
6.0382F,
7.0891F,
5.0451F,
7.0815F,
5.0784F,
1.0051F,
5.0494F,
2.0136F,
5.0582F,
7.0749F,
6.077F,
8.1159F,
9.0785F,
5.0806F,
5.0569F,
6.07F,
6.0361F,
5.0482F,
7.0775F,
2.0133F,
11.1228F,
8.1059F,
3.0373F,
2.0234F,
5.0578F,
8.0893F,
11.1024F,
5.0559F,
9.1809F,
8.0838F,
5.0659F,
4.0269F,
12.1581F,
10.1707F,
2.0344F,
13.1851F,
3.0321F,
4.0573F,
8.1206F,
7.1026F,
5.0801F,
3.0323F,
5.0176F,
3.0427F,
6.0643F,
6.0482F,
4.056F,
4.0356F,
9.1183F,
4.0514F,
5.0575F,
7.0673F,
11.1573F,
8.0925F,
9.1002F,
11.1141F,
5.0832F,
4.0561F,
6.0811F,
4.0561F,
5.0711F,
6.0687F,
10.1261F,
5.0715F,
8.1215F,
10.0542F,
2.0166F,
4.0444F,
2.0126F,
4.0475F,
3.0383F,
5.0555F,
9.1503F,
4.0478F,
6.0764F,
11.1385F,
6.0602F,
6.0481F,
4.039F,
4.0195F,
5.0561F,
8.1145F,
5.0596F,
5.0676F,
4.0345F,
4.0535F,
5.0646F,
3.0314F,
8.0908F,
5.0611F,
5.0755F,
4.0488F,
9.1109F,
5.0681F,
7.1347F,
5.0439F,
8.0692F,
3.0351F,
4.0567F,
5.032F,
4.0497F,
3.0407F,
4.0615F,
7.0672F,
6.0626F,
6.0381F,
4.0347F,
6.0675F,
4.0643F,
3.0298F,
4.0455F,
5.0736F,
6.0858F,
8.0902F,
3.0344F,
5.0438F,
2.0325F,
10.1358F,
7.0589F,
4.0512F,
5.0643F,
3.0526F,
6.0701F,
5.0569F,
8.0896F,
7.0633F,
5.0669F,
5.0872F,
6.0768F,
6.0981F,
5.0377F,
5.0905F,
3.0662F,
4.0514F,
5.0762F,
1.0092F,
6.0435F,
4.0466F,
1.0085F,
3.0555F,
6.0623F,
4.0764F,
3.0212F,
4.0654F,
3.0308F,
6.0749F,
4.045F,
0F,
4.0407F,
5.0886F,
4.0598F,
3.0409F,
6.0682F,
3.0322F,
5.0554F,
5.0549F,
1.0186F,
0F,
2.0173F,
7.0735F,
1.0259F,
2.0289F,
4.0262F,
9.0651F,
2.0208F,
5.0548F,
6.0707F,
1.0142F,
2.0306F,
6.0721F,
1.0138F,
4.0563F,
2.0133F,
4.0272F,
5.092F,
6.0702F,
5.085F,
2.0324F,
2.0271F,
3.0367F,
4.0481F,
3.0453F,
3.032F,
3.0339F,
3.0413F,
4.0612F,
2.026F,
3.0291F,
3.037F,
6.0728F,
3.0454F,
4.0402F,
2.0132F,
4.0396F,
3.0657F,
3.0312F,
4.0837F,
1.0168F,
2.0317F,
4.0446F,
1.0132F,
2.0262F,
2.005F,
4.0255F,
4.0563F,
4.0452F,
3.0372F,
3.023F,
4.0494F,
6.0899F,
2.0232F,
1.0093F,
5.0363F,
7.0941F,
2.0174F,
2.0187F,
1.0128F,
6.0987F,
2.0187F,
5.0737F,
2.0418F,
4.0504F,
2.0138F,
7.1076F,
7.078F,
2.0138F,
6.0668F,
4.068F,
2.0231F,
4.0483F,
3.038F,
3.0369F,
1.0142F,
6.0854F,
4.0404F,
1.018F,
2.0088F,
2.0131F,
3.04F,
1.0094F,
2.0284F,
5.0548F,
2.0187F,
1.0092F,
2.0203F,
3.0375F,
2.0247F,
6.1042F,
4.0514F,
2.0232F,
1.0142F,
6.0682F,
2.0243F,
2F,
0F,
3.0353F,
1.0273F,
4.0626F,
6.0698F,
5.0704F,
5.0679F,
2.0192F,
1.0085F,
5.0741F,
4.0641F,
2.0199F,
1.0048F,
6.0633F,
5.0693F,
3.033F,
3.0401F,
4.0317F,
2.021F,
4.0624F,
3.0484F,
5.062F,
1F,
5.0587F,
4.0399F,
3.0241F,
0F,
5.0608F,
5.0617F,
2.0247F,
1.0302F,
5.0747F,
3.0528F,
7.0841F,
3.0356F,
4.0701F,
4.0428F,
2.0377F,
5.0411F,
2.0259F,
2.0159F,
3.0324F,
3.024F,
4.0478F,
6.0786F,
6.0668F,
2.0284F,
1.013F,
2.0457F,
3.0205F,
3.069F,
1.0048F,
6.0654F,
1.0127F,
3.0192F,
5.0561F,
2.0141F,
3.0472F,
4.0354F,
4.0581F,
2.0296F,
0F,
2.0092F,
5.0573F,
4.0316F,
1.0234F,
3.0178F,
3.0278F,
4.0637F,
2.0176F,
2.017F,
6.0731F,
1.0179F,
3.0525F,
2F,
3.0315F,
4.0475F,
4.0519F,
1.0098F,
0F,
2.0262F,
3.0216F,
3.0333F,
3.0272F,
2.0318F,
0F,
7.1079F,
4.0487F,
3.0522F,
2.0258F,
4.0467F,
2.0174F,
4.0566F,
6.049F,
6.1083F,
4.0409F,
4.0959F,
2.013F,
4.0599F,
2.017F,
3.0169F,
4.0499F,
3.0333F,
3.0259F,
3.0356F,
3.0421F,
5.0661F,
4.0325F,
2.0248F,
2.0488F,
5.0584F,
2.0313F,
4.0582F,
4.0328F,
3.0306F,
2.0175F,
1.0134F,
1.0135F,
2.0223F,
3.0291F,
4.0691F,
2.0224F,
0F,
2.0275F,
3.0575F,
3.0439F,
0F,
2.0052F,
2.0377F,
1.0044F,
3.0275F,
1.0236F,
2.0086F,
2.0128F,
5.0665F,
2.0282F,
0F,
1.0051F,
1.0165F,
4.0592F,
2.0373F,
3.0304F,
3.0391F,
1.0144F,
2.0088F,
3.0258F,
4.0578F,
2.0099F,
2.0229F,
1.0047F,
5.0805F,
2.0298F,
4.0312F,
4.0368F,
0F,
3.0409F,
4.0312F,
3.0344F,
3.0138F,
1.0137F,
1.0128F,
8.0871F,
4.0452F,
3.028F,
5.0622F,
3.042F,
3.0268F,
2.0248F,
3.0386F,
5.0632F,
3.023F,
0F,
3.0381F,
2.0218F,
2.0138F,
1.0151F,
2.0203F,
3.0367F,
3.0353F,
4.0556F,
2.0126F,
6.087F,
5.0829F,
5.0657F,
2.042F,
1.0149F,
0F,
2.03F,
4.0433F,
0F,
4.0311F,
4.0482F,
4.08F,
5.0689F,
5.0569F,
2.0135F,
2.04F,
6.0734F,
6.0646F,
3.0337F,
4.0459F,
5.0675F,
1.0138F,
4.0411F,
0F,
8.1276F,
2.0441F,
4.0666F,
1.0138F,
5.0479F,
1.0149F,
5.0616F,
1.0137F,
2.0261F,
3.0536F,
6.0901F,
3.0128F,
5.0555F,
8.1106F,
3.0589F,
1.0136F,
2.0126F,
6.0641F,
3.0212F,
2.0138F,
5.0372F,
2.0282F,
2.0226F,
7.091F,
4.0488F,
8.0685F,
4.0277F,
1.0087F,
4.0736F,
1.0082F,
5.0746F,
6.0939F,
2.0437F,
2.029F,
1.0179F,
2.0182F,
3.0368F,
3.0527F,
5.0721F,
2.0279F,
4.0508F,
2.0365F,
3.0271F,
3.0264F,
4.0365F,
2.0096F,
5.0919F,
7.1114F,
6.0943F,
5.0775F,
4.0232F,
3.0365F,
7.0493F,
8.0683F,
2.0378F,
6.0764F,
4.0322F,
4.0558F,
2.0182F,
2.015F,
2.0298F,
2.0233F,
3.052F,
4.0465F,
3.0142F,
3.043F,
5.0523F,
3.0317F,
0F,
2.026F,
5.0645F,
4.051F,
3.0342F,
7.0731F,
5.0551F,
1.019F,
4.0684F,
3.043F,
8.0787F,
0F,
3.0657F,
6.0656F,
4.0585F,
0F,
4.0556F,
6.0786F,
4.0672F,
5.0673F,
4.0346F,
3.0466F,
6.1142F,
4.0673F,
3.0286F,
5.0652F,
5.0534F,
2.0098F,
6.0514F,
4.0686F,
1.0132F,
5.0583F,
5.0807F,
5.0485F,
3.0521F,
2.0171F,
3.0217F,
5.0539F,
3.0236F,
11.1294F,
4.039F,
8.0776F,
2.0221F,
2.0045F,
4.0413F,
4.0336F,
4.0547F,
4.0411F,
6.0537F,
5.068F,
6.0402F,
1.0094F,
1.0189F,
7.0607F,
2.0194F,
7.0834F,
3.0351F,
4.0364F,
4.0722F,
8.095F,
4.0638F,
5.0599F,
5.0527F,
3.0255F,
3.0373F,
1.019F,
2.0215F,
5.0757F,
3.0308F,
4.0321F,
4.0355F,
7.1225F,
6.0781F,
3.0329F,
4.0442F,
4.061F,
6.076F,
10.1215F,
6.0651F,
10.1041F,
5.0621F,
6.0851F,
7.0889F,
7.0612F,
8.0939F,
5.0479F,
5.0507F,
9.1456F,
5.0415F,
5.0702F,
7.074F,
6.052F,
7.0931F,
13.1582F,
7.0667F,
3.0279F,
6.0734F,
8.1273F,
10.1265F,
8.1218F,
11.1394F,
13.1747F,
9.1076F,
10.1066F,
15.1954F,
8.0903F,
12.2167F,
10.1062F,
7.0734F,
7.0783F,
8.1428F,
9.0604F,
14.1469F,
12.1547F,
17.2055F,
12.1285F,
15.163F,
9.1569F,
10.1458F,
17.1902F,
18.2045F,
18.1763F,
17.2434F,
18.1974F,
24.2289F,
15.1399F,
16.1967F,
12.1245F,
23.2926F,
13.1817F,
11.1346F,
9.1172F,
15.1991F,
8.0694F,
12.1159F,
12.1866F,
6.0714F,
9.113F,
13.1766F,
6.0815F,
8.1472F,
9.1431F,
4.04F,
6.0937F,
1F,
3.0373F,
6.0698F,
5.0796F,
1.0225F,
4.0497F,
4.0307F,
2.0182F,
4.032F,
2.0176F,
2.0227F,
4.0445F,
4.066F,
0F,
2.0168F,
0F,
2.041F,
3.035F,
1.0085F,
5.0523F,
0F,
2.0206F,
3.045F,
2.0139F,
1.0299F,
0F,
1.0167F,
3.0498F,
5.0414F,
0F,
1.0088F,
1F,
3.0357F,
3.027F,
2.0137F,
1F,
5.049F,
2.0243F,
4.0626F,
3.0322F,
2.0253F,
3.0311F,
0F,
2.0374F,
2.0233F,
1.0181F,
1F,
2.0265F,
0F,
2.0399F,
1.019F,
1.0128F,
3.025F,
2.0244F,
5.0376F,
0F,
0F,
0F,
2.0089F,
3.0271F,
2.0174F,
0F,
1.0098F,
1.0181F,
2.0088F,
2.0374F,
1.0048F,
5.0652F,
3.0549F,
1.0123F,
3.0304F,
0F,
2.0329F,
2.0224F,
1.0085F,
1.0086F,
4.0225F,
1.0179F,
3.0322F,
2.0133F,
1.0273F,
0F,
2.0289F,
1.0259F,
3.0282F,
5.0377F,
2.0266F,
0F,
1.0088F,
1.0043F,
0F,
3.0675F,
0F,
4.0486F,
2.0202F,
1.0046F,
2.0393F,
1.0085F,
2.0279F,
4.0515F,
2.0223F,
1.0186F,
1.004F,
1.0052F,
4.0385F,
0F,
2.0278F,
1.0166F,
0F,
3.0128F,
1F,
2.021F,
2.0095F,
2.0368F,
2.0171F,
6.0619F,
1.013F,
1.0084F,
0F,
3.0236F,
0F,
2.0181F,
0F,
1.0134F,
1.0127F,
1F,
2.0246F,
5.0499F,
2.018F,
1F,
2.024F,
3.0501F,
3.0428F,
3.042F,
1F,
2.021F,
2.0381F,
3.023F,
4.0783F,
2.013F,
0F,
3.0438F,
1.0197F,
4.0651F,
4.0494F,
1F,
4.0489F,
6.0619F,
0F,
0F,
4.0698F,
4.0353F,
4.0755F,
2.0441F,
2.0201F,
2.0447F,
3.0431F,
2.0236F,
1F,
4.0525F,
1.0136F,
2.0095F,
6.0983F,
1.0133F,
2.0186F,
2.0279F,
0F,
0F,
3.0363F,
0F,
1F,
2.0323F,
1.0145F,
2.0257F,
5.0597F,
3.0605F,
2.028F,
2.0487F,
1.0043F,
0F,
1.0092F,
0F,
5.0935F,
0F,
1.0086F,
1.0127F,
2.0278F,
0F,
4.0381F,
1.0357F,
1F,
1.0181F,
1.0088F,
0F,
3.0167F,
2.0278F,
0F,
1.0085F,
0F,
0F,
3.0514F,
3.0473F,
2.0225F,
0F,
3.0417F,
4.0557F,
2.0088F,
1.0127F,
0F,
2.0273F,
3.0342F,
1.0299F,
1.0089F,
2.0484F,
1.0051F,
1.0092F,
0F,
1.0299F,
0F,
3.0431F,
3.032F,
1.0119F,
1.0299F,
3.0383F,
1.0177F,
1.0123F,
2.032F,
4.051F,
1.0138F,
2.0327F,
5.0718F,
1.0085F,
0F,
1.0138F,
0F,
0F,
2.0522F,
1.0183F,
3.0365F,
4.058F,
1.0132F,
4.0615F,
2.0375F,
3.0532F,
1.0049F,
1.0088F,
2.0274F,
2.024F,
2.0128F,
1.0194F,
2.0139F,
1.0088F,
5.0351F,
0F,
3.0406F,
0F,
0F,
1.0135F,
2.0285F,
3.0486F,
1.0189F,
0F,
1.0133F,
0F,
6.0674F,
3.0189F,
1.0128F,
3.0296F,
0F,
1.0299F,
1.013F,
3.0211F,
0F,
1.0174F,
2.0236F,
3.0447F,
1F,
3.0369F,
3.0212F,
0F,
2.0343F,
1.0128F,
2.0178F,
1F,
1.0148F,
1.0043F,
2.0221F,
4.0442F,
3.0419F,
2.0119F,
1.013F,
3.0189F,
4.0712F,
0F,
2.0207F,
3.037F,
1F,
1.0045F,
1.0327F,
0F,
2.0095F,
2.0129F,
1.0119F,
1.0142F,
1.0123F,
3.0443F,
1.0201F,
1.0088F,
3.0145F,
1.0127F,
1.0123F,
2.0267F,
0F,
2.0344F,
3.0415F,
1.0168F,
5.033F,
0F,
2.0124F,
1.0194F,
6.0763F,
2.0211F,
3.0224F,
3.0368F,
3.041F,
1.0179F,
0F,
2.0267F,
1.0138F,
3.0355F,
2.0332F,
1.0234F,
3.0455F,
2.0131F,
2.0084F,
4.0499F,
2.0312F,
0F,
2.0132F,
3.0364F,
0F,
5.0761F,
1.0229F,
2.0337F,
1.0236F,
0F,
1.0098F,
1.0095F,
1.0199F,
2.0316F,
2.0174F,
3.0179F,
2.023F,
1.0144F,
4.0619F,
3.0484F,
2.0282F,
3.0275F,
2.0049F,
4.0705F,
3.0487F,
3.0519F,
1.013F,
6.0541F,
3.0382F,
0F,
3.0363F,
4.0696F,
2.0131F,
2.0365F,
4.0462F,
1.019F,
0F,
2.0393F,
0F,
1.0144F,
3.0368F,
3.0233F,
3.0265F,
1.0127F,
2.0225F,
1.0082F,
1.0106F,
2.0381F,
1.0041F,
1.0119F,
3.0416F,
3.038F,
1.0045F,
1.0181F,
0F,
5.0465F,
2.0176F,
5.0945F,
1.0085F,
4.0414F,
0F,
2.0304F,
3.0132F,
2.0387F,
1.0085F,
2.0322F,
2.0259F,
2.038F,
5.0471F,
2.0277F,
4.0563F,
0F,
1.0126F,
3.0518F,
0F,
1.0213F,
3.0083F,
2.0307F,
2.0215F,
8.0984F,
2.028F,
3.026F,
3.0372F,
1.0083F,
1.0181F,
1.0094F,
1.0092F,
3.0357F,
4.0588F,
2.027F,
1.0236F,
4.039F,
3.0427F,
2.0131F,
0F,
4.0393F,
1.0111F,
2.022F,
0F,
3.0286F,
0F,
1.0091F,
3.0192F,
3.0432F,
2.0136F,
2.0319F,
1.0225F,
4.0406F,
4.0714F,
2.027F,
3.0298F,
6.0635F,
1.0178F,
2.0171F,
2.019F,
0F,
3.0372F,
3.0223F,
1.0199F,
2.0272F,
0F,
1.0043F,
3.0855F,
2.0166F,
0F,
3.0273F,
4.0384F,
3.0232F,
1F,
0F,
0F,
0F,
3.0581F,
3.0387F,
1.0228F,
1.0111F,
2.024F,
4.0436F,
3.0328F,
4.0389F,
1.0225F,
5.0895F,
1.0123F,
0F,
1.0149F,
0F,
1.0149F,
2.0345F,
2.0179F,
2.0088F,
1.0249F,
0F,
1.0085F,
1.0148F,
1.0091F,
1.0046F,
3.0304F,
3.0313F,
2.0374F,
4.0394F,
0F,
1.0135F,
2.031F,
0F,
1.0042F,
4.0757F,
0F,
0F,
2.0138F,
1.0088F,
2.0223F,
3.0307F,
3.0218F,
1.0142F,
0F,
1.0126F,
2.022F,
1.0132F,
0F,
4.0971F,
2.013F,
2.0304F,
4.0427F,
1.0133F,
2.0183F,
2.0285F,
2.0169F,
1.0236F,
0F,
3.0256F,
1F,
3.0139F,
4.0837F,
1.013F,
0F,
1.0044F,
1.0048F,
1.0183F,
2.0272F,
1.0088F,
2.0257F,
3.033F,
2.0128F,
1.0098F,
3.0504F,
1F,
5.0825F,
2.0256F,
4.0723F,
1.0142F,
0F,
0F,
0F,
2.0323F,
1.0181F,
0F,
1.0136F,
0F,
3.0426F,
1.0048F,
1.0228F,
1.0085F,
0F,
1F,
0F,
1F,
0F,
1.0138F,
4.0275F,
0F,
1F,
1.0203F,
0F,
0F,
1.0043F,
1.0084F,
2.0186F,
1.005F,
1.0126F,
1.0086F,
3.03F,
2.017F,
2.0253F,
1.0337F,
2.0303F,
2.0181F,
1.0337F,
0F,
2.0237F,
1.0167F,
1.0124F,
1.0225F,
4.0355F,
2.0406F,
0F,
0F,
0F,
2.0481F,
2.0089F,
2.0229F,
0F,
4.0584F,
0F,
2.0142F,
3.0651F,
2.0223F,
4.064F,
2.027F,
1F,
5.0292F,
4.0515F,
1.0179F,
1.0299F,
1.0088F,
0F,
1.0088F,
1.0168F,
1.0179F,
2.0234F,
0F,
1.005F,
1F,
3.046F,
1.0088F,
2.0133F,
2.0225F,
1.0202F,
0F,
3.0331F,
0F,
4.0529F,
1.0299F,
1.0091F,
4.0703F,
0F,
1.0088F,
0F,
3.0384F,
2.0231F,
4.0558F,
0F,
2.0385F,
1.0327F,
0F,
0F,
3.0262F,
2.0227F,
1.0417F,
0F,
2.0271F,
2.0167F,
0F,
0F,
0F,
1.0088F,
0F,
1.0089F,
2.0091F,
1.014F,
2.0173F,
1.0111F,
0F,
1.0047F,
1.0083F,
1.0082F,
2.0225F,
1.0088F,
1.018F,
4.0364F,
1.0126F,
0F,
1.0149F,
0F,
3.0312F,
1.0082F,
1.0225F,
1.0096F,
1.0091F,
1.0099F,
0F,
3.0446F,
0F,
0F,
0F,
0F,
0F,
3.0416F,
0F,
2.0343F,
2.0348F,
0F,
2.0124F,
3.033F,
1.0083F,
3.0168F,
3.0381F,
2.0424F,
2.0319F,
2.0281F,
0F,
1.0183F,
0F,
0F,
3.0362F,
0F,
2.0174F,
1.0133F,
3.0419F,
2.0193F,
0F,
2.0368F,
1.0047F,
2.036F,
4.0193F,
2.0231F,
3.0318F,
1.0093F,
1.0099F,
3.0258F,
3.0323F,
3.0168F,
2.0211F,
2.0229F,
1.0052F,
1.0357F,
0F,
2.0186F,
4.0666F,
2.032F,
2.0092F,
0F,
0F,
3.0254F,
0F,
0F,
0F,
2.0125F,
0F,
2.0227F,
1.0144F,
1.0111F,
1.0186F,
1.0204F,
2.0299F,
0F,
2.0167F,
3.0484F,
2.0099F,
3.0406F,
1.005F,
2.013F,
1.0181F,
2.0283F,
1.0164F,
2.0217F,
2.018F,
1.0081F,
2.0311F,
2.0123F,
3.0406F,
2.0172F,
0F,
2.023F,
0F,
3.042F,
0F,
1.0192F,
0F,
3.0293F,
2.0484F,
0F,
4.0403F,
2.0132F,
2.028F,
2.0175F,
1.0091F,
0F,
0F,
0F,
3.0304F,
3.0216F,
2.013F,
1.0088F,
1.0091F,
3.0234F,
2.0321F,
5.0547F,
0F,
2.0171F,
3.0447F,
2.0337F,
1.014F,
1.0083F,
1.0164F,
0F,
0F,
2.036F,
1F,
2.0226F,
0F,
1.0159F,
2.0313F,
4.051F,
1.0179F,
0F,
0F,
3.0331F,
1.0092F,
0F,
2.0527F,
0F,
1.0085F,
3.0326F,
0F,
5.0505F,
2.0084F,
0F,
3.0216F,
1.0133F,
0F,
0F,
4.0654F,
1.0088F,
4.0474F,
1.0186F,
3.029F,
1.014F,
2.0134F,
0F,
1.005F,
3.0377F,
3.0251F,
2.0268F,
2.0135F,
5.0453F,
3.0394F,
4.0395F,
2.0297F,
2.0215F,
2.0369F,
1F,
1.0132F,
4.0547F,
1.0083F,
2.0217F,
2.0225F,
1.0042F,
3.0307F,
0F,
0F,
0F,
0F,
1.005F,
2.0182F,
1.0357F,
0F,
2.0341F,
0F,
0F,
0F,
0F,
1.0136F,
3.0293F,
2.0136F,
1.0048F,
2.0132F,
1.0046F,
1.019F,
0F,
0F,
3.0299F,
0F,
0F,
0F,
2.0216F,
0F,
1.0133F,
2.0089F,
2.0306F,
2.029F,
2.0271F,
2.0188F,
1.0081F,
1.0089F,
1.0095F,
0F,
2.0364F,
3.0287F,
0F,
4.0598F,
0F,
1.0201F,
2.0085F,
1.0133F,
1.013F,
0F,
2.0167F,
0F,
2.0266F,
1F,
3.0322F,
3.0355F,
1F,
2.0236F,
1.0083F,
0F,
0F,
2.0281F,
2.0481F,
0F,
2.0245F,
2.0133F,
1.0084F,
1.0085F,
1.0144F,
2.0268F,
1.0088F,
2.0181F,
0F,
1.0138F,
1.0234F,
2.0452F,
0F,
0F,
3.0322F,
0F,
1.019F,
2.0095F,
1.019F,
2.0094F,
0F,
1.0086F,
0F,
2.0223F,
2.0222F,
0F,
1.0167F,
2.0175F,
2.0218F,
0F,
3.0456F,
1.0299F,
2.0208F,
0F,
1.0183F,
0F,
1.0136F,
2.0176F,
1.0083F,
2.0292F,
2.0081F,
2.0089F,
1.0081F,
2.0309F,
2.024F,
1.0095F,
1.014F,
0F,
0F,
4.0308F,
1.0047F,
1.0123F,
4.013F,
2.0384F,
1.0197F,
2.0277F,
1.0088F,
2.0183F,
1.005F,
0F,
1F,
2.0352F,
2.0323F,
2.0427F,
1.013F,
2.0334F,
0F,
3.0261F,
4.0782F,
1.014F,
2.0229F,
2.0287F,
0F,
1.0085F,
1.0225F,
0F,
3.0486F,
0F,
0F,
0F,
0F,
3.0313F,
0F,
2.0238F,
0F,
3.0263F,
1.0229F,
3.0287F,
0F,
1.022F,
1.0244F,
2.0128F,
1.0133F,
0F,
2.029F,
3.0133F,
1.0119F,
0F,
2.0236F,
2.0215F,
0F,
1.0166F,
2.0249F,
0F,
0F,
1.0111F,
0F,
1.0082F,
1.0098F,
1F,
1.0126F,
3.0357F,
1.0144F,
0F,
1.0178F,
0F,
1.0044F,
0F,
0F,
0F,
4.0514F,
1.013F,
1.0202F,
0F,
1.0183F,
3.0226F,
0F,
0F,
3.042F,
0F,
1.0357F,
1.022F,
2.0279F,
2.0559F,
1.0088F,
1.0043F,
0F,
1.0123F,
1F,
0F,
1.0043F,
1.0234F,
2.026F,
2.0142F,
0F,
1.0249F,
0F,
2.0167F,
0F,
1.0149F,
1.0084F,
1.013F,
1.0138F,
4.0417F,
1.0048F,
0F,
0F,
1.0133F,
1.0171F,
1.013F,
0F,
1.0133F,
0F,
1.0183F,
2.0081F,
2.0239F,
2.0501F,
1.0181F,
1.0225F,
0F,
1.0227F,
1.0088F,
1F,
1.0144F,
2.0126F,
4.0579F,
0F,
5.0713F,
1.0228F,
1.0126F,
1.0087F,
1.0144F,
2.027F,
1.0204F,
0F,
0F,
1.0299F,
1.0174F,
2.0474F,
1F,
2.0146F,
0F,
3.0177F,
0F,
0F,
1.0132F,
1.0096F,
0F,
1.0302F,
2.0236F,
1.0111F,
0F,
1.0052F,
2.0194F,
1.005F,
3.03F,
0F,
1.014F,
2.0119F,
0F,
0F,
0F,
1.0159F,
2.021F,
3.0616F,
0F,
0F,
1.0127F,
1.0098F,
0F,
1.0122F,
0F,
0F,
2.0235F,
2.0267F,
1.0083F,
0F,
2.0169F,
2.025F,
0F,
1.0086F,
0F,
0F,
1.0199F,
2.0595F,
0F,
0F,
4.0339F,
4.0289F,
0F,
2.0285F,
1.0132F,
2.0203F,
1.0098F,
1.0178F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
1.0041F,
1.019F,
0F,
0F,
3.0476F,
1.0095F,
3.0225F,
1.0299F,
2.0156F,
1.0043F,
1.0094F,
0F,
2.0331F,
2.0132F,
1.0177F,
0F,
1.0086F,
1.005F,
2.0051F,
1.0236F,
0F,
1.0084F,
1.0201F,
1.0048F,
3.04F,
2.0052F,
3.0516F,
0F,
3.0168F,
0F,
2.0238F,
1.0099F,
0F,
1.0273F,
1.014F,
4.0364F,
3.0366F,
1.0082F,
1.0089F,
1F,
0F,
0F,
1.0048F,
0F,
1.0088F,
0F,
1F,
0F,
0F,
1F,
0F,
0F,
3.0278F,
0F,
1F,
0F,
1.0089F,
1.0093F,
0F,
1.005F,
3.0325F,
1.0124F,
3.032F,
0F,
1.019F,
1.0127F,
3.0222F,
0F,
2.0296F,
0F,
0F,
2.0194F,
1.0134F,
0F,
0F,
0F,
0F,
1.0192F,
1.0126F,
0F,
1.0203F,
2.0276F,
2.0182F,
1.0091F,
1.0151F,
1.0357F,
0F,
1.0095F,
3.0191F,
1.0098F,
0F,
0F,
2.0285F,
1.0092F,
0F,
0F,
0F,
1.0111F,
2.024F,
0F,
2.0124F,
1.0138F,
0F,
2.0046F,
0F,
0F,
0F,
2.0403F,
1.0081F,
1.0048F,
1.0181F,
1.0045F,
4.0315F,
1.0165F,
2.0268F,
1.0183F,
1.0084F,
0F,
2.0277F,
0F,
0F,
4.0507F,
1.0094F,
0F,
2.0178F,
1.0132F,
0F,
1.0194F,
0F,
2.0123F,
0F,
0F,
0F,
3.0369F,
1.0122F,
1.005F,
0F,
0F,
1.0122F,
0F,
0F,
0F,
2.0265F,
1.0085F,
0F,
1.0084F,
1.0165F,
2.0468F,
1.0048F,
1.0111F,
1.0194F,
1.0042F,
1.0088F,
2.0195F,
0F,
0F,
1.0087F,
2.0234F,
1.0085F,
1.019F,
0F,
1.019F,
1.0126F,
1.0088F,
1.0096F,
3.0208F,
2.0249F,
1.0199F,
0F,
1F,
0F,
3.0439F,
0F,
0F,
2.019F,
1.0128F,
1.0046F,
3.0309F,
0F,
2.0309F,
3.0441F,
2.0344F,
1.0194F,
3.0372F,
1.0119F,
1.0229F,
1.0048F,
1.019F,
1.0123F,
1.0299F,
3.0318F,
1.0164F,
1.0135F,
1.0144F,
2.0218F,
1.0417F,
3.029F,
1.009F,
1.0225F,
3.0885F,
1F,
0F,
1.0179F,
1F,
2.0269F,
0F,
2.0279F,
0F,
3.0317F,
2.0231F,
0F,
1.0234F,
2.0202F,
3.0327F,
2.0048F,
2.0225F,
1.0094F,
2.032F,
1.0181F,
3.031F,
1.0098F,
1.0132F,
1.0137F,
1.0048F,
1.0051F,
2.0174F,
0F,
0F,
0F,
0F,
0F,
0F,
1.0227F,
1.0179F,
1F,
1.0149F,
1.0213F,
2.0215F,
2.0571F,
2.0269F,
1.022F,
3.0304F,
3.0459F,
3.0346F,
0F,
1F,
2.0322F,
2.0218F,
2.0599F,
3.0095F,
6.0872F,
4.0605F,
1.0094F,
0F,
2.0133F,
2.0395F,
1.0081F,
2.0373F,
0F,
1.009F,
5.0688F,
2.0098F,
2.0274F,
6.024F,
3.0512F,
2.0182F,
4.06F,
2.0372F,
1.0098F,
0F,
1.014F,
3.0278F,
0F,
2.0391F,
1.0085F,
0F,
4.0459F,
1.0144F,
2.0184F,
2.0204F,
3.0328F,
0F,
1.019F,
2.0199F,
0F,
1.0149F,
2.013F,
3.0274F,
0F,
2.0137F,
0F,
1F,
2.0248F,
2.0156F,
0F,
1.0213F,
1.0133F,
2.0256F,
1.0197F,
1.0051F,
1.014F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
2.0216F,
0F,
3.0212F,
2.0236F,
0F,
1.0249F,
0F,
0F,
2.0225F,
1.0089F,
1.0095F,
0F,
1.0089F,
2.0189F,
2.0332F,
1.0045F,
1.0083F,
2F,
0F,
0F,
1.005F,
0F,
0F,
1.0167F,
1.0043F,
0F,
3.0461F,
0F,
0F,
1.0199F,
2.0123F,
2.0235F,
1.0091F,
0F,
2.0289F,
0F,
2.0127F,
0F,
0F,
0F,
0F,
1.0225F,
0F,
3.0135F,
0F,
0F,
0F,
2.0183F,
0F,
0F,
1.0046F,
1.0092F,
0F,
0F,
2.0415F,
1.0086F,
1.0126F,
2.0256F,
0F,
1.0092F,
0F,
1.0178F,
5.0422F,
1F,
0F,
1.0046F,
2.036F,
1.0151F,
1.0357F,
0F,
1.0201F,
3.0208F,
0F,
1.0081F,
0F,
1F,
0F,
0F,
1.0044F,
0F,
0F,
2.0443F,
1.0095F,
0F,
0F,
1F,
0F,
0F,
1.0092F,
0F,
2.0383F,
2.0323F,
1.0225F,
0F,
1.0091F,
1.0299F,
2.0495F,
2.0303F,
0F,
2.0301F,
1.0127F,
1F,
1.0144F,
0F,
1.0122F,
1.0234F,
2.0311F,
0F,
1.0043F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
1F,
2.0216F,
1.0095F,
0F,
1F,
1.0229F,
0F,
1.0083F,
2.0366F,
1.0088F,
1.0048F,
0F,
0F,
1.019F,
0F,
0F,
0F,
0F,
1.0046F,
1.0098F,
2.0273F,
1.0133F,
1.0083F,
2.053F,
3.0411F,
1.0098F,
1.0149F,
0F,
1.0128F,
4.0496F,
2.0192F,
1.0084F,
0F,
1.0204F,
2.0281F,
1.0126F,
0F,
0F,
2.0229F,
1.0132F,
1F,
0F,
2.0234F,
0F,
0F,
0F,
0F,
1.0138F,
1.0041F,
0F,
0F,
4.0446F,
1F,
0F,
1.0228F,
1.0085F,
0F,
1.0096F,
1.0085F,
2.0091F,
1.0165F,
1.0086F,
1F,
0F,
2.0265F,
2.0383F,
2.0406F,
0F,
1.0202F,
0F,
1.0119F,
1.0052F,
3.0216F,
1.0083F,
1.0098F,
1.0098F,
0F,
1.022F,
0F,
0F,
0F,
1.0183F,
1.0244F,
2.0088F,
2.0266F,
1.0083F,
2.0138F,
1.0085F,
2.0236F,
0F,
1.0124F,
1.0119F,
2.0352F,
0F,
0F,
1.0136F,
0F,
1.0085F,
1.0126F,
0F,
3.0366F,
0F,
0F,
2.0169F,
0F,
0F,
1F,
0F,
0F,
0F,
0F,
2.0211F,
2.0188F,
2.0177F,
1.0142F,
3.0268F,
0F,
0F,
1.0124F,
0F,
0F,
1F,
0F,
1.0046F,
1.0183F,
0F,
1.0089F,
1.0142F,
1.0135F,
1.0082F,
1.0151F,
0F,
1.0083F,
1.0086F,
1.0046F,
2.0191F,
0F,
0F,
2.0204F,
1.0041F,
0F,
0F,
0F,
0F,
0F,
0F,
1.0144F,
0F,
3.0316F,
0F,
0F,
1.014F,
3.0545F,
1.0149F,
0F,
1.0047F,
0F,
0F,
1.0085F,
0F,
0F,
0F,
1.0046F,
2.0399F,
0F,
2.0338F,
0F,
1.019F,
0F,
2.0166F,
1.0087F,
2.0181F,
0F,
0F,
3.0422F,
0F,
1.0236F,
0F,
0F,
0F,
1.0081F,
0F,
0F,
1.0134F,
0F,
0F,
0F,
0F,
1.013F,
0F,
2.0227F,
0F,
0F,
1.0179F,
3.0424F,
2.0225F,
0F,
0F,
2.0606F,
0F,
0F,
1.0094F,
0F,
1.0132F,
2.0133F,
0F,
0F,
0F,
1.0132F,
2.0128F,
1.0087F,
0F,
1.0081F,
0F,
1.0085F,
1.0135F,
1.0132F,
1.0149F,
1.0145F,
1.0142F,
0F,
1.0083F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
2.0198F,
1.0123F,
1.0096F,
0F,
0F,
0F,
0F,
1.0106F,
0F,
0F,
0F,
2.0182F,
2.0274F,
0F,
2.031F,
0F,
0F,
0F,
0F,
0F,
0F,
2.0244F,
2.0132F,
0F,
0F,
1.0174F,
0F,
1.0046F,
0F,
0F,
0F,
0F,
0F,
1.0088F,
1.0082F,
0F,
0F,
0F,
0F,
0F,
1.0179F,
0F,
2.0383F,
0F,
2.0217F,
0F,
0F,
0F,
0F,
0F,
0F,
1.0085F,
1.0327F,
0F,
1.004F,
0F,
0F,
0F,
1.0259F,
0F,
0F,
0F,
1.0189F,
0F,
0F,
3.0373F,
1.0122F,
1.0083F,
1.0144F,
1.0086F,
1.0142F,
1.013F,
2.0276F,
1F,
0F,
0F,
1.004F,
0F,
3.0268F,
4.0359F,
0F,
0F,
1.0229F,
0F,
2.033F,
0F,
1.0119F,
0F,
0F,
1.0086F,
0F,
1.019F,
1.0123F,
2.024F,
0F,
1.0225F,
0F,
1.0043F,
1.0127F,
0F,
0F,
2.0307F,
0F,
0F,
0F,
0F,
0F,
1.0042F,
1.0134F,
0F,
0F,
0F,
1.0138F,
1.009F,
0F,
0F,
0F,
1.019F,
0F,
1.0227F,
0F,
0F,
1.0088F,
1.0086F,
1.0186F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
1.019F,
1.0181F,
0F,
0F,
1.0127F,
1.0093F,
0F,
0F,
0F,
0F,
1.022F,
0F,
0F,
0F,
1.0042F,
0F,
0F,
1.0357F,
0F,
0F,
0F,
0F,
0F,
0F,
1.0199F,
0F,
0F,
0F,
0F,
0F,
1.0085F,
1.013F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
1.0043F,
0F,
1.0166F,
1F,
0F,
1.0045F,
0F,
0F,
0F,
1.0179F,
1F,
2.0428F,
0F,
1.0187F,
0F,
0F,
0F,
1.0179F,
0F,
0F,
1.0127F,
0F,
0F,
1.0183F,
0F,
0F,
0F,
0F,
0F,
1F,
0F,
1.0183F,
1.0048F,
0F,
0F,
0F,
0F,
1.0357F,
0F,
1.0126F,
0F,
0F,
0F,
1.0299F,
2.0251F,
1.0126F,
0F,
1.0135F,
0F,
0F,
0F,
2.034F,
1.0095F,
0F,
0F,
0F,
0F,
2.0187F,
1.0086F,
0F,
2.0044F,
0F,
0F,
2.0092F,
2.018F,
1.005F,
1.0085F,
0F,
1.014F,
0F,
1.0123F,
4.0471F,
0F,
1.0142F,
0F,
1.0096F,
2.0389F,
0F,
2.0308F,
1.0302F,
0F,
2.0263F,
1.0327F,
0F,
1.0142F,
0F,
0F,
0F,
1.0084F,
0F,
1.0093F,
0F,
0F,
0F,
0F,
0F,
0F,
1.0249F,
1F,
0F,
0F,
0F,
0F,
0F,
0F,
0F,
1.0135F,
0F,
1F,
0F,
0F,
0F,
0F,
1F,
1.0148F,
0F,
1.0192F,
0F,
0F,
0F,
1.0092F,
1.0159F,
0F,
1.0045F,
0F,
2.0341F,
0F,
1.0051F,
1.0299F,
1.0132F,
0F,
0F,
0F,
0F,
0F,
1.019F,
1F,
1.0052F,
2.0237F,
1.0127F,
1.0225F,
1.0142F,
0F,
0F,
0F,
0F,
1.0051F,
0F,
0F,
0F,
0F,
0F,
2.0204F,
0F,
0F,
0F,
3.0372F,
0F,
0F,
0F,
0F,
0F,
1.0085F,
0F,
4.0658F,
0F,
2.0371F,
1.019F,
1.0149F,
0F,
0F,
0F,
0F,
1.0234F,
2.0371F,
0F,
0F,
1.0144F,
1F,
0F,
1.0192F,
0F,
1.0088F,
1.0111F,
1F,
1.0181F,
0F,
0F,
0F,
1.0046F,
1.0042F,
0F,
1.0092F,
1.0088F,
0F,
1.0104F,
0F,
3.0358F,
1.005F,
1.0127F,
0F,
0F,
1.0192F,
0F,
0F,
1F,
3.0365F,
0F,
0F,
0F,
2.0358F,
0F,
1.0093F,
1.0192F,
0F,
0F,
1.0119F,
0F,
0F,
1.0179F,
0F,
1F,
1.0048F,
0F,
0F,
2.0316F,
0F,
2.0352F,
2.0199F,
0F,
0F,
1.0144F,
0F,
0F,
1.0144F,
0F,
0F,
1.0048F,
1.0183F,
0F,
0F,
3.0524F,
0F,
0F,
0F,
0F,
0F,
1.0259F,
1.0088F,
0F,
0F,
0F,
4.0311F,
0F,
0F,
1.013F,
0F,
0F,
1F,
0F,
0F,
1.0145F,
1.0181F,
0F,
1.0085F,
0F,
1.0094F,
0F,
0F,
2.0276F,
0F,
0F,
0F,
2.0487F,
0F,
1.0167F,
0F,
1.0044F,
1.0164F,
1.5895F
};
        #endregion

        private LineItem curveA;

        private LineItem curveB;

        public Configure Cfg;
        public Calibration Cal;
        public FWHM fm;
        //Communication Interface between iSpectrum and Hardware
        iGEMComm Com;

        public int chl = 0;
        public int chr = 0;

        private ulong prevTotal1;
        private ulong prevTotal2;
        private ulong prevTotal3;
        private ulong prevTotal4;

        //the factor convert the ADC to Energy
        public double ctoe;
        public double d;
        public double fwhm = 0;         //for updating the FWHM form when changing X axis units (channels/KeV)
        // collection counts
        public int totalcounts;
        //collection time
        public int totaltime;
        public int ltime;
        private int currentHVSetting;
        private int targetHVSetting;
        time collecttime = new time();

        // counts number should be received
        public uint rcvcount;
        private bool updateSpectrum;

        // for digital input examination
        public bool nonNumberEntered;

       // private int[] countArray;

        private void eVDemo_Load(object sender, EventArgs e)
        {
            //////////////////////////////////////////////////////////////////////////
            // eV load
            //////////////////////////////////////////////////////////////////////////
            if (this.Com.LoadHW() == true)//load hardware
            {
                //this.ConfigureToolStripMenuItem.Enabled = true;
                string sDSN = "";
                SetBias("0");
                if (GetSN(ref sDSN) == true)// get  the serial number
                {
                    GetSN(ref sDSN);//send twice for get the right response
                    string FILE_NAME = sDSN + ".ser";// Get the name of *.ser file
                    this.Cfg.LabelCSN.Text = sDSN;
                    if (!File.Exists(FILE_NAME))
                    {
                        // File doesn't exist, create one
                        using (StreamWriter sw = File.CreateText(FILE_NAME))
                        {
                            string s = "";
                            if (GetDT(ref s) == true)
                            {
                                sw.WriteLine("Detector Type = " + s);
                                this.Cfg.LabelCDT.Text = s;
                                s = "";
                            }
                            else
                            {
                                sw.WriteLine("Detector Type = None");
                                this.Cfg.LabelCDT.Text = s;
                                s = "";
                                MessageBox.Show("Error reading Detector Type");
                            }
                            if (GetPT(ref s) == true)
                            {
                                sw.WriteLine("Peaking time = " + s);
                                this.Cfg.cmbPeakingTime.Text = s;
                                s = "";
                            }
                            else
                            {
                                sw.WriteLine("Peaking time = None");
                                this.Cfg.cmbPeakingTime.Text = s;
                                s = "";
                                MessageBox.Show("Error reading Peaking Time");
                            }
                            if (GetGain(ref s) == true)
                            {
                                sw.WriteLine("Channel Gain = " + s);
                                this.Cfg.cmbGain.Text = s;
                                s = "";
                            }
                            else
                            {
                                sw.WriteLine("Channel Gain = None");
                                this.Cfg.cmbGain.Text = s;
                                s = "";
                                MessageBox.Show("Error reading Channel Gain");
                            }
                            if (GetBias(ref s) == true)
                            {
                                sw.WriteLine("Detector Bias = " + s);
                                this.Cfg.TextVB.Text = s;
                                s = "";
                            }
                            else
                            {
                                sw.WriteLine("Detector Bias  = None");
                                this.Cfg.TextVB.Text = s;
                                s = "";
                                MessageBox.Show("Error reading Detector Bias");
                            }
                            if (GetLLD(ref s) == true)
                            {
                                sw.WriteLine("Threshold = " + s);
                                this.Cfg.TextLLD.Text = s;
                                s = "";
                            }
                            else
                            {
                                sw.WriteLine("Thresholds  = None");
                                this.Cfg.TextLLD.Text = s;
                                s = "";
                                MessageBox.Show("Error reading Threshold");
                            }
                            sw.Close();
                        }
                    }
                    else// have the configuration file already
                    {
                        using (StreamReader sr = File.OpenText(FILE_NAME))
                        {
                            String s;
                            if ((s = sr.ReadLine()) != null)
                            {
                                int i = s.IndexOf('=');
                                if (i != -1)
                                {
                                    s = s.Substring(i + 2);// Detector type in the ser file
                                    string sDT = "";
                                    if (GetDT(ref sDT) == true)// Get the Detector Type from the flash of DODM
                                    {
                                        if (sDT != s)
                                        {
                                            MessageBox.Show("Detector type from iGEM module and serial number file do not agree");
                                        }
                                        this.Cfg.LabelCDT.Text = s;
                                        s = "";
                                    }
                                }
                            }
                            if ((s = sr.ReadLine()) != null)
                            {
                                int i = s.IndexOf('=');
                                if (i != -1)
                                {
                                    s = s.Substring(i + 2);// Get the Peaking time in the ser file
                                    if (s == "1.2" || s == "2.4")
                                    {
                                        if (SetPT(s)) // Set the peaking time according to the recorder in the ser file
                                        {
                                            this.Cfg.cmbPeakingTime.Text = s;
                                        }
                                        else
                                        {
                                            MessageBox.Show("Peaking time command from serial number file rejected by iGEM module");
                                        }
                                    }
                                    else
                                        MessageBox.Show("Invalid peaking time from serial number file:" + s);
                                    s = "";
                                }
                            }
                            if ((s = sr.ReadLine()) != null)
                            {
                                int i = s.IndexOf('=');
                                if (i != -1)
                                {
                                    s = s.Substring(i + 2);
                                    if (s == "18" || s == "36")
                                    {
                                        if (SetGain(s))
                                            this.Cfg.cmbGain.Text = s;
                                        else
                                        {
                                            MessageBox.Show("Channel gain command from serial number file rejected by iGEM module");
                                        }
                                    }
                                    else
                                        MessageBox.Show("Invalid channel gain from serial number file" + s);
                                    s = "";
                                }
                            }
                            if ((s = sr.ReadLine()) != null)
                            {
                                int i = s.IndexOf('=');
                                if (i != -1)
                                {
                                    s = s.Substring(i + 2);//"= -"
                                    if (SetBias(s))
                                        this.Cfg.TextVB.Text = s;
                                    else
                                    {
                                        MessageBox.Show("Bias command from serial number file rejected by iGEM module");
                                    }
                                    s = "";
                                }
                            }
                            if ((s = sr.ReadLine()) != null)
                            {
                                int i = s.IndexOf('=');
                                if (i != -1)
                                {
                                    s = s.Substring(i + 2);
                                    if (SetLLD(s))
                                        this.Cfg.TextLLD.Text = s;
                                    else
                                    {
                                        MessageBox.Show("Threshold command from serial number file rejected by iGEM module");
                                    }
                                    s = "";
                                }
                            }
                            sr.Close();
                        }
                    }
                }
                this.Hide();
                this.TopMost = false;
                //th.Abort();
                this.Show();
            }
            else
            {
                DialogResult result;
                this.Hide();
                result = MessageBox.Show("iGEM Not Found. Open in Offline Mode?", "No Communication", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                if (result == DialogResult.Yes)
                {
                    this.TopMost = false;
                    try
                    {
                        //th.Abort();
                    }
                    finally
                    {
                    }
                    this.Show();
                }
                else
                {
                    Application.Exit();
                }
            }
            //////////////////////////////////////////////////////////////////////////
            //countArray = new int[Activedata.dCounts.Length];


            antialiasCheck.Checked = zedGraphControl1.IsAntiAlias;

            GraphPane pane = zedGraphControl1.GraphPane;

            pane.Title.Text = titleBase;
            pane.YAxis.Title.Text = "Counts";
            pane.XAxis.Title.Gap = pane.YAxis.Title.Gap = 0F;
            pane.YAxis.Title.FontSpec.Size = pane.XAxis.Title.FontSpec.Size = 12;
            pane.TitleGap = 0F;
            pane.Margin.All = 0.1F;
            
            pane.XAxis.Title.Text = "Photon Energy (keV)";

            pane.Chart.Fill = new Fill(Color.White, Color.Wheat, 0F);

            PointPairList ppl1 = new PointPairList();
            PointPairList ppl2 = new PointPairList();
            Random randNum = new Random();
            int yMax = 0;

            //for (uint i = 0; i < spectrum.Length; i++)
            //{
            //    float val;
            //    if ((i % 4) == 0 && (i > 0))
            //    {
            //        val = 0.25F * (spectrum[i - 3] + spectrum[i - 2] + spectrum[i - 1] + spectrum[i]);
            //        val = val > 0.0 ? val : 0;
            //        ppl1.Add(i, val);
            //        if (val > yMax)
            //            yMax = Convert.ToInt32(val);
            //        val = val - 20 + randNum.Next(40);
            //        val = val > 0.0 ? val : 0;
            //        ppl2.Add(i, val);
            //        if (val > yMax)
            //            yMax = Convert.ToInt32(val);
            //    }
            //}

            
            curveB = pane.AddCurve("Observed", ppl2, Color.Red, SymbolType.None);
            curveB.Line.Width = 2.0F;
            //curveB.Line.Fill = new Fill(Color.Red, Color.RosyBrown, 90F);
            curveB.Line.IsSmooth = true;
            curveB.Line.SmoothTension = 0.35F;
            curveA = pane.AddCurve("Stored", ppl1, Color.Green, SymbolType.None);
            curveA.Line.Width = 2.0F;
            curveA.Line.Fill = new Fill(Color.Green, Color.FromArgb(128, 60, 220, 220), 90F);
            curveA.Line.IsSmooth = true;
            curveA.Line.SmoothTension = 0.35F;
            //curveB.Clear();

            pane.XAxis.CrossAuto = false;
            pane.XAxis.Cross = 0.0;
            pane.YAxis.CrossAuto = false;
            pane.YAxis.Cross = 0.0;


            pane.XAxis.Scale.Min = 0.1;
            pane.XAxis.IsVisible = true;
            pane.XAxis.Scale.Max = (spectrum.Length / 10) * 10 + 10;

            pane.YAxis.Scale.Min = 0.1;
            pane.YAxis.IsVisible = true;
            pane.YAxis.Scale.Max = (yMax / 10) * 10 + 10;

            pane.Legend.Position = LegendPos.InsideTopRight;
            //pane.
            //Graphics g = this.CreateGraphics();
            //pane.XAxis.ResetAutoScale(pane, g);
            //pane.YAxis.ResetAutoScale(pane, g); 
           

            zedGraphControl1.AxisChange();
        }

        private const string titleBase = "Spectral Information";

        private void Button_Start_Click(object sender, EventArgs e)
        {
            //this.Check_SpectrumS.Checked = false;
            //this.gsNetWinChart1.Chart.SetGridBottomTitle("ADC Channel");
            //for (uint i = 0; i < countArray.Length; i++)
            //{
            //    countArray[i] = 0;
            //}
            Label_FWHM.Text = "";
            startTime = DateTime.Now;
            startTime = startTime - elapsedTime;
            elapsedTime = elapsedTime - elapsedTime;
            updateSpectrum = false;

            int channelNo = Activedata.iChannelNo;
            prevTotal1 = 0;
            for (int i = 0; i < channelNo; i++)
            {
                prevTotal1 += (ulong)Activedata.dCounts[i];
            }

            prevTotal2 = 0;
            prevTotal3 = 0;
            prevTotal4 = 0;
            int h = 0;
            int m = 0;
            int s = 0;
            // Get the current time for h, m and s
            try
            {
                if (this.Label_Time.Text == "")
                    this.Label_Time.Text = "00:00:00";
                h = Convert.ToInt16(this.Label_Time.Text.Substring(0, 2));
                m = Convert.ToInt16(this.Label_Time.Text.Substring(3, 2));
                s = Convert.ToInt16(this.Label_Time.Text.Substring(6, 2));
            }
            catch (Exception)
            {
                MessageBox.Show("Collection time Error");
                // If Exception, all set to 0
                h = 0;
                m = 0;
                s = 0;
            }
            collecttime.sethours(h);
            collecttime.setminutes(m);
            collecttime.setseconds(s);

            if (this.Check_EenergyD.Checked == true)
            {
                MessageBox.Show("Please Disable the Kev Display Mode, before pressing Start");
            }
            else
            {
                if (((collecttime.gethours() * 3600 + collecttime.getminutes() * 60 + collecttime.getseconds()) > totaltime && totaltime > 0)
                        || (Convert.ToInt32(Activedata.TC) >= totalcounts && totalcounts > 0))
                    MessageBox.Show("The collection time or counts has been reached");
                else
                {
                    this.Button_Start.Enabled = false;
                    this.Button_Stop.Enabled = true;
                    rcvcount = 0;
                    Nextstep = 0;
                    collecting = true;
                    this.timerspectrum.Enabled = true;
                    //this.Check_SpectrumS.Enabled = false;
                    //this.LoadStaticSpectrumToolStripMenuItem.Enabled = false;
                    //this.LoadActiveSpectrumToolStripMenuItem.Enabled = false;
                    if (this.Check_EenergyD.Enabled == true)
                        this.Check_EenergyD.Enabled = false;
                    this.timerCollect.Enabled = true;
                }
            }
        }

        private void antialiasedChanged(object sender, EventArgs e)
        {
            zedGraphControl1.IsAntiAlias = antialiasCheck.Checked;
            zedGraphControl1.Invalidate();
        }

        private void smoothLineChanged(object sender, EventArgs e)
        {
            curveA.Line.IsSmooth = curveB.Line.IsSmooth = smoothLineCheckBox.Checked;
            zedGraphControl1.Invalidate();
        }

        private void timerspectrum_Tick(object sender, EventArgs e)
        {
            DateTime endTime = DateTime.Now;
            TimeSpan span = endTime.Subtract(startTime);

            //DateTime chartStart, chartEnd;
            //chartStart = DateTime.Now;

            string ct;
            bool stopped = false; // indicates spectrum collection has stopped during this timer tick
            int d = span.Days;
            int h = (d * 24) + span.Hours;
            int m = span.Minutes;
            int s = span.Seconds;
            if (h < 10)
                ct = "0" + h + ":";
            else
                ct = h + ":";
            if (m < 10)
                ct += "0" + m + ":";
            else
                ct += m + ":";
            if (s < 10)
                ct += "0" + s;
            else
                ct += s;

            if ((h * 3600 + m * 60 + s) >= totaltime && totaltime > 0)
            {
                stop();
                stopped = true;
            }

            ulong total = 0;
            int channelNo = Activedata.iChannelNo;

            PointPairList list = (PointPairList)curveB.Points;
            list.Clear();
            for (int i = 1; i < channelNo; i++)
            {
                total += (ulong)Activedata.dCounts[i];
                //if (Activedata.dCounts[i] > 0)
                //{
                //    countArray[i] = Activedata.dCounts[i];

                //}
                if ((i % 4) == 0)
                {
                    float val = 0.25F * (Activedata.dCounts[i - 3] + Activedata.dCounts[i - 2] + Activedata.dCounts[i - 1] + Activedata.dCounts[i]);
                    if (val > zedGraphControl1.GraphPane.YAxis.Scale.Max)
                    {
                        zedGraphControl1.GraphPane.YAxis.Scale.Max = val;
                        zedGraphControl1.AxisChange();
                    }
                    list.Add(i, val);
                }
                
            }
            
            zedGraphControl1.Invalidate();


            if (((int)total > totalcounts) && (totalcounts > 0))
            {
                stop();
                stopped = true;
            }

            this.Label_Time.Text = ct;

            if (updateSpectrum == false && stopped == false) // update spectrum every other second
            {
                updateSpectrum = true;
                return;
            }
            updateSpectrum = false;

            ulong currentInterval;
            ulong cps;
            if (prevTotal4 != 0)
                cps = (total - prevTotal4) >> 3;  // divide by 8 seconds
            else
            {
                currentInterval = (ulong)total - prevTotal1;
                cps = (currentInterval) >> 1;               // divide by 2 seconds
            }
            this.countsPerSecondLabel.Text = cps.ToString();
            this.Label_TC.Text = total.ToString();
            prevTotal4 = prevTotal3;
            prevTotal3 = prevTotal2;
            prevTotal2 = prevTotal1;
            prevTotal1 = (ulong)total;

            //Chart chart = this.gsNetWinChart1.Chart;
            int n = 0;
            int points = 0;
            int startPoint = 0;
            int endPoint = 0;
            int decimate = 0;
            int step = 0;
            if (Activedata.SeriesIndex < 0)
            {
                //instantiate the Active Data
                Activedata.sDSN = this.Cfg.LabelCSN.Text;
                Activedata.sDT = this.Cfg.LabelCDT.Text;
                Activedata.sBias = this.Cfg.TextVB.Text;
                Activedata.sLLD = this.Cfg.TextLLD.Text;
                Activedata.sPeakT = this.Cfg.cmbPeakingTime.Text;
                Activedata.dGain = this.Cfg.cmbGain.Text;
                if (this.Check_XFull.Checked == true)
                {
                    startPoint = 0;
                    endPoint = 4095;
                    decimate = 2;
                    points = endPoint - startPoint + 1;
                }
                else
                {
                    //startPoint = xAxisMin;
                    //endPoint = xAxisMax;
                    points = endPoint - startPoint + 1;
                    if (points < 1)
                    {
                        startPoint = 0;
                        endPoint = Activedata.iChannelNo >> 2;
                        decimate = 2;
                    }
                    else if (points > 2047)
                    {
                        decimate = 2;
                    }
                    else if (points > 1023)
                    {
                        decimate = 1;
                    }
                    else
                    {
                        decimate = 0;
                    }
                }
                step = 1 << decimate;
                points = (points >> decimate);
                int j = startPoint;
                for (int i = 0; i < points; i++)
                {
                    if (Activedata.dCounts[i] > 1)
                        n++;
                    //activespectrum.SetValue(SeriesComponent.Y, i, Activedata.dCounts[j]);
                    //activespectrum.SetValue(SeriesComponent.X, i, Activedata.iChannel[j]);
                    j += step;
                }
                //Activedata.SeriesIndex = chart.AddSeries(activespectrum);
            }
            else
            {
                if (this.Check_XFull.Checked == true)
                {
                    startPoint = 0;
                    endPoint = 4095;
                    decimate = 2;
                    points = endPoint - startPoint + 1;
                }
                else
                {
                    //startPoint = xAxisMin;
                    //endPoint = xAxisMax;
                    points = endPoint - startPoint + 1;
                    if (points < 1)
                    {
                        startPoint = 0;
                        endPoint = Activedata.iChannelNo >> 2;
                        decimate = 2;
                    }
                    else if (points > 2047)
                    {
                        decimate = 2;
                    }
                    else if (points > 1023)
                    {
                        decimate = 1;
                    }
                    else
                    {
                        decimate = 0;
                    }
                }
                step = 1 << decimate;
                points = (points >> decimate);
                int j = startPoint;
                for (int i = 0; i < points; i++)
                {
                    if (Activedata.dCounts[i] > 1)
                        n++;
                    //activespectrum.SetValue(SeriesComponent.Y, i, Activedata.dCounts[j]);
                    //activespectrum.SetValue(SeriesComponent.X, i, Activedata.iChannel[j]);
                    j += step;
                }
                //chart.ReplaceSeries(Activedata.SeriesIndex, activespectrum);
            }
            //chart.GetSeriesDrawing(Activedata.SeriesIndex).MarkerLine.Color = Color.Blue;
            //chart.GetSeriesDrawing(Activedata.SeriesIndex).MarkerLabelsOn = false;
            //chart.GetSeriesDrawing(Activedata.SeriesIndex).SymbolsOn = false;

            //Draw it!
            //                chartEnd = DateTime.Now;
            //chart.RecalcLayout();
            /*                timerspectrum.Enabled = false;
                        timerCollect.Enabled = false;
                        TimeSpan span2 = chartEnd.Subtract(chartStart);
                        int sec = span2.Seconds;
                        int mil = span2.Milliseconds;
                        ct = "milliseconds =" + ((sec * 1000) + mil);
                        MessageBox.Show(ct);
                        timerspectrum.Enabled = true;
                        timerCollect.Enabled = true; */
        }


        // declare a member of iGEMData for using
        iGEMData igemdata;// for temporary use
        public iGEMData Staticdata; // for static spectrum
        public iGEMData Activedata; // for active spectrum

        //these three public static is for getting event 
        // For get events timer procedure
        public bool collecting;
        public int Nextstep;

        // goes to the iGEM device and collects the counts that it has accumulated since last time
        private void collectDataTick(object sender, EventArgs e)
        {
            //disable the timer
            timerCollect.Enabled = false;
            if (collecting == false)
            {
                if (!Com.Cls())
                    MessageBox.Show("An error occurred closing communications with iGEM");
            }
            else
            {
                // Initialize for the reading data
                if (Nextstep == 0)
                {
                    File.AppendAllText("iSpectrum.log", "Nextstep: " + Nextstep.ToString() + Environment.NewLine);
                    if (!Com.Initial())
                    {
                        File.AppendAllText("iSpectrum.log", "Initial false!" + Environment.NewLine);
                        stop();
                        return;
                    }
                    else
                    {
                        if (!Com.Snd5())
                        {
                            File.AppendAllText("iSpectrum.log", "Snd5 failed!" + Environment.NewLine);
                            stop();
                            return;
                        }
                        else
                            Nextstep = 1;
                    }
                }
                // send command 4
                if (Nextstep == 1)
                {

                    if (!Com.Snd4())
                    {
                        File.AppendAllText("iSpectrum.log", "Snd4 false!" + Environment.NewLine);
                        stop();
                        return;
                    }
                    else
                    {
                        Nextstep = 2;
                        timerCollect.Enabled = true;
                        return;
                    }
                }
                // receive the reply of cmd4 and send command 3s
                if (Nextstep == 2)
                {
                    if (this.Label_TC.Text != "")
                    {
                        //if (int.Parse(this.Label_TC.Text) % 100000 == 0)
                        //{
                        //File.AppendAllText("iSpectrum.log", this.Label_TC.Text + Environment.NewLine);
                        //}
                    }
                    int result = Com.Retrieve3();
                    if (result == 0)
                    {
                        File.AppendAllText("iSpectrum.log", "Retrieve3 result=0!" + Environment.NewLine);
                        stop();
                        return;
                    }
                    if (result == 1)
                    {
                        timerCollect.Enabled = true;
                        Nextstep = 1;
                        return;
                    }
                    if (result == 3)
                    {
                        Nextstep = 3;
                        result = Com.Retrievedata(ref Activedata);
                        if (result == 1)
                        {
                            Nextstep = 2;// for cmd4 has been sent in Retrievedata, here nextstep is 2
                            timerCollect.Enabled = true;
                            return;
                        }
                        else
                        {
                            File.AppendAllText("iSpectrum.log", "Retrievedata  result=" + result.ToString() + Environment.NewLine);
                            stop();
                            return;
                        }
                    }
                    return;
                }

                // retrieve the events 
                if (Nextstep == 3)
                {
                    int result = Com.Retrievedata(ref Activedata);
                    if (result == 1)
                    {
                        Nextstep = 2;
                        timerCollect.Enabled = true;
                        return;
                    }
                    else
                    {
                        File.AppendAllText("iSpectrum.log", "Retrievedata  result=" + result.ToString() + Environment.NewLine);
                        stop();
                        return;
                    }
                }
            }

        }

        private DateTime startTime;
        private DateTime endTime;
        private TimeSpan elapsedTime;

        // Stop collecting and set the proper status of UI
        public void stop()
        {
            if (collecting == true)
            {
                endTime = DateTime.Now;
                elapsedTime = endTime.Subtract(startTime);
            }
            collecting = false;
            this.Button_Start.Enabled = true;
            this.Button_Stop.Enabled = false;
            this.timerspectrum.Enabled = false;

            //this.Check_SpectrumS.Enabled = true;
            //this.LoadStaticSpectrumToolStripMenuItem.Enabled = true;
            //this.LoadActiveSpectrumToolStripMenuItem.Enabled = true;
            //this.SaveActiveSpectrumToolStripMenuItem.Enabled = true;
            //this.ClearActiveSpectrumToolStripMenuItem.Enabled = true;
            //this.Button_CAS.Enabled = true;
            //this.Button_SAS.Enabled = true;
            //this.Check_DisLive.Enabled = true;
            //if (this.Activedata.factor != 0)
            //    this.Check_EenergyD.Enabled = true;
        }

        //------------Set Default values -----------------//
        //*--------Get the default values for the flash of DODM----*//
        //*--------Set the default values to DODM------------------*//
        public bool SetDefault()
        {
            string s = "";
            if (GetGain(ref s))
            {
                if (!SetGain(s))
                {
                    MessageBox.Show("Set default Gain error");
                    return false;
                }
                this.Cfg.cmbGain.Text = s;
                s = "";
            }
            else
            {
                MessageBox.Show("Get default gain error");
                return false;
            }

            if (GetPT(ref s))
            {
                if (!SetPT(s))
                {
                    MessageBox.Show("Set default peaking time error");
                    return false;
                }
                this.Cfg.cmbPeakingTime.Text = s;
                s = "";
            }
            else
            {
                MessageBox.Show("Get default peaking time error");
                return false;
            }
            if (GetLLD(ref s))
            {
                if (!SetLLD(s))
                {
                    MessageBox.Show("Set default LLD error");
                    return false;
                }
                this.Cfg.TextLLD.Text = s;
                s = "";
            }
            else
            {
                MessageBox.Show("Get default LLD error");
                return false;
            }
            if (GetBias(ref s))
            {
                if (!SetBias(s))
                {
                    MessageBox.Show("Set default bias error");
                    return false;
                }

                this.Cfg.TextVB.Text = s;
                s = "";
            }
            else
            {
                MessageBox.Show("Get default bias error");
                return false;
            }
            return true;

        }

        private bool GetGain(ref string s)
        {
            byte cmd = 23;
            byte p1 = 0;//low
            byte p2 = 0;
            if (Com.SndRcv(cmd, ref p1, ref p2) == true)
            {
                switch (p1)
                {
                    case 0:
                        s = "18";
                        break;
                    case 1:
                        s = "36";
                        break;
                    default:
                        s = "";
                        return false;
                }
                return true;
            }
            else
            {
                return false;
            }
        }

        private bool GetPT(ref string s)
        {
            byte cmd = 25;

            byte p1 = 0;//low
            byte p2 = 0;
            if (Com.SndRcv(cmd, ref p1, ref p2) == true)
            {

                switch (p1)
                {
                    case 0:
                        s = "1.2";
                        break;
                    case 1:
                        s = "2.4";
                        break;

                    default:
                        s = "";
                        return false;

                }
                return true;
            }
            else
            {
                return false;
            }
        }

        private bool GetBias(ref string s)
        {
            byte cmd = 15;

            byte p1 = 0;
            byte p2 = 0;

            if (Com.SndRcv(cmd, ref p1, ref p2) == true)
            {
                int Low = p1;
                int High = p2;
                int Number = High * 256;
                Number += Low;
                //Number = Number * 2;
                s = Number.ToString();
                return true;
            }
            else
            {
                return false;
            }
        }

        private bool GetLLD(ref string s)
        {
            byte cmd = 27;

            byte p1 = 0;
            byte p2 = 0;

            if (Com.SndRcv(cmd, ref p1, ref p2) == true)
            {
                int Low = p1;
                int High = p2;
                int Number = High * 256;
                Number += Low;
                if (Number < 4096)
                {
                    int lld = Convert.ToInt32(Number * 2.5 / 4.096);
                    s = lld.ToString();
                    return true;
                }
                return false;
            }
            else
            {
                return false;
            }
        }

        private bool GetDT(ref string sDT)
        {
            byte cmd = 13;

            byte p1 = 0;//low
            byte p2 = 0;

            if (Com.SndRcv(cmd, ref p1, ref p2) == true)
            {
                switch (p1)
                {
                    case 1:
                        sDT = "CAPture Plus";
                        break;
                    case 2:
                        sDT = "CPG";
                        break;
                    case 3:
                        sDT = "Planar";
                        break;
                    default:
                        sDT = "Unknown";
                        MessageBox.Show("Undefined Detector Type");
                        break;

                }
                return true;
            }
            else
            {
                return false;
            }
        }

        private bool GetSN(ref string sDSN)
        {
            byte cmd = 11;

            byte p1 = 0;
            byte p2 = 0;

            if (Com.SndRcv(cmd, ref p1, ref p2) == true)
            {
                int Low = p1;
                int High = p2;
                int Number = High * 256;
                Number += Low;
                sDSN = Number.ToString();
                return true;
            }
            else
            {
                return false;
            }
        }

        public bool SetPT(string sPT)
        {
            byte cmd = 17;
            byte p1 = 0;// high
            byte p2 = 0;//low
            if (sPT == "1.2")
                p2 = 0;
            else
                p2 = 1;
            if (Com.SndRcv(cmd, ref p1, ref p2))
            {
                if (p1 == 0)// receive p1 is low
                    return true;

            }
            return false;


        }
        public bool SetGain(string sGain)
        {
            byte cmd = 16;
            byte p2 = 0;
            byte p1 = 0;
            if (sGain == "18")
                p2 = 0;
            else if (sGain == "36")
                p2 = 1;
            else
                return false;
            if (Com.SndRcv(cmd, ref p1, ref p2))
            {
                if (p1 == 0)// receive p1 is low
                    return true;

            }
            return false;
        }

        public bool SetBias(string bias)
        {
            bool status;
            byte cmd = 2;
            byte p2;
            byte p1;
            int i;
            try
            {
                i = Convert.ToInt32(bias);
            }
            catch (Exception)
            {
                MessageBox.Show("Set bias error");
                return false;
            }
            targetHVSetting = i;
            if (Math.Abs(targetHVSetting - currentHVSetting) <= 100)
            {
                i = i / 2;  //set value p1 is high
                if ((i % 256) > 255)
                    p2 = 255;
                else
                    p2 = Convert.ToByte(i % 256);
                i = i - (i % 256);
                p1 = Convert.ToByte(i / 256);
                currentHVSetting = targetHVSetting;
                if (Com.SndRcv(cmd, ref p1, ref p2))
                {
                    if (p2 == 0 && p1 == 0)
                        return true;
                }
                return false;
            }
            else
            {
                this.Button_Start.Text = "Ramping HV";
                this.Button_Start.Enabled = false;
                if (targetHVSetting > currentHVSetting)
                    currentHVSetting += 100;
                else
                    currentHVSetting -= 100;
                i = currentHVSetting / 2;
                if ((i % 256) > 255)
                    p2 = 255;
                else
                    p2 = Convert.ToByte(i % 256);
                i = i - (i % 256);
                p1 = Convert.ToByte(i / 256);
                status = Com.SndRcv(cmd, ref p1, ref p2);
                timerHVRamp.Enabled = true;
                if (status == true)
                {
                    if (p2 == 0 && p1 == 0)
                        return true;
                }
                return false;
            }
        }

        public bool SetLLD(string s)
        {
            byte cmd = 6;
            byte p1;
            byte p2;
            try
            {
                double i = Convert.ToDouble(s);
                //set value/4096*2.5

                i = i * 4.096 / 2.5;


                if ((i % 256) > 255)// in case i%256 >255.5
                    p2 = 255;
                else
                    p2 = Convert.ToByte(i % 256);
                i = i - i % 256;
                p1 = Convert.ToByte(i / 256);
            }
            catch (Exception)
            {
                MessageBox.Show("Set threshold error");
                return false;
            }


            if (Com.SndRcv(cmd, ref p1, ref p2))
            {
                if (p1 == 0)
                    return true;

            }
            return false;
        }

        // Set the type of cursor of the chart when FWHM or Cal is shown.
        public void SetChartCursor()
        {
            //this.gsNetWinChart1.Cursor = Cursors.Arrow;
        }

        //---------------------------paint the ROI------------------------------------//
        public bool paintROI()
        {
            double ch2;
            double ch1;
            try
            {
                ch2 = Convert.ToDouble(fm.Text_Ch2.Text);
                ch1 = Convert.ToDouble(fm.Text_Ch1.Text);
            }
            catch (Exception)
            {
                MessageBox.Show("Invalid Input for ROI!");
                return false;
            }
            if (ch2 > ch1 && ch1 >= 0)
            {
                //  ROI = true;
                FWHMCondition lineCond1 = new FWHMCondition(ch2, ch1);
                // lineCond1.Line.Color = Color.Orange; // change line color 

                // add line condition to the series 
                // Chart chart = gsNetWinChart1.Chart;
                // if (Activedata.LineCon >= 0)
                //     chart.GetSeriesDrawing(Activedata.SeriesIndex).RemoveLineCondition(Activedata.LineCon);

                // Activedata.LineCon =
                //     chart.GetSeriesDrawing(Activedata.SeriesIndex).AddLineCondition(lineCond1);

                // **************************************************** 
                // **** Important: we must refresh line conditions **** 
                // **************************************************** 
                // chart.ReconcileLineConditions();

                // refresh chart 
                // chart.RecalcLayout();
                return true;
            }
            else
            {
                MessageBox.Show("The Beginning of the ROI should be less than the of the End of ROI!");
                return false;
            }
        }

        private void configureButton_Click(object sender, EventArgs e)
        {
            this.AddOwnedForm(Cfg);
            if (this.Button_Stop.Enabled == true)// when acquiring,disable the settings
            {
                Cfg.TextLLD.Enabled = false;
                Cfg.TextVB.Enabled = false;
                Cfg.cmbGain.Enabled = false;
                Cfg.cmbPeakingTime.Enabled = false;
                Cfg.CommandReset.Enabled = false;
            }
            else
            {
                if (this.label3.Text == "iGEM Online")
                {
                    Cfg.TextLLD.Enabled = true;
                    Cfg.TextVB.Enabled = true;
                    Cfg.cmbGain.Enabled = true;
                    Cfg.cmbPeakingTime.Enabled = true;
                    Cfg.CommandReset.Enabled = true;
                }
            }
            Cfg.obias = Cfg.TextVB.Text;
            Cfg.ogain = Cfg.cmbGain.Text;
            Cfg.olld = Cfg.TextLLD.Text;
            Cfg.opt = Cfg.cmbPeakingTime.Text;
            Cfg.Show();
        }

        private void timerHVRamp_Tick(object sender, EventArgs e)
        {
            bool status;
            byte cmd = 2;
            byte p2;
            byte p1;
            int i;
            if (Math.Abs(targetHVSetting - currentHVSetting) <= 100)
            {
                timerHVRamp.Enabled = false;
                i = targetHVSetting / 2;  //set value p1 is high
                if ((i % 256) > 255)
                    p2 = 255;
                else
                    p2 = Convert.ToByte(i % 256);
                i = i - (i % 256);
                p1 = Convert.ToByte(i / 256);
                currentHVSetting = targetHVSetting;
                status = Com.SndRcv(cmd, ref p1, ref p2);
                this.Button_Start.Text = "Start";
                this.Button_Start.Enabled = true;
                if (status == false)
                {
                    timerHVRamp.Enabled = false;
                    MessageBox.Show("HV Ramp Failed");
                }
            }
            else
            {
                if (targetHVSetting > currentHVSetting)
                    currentHVSetting += 100;
                else
                    currentHVSetting -= 100;
                i = currentHVSetting / 2;
                if ((i % 256) > 255)
                    p2 = 255;
                else
                    p2 = Convert.ToByte(i % 256);
                i = i - (i % 256);
                p1 = Convert.ToByte(i / 256);
                status = Com.SndRcv(cmd, ref p1, ref p2);
                if (status == false)
                {
                    timerHVRamp.Enabled = false;
                    MessageBox.Show("HV Ramp Failed");
                }
            }
        }

        private void Button_Stop_Click(object sender, EventArgs e)
        {
            stop();
        }

        string RFID = "";

        private void tagLookupClick(object sender, EventArgs args)
        {
            try
            {
                RFID = NativeMethods.readOneTagID();
                //RFID = "E004010012E384A8";
                zedGraphControl1.GraphPane.Title.Text = titleBase + " - " + RFID;
                zedGraphControl1.Refresh();
                storeButton.Enabled = lookupButton.Enabled = true;
            }
            catch (NotSupportedException ex)
            {
                MessageBox.Show(ex.Message);
            }
            
        }

        private void storeSpectrumClick(object sender, EventArgs args)
        {
            EvDemoWS.spectrumInfo spec = new EvDemoWS.spectrumInfo();
            spec.dataArray = Activedata.dCounts;
            
            spec.exists = true;
            spec.RFIDNum = RFID;

            try
            {
                EvDemoWS.EvDemoWS ws = new EvDemoWS.EvDemoWS();
                if (ws.addSpectrum(spec) == false)
                    MessageBox.Show("Unable to store spectrum, ensure that it does not already exist");
            }
            catch (WebException)
            {
                tagLookupClick(lookupButton, new EventArgs());
                //rescheduleLookup(ar);
            }
            catch (ArgumentNullException)
            {
                tagLookupClick(lookupButton, new EventArgs());
                //rescheduleLookup(ar);
            }
            catch (MemberAccessException)
            {
                tagLookupClick(lookupButton, new EventArgs());
                //MessageBox.Show("unexpected: ");
            }
            catch (SocketException)
            {
                Thread.Sleep(2000);
            }
            catch (IOException)
            {
                //MessageBox.Show(ex.Message);
                return;
            }
            catch (InvalidCastException e)
            {
                tagLookupClick(lookupButton, new EventArgs());
                MessageBox.Show(e.ToString());
            }
            catch (InvalidOperationException)
            {
                tagLookupClick(lookupButton, new EventArgs());
                MessageBox.Show("Possible timeout error");
            }
            catch (IndexOutOfRangeException e)
            {
                tagLookupClick(lookupButton, new EventArgs());
                MessageBox.Show(e.ToString());
            }
            catch (NullReferenceException e)
            {
                tagLookupClick(lookupButton, new EventArgs());
                //rescheduleLookup(ar);
            }
            catch (Exception e)
            {
                MessageBox.Show(e.ToString());
            }
            MessageBox.Show("Success");
        }

        private void lookupClick(object sender, EventArgs args)
        {
            try
            {
                EvDemoWS.EvDemoWS ws = new EvDemoWS.EvDemoWS();
                EvDemoWS.spectrumInfo spec = ws.getSpectrum(RFID);
                if (spec.exists)
                {
                    PointPairList list = (PointPairList)curveA.Points;
                    list.Clear();
                    int yMax = 0;
                    int xMax = 0;
                    list.Add(1, 0);
                    list.Add(spec.dataArray.Length, 0);
                    for (int i = 3; i < spec.dataArray.Length - 4; i++)
                    {
                        //Activedata.dCounts[i] = spec.dataArray[i];
                        if ((i % 4) == 0)
                        {
                            int value = (spec.dataArray[i+1] + spec.dataArray[i+2] + spec.dataArray[i+3] + spec.dataArray[i - 3] + spec.dataArray[i - 2] + spec.dataArray[i - 1] + spec.dataArray[i]) / 7;
                            if (value > yMax)
                                yMax = value;
                            if (i > xMax)
                                xMax = i;
                            list.Add(1.0F * i ,1.0F * value);
                        }
                    }
                    //zedGraphControl1.GraphPane.XAxis.CrossAuto = false;
                    //zedGraphControl1.GraphPane.XAxis.Cross = 0.0;
                    //zedGraphControl1.GraphPane.YAxis.CrossAuto = false;
                    //zedGraphControl1.GraphPane.YAxis.Cross = 0.0;

                    //zedGraphControl1.GraphPane.XAxis.Scale.Min = 0.0;
                    zedGraphControl1.GraphPane.XAxis.Scale.Max = xMax;

                    //zedGraphControl1.GraphPane.YAxis.Scale.Min = 0.0;
                    zedGraphControl1.GraphPane.YAxis.Scale.Max = yMax;
                }
                else
                    MessageBox.Show("Spectrum for RFID tag does not exist");
                
            }
            catch (WebException)
            {
                lookupClick(lookupButton, new EventArgs());
                //rescheduleLookup(ar);
            }
            catch (ArgumentNullException)
            {
                lookupClick(lookupButton, new EventArgs());
                //rescheduleLookup(ar);
            }
            catch (MemberAccessException)
            {
                lookupClick(lookupButton, new EventArgs());
                //MessageBox.Show("unexpected: ");
            }
            catch (SocketException)
            {
                Thread.Sleep(2000);
            }
            catch (IOException)
            {
                //MessageBox.Show(ex.Message);
                return;
            }
            catch (InvalidCastException e)
            {
                lookupClick(lookupButton, new EventArgs());
                MessageBox.Show(e.ToString());
            }
            catch (InvalidOperationException)
            {
                lookupClick(lookupButton, new EventArgs());
                MessageBox.Show("Possible timeout error");
            }
            catch (IndexOutOfRangeException e)
            {
                lookupClick(lookupButton, new EventArgs());
                MessageBox.Show(e.ToString());
            }
            catch (NullReferenceException e)
            {
                lookupClick(lookupButton, new EventArgs());
                //rescheduleLookup(ar);
            }
            catch (Exception e)
            {
                MessageBox.Show(e.ToString());
            }
            finally
            {
                zedGraphControl1.Invalidate();
                zedGraphControl1.AxisChange();
            }
            
        }

        private void eVDemo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                RFID = "E004010012E384A8";
                zedGraphControl1.GraphPane.Title.Text = titleBase + " - " + RFID;
                zedGraphControl1.Refresh();
                storeButton.Enabled = lookupButton.Enabled = true;
            }

        }

        private void button2_Click(object sender, EventArgs e)
        {
            if ((Activedata.SeriesIndex >= 0 && this.Check_DisLive.Checked == true) || (Staticdata.SeriesIndex >= 0 && this.Check_DisStatic.Checked == true))
            {
                if (this.Check_EenergyD.Checked == false)
                {
                    //this.gsNetWinChart1.Cursor = Cursors.Cross; // the proper of LockchartObj should be set true
                    this.AddOwnedForm(Cal); // for top show
                    Cal.Show();
                }
                else
                    MessageBox.Show("Please Disable the Kev Display Mode, before pressing Start");
            }
            else
                MessageBox.Show("A spectrum must be displayed to perform a calibration");
        }
        
    }
}