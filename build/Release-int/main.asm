; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\CriuS\Documents\Visual Studio 2008\Projects\DRAMsimIIhg\src\main.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??1Settings@DRAMsimII@@QAE@XZ			; DRAMsimII::Settings::~Settings
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
; Function compile flags: /Ogtpy
;	COMDAT ??1Settings@DRAMsimII@@QAE@XZ
_TEXT	SEGMENT
??1Settings@DRAMsimII@@QAE@XZ PROC			; DRAMsimII::Settings::~Settings, COMDAT
; _this$ = esi
	push	ebx
	push	ebp
	mov	ebp, 16					; 00000010H
	push	edi
	cmp	DWORD PTR [esi+176], ebp
	jb	SHORT $LN19@Settings
	mov	eax, DWORD PTR [esi+156]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN19@Settings:
	xor	ebx, ebx
	mov	edi, 15					; 0000000fH
	mov	DWORD PTR [esi+176], edi
	mov	DWORD PTR [esi+172], ebx
	mov	BYTE PTR [esi+156], bl
	cmp	DWORD PTR [esi+148], ebp
	jb	SHORT $LN45@Settings
	mov	ecx, DWORD PTR [esi+128]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN45@Settings:
	mov	DWORD PTR [esi+148], edi
	mov	DWORD PTR [esi+144], ebx
	mov	BYTE PTR [esi+128], bl
	cmp	DWORD PTR [esi+120], ebp
	jb	SHORT $LN71@Settings
	mov	edx, DWORD PTR [esi+100]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN71@Settings:
	mov	DWORD PTR [esi+120], edi
	mov	DWORD PTR [esi+116], ebx
	mov	BYTE PTR [esi+100], bl
	cmp	DWORD PTR [esi+84], ebp
	jb	SHORT $LN97@Settings
	mov	eax, DWORD PTR [esi+64]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN97@Settings:
	mov	DWORD PTR [esi+84], edi
	mov	DWORD PTR [esi+80], ebx
	mov	BYTE PTR [esi+64], bl
	cmp	DWORD PTR [esi+56], ebp
	jb	SHORT $LN123@Settings
	mov	ecx, DWORD PTR [esi+36]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN123@Settings:
	mov	DWORD PTR [esi+56], edi
	mov	DWORD PTR [esi+52], ebx
	mov	BYTE PTR [esi+36], bl
	cmp	DWORD PTR [esi+24], ebp
	jb	SHORT $LN149@Settings
	mov	edx, DWORD PTR [esi+4]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN149@Settings:
	mov	DWORD PTR [esi+24], edi
	pop	edi
	mov	DWORD PTR [esi+20], ebx
	pop	ebp
	mov	BYTE PTR [esi+4], bl
	pop	ebx
	ret	0
??1Settings@DRAMsimII@@QAE@XZ ENDP			; DRAMsimII::Settings::~Settings
PUBLIC	__$ArrayPad$
PUBLIC	_main
__unwindtable$_main DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_main$0
	DD	00H
	DD	FLAT:__unwindfunclet$_main$1
__ehfuncinfo$_main DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_main
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\main.cpp
_TEXT	SEGMENT
_settings$ = -11992					; size = 472
_ds$139787 = -11520					; size = 11496
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_envp$ = 16						; size = 4
_main	PROC

; 32   : {	

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	-1
	push	__ehhandler$_main
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, 11980				; 00002eccH
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+11996], eax
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+12004]
	mov	DWORD PTR fs:0, eax
	mov	eax, DWORD PTR _argv$[ebp]

; 33   : 	const Settings settings(argc, argv);	

	push	eax
	mov	eax, DWORD PTR _argc$[ebp]
	push	eax
	lea	ecx, DWORD PTR _settings$[esp+12012]
	push	ecx
	call	??0Settings@DRAMsimII@@QAE@HPAPAD@Z	; DRAMsimII::Settings::Settings
	mov	DWORD PTR __$EHRec$[esp+12012], 0

; 34   : 
; 35   : #ifdef DEBUG
; 36   : 	//cerr << TICK_MAX << endl;
; 37   : 	//cerr << PHYSICAL_ADDRESS_MAX << endl;
; 38   : 	//DRAMsimII::unitTests(settings);
; 39   : #endif
; 40   : 	if (settings.systemType == FBD_CONFIG)

	cmp	DWORD PTR _settings$[esp+12220], 1
	je	SHORT $LN1@main

; 41   : 	{
; 42   : 		//fbdSystem fbds(settings);
; 43   : 		//fbds.runSimulations();
; 44   : 	}
; 45   : 	else
; 46   : 	{
; 47   : 		System ds(settings);

	lea	edx, DWORD PTR _settings$[esp+12004]
	push	edx
	lea	eax, DWORD PTR _ds$139787[esp+12008]
	push	eax
	call	??0System@DRAMsimII@@QAE@ABVSettings@1@@Z ; DRAMsimII::System::System

; 48   : 		ds.runSimulations();

	lea	ecx, DWORD PTR _ds$139787[esp+12004]
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+12016], 1
	call	?runSimulations@System@DRAMsimII@@QAEXI@Z ; DRAMsimII::System::runSimulations

; 49   : 	}

	lea	edx, DWORD PTR _ds$139787[esp+12004]
	push	edx
	mov	BYTE PTR __$EHRec$[esp+12016], 0
	call	??1System@DRAMsimII@@QAE@XZ
$LN1@main:

; 50   : 
; 51   : 
; 52   : 	//cerr << ds.timing_specification;
; 53   : 	//cerr << (dram_statistics) ds;
; 54   : 	//_CrtDumpMemoryLeaks();
; 55   : 	return 0;

	lea	esi, DWORD PTR _settings$[esp+12004]
	call	??1Settings@DRAMsimII@@QAE@XZ
	xor	eax, eax

; 56   : }

	mov	ecx, DWORD PTR __$EHRec$[esp+12004]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[esp+11996]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
__unwindfunclet$_main$0:
	lea	esi, DWORD PTR _settings$[ebp]
	jmp	??1Settings@DRAMsimII@@QAE@XZ
__unwindfunclet$_main$1:
	lea	eax, DWORD PTR _ds$139787[ebp]
	push	eax
	call	??1System@DRAMsimII@@QAE@XZ
	ret	0
__ehhandler$_main:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-11988]
	mov	ecx, DWORD PTR [edx-11992]
	xor	ecx, eax
	call	@__security_check_cookie@4
	add	eax, 4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$_main
	jmp	___CxxFrameHandler3
_main	ENDP
END
