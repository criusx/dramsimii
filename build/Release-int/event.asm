; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\CriuS\Documents\Visual Studio 2008\Projects\DRAMsimIIhg\src\event.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?getExecuteTime@Event@DRAMsimII@@QBE_JXZ	; DRAMsimII::Event::getExecuteTime
PUBLIC	?getLatency@Event@DRAMsimII@@QBE_JXZ		; DRAMsimII::Event::getLatency
PUBLIC	??_C@_06KLGMCFCD@?$FN?5LAT?$FL?$AA@		; `string'
PUBLIC	??_C@_06JGIJJGAA@?$FN?5EXE?$FL?$AA@		; `string'
PUBLIC	??_C@_04HGHCGHBC@?$FN?5E?$FL?$AA@		; `string'
PUBLIC	??_C@_04GONJLINA@?$FN?5S?$FL?$AA@		; `string'
PUBLIC	??_C@_03EKLIEPMF@?5Q?$FL?$AA@			; `string'
;	COMDAT ??_C@_03EKLIEPMF@?5Q?$FL?$AA@
CONST	SEGMENT
??_C@_03EKLIEPMF@?5Q?$FL?$AA@ DB ' Q[', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GONJLINA@?$FN?5S?$FL?$AA@
CONST	SEGMENT
??_C@_04GONJLINA@?$FN?5S?$FL?$AA@ DB '] S[', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HGHCGHBC@?$FN?5E?$FL?$AA@
CONST	SEGMENT
??_C@_04HGHCGHBC@?$FN?5E?$FL?$AA@ DB '] E[', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JGIJJGAA@?$FN?5EXE?$FL?$AA@
CONST	SEGMENT
??_C@_06JGIJJGAA@?$FN?5EXE?$FL?$AA@ DB '] EXE[', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06KLGMCFCD@?$FN?5LAT?$FL?$AA@
CONST	SEGMENT
??_C@_06KLGMCFCD@?$FN?5LAT?$FL?$AA@ DB '] LAT[', 00H	; `string'
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
; Function compile flags: /Ogtpy
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\event.h
;	COMDAT ?getLatency@Event@DRAMsimII@@QBE_JXZ
_TEXT	SEGMENT
?getLatency@Event@DRAMsimII@@QBE_JXZ PROC		; DRAMsimII::Event::getLatency, COMDAT
; _this$ = ecx

; 94   : 		tick getLatency() const { return completionTime - enqueueTime; }

	mov	eax, DWORD PTR [ecx+32]
	sub	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR [ecx+36]
	sbb	edx, DWORD PTR [ecx+20]
	ret	0
?getLatency@Event@DRAMsimII@@QBE_JXZ ENDP		; DRAMsimII::Event::getLatency
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?getExecuteTime@Event@DRAMsimII@@QBE_JXZ
_TEXT	SEGMENT
?getExecuteTime@Event@DRAMsimII@@QBE_JXZ PROC		; DRAMsimII::Event::getExecuteTime, COMDAT
; _this$ = ecx

; 92   : 		tick getExecuteTime() const { return completionTime - startTime; }

	mov	eax, DWORD PTR [ecx+32]
	sub	eax, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR [ecx+36]
	sbb	edx, DWORD PTR [ecx+28]
	ret	0
?getExecuteTime@Event@DRAMsimII@@QBE_JXZ ENDP		; DRAMsimII::Event::getExecuteTime
PUBLIC	??6DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVEvent@0@@Z ; DRAMsimII::operator<<
; Function compile flags: /Ogtpy
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\event.cpp
_TEXT	SEGMENT
$T645572 = -8						; size = 8
_os$ = 8						; size = 4
??6DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVEvent@0@@Z PROC ; DRAMsimII::operator<<
; _currentEvent$ = edi

; 24   : {

	sub	esp, 8

; 25   : 	return os << currentEvent.address <<
; 26   : 		" Q[" << std::dec << currentEvent.enqueueTime <<
; 27   : 		"] S[" << std::dec << currentEvent.startTime <<
; 28   : 		"] E[" << std::dec << currentEvent.completionTime <<
; 29   : 		"] EXE[" << std::dec << currentEvent.getExecuteTime() <<
; 30   : 		"] LAT[" << std::dec << currentEvent.getLatency() << "]";

	mov	eax, DWORD PTR [edi+32]
	mov	ecx, DWORD PTR [edi+36]
	push	ebx
	mov	ebx, eax
	sub	ebx, DWORD PTR [edi+16]
	push	ebp
	mov	ebp, ecx
	sbb	ebp, DWORD PTR [edi+20]
	sub	eax, DWORD PTR [edi+24]
	push	esi
	sbb	ecx, DWORD PTR [edi+28]
	mov	DWORD PTR $T645572[esp+20], eax
	mov	eax, DWORD PTR _os$[esp+16]
	push	OFFSET ??_C@_03EKLIEPMF@?5Q?$FL?$AA@
	lea	esi, DWORD PTR [edi+40]
	mov	DWORD PTR $T645572[esp+28], ecx
	call	??6DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVAddress@0@@Z ; DRAMsimII::operator<<
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@operator@425
	xor	ecx, ecx
	jmp	SHORT $LN10@operator@425
$LN9@operator@425:
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, eax
$LN10@operator@425:
	mov	edx, DWORD PTR [ecx+16]
	and	edx, -3073				; fffff3ffH
	or	edx, 512				; 00000200H
	mov	DWORD PTR [ecx+16], edx
	mov	ecx, DWORD PTR [edi+20]
	mov	edx, DWORD PTR [edi+16]
	push	OFFSET ??_C@_04GONJLINA@?$FN?5S?$FL?$AA@
	push	ecx
	push	edx
	push	eax
	call	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN17@operator@425
	xor	ecx, ecx
	jmp	SHORT $LN18@operator@425
$LN17@operator@425:
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, eax
$LN18@operator@425:
	mov	edx, DWORD PTR [ecx+16]
	and	edx, -3073				; fffff3ffH
	or	edx, 512				; 00000200H
	mov	DWORD PTR [ecx+16], edx
	mov	ecx, DWORD PTR [edi+28]
	mov	edx, DWORD PTR [edi+24]
	push	OFFSET ??_C@_04HGHCGHBC@?$FN?5E?$FL?$AA@
	push	ecx
	push	edx
	push	eax
	call	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN25@operator@425
	xor	ecx, ecx
	jmp	SHORT $LN26@operator@425
$LN25@operator@425:
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, eax
$LN26@operator@425:
	mov	edx, DWORD PTR [ecx+16]
	and	edx, -3073				; fffff3ffH
	or	edx, 512				; 00000200H
	mov	DWORD PTR [ecx+16], edx
	mov	ecx, DWORD PTR [edi+36]
	mov	edx, DWORD PTR [edi+32]
	push	OFFSET ??_C@_06JGIJJGAA@?$FN?5EXE?$FL?$AA@
	push	ecx
	push	edx
	push	eax
	call	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN33@operator@425
	xor	ecx, ecx
	jmp	SHORT $LN34@operator@425
$LN33@operator@425:
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, eax
$LN34@operator@425:
	mov	edx, DWORD PTR [ecx+16]
	and	edx, -3073				; fffff3ffH
	or	edx, 512				; 00000200H
	mov	DWORD PTR [ecx+16], edx
	mov	ecx, DWORD PTR $T645572[esp+24]
	mov	edx, DWORD PTR $T645572[esp+20]
	push	OFFSET ??_C@_06KLGMCFCD@?$FN?5LAT?$FL?$AA@
	push	ecx
	push	edx
	push	eax
	call	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN41@operator@425
	xor	ecx, ecx
	jmp	SHORT $LN42@operator@425
$LN41@operator@425:
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, eax
$LN42@operator@425:
	mov	edx, DWORD PTR [ecx+16]
	push	OFFSET ??_C@_01LBDDMOBJ@?$FN?$AA@
	push	ebp
	and	edx, -3073				; fffff3ffH
	push	ebx
	or	edx, 512				; 00000200H
	push	eax
	mov	DWORD PTR [ecx+16], edx
	call	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	pop	esi
	pop	ebp
	pop	ebx

; 31   : }

	add	esp, 8
	ret	0
??6DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVEvent@0@@Z ENDP ; DRAMsimII::operator<<
END
