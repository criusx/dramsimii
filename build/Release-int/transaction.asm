; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\CriuS\Documents\Visual Studio 2008\Projects\DRAMsimIIhg\src\transaction.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R4Transaction@DRAMsimII@@6B@			; DRAMsimII::Transaction::`RTTI Complete Object Locator'
PUBLIC	??_R3Transaction@DRAMsimII@@8			; DRAMsimII::Transaction::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Transaction@DRAMsimII@@8			; DRAMsimII::Transaction::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Transaction@DRAMsimII@@8		; DRAMsimII::Transaction::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVTransaction@DRAMsimII@@@8		; DRAMsimII::Transaction `RTTI Type Descriptor'
PUBLIC	??0Event@DRAMsimII@@IAE@_JABVAddress@1@@Z	; DRAMsimII::Event::Event
PUBLIC	??0Event@DRAMsimII@@IAE@_J_K@Z			; DRAMsimII::Event::Event
PUBLIC	??_GTransaction@DRAMsimII@@UAEPAXI@Z		; DRAMsimII::Transaction::`scalar deleting destructor'
PUBLIC	?acquireItem@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEPAVTransaction@2@XZ ; DRAMsimII::Queue<DRAMsimII::Transaction>::acquireItem
PUBLIC	?releaseItem@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEXPAVTransaction@2@@Z ; DRAMsimII::Queue<DRAMsimII::Transaction>::releaseItem
PUBLIC	??_C@_07BIDJMLMK@FETCH?5?5?$AA@			; `string'
PUBLIC	??_C@_07JFLDNKDF@WRITE?5?5?$AA@			; `string'
PUBLIC	??_C@_07PPGBGEMP@READ?5?5?5?$AA@		; `string'
PUBLIC	??_C@_07KBGMBHDJ@PREFET?5?$AA@			; `string'
PUBLIC	??_C@_07DCIKKDLP@REFRSH?5?$AA@			; `string'
PUBLIC	??_C@_07IPEEPAPJ@BNKREF?5?$AA@			; `string'
PUBLIC	??_C@_07HCAKHAFC@AUTOPR?5?$AA@			; `string'
PUBLIC	??_C@_07DLOLPJPE@CTRL?5?5?5?$AA@		; `string'
PUBLIC	??_C@_07KKIBHHCI@UNKWN?5?5?$AA@			; `string'
PUBLIC	??_7Transaction@DRAMsimII@@6B@			; DRAMsimII::Transaction::`vftable'
EXTRN	??_ETransaction@DRAMsimII@@UAEPAXI@Z:PROC	; DRAMsimII::Transaction::`vector deleting destructor'
;	COMDAT ??_7Transaction@DRAMsimII@@6B@
CONST	SEGMENT
??_7Transaction@DRAMsimII@@6B@ DD FLAT:??_R4Transaction@DRAMsimII@@6B@ ; DRAMsimII::Transaction::`vftable'
	DD	FLAT:??_ETransaction@DRAMsimII@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4Transaction@DRAMsimII@@6B@
rdata$r	SEGMENT
??_R4Transaction@DRAMsimII@@6B@ DD 00H			; DRAMsimII::Transaction::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTransaction@DRAMsimII@@@8
	DD	FLAT:??_R3Transaction@DRAMsimII@@8
rdata$r	ENDS
;	COMDAT ??_R3Transaction@DRAMsimII@@8
rdata$r	SEGMENT
??_R3Transaction@DRAMsimII@@8 DD 00H			; DRAMsimII::Transaction::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Transaction@DRAMsimII@@8
rdata$r	ENDS
;	COMDAT ??_R2Transaction@DRAMsimII@@8
rdata$r	SEGMENT
??_R2Transaction@DRAMsimII@@8 DD FLAT:??_R1A@?0A@EA@Transaction@DRAMsimII@@8 ; DRAMsimII::Transaction::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Event@DRAMsimII@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Transaction@DRAMsimII@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Transaction@DRAMsimII@@8 DD FLAT:??_R0?AVTransaction@DRAMsimII@@@8 ; DRAMsimII::Transaction::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Transaction@DRAMsimII@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTransaction@DRAMsimII@@@8
_DATA	SEGMENT
??_R0?AVTransaction@DRAMsimII@@@8 DD FLAT:??_7type_info@@6B@ ; DRAMsimII::Transaction `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTransaction@DRAMsimII@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_07KKIBHHCI@UNKWN?5?5?$AA@
CONST	SEGMENT
??_C@_07KKIBHHCI@UNKWN?5?5?$AA@ DB 'UNKWN  ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DLOLPJPE@CTRL?5?5?5?$AA@
CONST	SEGMENT
??_C@_07DLOLPJPE@CTRL?5?5?5?$AA@ DB 'CTRL   ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HCAKHAFC@AUTOPR?5?$AA@
CONST	SEGMENT
??_C@_07HCAKHAFC@AUTOPR?5?$AA@ DB 'AUTOPR ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07IPEEPAPJ@BNKREF?5?$AA@
CONST	SEGMENT
??_C@_07IPEEPAPJ@BNKREF?5?$AA@ DB 'BNKREF ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCIKKDLP@REFRSH?5?$AA@
CONST	SEGMENT
??_C@_07DCIKKDLP@REFRSH?5?$AA@ DB 'REFRSH ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KBGMBHDJ@PREFET?5?$AA@
CONST	SEGMENT
??_C@_07KBGMBHDJ@PREFET?5?$AA@ DB 'PREFET ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PPGBGEMP@READ?5?5?5?$AA@
CONST	SEGMENT
??_C@_07PPGBGEMP@READ?5?5?5?$AA@ DB 'READ   ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07JFLDNKDF@WRITE?5?5?$AA@
CONST	SEGMENT
??_C@_07JFLDNKDF@WRITE?5?5?$AA@ DB 'WRITE  ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BIDJMLMK@FETCH?5?5?$AA@
CONST	SEGMENT
??_C@_07BIDJMLMK@FETCH?5?5?$AA@ DB 'FETCH  ', 00H	; `string'
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
; Function compile flags: /Ogtpy
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\event.h
;	COMDAT ??0Event@DRAMsimII@@IAE@_JABVAddress@1@@Z
_TEXT	SEGMENT
_arrTime$ = 8						; size = 8
??0Event@DRAMsimII@@IAE@_JABVAddress@1@@Z PROC		; DRAMsimII::Event::Event, COMDAT
; _this$ = eax
; _add$ = ecx

; 62   : 		{}

	mov	edx, DWORD PTR _arrTime$[esp-4]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR _arrTime$[esp]
	mov	DWORD PTR [eax+12], edx
	xor	edx, edx
	mov	DWORD PTR [eax], OFFSET ??_7Event@DRAMsimII@@6B@
	mov	DWORD PTR [eax+16], edx
	mov	DWORD PTR [eax+20], edx
	mov	DWORD PTR [eax+24], edx
	mov	DWORD PTR [eax+28], edx
	mov	DWORD PTR [eax+32], edx
	mov	DWORD PTR [eax+36], edx
	movq	xmm0, QWORD PTR [ecx]
	movq	QWORD PTR [eax+40], xmm0
	movq	xmm0, QWORD PTR [ecx+8]
	movq	QWORD PTR [eax+48], xmm0
	movq	xmm0, QWORD PTR [ecx+16]
	movq	QWORD PTR [eax+56], xmm0
	movq	xmm0, QWORD PTR [ecx+24]
	movq	QWORD PTR [eax+64], xmm0
	movq	xmm0, QWORD PTR [ecx+32]
	movq	QWORD PTR [eax+72], xmm0
	ret	8
??0Event@DRAMsimII@@IAE@_JABVAddress@1@@Z ENDP		; DRAMsimII::Event::Event
PUBLIC	??0Transaction@DRAMsimII@@QAE@ABV01@@Z		; DRAMsimII::Transaction::Transaction
; Function compile flags: /Ogtpy
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\transaction.cpp
_TEXT	SEGMENT
??0Transaction@DRAMsimII@@QAE@ABV01@@Z PROC		; DRAMsimII::Transaction::Transaction
; _this$ = esi
; _rhs$ = edi

; 80   : {}

	mov	ecx, edi
	mov	eax, esi
	call	??0Event@DRAMsimII@@IAE@ABV01@@Z	; DRAMsimII::Event::Event
	mov	DWORD PTR [esi], OFFSET ??_7Transaction@DRAMsimII@@6B@
	mov	eax, DWORD PTR [edi+80]
	mov	DWORD PTR [esi+80], eax
	mov	ecx, DWORD PTR [edi+84]
	mov	DWORD PTR [esi+84], ecx
	mov	edx, DWORD PTR [edi+88]
	mov	DWORD PTR [esi+88], edx
	mov	eax, DWORD PTR [edi+92]
	mov	DWORD PTR [esi+92], eax
	mov	ecx, DWORD PTR [edi+96]
	mov	DWORD PTR [esi+96], ecx
	mov	edx, DWORD PTR [edi+100]
	mov	DWORD PTR [esi+100], edx
	mov	eax, DWORD PTR [edi+104]
	mov	DWORD PTR [esi+104], eax
	mov	ecx, DWORD PTR [edi+108]
	mov	DWORD PTR [esi+108], ecx
	mov	eax, esi
	ret	0
??0Transaction@DRAMsimII@@QAE@ABV01@@Z ENDP		; DRAMsimII::Transaction::Transaction
_TEXT	ENDS
PUBLIC	??0Transaction@DRAMsimII@@QAE@W4TransactionType@01@_JIABVAddress@1@I@Z ; DRAMsimII::Transaction::Transaction
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_transType$ = 8						; size = 4
_arrivalTime$ = 12					; size = 8
_burstLength$ = 20					; size = 4
_originalTrans$ = 24					; size = 4
??0Transaction@DRAMsimII@@QAE@W4TransactionType@01@_JIABVAddress@1@I@Z PROC ; DRAMsimII::Transaction::Transaction
; _this$ = eax
; _address$ = edx

; 67   : {}

	mov	ecx, DWORD PTR _arrivalTime$[esp-4]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _arrivalTime$[esp]
	mov	DWORD PTR [eax+12], ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], OFFSET ??_7Event@DRAMsimII@@6B@
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], ecx
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [eax+36], ecx
	movq	xmm0, QWORD PTR [edx]
	movq	QWORD PTR [eax+40], xmm0
	movq	xmm0, QWORD PTR [edx+8]
	movq	QWORD PTR [eax+48], xmm0
	movq	xmm0, QWORD PTR [edx+16]
	movq	QWORD PTR [eax+56], xmm0
	movq	xmm0, QWORD PTR [edx+24]
	movq	QWORD PTR [eax+64], xmm0
	movq	xmm0, QWORD PTR [edx+32]
	mov	edx, DWORD PTR _transType$[esp-4]
	mov	DWORD PTR [eax+80], edx
	mov	edx, DWORD PTR _burstLength$[esp-4]
	mov	DWORD PTR [eax+88], ecx
	mov	DWORD PTR [eax+92], ecx
	mov	DWORD PTR [eax+96], ecx
	mov	DWORD PTR [eax+100], ecx
	mov	DWORD PTR [eax+104], ecx
	mov	ecx, DWORD PTR _originalTrans$[esp-4]
	movq	QWORD PTR [eax+72], xmm0
	mov	DWORD PTR [eax], OFFSET ??_7Transaction@DRAMsimII@@6B@
	mov	DWORD PTR [eax+84], edx
	mov	DWORD PTR [eax+108], ecx
	ret	20					; 00000014H
??0Transaction@DRAMsimII@@QAE@W4TransactionType@01@_JIABVAddress@1@I@Z ENDP ; DRAMsimII::Transaction::Transaction
_TEXT	ENDS
PUBLIC	??0Transaction@DRAMsimII@@QAE@W4TransactionType@01@_JIABVAddress@1@_KHI@Z ; DRAMsimII::Transaction::Transaction
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_transType$ = 8						; size = 4
_arrivalTime$ = 12					; size = 8
_burstLength$ = 20					; size = 4
_originalTrans$ = 24					; size = 4
??0Transaction@DRAMsimII@@QAE@W4TransactionType@01@_JIABVAddress@1@_KHI@Z PROC ; DRAMsimII::Transaction::Transaction
; _this$ = eax
; _address$ = edx

; 54   : {}

	mov	ecx, DWORD PTR _arrivalTime$[esp-4]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _arrivalTime$[esp]
	mov	DWORD PTR [eax+12], ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], OFFSET ??_7Event@DRAMsimII@@6B@
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], ecx
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [eax+36], ecx
	movq	xmm0, QWORD PTR [edx]
	movq	QWORD PTR [eax+40], xmm0
	movq	xmm0, QWORD PTR [edx+8]
	movq	QWORD PTR [eax+48], xmm0
	movq	xmm0, QWORD PTR [edx+16]
	movq	QWORD PTR [eax+56], xmm0
	movq	xmm0, QWORD PTR [edx+24]
	movq	QWORD PTR [eax+64], xmm0
	movq	xmm0, QWORD PTR [edx+32]
	mov	edx, DWORD PTR _transType$[esp-4]
	mov	DWORD PTR [eax+80], edx
	mov	edx, DWORD PTR _burstLength$[esp-4]
	mov	DWORD PTR [eax+88], ecx
	mov	DWORD PTR [eax+92], ecx
	mov	DWORD PTR [eax+96], ecx
	mov	DWORD PTR [eax+100], ecx
	mov	DWORD PTR [eax+104], ecx
	mov	ecx, DWORD PTR _originalTrans$[esp-4]
	movq	QWORD PTR [eax+72], xmm0
	mov	DWORD PTR [eax], OFFSET ??_7Transaction@DRAMsimII@@6B@
	mov	DWORD PTR [eax+84], edx
	mov	DWORD PTR [eax+108], ecx
	ret	20					; 00000014H
??0Transaction@DRAMsimII@@QAE@W4TransactionType@01@_JIABVAddress@1@_KHI@Z ENDP ; DRAMsimII::Transaction::Transaction
PUBLIC	??8Transaction@DRAMsimII@@QBE_NABV01@@Z		; DRAMsimII::Transaction::operator==
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
??8Transaction@DRAMsimII@@QBE_NABV01@@Z PROC		; DRAMsimII::Transaction::operator==
; _this$ = edi
; _rhs$ = esi

; 121  : 	return (type == rhs.type && length == rhs.length &&
; 122  : 		decodeTime == rhs.decodeTime && this->Event::operator==(rhs) && originalTransaction == rhs.originalTransaction);

	mov	eax, DWORD PTR [edi+80]
	cmp	eax, DWORD PTR [esi+80]
	jne	SHORT $LN3@operator@152
	mov	ecx, DWORD PTR [edi+84]
	cmp	ecx, DWORD PTR [esi+84]
	jne	SHORT $LN3@operator@152
	mov	edx, DWORD PTR [edi+88]
	cmp	edx, DWORD PTR [esi+88]
	jne	SHORT $LN3@operator@152
	mov	eax, DWORD PTR [edi+92]
	cmp	eax, DWORD PTR [esi+92]
	jne	SHORT $LN3@operator@152
	mov	eax, esi
	mov	ecx, edi
	call	??8Event@DRAMsimII@@QBE_NABV01@@Z	; DRAMsimII::Event::operator==
	test	al, al
	je	SHORT $LN3@operator@152
	mov	ecx, DWORD PTR [edi+108]
	cmp	ecx, DWORD PTR [esi+108]
	jne	SHORT $LN3@operator@152
	mov	eax, 1

; 123  : }

	ret	0
$LN3@operator@152:

; 121  : 	return (type == rhs.type && length == rhs.length &&
; 122  : 		decodeTime == rhs.decodeTime && this->Event::operator==(rhs) && originalTransaction == rhs.originalTransaction);

	xor	eax, eax

; 123  : }

	ret	0
??8Transaction@DRAMsimII@@QBE_NABV01@@Z ENDP		; DRAMsimII::Transaction::operator==
PUBLIC	??9Transaction@DRAMsimII@@QBE_NABV01@@Z		; DRAMsimII::Transaction::operator!=
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
??9Transaction@DRAMsimII@@QBE_NABV01@@Z PROC		; DRAMsimII::Transaction::operator!=
; _this$ = edi
; _rhs$ = esi

; 130  : 	return !(*this == rhs);

	mov	eax, DWORD PTR [edi+80]
	cmp	eax, DWORD PTR [esi+80]
	jne	SHORT $LN5@operator@298
	mov	ecx, DWORD PTR [edi+84]
	cmp	ecx, DWORD PTR [esi+84]
	jne	SHORT $LN5@operator@298
	mov	edx, DWORD PTR [edi+88]
	cmp	edx, DWORD PTR [esi+88]
	jne	SHORT $LN5@operator@298
	mov	eax, DWORD PTR [edi+92]
	cmp	eax, DWORD PTR [esi+92]
	jne	SHORT $LN5@operator@298
	mov	eax, esi
	mov	ecx, edi
	call	??8Event@DRAMsimII@@QBE_NABV01@@Z	; DRAMsimII::Event::operator==
	test	al, al
	je	SHORT $LN5@operator@298
	mov	ecx, DWORD PTR [edi+108]
	cmp	ecx, DWORD PTR [esi+108]
	jne	SHORT $LN5@operator@298
	mov	eax, 1
	xor	edx, edx
	test	al, al
	sete	dl
	mov	al, dl

; 131  : }

	ret	0

; 130  : 	return !(*this == rhs);

$LN5@operator@298:
	xor	eax, eax
	xor	edx, edx
	test	al, al
	sete	dl
	mov	al, dl

; 131  : }

	ret	0
??9Transaction@DRAMsimII@@QBE_NABV01@@Z ENDP		; DRAMsimII::Transaction::operator!=
PUBLIC	??6DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@W4TransactionType@Transaction@0@@Z ; DRAMsimII::operator<<
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
??6DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@W4TransactionType@Transaction@0@@Z PROC ; DRAMsimII::operator<<
; _os$ = esi
; _type$ = eax

; 146  : 	switch (type)

	cmp	eax, 7
	ja	$LN1@operator@407
	jmp	DWORD PTR $LN15@operator@407[eax*4]
$LN9@operator@407:

; 147  : 	{
; 148  : 	case Transaction::IFETCH_TRANSACTION:
; 149  : 		os << "FETCH  ";

	push	OFFSET ??_C@_07BIDJMLMK@FETCH?5?5?$AA@

; 171  : 		break;
; 172  : 	default:
; 173  : 		os << "UNKWN  ";

	push	esi
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 174  : 		break;
; 175  : 	}
; 176  : 	return os;

	mov	eax, esi

; 177  : }

	ret	0
$LN8@operator@407:

; 150  : 		break;
; 151  : 	case Transaction::WRITE_TRANSACTION:
; 152  : 		os << "WRITE  ";

	push	OFFSET ??_C@_07JFLDNKDF@WRITE?5?5?$AA@

; 171  : 		break;
; 172  : 	default:
; 173  : 		os << "UNKWN  ";

	push	esi
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 174  : 		break;
; 175  : 	}
; 176  : 	return os;

	mov	eax, esi

; 177  : }

	ret	0
$LN7@operator@407:

; 153  : 		break;
; 154  : 	case Transaction::READ_TRANSACTION:
; 155  : 		os << "READ   ";

	push	OFFSET ??_C@_07PPGBGEMP@READ?5?5?5?$AA@

; 171  : 		break;
; 172  : 	default:
; 173  : 		os << "UNKWN  ";

	push	esi
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 174  : 		break;
; 175  : 	}
; 176  : 	return os;

	mov	eax, esi

; 177  : }

	ret	0
$LN6@operator@407:

; 156  : 		break;
; 157  : 	case Transaction::PREFETCH_TRANSACTION:
; 158  : 		os << "PREFET ";

	push	OFFSET ??_C@_07KBGMBHDJ@PREFET?5?$AA@

; 171  : 		break;
; 172  : 	default:
; 173  : 		os << "UNKWN  ";

	push	esi
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 174  : 		break;
; 175  : 	}
; 176  : 	return os;

	mov	eax, esi

; 177  : }

	ret	0
$LN5@operator@407:

; 159  : 		break;
; 160  : 	case Transaction::AUTO_REFRESH_TRANSACTION:
; 161  : 		os << "REFRSH ";

	push	OFFSET ??_C@_07DCIKKDLP@REFRSH?5?$AA@

; 171  : 		break;
; 172  : 	default:
; 173  : 		os << "UNKWN  ";

	push	esi
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 174  : 		break;
; 175  : 	}
; 176  : 	return os;

	mov	eax, esi

; 177  : }

	ret	0
$LN4@operator@407:

; 162  : 		break;
; 163  : 	case Transaction::PER_BANK_REFRESH_TRANSACTION:
; 164  : 		os << "BNKREF ";

	push	OFFSET ??_C@_07IPEEPAPJ@BNKREF?5?$AA@

; 171  : 		break;
; 172  : 	default:
; 173  : 		os << "UNKWN  ";

	push	esi
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 174  : 		break;
; 175  : 	}
; 176  : 	return os;

	mov	eax, esi

; 177  : }

	ret	0
$LN3@operator@407:

; 165  : 		break;
; 166  : 	case Transaction::AUTO_PRECHARGE_TRANSACTION:
; 167  : 		os << "AUTOPR ";

	push	OFFSET ??_C@_07HCAKHAFC@AUTOPR?5?$AA@

; 171  : 		break;
; 172  : 	default:
; 173  : 		os << "UNKWN  ";

	push	esi
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 174  : 		break;
; 175  : 	}
; 176  : 	return os;

	mov	eax, esi

; 177  : }

	ret	0
$LN2@operator@407:

; 168  : 		break;
; 169  : 	case Transaction::CONTROL_TRANSACTION:
; 170  : 		os << "CTRL   ";

	push	OFFSET ??_C@_07DLOLPJPE@CTRL?5?5?5?$AA@

; 171  : 		break;
; 172  : 	default:
; 173  : 		os << "UNKWN  ";

	push	esi
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 174  : 		break;
; 175  : 	}
; 176  : 	return os;

	mov	eax, esi

; 177  : }

	ret	0
$LN1@operator@407:

; 171  : 		break;
; 172  : 	default:
; 173  : 		os << "UNKWN  ";

	push	OFFSET ??_C@_07KKIBHHCI@UNKWN?5?5?$AA@
	push	esi
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 174  : 		break;
; 175  : 	}
; 176  : 	return os;

	mov	eax, esi

; 177  : }

	ret	0
	npad	3
$LN15@operator@407:
	DD	$LN9@operator@407
	DD	$LN8@operator@407
	DD	$LN7@operator@407
	DD	$LN6@operator@407
	DD	$LN5@operator@407
	DD	$LN4@operator@407
	DD	$LN3@operator@407
	DD	$LN2@operator@407
??6DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@W4TransactionType@Transaction@0@@Z ENDP ; DRAMsimII::operator<<
; Function compile flags: /Ogtpy
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\event.h
_TEXT	ENDS
;	COMDAT ??0Event@DRAMsimII@@IAE@_J_K@Z
_TEXT	SEGMENT
_arrTime$ = 8						; size = 8
_add$ = 16						; size = 8
??0Event@DRAMsimII@@IAE@_J_K@Z PROC			; DRAMsimII::Event::Event, COMDAT
; _this$ = esi

; 70   : 		{}

	mov	eax, DWORD PTR _arrTime$[esp-4]
	mov	ecx, DWORD PTR _arrTime$[esp]
	mov	edx, DWORD PTR _add$[esp-4]
	mov	DWORD PTR [esi+8], eax
	xor	eax, eax
	mov	DWORD PTR [esi+12], ecx
	mov	ecx, DWORD PTR _add$[esp]
	mov	DWORD PTR [esi], OFFSET ??_7Event@DRAMsimII@@6B@
	mov	DWORD PTR [esi+16], eax
	mov	DWORD PTR [esi+20], eax
	mov	DWORD PTR [esi+24], eax
	mov	DWORD PTR [esi+28], eax
	mov	DWORD PTR [esi+32], eax
	mov	DWORD PTR [esi+36], eax
	push	edi
	lea	edi, DWORD PTR [esi+40]
	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+8], edx
	mov	DWORD PTR [edi+12], ecx
	mov	DWORD PTR [edi+16], eax
	mov	DWORD PTR [edi+20], eax
	mov	DWORD PTR [edi+24], eax
	mov	DWORD PTR [edi+28], eax
	mov	DWORD PTR [edi+32], eax
	call	?addressTranslation@Address@DRAMsimII@@IAE_NXZ ; DRAMsimII::Address::addressTranslation
	mov	eax, esi
	pop	edi
	ret	16					; 00000010H
??0Event@DRAMsimII@@IAE@_J_K@Z ENDP			; DRAMsimII::Event::Event
; Function compile flags: /Ogtpy
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\queue.h
;	COMDAT ?releaseItem@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEXPAVTransaction@2@@Z
_TEXT	SEGMENT
_item$ = 8						; size = 4
?releaseItem@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEXPAVTransaction@2@@Z PROC ; DRAMsimII::Queue<DRAMsimII::Transaction>::releaseItem, COMDAT

; 266  : 		{

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	ecx
	push	ebx
	push	esi

; 267  : 			assert(pool);
; 268  : 			//#pragma omp critical
; 269  : 			{
; 270  : 
; 271  : #if 1
; 272  : 				// look around to see if this was already in there, slows things down a lot, so use only when this might be a problem
; 273  : 				for (typename std::vector<T *>::iterator i = entry.begin(); i != entry.end(); i++)

	mov	esi, DWORD PTR ?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A+24
	push	edi
	cmp	esi, DWORD PTR ?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A+28
	jbe	SHORT $LN14@releaseIte
	call	__invalid_parameter_noinfo
$LN14@releaseIte:
	mov	ebx, DWORD PTR ?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A+12
	npad	13
$LL31@releaseIte:
	mov	edi, DWORD PTR ?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A+28
	cmp	DWORD PTR ?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A+24, edi
	jbe	SHORT $LN46@releaseIte
	call	__invalid_parameter_noinfo
$LN46@releaseIte:
	test	ebx, ebx
	je	SHORT $LN59@releaseIte
	cmp	ebx, DWORD PTR ?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A+12
	je	SHORT $LN60@releaseIte
$LN59@releaseIte:
	call	__invalid_parameter_noinfo
$LN60@releaseIte:
	cmp	esi, edi
	je	SHORT $LN2@releaseIte
	test	ebx, ebx
	jne	SHORT $LN68@releaseIte
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN38@releaseIte:
	cmp	esi, DWORD PTR [eax+16]
	jb	SHORT $LN29@releaseIte
	call	__invalid_parameter_noinfo
$LN29@releaseIte:
	add	esi, 4
	jmp	SHORT $LL31@releaseIte
$LN68@releaseIte:
	mov	eax, DWORD PTR [ebx]
	jmp	SHORT $LN38@releaseIte
$LN2@releaseIte:

; 274  : 				{
; 275  : 					assert(item != *i);
; 276  : 				}
; 277  : #endif
; 278  : 				assert(pool);
; 279  : 				if (!push(item))

	mov	esi, DWORD PTR _item$[ebp]
	push	esi
	mov	eax, OFFSET ?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A ; DRAMsimII::Transaction::freeTransactionPool
	call	?push@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAE_NPAVTransaction@2@@Z ; DRAMsimII::Queue<DRAMsimII::Transaction>::push
	test	al, al
	jne	SHORT $LN1@releaseIte

; 280  : 				{
; 281  : 					::delete item;

	test	esi, esi
	je	SHORT $LN7@releaseIte
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	0
	mov	ecx, esi
	call	edx
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 282  : 					item = NULL;
; 283  : 				}
; 284  : 			}
; 285  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN7@releaseIte:

; 280  : 				{
; 281  : 					::delete item;

	xor	eax, eax
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@releaseIte:

; 282  : 					item = NULL;
; 283  : 				}
; 284  : 			}
; 285  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?releaseItem@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEXPAVTransaction@2@@Z ENDP ; DRAMsimII::Queue<DRAMsimII::Transaction>::releaseItem
_TEXT	ENDS
PUBLIC	??6DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVTransaction@0@@Z ; DRAMsimII::operator<<
; Function compile flags: /Ogtpy
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\transaction.cpp
_TEXT	SEGMENT
??6DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVTransaction@0@@Z PROC ; DRAMsimII::operator<<
; _os$ = esi
; _thisTransaction$ = eax

; 137  : {	

	push	edi
	mov	edi, eax

; 138  : 	return os << thisTransaction.getType() << ((Event&)thisTransaction);

	mov	eax, DWORD PTR [edi+80]
	call	??6DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@W4TransactionType@Transaction@0@@Z ; DRAMsimII::operator<<
	push	eax
	call	??6DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVEvent@0@@Z ; DRAMsimII::operator<<
	add	esp, 4
	pop	edi

; 139  : }

	ret	0
??6DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVTransaction@0@@Z ENDP ; DRAMsimII::operator<<
_TEXT	ENDS
PUBLIC	??3Transaction@DRAMsimII@@SAXPAX@Z		; DRAMsimII::Transaction::operator delete
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
??3Transaction@DRAMsimII@@SAXPAX@Z PROC			; DRAMsimII::Transaction::operator delete
; _mem$ = esi

; 111  : 	Transaction *trans = static_cast<Transaction*>(mem);
; 112  : 	trans->~Transaction();

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	0
	mov	ecx, esi
	call	edx

; 113  : 	freeTransactionPool.releaseItem(trans);

	push	esi
	call	?releaseItem@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEXPAVTransaction@2@@Z ; DRAMsimII::Queue<DRAMsimII::Transaction>::releaseItem

; 114  : }

	ret	0
??3Transaction@DRAMsimII@@SAXPAX@Z ENDP			; DRAMsimII::Transaction::operator delete
_TEXT	ENDS
PUBLIC	??0Transaction@DRAMsimII@@QAE@W4TransactionType@01@_JI_K_KHI@Z ; DRAMsimII::Transaction::Transaction
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_transType$ = 8						; size = 4
_arrivalTime$ = 12					; size = 8
_physicalAddress$ = 20					; size = 8
_programCounter$ = 28					; size = 8
_threadNumber$ = 36					; size = 4
_originalTrans$ = 40					; size = 4
??0Transaction@DRAMsimII@@QAE@W4TransactionType@01@_JI_K_KHI@Z PROC ; DRAMsimII::Transaction::Transaction
; _this$ = eax

; 93   : {}

	push	ecx
	mov	ecx, DWORD PTR _physicalAddress$[esp]
	mov	edx, DWORD PTR _arrivalTime$[esp+4]
	push	esi
	mov	esi, eax
	mov	eax, DWORD PTR _physicalAddress$[esp+8]
	push	eax
	mov	eax, DWORD PTR _arrivalTime$[esp+8]
	push	ecx
	push	edx
	push	eax
	call	??0Event@DRAMsimII@@IAE@_J_K@Z		; DRAMsimII::Event::Event
	mov	ecx, DWORD PTR _transType$[esp+4]
	mov	edx, DWORD PTR _programCounter$[esp+4]
	xor	eax, eax
	mov	DWORD PTR [esi+88], eax
	mov	DWORD PTR [esi+92], eax
	mov	eax, DWORD PTR _programCounter$[esp+8]
	mov	DWORD PTR [esi+80], ecx
	mov	ecx, DWORD PTR _threadNumber$[esp+4]
	mov	DWORD PTR [esi+96], edx
	mov	edx, DWORD PTR _originalTrans$[esp+4]
	mov	DWORD PTR [esi+100], eax
	mov	DWORD PTR [esi], OFFSET ??_7Transaction@DRAMsimII@@6B@
	mov	DWORD PTR [esi+84], 8
	mov	DWORD PTR [esi+104], ecx
	mov	DWORD PTR [esi+108], edx
	mov	eax, esi
	pop	esi
	pop	ecx
	ret	36					; 00000024H
??0Transaction@DRAMsimII@@QAE@W4TransactionType@01@_JI_K_KHI@Z ENDP ; DRAMsimII::Transaction::Transaction
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GTransaction@DRAMsimII@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GTransaction@DRAMsimII@@UAEPAXI@Z PROC		; DRAMsimII::Transaction::`scalar deleting destructor', COMDAT
; _this$ = ecx
	test	BYTE PTR ___flags$[esp-4], 1
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7Event@DRAMsimII@@6B@
	je	SHORT $LN10@scalar@103
	push	0
	call	DWORD PTR ??_7Event@DRAMsimII@@6B@
	push	esi
	call	?releaseItem@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEXPAVTransaction@2@@Z ; DRAMsimII::Queue<DRAMsimII::Transaction>::releaseItem
$LN10@scalar@103:
	mov	eax, esi
	pop	esi
	ret	4
??_GTransaction@DRAMsimII@@UAEPAXI@Z ENDP		; DRAMsimII::Transaction::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0Transaction@DRAMsimII@@QAE@XZ		; DRAMsimII::Transaction::Transaction
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
??0Transaction@DRAMsimII@@QAE@XZ PROC			; DRAMsimII::Transaction::Transaction
; _this$ = eax

; 41   : {}

	push	esi
	mov	esi, eax
	call	??0Event@DRAMsimII@@IAE@XZ		; DRAMsimII::Event::Event
	xor	eax, eax
	mov	DWORD PTR [esi+84], eax
	mov	DWORD PTR [esi+88], eax
	mov	DWORD PTR [esi+92], eax
	mov	DWORD PTR [esi+96], eax
	mov	DWORD PTR [esi+100], eax
	mov	DWORD PTR [esi+104], eax
	mov	DWORD PTR [esi], OFFSET ??_7Transaction@DRAMsimII@@6B@
	mov	DWORD PTR [esi+80], 7
	mov	DWORD PTR [esi+108], -1
	mov	eax, esi
	pop	esi
	ret	0
??0Transaction@DRAMsimII@@QAE@XZ ENDP			; DRAMsimII::Transaction::Transaction
;	COMDAT xdata$x
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\address.cpp
xdata$x	SEGMENT
__unwindtable$?acquireItem@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEPAVTransaction@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?acquireItem@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEPAVTransaction@2@XZ$0
__ehfuncinfo$?acquireItem@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEPAVTransaction@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?acquireItem@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEPAVTransaction@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\queue.h
xdata$x	ENDS
;	COMDAT ?acquireItem@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEPAVTransaction@2@XZ
_TEXT	SEGMENT
$T667912 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?acquireItem@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEPAVTransaction@2@XZ PROC ; DRAMsimII::Queue<DRAMsimII::Transaction>::acquireItem, COMDAT

; 291  : 		{

	push	-1
	push	__ehhandler$?acquireItem@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEPAVTransaction@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[esp+28]
	mov	DWORD PTR fs:0, eax

; 292  : 			assert(pool);
; 293  : 			T* newItem;
; 294  : 			//#pragma omp critical
; 295  : 			{
; 296  : 				if (count == 0)

	xor	edi, edi
	cmp	DWORD PTR ?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A, edi
	jne	SHORT $LN2@acquireIte@2

; 297  : 				{
; 298  : 					newItem = ::new T;

	push	112					; 00000070H
	call	??2@YAPAXI@Z				; operator new
	mov	esi, eax
	add	esp, 4
	mov	DWORD PTR $T667912[esp+28], esi
	mov	DWORD PTR __$EHRec$[esp+36], edi
	cmp	esi, edi
	je	SHORT $LN5@acquireIte@2
	call	??0Event@DRAMsimII@@IAE@XZ		; DRAMsimII::Event::Event
	mov	DWORD PTR [esi], OFFSET ??_7Transaction@DRAMsimII@@6B@
	mov	DWORD PTR [esi+80], 7
	mov	DWORD PTR [esi+84], edi
	mov	DWORD PTR [esi+88], edi
	mov	DWORD PTR [esi+92], edi
	mov	DWORD PTR [esi+96], edi
	mov	DWORD PTR [esi+100], edi
	mov	DWORD PTR [esi+104], edi
	mov	DWORD PTR [esi+108], -1
	mov	eax, esi

; 303  : 			}
; 304  : 			return newItem;
; 305  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	ret	0
$LN5@acquireIte@2:

; 297  : 				{
; 298  : 					newItem = ::new T;

	xor	eax, eax

; 303  : 			}
; 304  : 			return newItem;
; 305  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	ret	0
$LN2@acquireIte@2:

; 299  : 					assert(newItem != NULL);
; 300  : 				}
; 301  : 				else
; 302  : 					newItem = pop();

	mov	esi, OFFSET ?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A ; DRAMsimII::Transaction::freeTransactionPool
	call	?pop@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEPAVTransaction@2@XZ ; DRAMsimII::Queue<DRAMsimII::Transaction>::pop

; 303  : 			}
; 304  : 			return newItem;
; 305  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?acquireItem@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEPAVTransaction@2@XZ$0:
	mov	eax, DWORD PTR $T667912[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?acquireItem@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEPAVTransaction@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx-12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?acquireItem@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEPAVTransaction@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?acquireItem@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEPAVTransaction@2@XZ ENDP ; DRAMsimII::Queue<DRAMsimII::Transaction>::acquireItem
PUBLIC	??2Transaction@DRAMsimII@@SAPAXI@Z		; DRAMsimII::Transaction::operator new
; Function compile flags: /Ogtpy
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\transaction.cpp
_TEXT	SEGMENT
??2Transaction@DRAMsimII@@SAPAXI@Z PROC			; DRAMsimII::Transaction::operator new

; 100  : {

	push	ecx

; 101  : 	assert(size == sizeof(Transaction));
; 102  : 	return freeTransactionPool.acquireItem();

	call	?acquireItem@?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAEPAVTransaction@2@XZ ; DRAMsimII::Queue<DRAMsimII::Transaction>::acquireItem
	pop	ecx

; 103  : }

	ret	0
??2Transaction@DRAMsimII@@SAPAXI@Z ENDP			; DRAMsimII::Transaction::operator new
; Function compile flags: /Ogtpy
;	COMDAT ??__E?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A@@YAXXZ
text$yc	SEGMENT
??__E?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A@@YAXXZ PROC ; `dynamic initializer for 'DRAMsimII::Transaction::freeTransactionPool'', COMDAT

; 28   : Queue<Transaction> Transaction::freeTransactionPool(12*POOL_SIZE,true);

	push	1
	push	OFFSET ?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A ; DRAMsimII::Transaction::freeTransactionPool
	mov	ecx, 768				; 00000300H
	call	??0?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAE@I_N@Z ; DRAMsimII::Queue<DRAMsimII::Transaction>::Queue<DRAMsimII::Transaction>
	push	OFFSET ??__F?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A@@YAXXZ ; `dynamic atexit destructor for 'DRAMsimII::Transaction::freeTransactionPool''
	call	_atexit
	pop	ecx
	ret	0
??__E?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A@@YAXXZ ENDP ; `dynamic initializer for 'DRAMsimII::Transaction::freeTransactionPool''
; Function compile flags: /Ogtpy
;	COMDAT ??__F?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A@@YAXXZ
text$yd	SEGMENT
??__F?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'DRAMsimII::Transaction::freeTransactionPool'', COMDAT
	push	OFFSET ?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A ; DRAMsimII::Transaction::freeTransactionPool
	call	??1?$Queue@VTransaction@DRAMsimII@@@DRAMsimII@@QAE@XZ ; DRAMsimII::Queue<DRAMsimII::Transaction>::~Queue<DRAMsimII::Transaction>
	ret	0
??__F?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'DRAMsimII::Transaction::freeTransactionPool''
PUBLIC	?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A ; DRAMsimII::Transaction::freeTransactionPool
?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A DB 028H DUP (?) ; DRAMsimII::Transaction::freeTransactionPool
?freeTransactionPool$initializer$@Transaction@DRAMsimII@@1P6AXXZA DD FLAT:??__E?freeTransactionPool@Transaction@DRAMsimII@@1V?$Queue@VTransaction@DRAMsimII@@@2@A@@YAXXZ ; DRAMsimII::Transaction::freeTransactionPool$initializer$
END
