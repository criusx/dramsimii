; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\CriuS\Documents\Visual Studio 2008\Projects\DRAMsimIIhg\src\reporting\soapC.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
CONST	SEGMENT
_soap_codes_bool DD 00H
	DD	FLAT:??_C@_05LAPONLG@false?$AA@
	DD	01H
	DD	FLAT:??_C@_04LOAJBDKD@true?$AA@
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
PUBLIC	?soap_serialize_SOAP_ENV__Header@@YAXPAUsoap@@PBUSOAP_ENV__Header@@@Z ; soap_serialize_SOAP_ENV__Header
PUBLIC	_soap_serializeheader
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapc.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCcsu /ZI
rtc$IMZ	ENDS
;	COMDAT _soap_serializeheader
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_soap_serializeheader PROC				; COMDAT

; 16   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 17   : 	if (soap->header)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+12204], 0
	je	SHORT $LN2@soap_seria

; 18   : 		soap_serialize_SOAP_ENV__Header(soap, soap->header);

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12204]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_serialize_SOAP_ENV__Header@@YAXPAUsoap@@PBUSOAP_ENV__Header@@@Z ; soap_serialize_SOAP_ENV__Header
	add	esp, 8
$LN2@soap_seria:

; 19   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_soap_serializeheader ENDP
_TEXT	ENDS
PUBLIC	?soap_out_SOAP_ENV__Header@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Header@@1@Z ; soap_out_SOAP_ENV__Header
PUBLIC	??_C@_0BA@GBPDPHCK@SOAP?9ENV?3Header?$AA@	; `string'
PUBLIC	_soap_putheader
;	COMDAT ??_C@_0BA@GBPDPHCK@SOAP?9ENV?3Header?$AA@
CONST	SEGMENT
??_C@_0BA@GBPDPHCK@SOAP?9ENV?3Header?$AA@ DB 'SOAP-ENV:Header', 00H ; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT _soap_putheader
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_soap_putheader PROC					; COMDAT

; 22   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 23   : 	if (soap->header)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+12204], 0
	je	SHORT $LN2@soap_puthe

; 24   : 	{	soap->part = SOAP_IN_HEADER;

	mov	eax, 3
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	WORD PTR [ecx+87304], ax

; 25   : 		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))

	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12204]
	push	ecx
	push	0
	push	OFFSET ??_C@_0BA@GBPDPHCK@SOAP?9ENV?3Header?$AA@
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_out_SOAP_ENV__Header@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Header@@1@Z ; soap_out_SOAP_ENV__Header
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_puthe

; 26   : 			return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN3@soap_puthe
$LN1@soap_puthe:

; 27   : 		soap->part = SOAP_END_HEADER;

	mov	eax, 4
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	WORD PTR [ecx+87304], ax
$LN2@soap_puthe:

; 28   : 	}
; 29   : 	return SOAP_OK;

	xor	eax, eax
$LN3@soap_puthe:

; 30   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_soap_putheader ENDP
_TEXT	ENDS
PUBLIC	?soap_in_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@PBDPAU1@1@Z ; soap_in_SOAP_ENV__Header
PUBLIC	_soap_getheader
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT _soap_getheader
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_soap_getheader PROC					; COMDAT

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 34   : 	soap->part = SOAP_IN_HEADER;

	mov	eax, 3
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	WORD PTR [ecx+87304], ax

; 35   : 	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);

	push	0
	push	0
	push	OFFSET ??_C@_0BA@GBPDPHCK@SOAP?9ENV?3Header?$AA@
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@PBDPAU1@1@Z ; soap_in_SOAP_ENV__Header
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+12204], eax

; 36   : 	soap->part = SOAP_END_HEADER;

	mov	eax, 4
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	WORD PTR [ecx+87304], ax

; 37   : 	return soap->header == NULL;

	mov	eax, DWORD PTR _soap$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+12204], 0
	sete	cl
	mov	eax, ecx

; 38   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_soap_getheader ENDP
_TEXT	ENDS
PUBLIC	?soap_default_SOAP_ENV__Header@@YAXPAUsoap@@PAUSOAP_ENV__Header@@@Z ; soap_default_SOAP_ENV__Header
PUBLIC	?soap_new_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@H@Z ; soap_new_SOAP_ENV__Header
PUBLIC	_soap_header
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT _soap_header
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_soap_header PROC					; COMDAT

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 42   : 	if (!soap->header)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+12204], 0
	jne	SHORT $LN2@soap_heade

; 43   : 	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);

	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_new_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@H@Z ; soap_new_SOAP_ENV__Header
	add	esp, 8
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+12204], eax

; 44   : 		soap_default_SOAP_ENV__Header(soap, soap->header);

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12204]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_default_SOAP_ENV__Header@@YAXPAUsoap@@PAUSOAP_ENV__Header@@@Z ; soap_default_SOAP_ENV__Header
	add	esp, 8
$LN2@soap_heade:

; 45   : 	}
; 46   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_soap_header ENDP
_TEXT	ENDS
PUBLIC	?soap_default_SOAP_ENV__Reason@@YAXPAUsoap@@PAUSOAP_ENV__Reason@@@Z ; soap_default_SOAP_ENV__Reason
PUBLIC	?soap_new_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@H@Z ; soap_new_SOAP_ENV__Reason
PUBLIC	?soap_default_SOAP_ENV__Code@@YAXPAUsoap@@PAUSOAP_ENV__Code@@@Z ; soap_default_SOAP_ENV__Code
PUBLIC	?soap_new_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@H@Z ; soap_new_SOAP_ENV__Code
PUBLIC	?soap_default_SOAP_ENV__Fault@@YAXPAUsoap@@PAUSOAP_ENV__Fault@@@Z ; soap_default_SOAP_ENV__Fault
PUBLIC	?soap_new_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@H@Z ; soap_new_SOAP_ENV__Fault
PUBLIC	_soap_fault
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT _soap_fault
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_soap_fault PROC					; COMDAT

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 50   : 	if (!soap->fault)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+12208], 0
	jne	SHORT $LN4@soap_fault

; 51   : 	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);

	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_new_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@H@Z ; soap_new_SOAP_ENV__Fault
	add	esp, 8
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+12208], eax

; 52   : 		if (!soap->fault)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+12208], 0
	jne	SHORT $LN3@soap_fault

; 53   : 			return;

	jmp	$LN5@soap_fault
$LN3@soap_fault:

; 54   : 		soap_default_SOAP_ENV__Fault(soap, soap->fault);

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12208]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_default_SOAP_ENV__Fault@@YAXPAUsoap@@PAUSOAP_ENV__Fault@@@Z ; soap_default_SOAP_ENV__Fault
	add	esp, 8
$LN4@soap_fault:

; 55   : 	}
; 56   : 	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	ecx, 2
	jne	SHORT $LN2@soap_fault
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12208]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN2@soap_fault

; 57   : 	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);

	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_new_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@H@Z ; soap_new_SOAP_ENV__Code
	add	esp, 8
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	edx, DWORD PTR [ecx+12208]
	mov	DWORD PTR [edx+16], eax

; 58   : 		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12208]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_default_SOAP_ENV__Code@@YAXPAUsoap@@PAUSOAP_ENV__Code@@@Z ; soap_default_SOAP_ENV__Code
	add	esp, 8
$LN2@soap_fault:

; 59   : 	}
; 60   : 	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	ecx, 2
	jne	SHORT $LN5@soap_fault
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12208]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN5@soap_fault

; 61   : 	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);

	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_new_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@H@Z ; soap_new_SOAP_ENV__Reason
	add	esp, 8
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	edx, DWORD PTR [ecx+12208]
	mov	DWORD PTR [edx+20], eax

; 62   : 		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12208]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_default_SOAP_ENV__Reason@@YAXPAUsoap@@PAUSOAP_ENV__Reason@@@Z ; soap_default_SOAP_ENV__Reason
	add	esp, 8
$LN5@soap_fault:

; 63   : 	}
; 64   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_soap_fault ENDP
_TEXT	ENDS
PUBLIC	?soap_serialize_SOAP_ENV__Fault@@YAXPAUsoap@@PBUSOAP_ENV__Fault@@@Z ; soap_serialize_SOAP_ENV__Fault
PUBLIC	_soap_serializefault
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT _soap_serializefault
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_soap_serializefault PROC				; COMDAT

; 67   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 68   : 	soap_fault(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_fault
	add	esp, 4

; 69   : 	if (soap->fault)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+12208], 0
	je	SHORT $LN2@soap_seria@2

; 70   : 		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12208]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_serialize_SOAP_ENV__Fault@@YAXPAUsoap@@PBUSOAP_ENV__Fault@@@Z ; soap_serialize_SOAP_ENV__Fault
	add	esp, 8
$LN2@soap_seria@2:

; 71   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_soap_serializefault ENDP
_TEXT	ENDS
PUBLIC	?soap_put_SOAP_ENV__Fault@@YAHPAUsoap@@PBUSOAP_ENV__Fault@@PBD2@Z ; soap_put_SOAP_ENV__Fault
PUBLIC	??_C@_0P@GLDIJMBO@SOAP?9ENV?3Fault?$AA@		; `string'
PUBLIC	_soap_putfault
;	COMDAT ??_C@_0P@GLDIJMBO@SOAP?9ENV?3Fault?$AA@
CONST	SEGMENT
??_C@_0P@GLDIJMBO@SOAP?9ENV?3Fault?$AA@ DB 'SOAP-ENV:Fault', 00H ; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT _soap_putfault
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_soap_putfault PROC					; COMDAT

; 74   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 75   : 	if (soap->fault)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+12208], 0
	je	SHORT $LN1@soap_putfa

; 76   : 		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);

	push	0
	push	OFFSET ??_C@_0P@GLDIJMBO@SOAP?9ENV?3Fault?$AA@
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12208]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_put_SOAP_ENV__Fault@@YAHPAUsoap@@PBUSOAP_ENV__Fault@@PBD2@Z ; soap_put_SOAP_ENV__Fault
	add	esp, 16					; 00000010H
	jmp	SHORT $LN2@soap_putfa
$LN1@soap_putfa:

; 77   : 	return SOAP_OK;

	xor	eax, eax
$LN2@soap_putfa:

; 78   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_soap_putfault ENDP
_TEXT	ENDS
PUBLIC	?soap_get_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@PAU1@PBD2@Z ; soap_get_SOAP_ENV__Fault
PUBLIC	_soap_getfault
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT _soap_getfault
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_soap_getfault PROC					; COMDAT

; 81   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 82   : 	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;

	push	0
	push	OFFSET ??_C@_0P@GLDIJMBO@SOAP?9ENV?3Fault?$AA@
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_get_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@PAU1@PBD2@Z ; soap_get_SOAP_ENV__Fault
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+12208], eax
	mov	edx, DWORD PTR _soap$[ebp]
	xor	eax, eax
	cmp	DWORD PTR [edx+12208], 0
	sete	al

; 83   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_soap_getfault ENDP
_TEXT	ENDS
PUBLIC	_soap_faultcode
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT _soap_faultcode
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_soap_faultcode PROC					; COMDAT

; 86   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 87   : 	soap_fault(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_fault
	add	esp, 4

; 88   : 	if (soap->version == 2)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	ecx, 2
	jne	SHORT $LN1@soap_fault@2

; 89   : 		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12208]
	mov	eax, DWORD PTR [ecx+16]
	jmp	SHORT $LN2@soap_fault@2
$LN1@soap_fault@2:

; 90   : 	return (const char**)&soap->fault->faultcode;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+12208]
$LN2@soap_fault@2:

; 91   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_soap_faultcode ENDP
_TEXT	ENDS
PUBLIC	_soap_faultsubcode
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT _soap_faultsubcode
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_soap_faultsubcode PROC					; COMDAT

; 94   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 95   : 	soap_fault(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_fault
	add	esp, 4

; 96   : 	if (soap->version == 2)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	ecx, 2
	jne	SHORT $LN2@soap_fault@3

; 97   : 	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12208]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN1@soap_fault@3

; 98   : 		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);

	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_new_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@H@Z ; soap_new_SOAP_ENV__Code
	add	esp, 8
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	edx, DWORD PTR [ecx+12208]
	mov	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+4], eax

; 99   : 			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12208]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_SOAP_ENV__Code@@YAXPAUsoap@@PAUSOAP_ENV__Code@@@Z ; soap_default_SOAP_ENV__Code
	add	esp, 8
$LN1@soap_fault@3:

; 100  : 		}
; 101  : 		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12208]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+4]
	jmp	SHORT $LN3@soap_fault@3
$LN2@soap_fault@3:

; 102  : 	}
; 103  : 	return (const char**)&soap->fault->faultcode;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+12208]
$LN3@soap_fault@3:

; 104  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_soap_faultsubcode ENDP
_TEXT	ENDS
PUBLIC	_soap_faultstring
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT _soap_faultstring
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_soap_faultstring PROC					; COMDAT

; 107  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 108  : 	soap_fault(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_fault
	add	esp, 4

; 109  : 	if (soap->version == 2)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	ecx, 2
	jne	SHORT $LN1@soap_fault@4

; 110  : 		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12208]
	mov	eax, DWORD PTR [ecx+20]
	jmp	SHORT $LN2@soap_fault@4
$LN1@soap_fault@4:

; 111  : 	return (const char**)&soap->fault->faultstring;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+12208]
	add	eax, 4
$LN2@soap_fault@4:

; 112  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_soap_faultstring ENDP
_TEXT	ENDS
PUBLIC	?soap_new_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@H@Z ; soap_new_SOAP_ENV__Detail
PUBLIC	?soap_default_SOAP_ENV__Detail@@YAXPAUsoap@@PAUSOAP_ENV__Detail@@@Z ; soap_default_SOAP_ENV__Detail
PUBLIC	_soap_faultdetail
EXTRN	_soap_malloc:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT _soap_faultdetail
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_soap_faultdetail PROC					; COMDAT

; 115  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 116  : 	soap_fault(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_fault
	add	esp, 4

; 117  : 	if (soap->version == 1)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	ecx, 1
	jne	SHORT $LN3@soap_fault@5

; 118  : 	{	if (!soap->fault->detail)

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12208]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN2@soap_fault@5

; 119  : 		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));

	push	12					; 0000000cH
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_malloc
	add	esp, 8
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	edx, DWORD PTR [ecx+12208]
	mov	DWORD PTR [edx+12], eax

; 120  : 			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12208]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_default_SOAP_ENV__Detail@@YAXPAUsoap@@PAUSOAP_ENV__Detail@@@Z ; soap_default_SOAP_ENV__Detail
	add	esp, 8
$LN2@soap_fault@5:

; 121  : 		}
; 122  : 		return (const char**)&soap->fault->detail->__any;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12208]
	mov	eax, DWORD PTR [ecx+12]
	add	eax, 8
	jmp	SHORT $LN4@soap_fault@5
$LN3@soap_fault@5:

; 123  : 	}
; 124  : 	if (!soap->fault->SOAP_ENV__Detail)

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12208]
	cmp	DWORD PTR [ecx+32], 0
	jne	SHORT $LN1@soap_fault@5

; 125  : 	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);

	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_new_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@H@Z ; soap_new_SOAP_ENV__Detail
	add	esp, 8
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	edx, DWORD PTR [ecx+12208]
	mov	DWORD PTR [edx+32], eax

; 126  : 		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12208]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_default_SOAP_ENV__Detail@@YAXPAUsoap@@PAUSOAP_ENV__Detail@@@Z ; soap_default_SOAP_ENV__Detail
	add	esp, 8
$LN1@soap_fault@5:

; 127  : 	}
; 128  : 	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12208]
	mov	eax, DWORD PTR [ecx+32]
	add	eax, 8
$LN4@soap_fault@5:

; 129  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_soap_faultdetail ENDP
_TEXT	ENDS
PUBLIC	?soap_ignore_element@@YAHPAUsoap@@@Z		; soap_ignore_element
PUBLIC	_soap_getelement
PUBLIC	?soap_getindependent@@YAHPAUsoap@@@Z		; soap_getindependent
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_getindependent@@YAHPAUsoap@@@Z
_TEXT	SEGMENT
_t$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_getindependent@@YAHPAUsoap@@@Z PROC		; soap_getindependent, COMDAT

; 135  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN7@soap_getin:

; 136  : 	int t;
; 137  : 	for (;;)
; 138  : 		if (!soap_getelement(soap, &t))

	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_getelement
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@soap_getin

; 139  : 			if (soap->error || soap_ignore_element(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 0
	jne	SHORT $LN3@soap_getin
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_ignore_element@@YAHPAUsoap@@@Z	; soap_ignore_element
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@soap_getin
$LN3@soap_getin:

; 140  : 				break;

	jmp	SHORT $LN6@soap_getin
$LN5@soap_getin:

; 141  : 	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)

	jmp	SHORT $LN7@soap_getin
$LN6@soap_getin:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	je	SHORT $LN1@soap_getin
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], -1
	jne	SHORT $LN2@soap_getin
$LN1@soap_getin:

; 142  : 		soap->error = SOAP_OK;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 0
$LN2@soap_getin:

; 143  : 	return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]

; 144  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@soap_getin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@soap_getin:
	DD	1
	DD	$LN11@soap_getin
$LN11@soap_getin:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@soap_getin
$LN10@soap_getin:
	DB	116					; 00000074H
	DB	0
?soap_getindependent@@YAHPAUsoap@@@Z ENDP		; soap_getindependent
_TEXT	ENDS
PUBLIC	?soap_in__QName@@YAPAPADPAUsoap@@PBDPAPAD1@Z	; soap_in__QName
PUBLIC	??_C@_09JDHJJDCF@xsd?3QName?$AA@		; `string'
PUBLIC	?soap_in__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__getSessionIDElement
PUBLIC	?soap_in__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__getSessionIDResponseElement
PUBLIC	?soap_in__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__getSettingsFileElement
PUBLIC	?soap_in__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__getSettingsFileResponseElement
PUBLIC	?soap_in__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__submitEpochResultElement
PUBLIC	?soap_in__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__submitEpochResultResponseElement
PUBLIC	?soap_in_string@@YAPAPADPAUsoap@@PBDPAPAD1@Z	; soap_in_string
PUBLIC	?soap_in_PointerTostd__string@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PBDPAPAV12@1@Z ; soap_in_PointerTostd__string
PUBLIC	?soap_in_PointerTo_ns2__getSessionIDElement@@YAPAPAV_ns2__getSessionIDElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__getSessionIDElement
PUBLIC	??_C@_0BI@CHGDHCPP@ns2?3getSessionIDElement?$AA@ ; `string'
PUBLIC	?soap_in_PointerTo_ns2__getSessionIDResponseElement@@YAPAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__getSessionIDResponseElement
PUBLIC	??_C@_0CA@KPMHIEOJ@ns2?3getSessionIDResponseElement?$AA@ ; `string'
PUBLIC	?soap_in_PointerTo_ns2__getSettingsFileElement@@YAPAPAV_ns2__getSettingsFileElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__getSettingsFileElement
PUBLIC	??_C@_0BL@EBHOCBLE@ns2?3getSettingsFileElement?$AA@ ; `string'
PUBLIC	?soap_in_PointerTo_ns2__getSettingsFileResponseElement@@YAPAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__getSettingsFileResponseElement
PUBLIC	??_C@_0CD@GADHDKNA@ns2?3getSettingsFileResponseEleme@ ; `string'
PUBLIC	?soap_in_PointerTo_ns2__submitEpochResultElement@@YAPAPAV_ns2__submitEpochResultElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__submitEpochResultElement
PUBLIC	??_C@_0BN@LEHNEPKC@ns2?3submitEpochResultElement?$AA@ ; `string'
PUBLIC	?soap_in_PointerTo_ns2__submitEpochResultResponseElement@@YAPAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__submitEpochResultResponseElement
PUBLIC	??_C@_0CF@HCKJIEH@ns2?3submitEpochResultResponseEle@ ; `string'
PUBLIC	?soap_in_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__anyType
PUBLIC	??_C@_0M@NOIFKOBF@xsd?3anyType?$AA@		; `string'
PUBLIC	?soap_in_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__boolean
PUBLIC	?soap_in_xsd__float@@YAPAVxsd__float@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__float
PUBLIC	?soap_in_xsd__int@@YAPAVxsd__int@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__int
PUBLIC	?soap_in_xsd__long@@YAPAVxsd__long@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__long
PUBLIC	?soap_in_xsd__string@@YAPAVxsd__string@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__string
PUBLIC	?soap_in_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PBDPAV12@1@Z ; soap_in_std__string
PUBLIC	??_C@_0L@DIJPMJCO@xsd?3string?$AA@		; `string'
PUBLIC	?soap_in_bool@@YAPA_NPAUsoap@@PBDPA_N1@Z	; soap_in_bool
PUBLIC	??_C@_0M@FGHMEICI@xsd?3boolean?$AA@		; `string'
PUBLIC	?soap_in_float@@YAPAMPAUsoap@@PBDPAM1@Z		; soap_in_float
PUBLIC	??_C@_09ILBLHFBD@xsd?3float?$AA@		; `string'
PUBLIC	?soap_in_LONG64@@YAPA_JPAUsoap@@PBDPA_J1@Z	; soap_in_LONG64
PUBLIC	??_C@_08PNDIDGIB@xsd?3long?$AA@			; `string'
PUBLIC	?soap_in_int@@YAPAHPAUsoap@@PBDPAH1@Z		; soap_in_int
PUBLIC	??_C@_07PCIGPDP@xsd?3int?$AA@			; `string'
PUBLIC	?soap_in_byte@@YAPADPAUsoap@@PBDPAD1@Z		; soap_in_byte
PUBLIC	??_C@_08BEPNMEIH@xsd?3byte?$AA@			; `string'
EXTRN	_soap_match_tag:PROC
EXTRN	_soap_lookup_type:PROC
EXTRN	_soap_peek_element:PROC
;	COMDAT ??_C@_09JDHJJDCF@xsd?3QName?$AA@
CONST	SEGMENT
??_C@_09JDHJJDCF@xsd?3QName?$AA@ DB 'xsd:QName', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CHGDHCPP@ns2?3getSessionIDElement?$AA@
CONST	SEGMENT
??_C@_0BI@CHGDHCPP@ns2?3getSessionIDElement?$AA@ DB 'ns2:getSessionIDElem'
	DB	'ent', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KPMHIEOJ@ns2?3getSessionIDResponseElement?$AA@
CONST	SEGMENT
??_C@_0CA@KPMHIEOJ@ns2?3getSessionIDResponseElement?$AA@ DB 'ns2:getSessi'
	DB	'onIDResponseElement', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EBHOCBLE@ns2?3getSettingsFileElement?$AA@
CONST	SEGMENT
??_C@_0BL@EBHOCBLE@ns2?3getSettingsFileElement?$AA@ DB 'ns2:getSettingsFi'
	DB	'leElement', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@GADHDKNA@ns2?3getSettingsFileResponseEleme@
CONST	SEGMENT
??_C@_0CD@GADHDKNA@ns2?3getSettingsFileResponseEleme@ DB 'ns2:getSettings'
	DB	'FileResponseElement', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LEHNEPKC@ns2?3submitEpochResultElement?$AA@
CONST	SEGMENT
??_C@_0BN@LEHNEPKC@ns2?3submitEpochResultElement?$AA@ DB 'ns2:submitEpoch'
	DB	'ResultElement', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@HCKJIEH@ns2?3submitEpochResultResponseEle@
CONST	SEGMENT
??_C@_0CF@HCKJIEH@ns2?3submitEpochResultResponseEle@ DB 'ns2:submitEpochR'
	DB	'esultResponseElement', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NOIFKOBF@xsd?3anyType?$AA@
CONST	SEGMENT
??_C@_0M@NOIFKOBF@xsd?3anyType?$AA@ DB 'xsd:anyType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
CONST	SEGMENT
??_C@_0L@DIJPMJCO@xsd?3string?$AA@ DB 'xsd:string', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FGHMEICI@xsd?3boolean?$AA@
CONST	SEGMENT
??_C@_0M@FGHMEICI@xsd?3boolean?$AA@ DB 'xsd:boolean', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09ILBLHFBD@xsd?3float?$AA@
CONST	SEGMENT
??_C@_09ILBLHFBD@xsd?3float?$AA@ DB 'xsd:float', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PNDIDGIB@xsd?3long?$AA@
CONST	SEGMENT
??_C@_08PNDIDGIB@xsd?3long?$AA@ DB 'xsd:long', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PCIGPDP@xsd?3int?$AA@
CONST	SEGMENT
??_C@_07PCIGPDP@xsd?3int?$AA@ DB 'xsd:int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BEPNMEIH@xsd?3byte?$AA@
CONST	SEGMENT
??_C@_08BEPNMEIH@xsd?3byte?$AA@ DB 'xsd:byte', 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT _soap_getelement
_TEXT	SEGMENT
tv423 = -244						; size = 4
tv350 = -244						; size = 4
tv214 = -244						; size = 4
tv80 = -244						; size = 4
_s$86839 = -44						; size = 4
_s$86830 = -32						; size = 4
_t$86815 = -20						; size = 4
_s$86813 = -8						; size = 4
_soap$ = 8						; size = 4
_type$ = 12						; size = 4
_soap_getelement PROC					; COMDAT

; 153  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 154  : 	if (soap_peek_element(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_peek_element
	add	esp, 4
	test	eax, eax
	je	SHORT $LN47@soap_getel

; 155  : 		return NULL;

	xor	eax, eax
	jmp	$LN48@soap_getel
$LN47@soap_getel:

; 156  : 	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+81076]
	test	ecx, ecx
	je	SHORT $LN45@soap_getel
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 81076				; 00013cb4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_lookup_type
	add	esp, 8
	mov	edx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _type$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN46@soap_getel
$LN45@soap_getel:

; 157  : 		*type = soap_lookup_type(soap, soap->href);

	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 82100				; 000140b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_lookup_type
	add	esp, 8
	mov	edx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [edx], eax
$LN46@soap_getel:

; 158  : 	switch (*type)

	mov	eax, DWORD PTR _type$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv80[ebp], ecx
	mov	edx, DWORD PTR tv80[ebp]
	sub	edx, 1
	mov	DWORD PTR tv80[ebp], edx
	cmp	DWORD PTR tv80[ebp], 36			; 00000024H
	ja	$LN22@soap_getel
	mov	eax, DWORD PTR tv80[ebp]
	movzx	ecx, BYTE PTR $LN56@soap_getel[eax]
	jmp	DWORD PTR $LN57@soap_getel[ecx*4]
$LN42@soap_getel:

; 159  : 	{
; 160  : 	case SOAP_TYPE_byte:
; 161  : 		return soap_in_byte(soap, NULL, NULL, "xsd:byte");

	push	OFFSET ??_C@_08BEPNMEIH@xsd?3byte?$AA@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_byte@@YAPADPAUsoap@@PBDPAD1@Z	; soap_in_byte
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN41@soap_getel:

; 162  : 	case SOAP_TYPE_int:
; 163  : 		return soap_in_int(soap, NULL, NULL, "xsd:int");

	push	OFFSET ??_C@_07PCIGPDP@xsd?3int?$AA@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_int@@YAPAHPAUsoap@@PBDPAH1@Z	; soap_in_int
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN40@soap_getel:

; 164  : 	case SOAP_TYPE_LONG64:
; 165  : 		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");

	push	OFFSET ??_C@_08PNDIDGIB@xsd?3long?$AA@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_LONG64@@YAPA_JPAUsoap@@PBDPA_J1@Z ; soap_in_LONG64
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN39@soap_getel:

; 166  : 	case SOAP_TYPE_float:
; 167  : 		return soap_in_float(soap, NULL, NULL, "xsd:float");

	push	OFFSET ??_C@_09ILBLHFBD@xsd?3float?$AA@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_float@@YAPAMPAUsoap@@PBDPAM1@Z	; soap_in_float
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN38@soap_getel:

; 168  : 	case SOAP_TYPE_bool:
; 169  : 		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");

	push	OFFSET ??_C@_0M@FGHMEICI@xsd?3boolean?$AA@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_bool@@YAPA_NPAUsoap@@PBDPA_N1@Z ; soap_in_bool
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN37@soap_getel:

; 170  : 	case SOAP_TYPE_std__string:
; 171  : 		return soap_in_std__string(soap, NULL, NULL, "xsd:string");

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PBDPAV12@1@Z ; soap_in_std__string
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN36@soap_getel:

; 172  : 	case SOAP_TYPE_xsd__string:
; 173  : 		return soap_in_xsd__string(soap, NULL, NULL, "xsd:string");

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__string@@YAPAVxsd__string@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__string
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN35@soap_getel:

; 174  : 	case SOAP_TYPE_xsd__long:
; 175  : 		return soap_in_xsd__long(soap, NULL, NULL, "xsd:long");

	push	OFFSET ??_C@_08PNDIDGIB@xsd?3long?$AA@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__long@@YAPAVxsd__long@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__long
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN34@soap_getel:

; 176  : 	case SOAP_TYPE_xsd__int:
; 177  : 		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");

	push	OFFSET ??_C@_07PCIGPDP@xsd?3int?$AA@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__int@@YAPAVxsd__int@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__int
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN33@soap_getel:

; 178  : 	case SOAP_TYPE_xsd__float:
; 179  : 		return soap_in_xsd__float(soap, NULL, NULL, "xsd:float");

	push	OFFSET ??_C@_09ILBLHFBD@xsd?3float?$AA@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__float@@YAPAVxsd__float@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__float
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN32@soap_getel:

; 180  : 	case SOAP_TYPE_xsd__boolean:
; 181  : 		return soap_in_xsd__boolean(soap, NULL, NULL, "xsd:boolean");

	push	OFFSET ??_C@_0M@FGHMEICI@xsd?3boolean?$AA@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__boolean
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN31@soap_getel:

; 182  : 	case SOAP_TYPE_xsd__anyType:
; 183  : 		return soap_in_xsd__anyType(soap, NULL, NULL, "xsd:anyType");

	push	OFFSET ??_C@_0M@NOIFKOBF@xsd?3anyType?$AA@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__anyType
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN30@soap_getel:

; 184  : 	case SOAP_TYPE_PointerTo_ns2__submitEpochResultResponseElement:
; 185  : 		return soap_in_PointerTo_ns2__submitEpochResultResponseElement(soap, NULL, NULL, "ns2:submitEpochResultResponseElement");

	push	OFFSET ??_C@_0CF@HCKJIEH@ns2?3submitEpochResultResponseEle@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_PointerTo_ns2__submitEpochResultResponseElement@@YAPAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__submitEpochResultResponseElement
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN29@soap_getel:

; 186  : 	case SOAP_TYPE_PointerTo_ns2__submitEpochResultElement:
; 187  : 		return soap_in_PointerTo_ns2__submitEpochResultElement(soap, NULL, NULL, "ns2:submitEpochResultElement");

	push	OFFSET ??_C@_0BN@LEHNEPKC@ns2?3submitEpochResultElement?$AA@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_PointerTo_ns2__submitEpochResultElement@@YAPAPAV_ns2__submitEpochResultElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__submitEpochResultElement
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN28@soap_getel:

; 188  : 	case SOAP_TYPE_PointerTo_ns2__getSettingsFileResponseElement:
; 189  : 		return soap_in_PointerTo_ns2__getSettingsFileResponseElement(soap, NULL, NULL, "ns2:getSettingsFileResponseElement");

	push	OFFSET ??_C@_0CD@GADHDKNA@ns2?3getSettingsFileResponseEleme@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_PointerTo_ns2__getSettingsFileResponseElement@@YAPAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__getSettingsFileResponseElement
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN27@soap_getel:

; 190  : 	case SOAP_TYPE_PointerTo_ns2__getSettingsFileElement:
; 191  : 		return soap_in_PointerTo_ns2__getSettingsFileElement(soap, NULL, NULL, "ns2:getSettingsFileElement");

	push	OFFSET ??_C@_0BL@EBHOCBLE@ns2?3getSettingsFileElement?$AA@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_PointerTo_ns2__getSettingsFileElement@@YAPAPAV_ns2__getSettingsFileElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__getSettingsFileElement
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN26@soap_getel:

; 192  : 	case SOAP_TYPE_PointerTo_ns2__getSessionIDResponseElement:
; 193  : 		return soap_in_PointerTo_ns2__getSessionIDResponseElement(soap, NULL, NULL, "ns2:getSessionIDResponseElement");

	push	OFFSET ??_C@_0CA@KPMHIEOJ@ns2?3getSessionIDResponseElement?$AA@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_PointerTo_ns2__getSessionIDResponseElement@@YAPAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__getSessionIDResponseElement
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN25@soap_getel:

; 194  : 	case SOAP_TYPE_PointerTo_ns2__getSessionIDElement:
; 195  : 		return soap_in_PointerTo_ns2__getSessionIDElement(soap, NULL, NULL, "ns2:getSessionIDElement");

	push	OFFSET ??_C@_0BI@CHGDHCPP@ns2?3getSessionIDElement?$AA@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_PointerTo_ns2__getSessionIDElement@@YAPAPAV_ns2__getSessionIDElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__getSessionIDElement
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN24@soap_getel:

; 196  : 	case SOAP_TYPE_PointerTostd__string:
; 197  : 		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_PointerTostd__string@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PBDPAPAV12@1@Z ; soap_in_PointerTostd__string
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN23@soap_getel:

; 198  : 	case SOAP_TYPE_string:
; 199  : 	{	char **s;
; 200  : 		s = soap_in_string(soap, NULL, NULL, "xsd:string");

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_string@@YAPAPADPAUsoap@@PBDPAPAD1@Z ; soap_in_string
	add	esp, 16					; 00000010H
	mov	DWORD PTR _s$86813[ebp], eax

; 201  : 		return s ? *s : NULL;

	cmp	DWORD PTR _s$86813[ebp], 0
	je	SHORT $LN50@soap_getel
	mov	eax, DWORD PTR _s$86813[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv214[ebp], ecx
	jmp	SHORT $LN51@soap_getel
$LN50@soap_getel:
	mov	DWORD PTR tv214[ebp], 0
$LN51@soap_getel:
	mov	eax, DWORD PTR tv214[ebp]
	jmp	$LN48@soap_getel
$LN22@soap_getel:

; 202  : 	}
; 203  : 	default:
; 204  : 	{	const char *t = soap->type;

	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 83124				; 000144b4H
	mov	DWORD PTR _t$86815[ebp], eax

; 205  : 		if (!*t)

	mov	eax, DWORD PTR _t$86815[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN21@soap_getel

; 206  : 			t = soap->tag;

	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 80052				; 000138b4H
	mov	DWORD PTR _t$86815[ebp], eax
$LN21@soap_getel:

; 207  : 		if (!soap_match_tag(soap, t, "xsd:string"))

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN20@soap_getel

; 208  : 		{	*type = SOAP_TYPE_std__string;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 18			; 00000012H

; 209  : 			return soap_in_std__string(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PBDPAV12@1@Z ; soap_in_std__string
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN20@soap_getel:

; 210  : 		}
; 211  : 		if (!soap_match_tag(soap, t, "xsd:string"))

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN19@soap_getel

; 212  : 		{	*type = SOAP_TYPE_xsd__string;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 17			; 00000011H

; 213  : 			return soap_in_xsd__string(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__string@@YAPAVxsd__string@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__string
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN19@soap_getel:

; 214  : 		}
; 215  : 		if (!soap_match_tag(soap, t, "xsd:long"))

	push	OFFSET ??_C@_08PNDIDGIB@xsd?3long?$AA@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN18@soap_getel

; 216  : 		{	*type = SOAP_TYPE_xsd__long;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 15			; 0000000fH

; 217  : 			return soap_in_xsd__long(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__long@@YAPAVxsd__long@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__long
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN18@soap_getel:

; 218  : 		}
; 219  : 		if (!soap_match_tag(soap, t, "xsd:int"))

	push	OFFSET ??_C@_07PCIGPDP@xsd?3int?$AA@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN17@soap_getel

; 220  : 		{	*type = SOAP_TYPE_xsd__int;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 14			; 0000000eH

; 221  : 			return soap_in_xsd__int(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__int@@YAPAVxsd__int@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__int
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN17@soap_getel:

; 222  : 		}
; 223  : 		if (!soap_match_tag(soap, t, "xsd:float"))

	push	OFFSET ??_C@_09ILBLHFBD@xsd?3float?$AA@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN16@soap_getel

; 224  : 		{	*type = SOAP_TYPE_xsd__float;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH

; 225  : 			return soap_in_xsd__float(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__float@@YAPAVxsd__float@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__float
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN16@soap_getel:

; 226  : 		}
; 227  : 		if (!soap_match_tag(soap, t, "xsd:boolean"))

	push	OFFSET ??_C@_0M@FGHMEICI@xsd?3boolean?$AA@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN15@soap_getel

; 228  : 		{	*type = SOAP_TYPE_xsd__boolean;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH

; 229  : 			return soap_in_xsd__boolean(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__boolean
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN15@soap_getel:

; 230  : 		}
; 231  : 		if (!soap_match_tag(soap, t, "xsd:anyType"))

	push	OFFSET ??_C@_0M@NOIFKOBF@xsd?3anyType?$AA@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN14@soap_getel

; 232  : 		{	*type = SOAP_TYPE_xsd__anyType;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 8

; 233  : 			return soap_in_xsd__anyType(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__anyType
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN14@soap_getel:

; 234  : 		}
; 235  : 		if (!soap_match_tag(soap, t, "xsd:byte"))

	push	OFFSET ??_C@_08BEPNMEIH@xsd?3byte?$AA@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN13@soap_getel

; 236  : 		{	*type = SOAP_TYPE_byte;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 3

; 237  : 			return soap_in_byte(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_byte@@YAPADPAUsoap@@PBDPAD1@Z	; soap_in_byte
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN13@soap_getel:

; 238  : 		}
; 239  : 		if (!soap_match_tag(soap, t, "xsd:int"))

	push	OFFSET ??_C@_07PCIGPDP@xsd?3int?$AA@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN12@soap_getel

; 240  : 		{	*type = SOAP_TYPE_int;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 1

; 241  : 			return soap_in_int(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_int@@YAPAHPAUsoap@@PBDPAH1@Z	; soap_in_int
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN12@soap_getel:

; 242  : 		}
; 243  : 		if (!soap_match_tag(soap, t, "xsd:long"))

	push	OFFSET ??_C@_08PNDIDGIB@xsd?3long?$AA@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN11@soap_getel

; 244  : 		{	*type = SOAP_TYPE_LONG64;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H

; 245  : 			return soap_in_LONG64(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_LONG64@@YAPA_JPAUsoap@@PBDPA_J1@Z ; soap_in_LONG64
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN11@soap_getel:

; 246  : 		}
; 247  : 		if (!soap_match_tag(soap, t, "xsd:float"))

	push	OFFSET ??_C@_09ILBLHFBD@xsd?3float?$AA@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN10@soap_getel

; 248  : 		{	*type = SOAP_TYPE_float;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 13			; 0000000dH

; 249  : 			return soap_in_float(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_float@@YAPAMPAUsoap@@PBDPAM1@Z	; soap_in_float
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN10@soap_getel:

; 250  : 		}
; 251  : 		if (!soap_match_tag(soap, t, "xsd:boolean"))

	push	OFFSET ??_C@_0M@FGHMEICI@xsd?3boolean?$AA@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN9@soap_getel

; 252  : 		{	*type = SOAP_TYPE_bool;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 11			; 0000000bH

; 253  : 			return soap_in_bool(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_bool@@YAPA_NPAUsoap@@PBDPA_N1@Z ; soap_in_bool
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN9@soap_getel:

; 254  : 		}
; 255  : 		if (!soap_match_tag(soap, t, "xsd:string"))

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@soap_getel

; 256  : 		{	char **s;
; 257  : 			*type = SOAP_TYPE_string;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 4

; 258  : 			s = soap_in_string(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_string@@YAPAPADPAUsoap@@PBDPAPAD1@Z ; soap_in_string
	add	esp, 16					; 00000010H
	mov	DWORD PTR _s$86830[ebp], eax

; 259  : 			return s ? *s : NULL;

	cmp	DWORD PTR _s$86830[ebp], 0
	je	SHORT $LN52@soap_getel
	mov	eax, DWORD PTR _s$86830[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv350[ebp], ecx
	jmp	SHORT $LN53@soap_getel
$LN52@soap_getel:
	mov	DWORD PTR tv350[ebp], 0
$LN53@soap_getel:
	mov	eax, DWORD PTR tv350[ebp]
	jmp	$LN48@soap_getel
$LN8@soap_getel:

; 260  : 		}
; 261  : 		t = soap->tag;

	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 80052				; 000138b4H
	mov	DWORD PTR _t$86815[ebp], eax

; 262  : 		if (!soap_match_tag(soap, t, "ns2:submitEpochResultResponseElement"))

	push	OFFSET ??_C@_0CF@HCKJIEH@ns2?3submitEpochResultResponseEle@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@soap_getel

; 263  : 		{	*type = SOAP_TYPE__ns2__submitEpochResultResponseElement;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 24			; 00000018H

; 264  : 			return soap_in__ns2__submitEpochResultResponseElement(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__submitEpochResultResponseElement
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN7@soap_getel:

; 265  : 		}
; 266  : 		if (!soap_match_tag(soap, t, "ns2:submitEpochResultElement"))

	push	OFFSET ??_C@_0BN@LEHNEPKC@ns2?3submitEpochResultElement?$AA@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN6@soap_getel

; 267  : 		{	*type = SOAP_TYPE__ns2__submitEpochResultElement;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 23			; 00000017H

; 268  : 			return soap_in__ns2__submitEpochResultElement(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__submitEpochResultElement
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN6@soap_getel:

; 269  : 		}
; 270  : 		if (!soap_match_tag(soap, t, "ns2:getSettingsFileResponseElement"))

	push	OFFSET ??_C@_0CD@GADHDKNA@ns2?3getSettingsFileResponseEleme@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN5@soap_getel

; 271  : 		{	*type = SOAP_TYPE__ns2__getSettingsFileResponseElement;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 22			; 00000016H

; 272  : 			return soap_in__ns2__getSettingsFileResponseElement(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__getSettingsFileResponseElement
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN5@soap_getel:

; 273  : 		}
; 274  : 		if (!soap_match_tag(soap, t, "ns2:getSettingsFileElement"))

	push	OFFSET ??_C@_0BL@EBHOCBLE@ns2?3getSettingsFileElement?$AA@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@soap_getel

; 275  : 		{	*type = SOAP_TYPE__ns2__getSettingsFileElement;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 21			; 00000015H

; 276  : 			return soap_in__ns2__getSettingsFileElement(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__getSettingsFileElement
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN4@soap_getel:

; 277  : 		}
; 278  : 		if (!soap_match_tag(soap, t, "ns2:getSessionIDResponseElement"))

	push	OFFSET ??_C@_0CA@KPMHIEOJ@ns2?3getSessionIDResponseElement?$AA@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@soap_getel

; 279  : 		{	*type = SOAP_TYPE__ns2__getSessionIDResponseElement;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 20			; 00000014H

; 280  : 			return soap_in__ns2__getSessionIDResponseElement(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__getSessionIDResponseElement
	add	esp, 16					; 00000010H
	jmp	$LN48@soap_getel
$LN3@soap_getel:

; 281  : 		}
; 282  : 		if (!soap_match_tag(soap, t, "ns2:getSessionIDElement"))

	push	OFFSET ??_C@_0BI@CHGDHCPP@ns2?3getSessionIDElement?$AA@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@soap_getel

; 283  : 		{	*type = SOAP_TYPE__ns2__getSessionIDElement;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 19			; 00000013H

; 284  : 			return soap_in__ns2__getSessionIDElement(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__getSessionIDElement
	add	esp, 16					; 00000010H
	jmp	SHORT $LN48@soap_getel
$LN2@soap_getel:

; 285  : 		}
; 286  : 		if (!soap_match_tag(soap, t, "xsd:QName"))

	push	OFFSET ??_C@_09JDHJJDCF@xsd?3QName?$AA@
	mov	eax, DWORD PTR _t$86815[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN43@soap_getel

; 287  : 		{	char **s;
; 288  : 			*type = SOAP_TYPE__QName;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 5

; 289  : 			s = soap_in__QName(soap, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__QName@@YAPAPADPAUsoap@@PBDPAPAD1@Z ; soap_in__QName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _s$86839[ebp], eax

; 290  : 			return s ? *s : NULL;

	cmp	DWORD PTR _s$86839[ebp], 0
	je	SHORT $LN54@soap_getel
	mov	eax, DWORD PTR _s$86839[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv423[ebp], ecx
	jmp	SHORT $LN55@soap_getel
$LN54@soap_getel:
	mov	DWORD PTR tv423[ebp], 0
$LN55@soap_getel:
	mov	eax, DWORD PTR tv423[ebp]
	jmp	SHORT $LN48@soap_getel
$LN43@soap_getel:

; 291  : 		}
; 292  : 	}
; 293  : 	}
; 294  : 	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 295  : 	return NULL;

	xor	eax, eax
$LN48@soap_getel:

; 296  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN57@soap_getel:
	DD	$LN41@soap_getel
	DD	$LN42@soap_getel
	DD	$LN23@soap_getel
	DD	$LN31@soap_getel
	DD	$LN32@soap_getel
	DD	$LN38@soap_getel
	DD	$LN33@soap_getel
	DD	$LN39@soap_getel
	DD	$LN34@soap_getel
	DD	$LN35@soap_getel
	DD	$LN40@soap_getel
	DD	$LN36@soap_getel
	DD	$LN37@soap_getel
	DD	$LN24@soap_getel
	DD	$LN25@soap_getel
	DD	$LN26@soap_getel
	DD	$LN27@soap_getel
	DD	$LN28@soap_getel
	DD	$LN29@soap_getel
	DD	$LN30@soap_getel
	DD	$LN22@soap_getel
$LN56@soap_getel:
	DB	0
	DB	20					; 00000014H
	DB	1
	DB	2
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	3
	DB	20					; 00000014H
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	13					; 0000000dH
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	18					; 00000012H
	DB	19					; 00000013H
_soap_getelement ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@KDHAKAPA@IGNORING?5element?5?8?$CFs?8?6?$AA@ ; `string'
PUBLIC	??_C@_0BI@BALEIJAL@REJECTING?5element?5?8?$CFs?8?6?$AA@ ; `string'
PUBLIC	??_C@_09JEONCPHE@SOAP?9ENV?3?$AA@		; `string'
PUBLIC	??_C@_0DB@DOKGCGGN@Unexpected?5element?5?8?$CFs?8?5in?5input@ ; `string'
EXTRN	_soap_element_end_in:PROC
EXTRN	__imp__fflush:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	_soap_open_logfile:PROC
;	COMDAT ??_C@_0BH@KDHAKAPA@IGNORING?5element?5?8?$CFs?8?6?$AA@
CONST	SEGMENT
??_C@_0BH@KDHAKAPA@IGNORING?5element?5?8?$CFs?8?6?$AA@ DB 'IGNORING eleme'
	DB	'nt ''%s''', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BALEIJAL@REJECTING?5element?5?8?$CFs?8?6?$AA@
CONST	SEGMENT
??_C@_0BI@BALEIJAL@REJECTING?5element?5?8?$CFs?8?6?$AA@ DB 'REJECTING ele'
	DB	'ment ''%s''', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09JEONCPHE@SOAP?9ENV?3?$AA@
CONST	SEGMENT
??_C@_09JEONCPHE@SOAP?9ENV?3?$AA@ DB 'SOAP-ENV:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DOKGCGGN@Unexpected?5element?5?8?$CFs?8?5in?5input@
CONST	SEGMENT
??_C@_0DB@DOKGCGGN@Unexpected?5element?5?8?$CFs?8?5in?5input@ DB 'Unexpec'
	DB	'ted element ''%s'' in input (level=%u, %d)', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_ignore_element@@YAHPAUsoap@@@Z
_TEXT	SEGMENT
_fdebug$86870 = -44					; size = 4
_fdebug$86860 = -32					; size = 4
_fdebug$86849 = -20					; size = 4
_t$86844 = -8						; size = 4
_soap$ = 8						; size = 4
?soap_ignore_element@@YAHPAUsoap@@@Z PROC		; soap_ignore_element, COMDAT

; 304  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 305  : 	if (!soap_peek_element(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_peek_element
	add	esp, 4
	test	eax, eax
	jne	$LN23@soap_ignor

; 306  : 	{	int t;
; 307  : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN22@soap_ignor
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN21@soap_ignor
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN21@soap_ignor:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN22@soap_ignor
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$86849[ebp], ecx
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [edx+12444]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 80052				; 000138b4H
	push	ecx
	push	OFFSET ??_C@_0DB@DOKGCGGN@Unexpected?5element?5?8?$CFs?8?5in?5input@
	mov	edx, DWORD PTR _fdebug$86849[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$86849[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN22@soap_ignor:

; 308  : 		if (soap->mustUnderstand && !soap->other)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87298]
	test	ecx, ecx
	je	SHORT $LN19@soap_ignor
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87220]
	test	ecx, ecx
	jne	SHORT $LN19@soap_ignor

; 309  : 			return soap->error = SOAP_MUSTUNDERSTAND;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 8
	mov	eax, 8
	jmp	$LN24@soap_ignor
$LN19@soap_ignor:

; 310  : 		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 4096				; 00001000H
	je	SHORT $LN16@soap_ignor
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87304]
	cmp	ecx, 3
	jne	SHORT $LN17@soap_ignor
$LN16@soap_ignor:
	push	OFFSET ??_C@_09JEONCPHE@SOAP?9ENV?3?$AA@
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 80052				; 000138b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN18@soap_ignor
$LN17@soap_ignor:

; 311  : 		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN15@soap_ignor
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN14@soap_ignor
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN14@soap_ignor:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN15@soap_ignor
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$86860[ebp], ecx
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 80052				; 000138b4H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_0BI@BALEIJAL@REJECTING?5element?5?8?$CFs?8?6?$AA@
	mov	ecx, DWORD PTR _fdebug$86860[ebp]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$86860[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@soap_ignor:

; 312  : 			return soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3
	mov	eax, 3
	jmp	$LN24@soap_ignor
$LN18@soap_ignor:

; 313  : 		}
; 314  : 		if (!*soap->id || !soap_getelement(soap, &t))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+81076]
	test	ecx, ecx
	je	SHORT $LN11@soap_ignor
	lea	eax, DWORD PTR _t$86844[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_getelement
	add	esp, 8
	test	eax, eax
	jne	$LN23@soap_ignor
$LN11@soap_ignor:

; 315  : 		{	soap->peeked = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	WORD PTR [ecx+87308], ax

; 316  : 			if (soap->fignore)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+12324], 0
	je	SHORT $LN10@soap_ignor

; 317  : 				soap->error = soap->fignore(soap, soap->tag);

	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 80052				; 000138b4H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [edx+12324]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+90460], eax

; 318  : 			else

	jmp	SHORT $LN9@soap_ignor
$LN10@soap_ignor:

; 319  : 				soap->error = SOAP_OK;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 0
$LN9@soap_ignor:

; 320  : 			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN8@soap_ignor
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN7@soap_ignor
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN7@soap_ignor:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN8@soap_ignor
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$86870[ebp], ecx
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 0
	jne	SHORT $LN5@soap_ignor
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 80052				; 000138b4H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_0BH@KDHAKAPA@IGNORING?5element?5?8?$CFs?8?6?$AA@
	mov	ecx, DWORD PTR _fdebug$86870[ebp]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@soap_ignor:
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$86870[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@soap_ignor:

; 321  : 			if (!soap->error && soap->body)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 0
	jne	SHORT $LN23@soap_ignor
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN23@soap_ignor

; 322  : 			{	soap->level++;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+12444]
	add	ecx, 1
	mov	edx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [edx+12444], ecx
$LN3@soap_ignor:

; 323  : 				while (!soap_ignore_element(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_ignore_element@@YAHPAUsoap@@@Z	; soap_ignore_element
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@soap_ignor

; 324  : 					;

	jmp	SHORT $LN3@soap_ignor
$LN2@soap_ignor:

; 325  : 				if (soap->error == SOAP_NO_TAG)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN23@soap_ignor

; 326  : 					soap->error = soap_element_end_in(soap, NULL);

	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_element_end_in
	add	esp, 8
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+90460], eax
$LN23@soap_ignor:

; 327  : 			}
; 328  : 		}
; 329  : 	}
; 330  : 	return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
$LN24@soap_ignor:

; 331  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@soap_ignor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN28@soap_ignor:
	DD	1
	DD	$LN27@soap_ignor
$LN27@soap_ignor:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN26@soap_ignor
$LN26@soap_ignor:
	DB	116					; 00000074H
	DB	0
?soap_ignore_element@@YAHPAUsoap@@@Z ENDP		; soap_ignore_element
_TEXT	ENDS
PUBLIC	_soap_putelement
PUBLIC	??_C@_02EGCJHIOB@id?$AA@			; `string'
PUBLIC	?soap_putindependent@@YAHPAUsoap@@@Z		; soap_putindependent
;	COMDAT ??_C@_02EGCJHIOB@id?$AA@
CONST	SEGMENT
??_C@_02EGCJHIOB@id?$AA@ DB 'id', 00H			; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_putindependent@@YAHPAUsoap@@@Z
_TEXT	SEGMENT
_pp$ = -20						; size = 4
_i$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_putindependent@@YAHPAUsoap@@@Z PROC		; soap_putindependent, COMDAT

; 335  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 336  : 	int i;
; 337  : 	struct soap_plist *pp;
; 338  : 	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+6]
	cmp	ecx, 1
	jne	$LN10@soap_putin
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	$LN10@soap_putin
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 98304				; 00018000H
	jne	$LN10@soap_putin

; 339  : 		for (i = 0; i < SOAP_PTRHASH; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@soap_putin
$LN8@soap_putin:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@soap_putin:
	cmp	DWORD PTR _i$[ebp], 1024		; 00000400H
	jge	SHORT $LN10@soap_putin

; 340  : 			for (pp = soap->pht[i]; pp; pp = pp->next)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+8100]
	mov	DWORD PTR _pp$[ebp], edx
	jmp	SHORT $LN6@soap_putin
$LN5@soap_putin:
	mov	eax, DWORD PTR _pp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pp$[ebp], ecx
$LN6@soap_putin:
	cmp	DWORD PTR _pp$[ebp], 0
	je	SHORT $LN4@soap_putin

; 341  : 				if (pp->mark1 == 2 || pp->mark2 == 2)

	mov	eax, DWORD PTR _pp$[ebp]
	movsx	ecx, BYTE PTR [eax+20]
	cmp	ecx, 2
	je	SHORT $LN2@soap_putin
	mov	eax, DWORD PTR _pp$[ebp]
	movsx	ecx, BYTE PTR [eax+21]
	cmp	ecx, 2
	jne	SHORT $LN3@soap_putin
$LN2@soap_putin:

; 342  : 					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))

	mov	eax, DWORD PTR _pp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	push	OFFSET ??_C@_02EGCJHIOB@id?$AA@
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_putelement
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN3@soap_putin

; 343  : 						return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN11@soap_putin
$LN3@soap_putin:

; 344  : 	return SOAP_OK;

	jmp	SHORT $LN5@soap_putin
$LN4@soap_putin:
	jmp	$LN8@soap_putin
$LN10@soap_putin:
	xor	eax, eax
$LN11@soap_putin:

; 345  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_putindependent@@YAHPAUsoap@@@Z ENDP		; soap_putindependent
_TEXT	ENDS
PUBLIC	?soap_out_string@@YAHPAUsoap@@PBDHPBQAD1@Z	; soap_out_string
PUBLIC	?soap_out_PointerTostd__string@@YAHPAUsoap@@PBDHPBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@1@Z ; soap_out_PointerTostd__string
PUBLIC	?soap_out_PointerTo_ns2__getSessionIDElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSessionIDElement@@1@Z ; soap_out_PointerTo_ns2__getSessionIDElement
PUBLIC	?soap_out_PointerTo_ns2__getSessionIDResponseElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSessionIDResponseElement@@1@Z ; soap_out_PointerTo_ns2__getSessionIDResponseElement
PUBLIC	?soap_out_PointerTo_ns2__getSettingsFileElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSettingsFileElement@@1@Z ; soap_out_PointerTo_ns2__getSettingsFileElement
PUBLIC	?soap_out_PointerTo_ns2__getSettingsFileResponseElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSettingsFileResponseElement@@1@Z ; soap_out_PointerTo_ns2__getSettingsFileResponseElement
PUBLIC	?soap_out_PointerTo_ns2__submitEpochResultElement@@YAHPAUsoap@@PBDHPBQAV_ns2__submitEpochResultElement@@1@Z ; soap_out_PointerTo_ns2__submitEpochResultElement
PUBLIC	?soap_out_PointerTo_ns2__submitEpochResultResponseElement@@YAHPAUsoap@@PBDHPBQAV_ns2__submitEpochResultResponseElement@@1@Z ; soap_out_PointerTo_ns2__submitEpochResultResponseElement
PUBLIC	?soap_out_std__string@@YAHPAUsoap@@PBDHPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@1@Z ; soap_out_std__string
PUBLIC	?soap_out_bool@@YAHPAUsoap@@PBDHPB_N1@Z		; soap_out_bool
PUBLIC	?soap_out_float@@YAHPAUsoap@@PBDHPBM1@Z		; soap_out_float
PUBLIC	?soap_out_LONG64@@YAHPAUsoap@@PBDHPB_J1@Z	; soap_out_LONG64
PUBLIC	?soap_out_int@@YAHPAUsoap@@PBDHPBH1@Z		; soap_out_int
PUBLIC	?soap_out_byte@@YAHPAUsoap@@PBDH11@Z		; soap_out_byte
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT _soap_putelement
_TEXT	SEGMENT
tv64 = -196						; size = 4
_soap$ = 8						; size = 4
_ptr$ = 12						; size = 4
_tag$ = 16						; size = 4
_id$ = 20						; size = 4
_type$ = 24						; size = 4
_soap_putelement PROC					; COMDAT

; 354  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 355  : 	switch (type)

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 36			; 00000024H
	ja	$LN28@soap_putel
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN32@soap_putel[edx*4]
$LN27@soap_putel:

; 356  : 	{
; 357  : 	case SOAP_TYPE_byte:
; 358  : 		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");

	push	OFFSET ??_C@_08BEPNMEIH@xsd?3byte?$AA@
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_out_byte@@YAHPAUsoap@@PBDH11@Z	; soap_out_byte
	add	esp, 20					; 00000014H
	jmp	$LN30@soap_putel
$LN26@soap_putel:

; 359  : 	case SOAP_TYPE_int:
; 360  : 		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");

	push	OFFSET ??_C@_07PCIGPDP@xsd?3int?$AA@
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_out_int@@YAHPAUsoap@@PBDHPBH1@Z	; soap_out_int
	add	esp, 20					; 00000014H
	jmp	$LN30@soap_putel
$LN25@soap_putel:

; 361  : 	case SOAP_TYPE_LONG64:
; 362  : 		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");

	push	OFFSET ??_C@_08PNDIDGIB@xsd?3long?$AA@
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_out_LONG64@@YAHPAUsoap@@PBDHPB_J1@Z ; soap_out_LONG64
	add	esp, 20					; 00000014H
	jmp	$LN30@soap_putel
$LN24@soap_putel:

; 363  : 	case SOAP_TYPE_float:
; 364  : 		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");

	push	OFFSET ??_C@_09ILBLHFBD@xsd?3float?$AA@
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_out_float@@YAHPAUsoap@@PBDHPBM1@Z	; soap_out_float
	add	esp, 20					; 00000014H
	jmp	$LN30@soap_putel
$LN23@soap_putel:

; 365  : 	case SOAP_TYPE_bool:
; 366  : 		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");

	push	OFFSET ??_C@_0M@FGHMEICI@xsd?3boolean?$AA@
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_out_bool@@YAHPAUsoap@@PBDHPB_N1@Z	; soap_out_bool
	add	esp, 20					; 00000014H
	jmp	$LN30@soap_putel
$LN22@soap_putel:

; 367  : 	case SOAP_TYPE__ns2__submitEpochResultResponseElement:
; 368  : 		return ((_ns2__submitEpochResultResponseElement *)ptr)->soap_out(soap, "ns2:submitEpochResultResponseElement", id, NULL);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	push	OFFSET ??_C@_0CF@HCKJIEH@ns2?3submitEpochResultResponseEle@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN30@soap_putel
$LN21@soap_putel:

; 369  : 	case SOAP_TYPE__ns2__submitEpochResultElement:
; 370  : 		return ((_ns2__submitEpochResultElement *)ptr)->soap_out(soap, "ns2:submitEpochResultElement", id, NULL);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	push	OFFSET ??_C@_0BN@LEHNEPKC@ns2?3submitEpochResultElement?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN30@soap_putel
$LN20@soap_putel:

; 371  : 	case SOAP_TYPE__ns2__getSettingsFileResponseElement:
; 372  : 		return ((_ns2__getSettingsFileResponseElement *)ptr)->soap_out(soap, "ns2:getSettingsFileResponseElement", id, NULL);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	push	OFFSET ??_C@_0CD@GADHDKNA@ns2?3getSettingsFileResponseEleme@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN30@soap_putel
$LN19@soap_putel:

; 373  : 	case SOAP_TYPE__ns2__getSettingsFileElement:
; 374  : 		return ((_ns2__getSettingsFileElement *)ptr)->soap_out(soap, "ns2:getSettingsFileElement", id, NULL);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	push	OFFSET ??_C@_0BL@EBHOCBLE@ns2?3getSettingsFileElement?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN30@soap_putel
$LN18@soap_putel:

; 375  : 	case SOAP_TYPE__ns2__getSessionIDResponseElement:
; 376  : 		return ((_ns2__getSessionIDResponseElement *)ptr)->soap_out(soap, "ns2:getSessionIDResponseElement", id, NULL);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	push	OFFSET ??_C@_0CA@KPMHIEOJ@ns2?3getSessionIDResponseElement?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN30@soap_putel
$LN17@soap_putel:

; 377  : 	case SOAP_TYPE__ns2__getSessionIDElement:
; 378  : 		return ((_ns2__getSessionIDElement *)ptr)->soap_out(soap, "ns2:getSessionIDElement", id, NULL);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	push	OFFSET ??_C@_0BI@CHGDHCPP@ns2?3getSessionIDElement?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN30@soap_putel
$LN16@soap_putel:

; 379  : 	case SOAP_TYPE_std__string:
; 380  : 		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_out_std__string@@YAHPAUsoap@@PBDHPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@1@Z ; soap_out_std__string
	add	esp, 20					; 00000014H
	jmp	$LN30@soap_putel
$LN15@soap_putel:

; 381  : 	case SOAP_TYPE_xsd__string:
; 382  : 		return ((xsd__string *)ptr)->soap_out(soap, tag, id, "xsd:string");

	mov	esi, esp
	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN30@soap_putel
$LN14@soap_putel:

; 383  : 	case SOAP_TYPE_xsd__long:
; 384  : 		return ((xsd__long *)ptr)->soap_out(soap, tag, id, "xsd:long");

	mov	esi, esp
	push	OFFSET ??_C@_08PNDIDGIB@xsd?3long?$AA@
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN30@soap_putel
$LN13@soap_putel:

; 385  : 	case SOAP_TYPE_xsd__int:
; 386  : 		return ((xsd__int *)ptr)->soap_out(soap, tag, id, "xsd:int");

	mov	esi, esp
	push	OFFSET ??_C@_07PCIGPDP@xsd?3int?$AA@
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN30@soap_putel
$LN12@soap_putel:

; 387  : 	case SOAP_TYPE_xsd__float:
; 388  : 		return ((xsd__float *)ptr)->soap_out(soap, tag, id, "xsd:float");

	mov	esi, esp
	push	OFFSET ??_C@_09ILBLHFBD@xsd?3float?$AA@
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN30@soap_putel
$LN11@soap_putel:

; 389  : 	case SOAP_TYPE_xsd__boolean:
; 390  : 		return ((xsd__boolean *)ptr)->soap_out(soap, tag, id, "xsd:boolean");

	mov	esi, esp
	push	OFFSET ??_C@_0M@FGHMEICI@xsd?3boolean?$AA@
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN30@soap_putel
$LN10@soap_putel:

; 391  : 	case SOAP_TYPE_xsd__anyType:
; 392  : 		return ((xsd__anyType *)ptr)->soap_out(soap, tag, id, "xsd:anyType");

	mov	esi, esp
	push	OFFSET ??_C@_0M@NOIFKOBF@xsd?3anyType?$AA@
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN30@soap_putel
$LN9@soap_putel:

; 393  : 	case SOAP_TYPE_PointerTo_ns2__submitEpochResultResponseElement:
; 394  : 		return soap_out_PointerTo_ns2__submitEpochResultResponseElement(soap, tag, id, (_ns2__submitEpochResultResponseElement *const*)ptr, "ns2:submitEpochResultResponseElement");

	push	OFFSET ??_C@_0CF@HCKJIEH@ns2?3submitEpochResultResponseEle@
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_out_PointerTo_ns2__submitEpochResultResponseElement@@YAHPAUsoap@@PBDHPBQAV_ns2__submitEpochResultResponseElement@@1@Z ; soap_out_PointerTo_ns2__submitEpochResultResponseElement
	add	esp, 20					; 00000014H
	jmp	$LN30@soap_putel
$LN8@soap_putel:

; 395  : 	case SOAP_TYPE_PointerTo_ns2__submitEpochResultElement:
; 396  : 		return soap_out_PointerTo_ns2__submitEpochResultElement(soap, tag, id, (_ns2__submitEpochResultElement *const*)ptr, "ns2:submitEpochResultElement");

	push	OFFSET ??_C@_0BN@LEHNEPKC@ns2?3submitEpochResultElement?$AA@
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_out_PointerTo_ns2__submitEpochResultElement@@YAHPAUsoap@@PBDHPBQAV_ns2__submitEpochResultElement@@1@Z ; soap_out_PointerTo_ns2__submitEpochResultElement
	add	esp, 20					; 00000014H
	jmp	$LN30@soap_putel
$LN7@soap_putel:

; 397  : 	case SOAP_TYPE_PointerTo_ns2__getSettingsFileResponseElement:
; 398  : 		return soap_out_PointerTo_ns2__getSettingsFileResponseElement(soap, tag, id, (_ns2__getSettingsFileResponseElement *const*)ptr, "ns2:getSettingsFileResponseElement");

	push	OFFSET ??_C@_0CD@GADHDKNA@ns2?3getSettingsFileResponseEleme@
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_out_PointerTo_ns2__getSettingsFileResponseElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSettingsFileResponseElement@@1@Z ; soap_out_PointerTo_ns2__getSettingsFileResponseElement
	add	esp, 20					; 00000014H
	jmp	$LN30@soap_putel
$LN6@soap_putel:

; 399  : 	case SOAP_TYPE_PointerTo_ns2__getSettingsFileElement:
; 400  : 		return soap_out_PointerTo_ns2__getSettingsFileElement(soap, tag, id, (_ns2__getSettingsFileElement *const*)ptr, "ns2:getSettingsFileElement");

	push	OFFSET ??_C@_0BL@EBHOCBLE@ns2?3getSettingsFileElement?$AA@
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_out_PointerTo_ns2__getSettingsFileElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSettingsFileElement@@1@Z ; soap_out_PointerTo_ns2__getSettingsFileElement
	add	esp, 20					; 00000014H
	jmp	$LN30@soap_putel
$LN5@soap_putel:

; 401  : 	case SOAP_TYPE_PointerTo_ns2__getSessionIDResponseElement:
; 402  : 		return soap_out_PointerTo_ns2__getSessionIDResponseElement(soap, tag, id, (_ns2__getSessionIDResponseElement *const*)ptr, "ns2:getSessionIDResponseElement");

	push	OFFSET ??_C@_0CA@KPMHIEOJ@ns2?3getSessionIDResponseElement?$AA@
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_out_PointerTo_ns2__getSessionIDResponseElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSessionIDResponseElement@@1@Z ; soap_out_PointerTo_ns2__getSessionIDResponseElement
	add	esp, 20					; 00000014H
	jmp	SHORT $LN30@soap_putel
$LN4@soap_putel:

; 403  : 	case SOAP_TYPE_PointerTo_ns2__getSessionIDElement:
; 404  : 		return soap_out_PointerTo_ns2__getSessionIDElement(soap, tag, id, (_ns2__getSessionIDElement *const*)ptr, "ns2:getSessionIDElement");

	push	OFFSET ??_C@_0BI@CHGDHCPP@ns2?3getSessionIDElement?$AA@
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_out_PointerTo_ns2__getSessionIDElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSessionIDElement@@1@Z ; soap_out_PointerTo_ns2__getSessionIDElement
	add	esp, 20					; 00000014H
	jmp	SHORT $LN30@soap_putel
$LN3@soap_putel:

; 405  : 	case SOAP_TYPE_PointerTostd__string:
; 406  : 		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_out_PointerTostd__string@@YAHPAUsoap@@PBDHPBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@1@Z ; soap_out_PointerTostd__string
	add	esp, 20					; 00000014H
	jmp	SHORT $LN30@soap_putel
$LN2@soap_putel:

; 407  : 	case SOAP_TYPE__QName:
; 408  : 		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);

	push	0
	lea	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	push	OFFSET ??_C@_09JDHJJDCF@xsd?3QName?$AA@
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_out_string@@YAHPAUsoap@@PBDHPBQAD1@Z ; soap_out_string
	add	esp, 20					; 00000014H
	jmp	SHORT $LN30@soap_putel
$LN1@soap_putel:

; 409  : 	case SOAP_TYPE_string:
; 410  : 		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	lea	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_out_string@@YAHPAUsoap@@PBDHPBQAD1@Z ; soap_out_string
	add	esp, 20					; 00000014H
	jmp	SHORT $LN30@soap_putel
$LN28@soap_putel:

; 411  : 	}
; 412  : 	return SOAP_OK;

	xor	eax, eax
$LN30@soap_putel:

; 413  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN32@soap_putel:
	DD	$LN26@soap_putel
	DD	$LN28@soap_putel
	DD	$LN27@soap_putel
	DD	$LN1@soap_putel
	DD	$LN2@soap_putel
	DD	$LN28@soap_putel
	DD	$LN28@soap_putel
	DD	$LN10@soap_putel
	DD	$LN28@soap_putel
	DD	$LN11@soap_putel
	DD	$LN23@soap_putel
	DD	$LN12@soap_putel
	DD	$LN24@soap_putel
	DD	$LN13@soap_putel
	DD	$LN14@soap_putel
	DD	$LN25@soap_putel
	DD	$LN15@soap_putel
	DD	$LN16@soap_putel
	DD	$LN17@soap_putel
	DD	$LN18@soap_putel
	DD	$LN19@soap_putel
	DD	$LN20@soap_putel
	DD	$LN21@soap_putel
	DD	$LN22@soap_putel
	DD	$LN3@soap_putel
	DD	$LN28@soap_putel
	DD	$LN28@soap_putel
	DD	$LN4@soap_putel
	DD	$LN5@soap_putel
	DD	$LN28@soap_putel
	DD	$LN28@soap_putel
	DD	$LN6@soap_putel
	DD	$LN7@soap_putel
	DD	$LN28@soap_putel
	DD	$LN28@soap_putel
	DD	$LN8@soap_putel
	DD	$LN9@soap_putel
_soap_putelement ENDP
_TEXT	ENDS
PUBLIC	?soap_serialize_string@@YAXPAUsoap@@PBQAD@Z	; soap_serialize_string
PUBLIC	?soap_serialize_PointerTostd__string@@YAXPAUsoap@@PBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; soap_serialize_PointerTostd__string
PUBLIC	?soap_serialize_PointerTo_ns2__getSessionIDElement@@YAXPAUsoap@@PBQAV_ns2__getSessionIDElement@@@Z ; soap_serialize_PointerTo_ns2__getSessionIDElement
PUBLIC	?soap_serialize_PointerTo_ns2__getSessionIDResponseElement@@YAXPAUsoap@@PBQAV_ns2__getSessionIDResponseElement@@@Z ; soap_serialize_PointerTo_ns2__getSessionIDResponseElement
PUBLIC	?soap_serialize_PointerTo_ns2__getSettingsFileElement@@YAXPAUsoap@@PBQAV_ns2__getSettingsFileElement@@@Z ; soap_serialize_PointerTo_ns2__getSettingsFileElement
PUBLIC	?soap_serialize_PointerTo_ns2__getSettingsFileResponseElement@@YAXPAUsoap@@PBQAV_ns2__getSettingsFileResponseElement@@@Z ; soap_serialize_PointerTo_ns2__getSettingsFileResponseElement
PUBLIC	?soap_serialize_PointerTo_ns2__submitEpochResultElement@@YAXPAUsoap@@PBQAV_ns2__submitEpochResultElement@@@Z ; soap_serialize_PointerTo_ns2__submitEpochResultElement
PUBLIC	?soap_serialize_PointerTo_ns2__submitEpochResultResponseElement@@YAXPAUsoap@@PBQAV_ns2__submitEpochResultResponseElement@@@Z ; soap_serialize_PointerTo_ns2__submitEpochResultResponseElement
PUBLIC	?soap_serialize___ns1__getSessionID@@YAXPAUsoap@@PBU__ns1__getSessionID@@@Z ; soap_serialize___ns1__getSessionID
PUBLIC	?soap_serialize___ns1__getSettingsFile@@YAXPAUsoap@@PBU__ns1__getSettingsFile@@@Z ; soap_serialize___ns1__getSettingsFile
PUBLIC	?soap_serialize___ns1__submitEpochResult@@YAXPAUsoap@@PBU__ns1__submitEpochResult@@@Z ; soap_serialize___ns1__submitEpochResult
PUBLIC	?soap_serialize_std__string@@YAXPAUsoap@@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; soap_serialize_std__string
PUBLIC	_soap_markelement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT _soap_markelement
_TEXT	SEGMENT
tv64 = -196						; size = 4
_soap$ = 8						; size = 4
_ptr$ = 12						; size = 4
_type$ = 16						; size = 4
_soap_markelement PROC					; COMDAT

; 426  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 427  : 	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
; 428  : 	switch (type)

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 4
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 35			; 00000023H
	ja	$LN28@soap_marke
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN30@soap_marke[edx*4]
$LN25@soap_marke:

; 429  : 	{
; 430  : 	case SOAP_TYPE__ns2__submitEpochResultResponseElement:
; 431  : 		((_ns2__submitEpochResultResponseElement *)ptr)->soap_serialize(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 432  : 		break;

	jmp	$LN28@soap_marke
$LN24@soap_marke:

; 433  : 	case SOAP_TYPE__ns2__submitEpochResultElement:
; 434  : 		((_ns2__submitEpochResultElement *)ptr)->soap_serialize(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 435  : 		break;

	jmp	$LN28@soap_marke
$LN23@soap_marke:

; 436  : 	case SOAP_TYPE__ns2__getSettingsFileResponseElement:
; 437  : 		((_ns2__getSettingsFileResponseElement *)ptr)->soap_serialize(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 438  : 		break;

	jmp	$LN28@soap_marke
$LN22@soap_marke:

; 439  : 	case SOAP_TYPE__ns2__getSettingsFileElement:
; 440  : 		((_ns2__getSettingsFileElement *)ptr)->soap_serialize(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 441  : 		break;

	jmp	$LN28@soap_marke
$LN21@soap_marke:

; 442  : 	case SOAP_TYPE__ns2__getSessionIDResponseElement:
; 443  : 		((_ns2__getSessionIDResponseElement *)ptr)->soap_serialize(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 444  : 		break;

	jmp	$LN28@soap_marke
$LN20@soap_marke:

; 445  : 	case SOAP_TYPE__ns2__getSessionIDElement:
; 446  : 		((_ns2__getSessionIDElement *)ptr)->soap_serialize(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 447  : 		break;

	jmp	$LN28@soap_marke
$LN19@soap_marke:

; 448  : 	case SOAP_TYPE_std__string:
; 449  : 		soap_serialize_std__string(soap, (const std::string *)ptr);

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_std__string@@YAXPAUsoap@@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; soap_serialize_std__string
	add	esp, 8

; 450  : 		break;

	jmp	$LN28@soap_marke
$LN18@soap_marke:

; 451  : 	case SOAP_TYPE_xsd__string:
; 452  : 		((xsd__string *)ptr)->soap_serialize(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 453  : 		break;

	jmp	$LN28@soap_marke
$LN17@soap_marke:

; 454  : 	case SOAP_TYPE_xsd__long:
; 455  : 		((xsd__long *)ptr)->soap_serialize(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 456  : 		break;

	jmp	$LN28@soap_marke
$LN16@soap_marke:

; 457  : 	case SOAP_TYPE_xsd__int:
; 458  : 		((xsd__int *)ptr)->soap_serialize(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 459  : 		break;

	jmp	$LN28@soap_marke
$LN15@soap_marke:

; 460  : 	case SOAP_TYPE_xsd__float:
; 461  : 		((xsd__float *)ptr)->soap_serialize(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 462  : 		break;

	jmp	$LN28@soap_marke
$LN14@soap_marke:

; 463  : 	case SOAP_TYPE_xsd__boolean:
; 464  : 		((xsd__boolean *)ptr)->soap_serialize(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 465  : 		break;

	jmp	$LN28@soap_marke
$LN13@soap_marke:

; 466  : 	case SOAP_TYPE_xsd__anyType:
; 467  : 		((xsd__anyType *)ptr)->soap_serialize(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 468  : 		break;

	jmp	$LN28@soap_marke
$LN12@soap_marke:

; 469  : 	case SOAP_TYPE___ns1__submitEpochResult:
; 470  : 		soap_serialize___ns1__submitEpochResult(soap, (const struct __ns1__submitEpochResult *)ptr);

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize___ns1__submitEpochResult@@YAXPAUsoap@@PBU__ns1__submitEpochResult@@@Z ; soap_serialize___ns1__submitEpochResult
	add	esp, 8

; 471  : 		break;

	jmp	$LN28@soap_marke
$LN11@soap_marke:

; 472  : 	case SOAP_TYPE___ns1__getSettingsFile:
; 473  : 		soap_serialize___ns1__getSettingsFile(soap, (const struct __ns1__getSettingsFile *)ptr);

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize___ns1__getSettingsFile@@YAXPAUsoap@@PBU__ns1__getSettingsFile@@@Z ; soap_serialize___ns1__getSettingsFile
	add	esp, 8

; 474  : 		break;

	jmp	$LN28@soap_marke
$LN10@soap_marke:

; 475  : 	case SOAP_TYPE___ns1__getSessionID:
; 476  : 		soap_serialize___ns1__getSessionID(soap, (const struct __ns1__getSessionID *)ptr);

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize___ns1__getSessionID@@YAXPAUsoap@@PBU__ns1__getSessionID@@@Z ; soap_serialize___ns1__getSessionID
	add	esp, 8

; 477  : 		break;

	jmp	$LN28@soap_marke
$LN9@soap_marke:

; 478  : 	case SOAP_TYPE_PointerTo_ns2__submitEpochResultResponseElement:
; 479  : 		soap_serialize_PointerTo_ns2__submitEpochResultResponseElement(soap, (_ns2__submitEpochResultResponseElement *const*)ptr);

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_PointerTo_ns2__submitEpochResultResponseElement@@YAXPAUsoap@@PBQAV_ns2__submitEpochResultResponseElement@@@Z ; soap_serialize_PointerTo_ns2__submitEpochResultResponseElement
	add	esp, 8

; 480  : 		break;

	jmp	$LN28@soap_marke
$LN8@soap_marke:

; 481  : 	case SOAP_TYPE_PointerTo_ns2__submitEpochResultElement:
; 482  : 		soap_serialize_PointerTo_ns2__submitEpochResultElement(soap, (_ns2__submitEpochResultElement *const*)ptr);

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_PointerTo_ns2__submitEpochResultElement@@YAXPAUsoap@@PBQAV_ns2__submitEpochResultElement@@@Z ; soap_serialize_PointerTo_ns2__submitEpochResultElement
	add	esp, 8

; 483  : 		break;

	jmp	SHORT $LN28@soap_marke
$LN7@soap_marke:

; 484  : 	case SOAP_TYPE_PointerTo_ns2__getSettingsFileResponseElement:
; 485  : 		soap_serialize_PointerTo_ns2__getSettingsFileResponseElement(soap, (_ns2__getSettingsFileResponseElement *const*)ptr);

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_PointerTo_ns2__getSettingsFileResponseElement@@YAXPAUsoap@@PBQAV_ns2__getSettingsFileResponseElement@@@Z ; soap_serialize_PointerTo_ns2__getSettingsFileResponseElement
	add	esp, 8

; 486  : 		break;

	jmp	SHORT $LN28@soap_marke
$LN6@soap_marke:

; 487  : 	case SOAP_TYPE_PointerTo_ns2__getSettingsFileElement:
; 488  : 		soap_serialize_PointerTo_ns2__getSettingsFileElement(soap, (_ns2__getSettingsFileElement *const*)ptr);

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_PointerTo_ns2__getSettingsFileElement@@YAXPAUsoap@@PBQAV_ns2__getSettingsFileElement@@@Z ; soap_serialize_PointerTo_ns2__getSettingsFileElement
	add	esp, 8

; 489  : 		break;

	jmp	SHORT $LN28@soap_marke
$LN5@soap_marke:

; 490  : 	case SOAP_TYPE_PointerTo_ns2__getSessionIDResponseElement:
; 491  : 		soap_serialize_PointerTo_ns2__getSessionIDResponseElement(soap, (_ns2__getSessionIDResponseElement *const*)ptr);

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_PointerTo_ns2__getSessionIDResponseElement@@YAXPAUsoap@@PBQAV_ns2__getSessionIDResponseElement@@@Z ; soap_serialize_PointerTo_ns2__getSessionIDResponseElement
	add	esp, 8

; 492  : 		break;

	jmp	SHORT $LN28@soap_marke
$LN4@soap_marke:

; 493  : 	case SOAP_TYPE_PointerTo_ns2__getSessionIDElement:
; 494  : 		soap_serialize_PointerTo_ns2__getSessionIDElement(soap, (_ns2__getSessionIDElement *const*)ptr);

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_PointerTo_ns2__getSessionIDElement@@YAXPAUsoap@@PBQAV_ns2__getSessionIDElement@@@Z ; soap_serialize_PointerTo_ns2__getSessionIDElement
	add	esp, 8

; 495  : 		break;

	jmp	SHORT $LN28@soap_marke
$LN3@soap_marke:

; 496  : 	case SOAP_TYPE_PointerTostd__string:
; 497  : 		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);

	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_PointerTostd__string@@YAXPAUsoap@@PBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; soap_serialize_PointerTostd__string
	add	esp, 8

; 498  : 		break;

	jmp	SHORT $LN28@soap_marke
$LN2@soap_marke:

; 499  : 	case SOAP_TYPE__QName:
; 500  : 		soap_serialize_string(soap, (char*const*)&ptr);

	lea	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_string@@YAXPAUsoap@@PBQAD@Z ; soap_serialize_string
	add	esp, 8

; 501  : 		break;

	jmp	SHORT $LN28@soap_marke
$LN1@soap_marke:

; 502  : 	case SOAP_TYPE_string:
; 503  : 		soap_serialize_string(soap, (char*const*)&ptr);

	lea	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_string@@YAXPAUsoap@@PBQAD@Z ; soap_serialize_string
	add	esp, 8
$LN28@soap_marke:

; 504  : 		break;
; 505  : 	}
; 506  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN30@soap_marke:
	DD	$LN1@soap_marke
	DD	$LN2@soap_marke
	DD	$LN28@soap_marke
	DD	$LN28@soap_marke
	DD	$LN13@soap_marke
	DD	$LN28@soap_marke
	DD	$LN14@soap_marke
	DD	$LN28@soap_marke
	DD	$LN15@soap_marke
	DD	$LN28@soap_marke
	DD	$LN16@soap_marke
	DD	$LN17@soap_marke
	DD	$LN28@soap_marke
	DD	$LN18@soap_marke
	DD	$LN19@soap_marke
	DD	$LN20@soap_marke
	DD	$LN21@soap_marke
	DD	$LN22@soap_marke
	DD	$LN23@soap_marke
	DD	$LN24@soap_marke
	DD	$LN25@soap_marke
	DD	$LN3@soap_marke
	DD	$LN28@soap_marke
	DD	$LN28@soap_marke
	DD	$LN4@soap_marke
	DD	$LN5@soap_marke
	DD	$LN28@soap_marke
	DD	$LN10@soap_marke
	DD	$LN6@soap_marke
	DD	$LN7@soap_marke
	DD	$LN28@soap_marke
	DD	$LN11@soap_marke
	DD	$LN8@soap_marke
	DD	$LN9@soap_marke
	DD	$LN28@soap_marke
	DD	$LN12@soap_marke
_soap_markelement ENDP
_TEXT	ENDS
PUBLIC	?soap_instantiate_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_std__vectorTemplateOfint
PUBLIC	?soap_instantiate_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_std__vectorTemplateOffloat
PUBLIC	?soap_instantiate_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_SOAP_ENV__Fault
PUBLIC	?soap_instantiate_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_SOAP_ENV__Reason
PUBLIC	?soap_instantiate_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_SOAP_ENV__Detail
PUBLIC	?soap_instantiate_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_SOAP_ENV__Code
PUBLIC	?soap_instantiate_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_SOAP_ENV__Header
PUBLIC	?soap_instantiate___ns1__submitEpochResult@@YAPAU__ns1__submitEpochResult@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate___ns1__submitEpochResult
PUBLIC	?soap_instantiate___ns1__getSettingsFile@@YAPAU__ns1__getSettingsFile@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate___ns1__getSettingsFile
PUBLIC	?soap_instantiate___ns1__getSessionID@@YAPAU__ns1__getSessionID@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate___ns1__getSessionID
PUBLIC	?soap_instantiate__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__submitEpochResultResponseElement
PUBLIC	?soap_instantiate__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__submitEpochResultElement
PUBLIC	?soap_instantiate__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__getSettingsFileResponseElement
PUBLIC	?soap_instantiate__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__getSettingsFileElement
PUBLIC	?soap_instantiate__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__getSessionIDResponseElement
PUBLIC	?soap_instantiate__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__getSessionIDElement
PUBLIC	?soap_instantiate_xsd__string@@YAPAVxsd__string@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_xsd__string
PUBLIC	?soap_instantiate_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_std__string
PUBLIC	?soap_instantiate_xsd__long@@YAPAVxsd__long@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_xsd__long
PUBLIC	?soap_instantiate_xsd__int@@YAPAVxsd__int@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_xsd__int
PUBLIC	?soap_instantiate_xsd__float@@YAPAVxsd__float@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_xsd__float
PUBLIC	?soap_instantiate_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_xsd__boolean
PUBLIC	?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_xsd__anyType
PUBLIC	?soap_instantiate@@YAPAXPAUsoap@@HPBD1PAI@Z	; soap_instantiate
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_instantiate@@YAPAXPAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv64 = -196						; size = 4
_soap$ = 8						; size = 4
_t$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_n$ = 24						; size = 4
?soap_instantiate@@YAPAXPAUsoap@@HPBD1PAI@Z PROC	; soap_instantiate, COMDAT

; 514  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 515  : 	switch (t)

	mov	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 8
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 39			; 00000027H
	ja	$LN24@soap_insta
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN28@soap_insta[edx]
	jmp	DWORD PTR $LN29@soap_insta[eax*4]
$LN23@soap_insta:

; 516  : 	{
; 517  : 	case SOAP_TYPE_xsd__anyType:
; 518  : 		return (void*)soap_instantiate_xsd__anyType(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_xsd__anyType
	add	esp, 20					; 00000014H
	jmp	$LN26@soap_insta
$LN22@soap_insta:

; 519  : 	case SOAP_TYPE_xsd__boolean:
; 520  : 		return (void*)soap_instantiate_xsd__boolean(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_xsd__boolean
	add	esp, 20					; 00000014H
	jmp	$LN26@soap_insta
$LN21@soap_insta:

; 521  : 	case SOAP_TYPE_xsd__float:
; 522  : 		return (void*)soap_instantiate_xsd__float(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate_xsd__float@@YAPAVxsd__float@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_xsd__float
	add	esp, 20					; 00000014H
	jmp	$LN26@soap_insta
$LN20@soap_insta:

; 523  : 	case SOAP_TYPE_xsd__int:
; 524  : 		return (void*)soap_instantiate_xsd__int(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate_xsd__int@@YAPAVxsd__int@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_xsd__int
	add	esp, 20					; 00000014H
	jmp	$LN26@soap_insta
$LN19@soap_insta:

; 525  : 	case SOAP_TYPE_xsd__long:
; 526  : 		return (void*)soap_instantiate_xsd__long(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate_xsd__long@@YAPAVxsd__long@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_xsd__long
	add	esp, 20					; 00000014H
	jmp	$LN26@soap_insta
$LN18@soap_insta:

; 527  : 	case SOAP_TYPE_std__string:
; 528  : 		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_std__string
	add	esp, 20					; 00000014H
	jmp	$LN26@soap_insta
$LN17@soap_insta:

; 529  : 	case SOAP_TYPE_xsd__string:
; 530  : 		return (void*)soap_instantiate_xsd__string(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate_xsd__string@@YAPAVxsd__string@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_xsd__string
	add	esp, 20					; 00000014H
	jmp	$LN26@soap_insta
$LN16@soap_insta:

; 531  : 	case SOAP_TYPE__ns2__getSessionIDElement:
; 532  : 		return (void*)soap_instantiate__ns2__getSessionIDElement(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__getSessionIDElement
	add	esp, 20					; 00000014H
	jmp	$LN26@soap_insta
$LN15@soap_insta:

; 533  : 	case SOAP_TYPE__ns2__getSessionIDResponseElement:
; 534  : 		return (void*)soap_instantiate__ns2__getSessionIDResponseElement(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__getSessionIDResponseElement
	add	esp, 20					; 00000014H
	jmp	$LN26@soap_insta
$LN14@soap_insta:

; 535  : 	case SOAP_TYPE__ns2__getSettingsFileElement:
; 536  : 		return (void*)soap_instantiate__ns2__getSettingsFileElement(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__getSettingsFileElement
	add	esp, 20					; 00000014H
	jmp	$LN26@soap_insta
$LN13@soap_insta:

; 537  : 	case SOAP_TYPE__ns2__getSettingsFileResponseElement:
; 538  : 		return (void*)soap_instantiate__ns2__getSettingsFileResponseElement(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__getSettingsFileResponseElement
	add	esp, 20					; 00000014H
	jmp	$LN26@soap_insta
$LN12@soap_insta:

; 539  : 	case SOAP_TYPE__ns2__submitEpochResultElement:
; 540  : 		return (void*)soap_instantiate__ns2__submitEpochResultElement(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__submitEpochResultElement
	add	esp, 20					; 00000014H
	jmp	$LN26@soap_insta
$LN11@soap_insta:

; 541  : 	case SOAP_TYPE__ns2__submitEpochResultResponseElement:
; 542  : 		return (void*)soap_instantiate__ns2__submitEpochResultResponseElement(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__submitEpochResultResponseElement
	add	esp, 20					; 00000014H
	jmp	$LN26@soap_insta
$LN10@soap_insta:

; 543  : 	case SOAP_TYPE___ns1__getSessionID:
; 544  : 		return (void*)soap_instantiate___ns1__getSessionID(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate___ns1__getSessionID@@YAPAU__ns1__getSessionID@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate___ns1__getSessionID
	add	esp, 20					; 00000014H
	jmp	$LN26@soap_insta
$LN9@soap_insta:

; 545  : 	case SOAP_TYPE___ns1__getSettingsFile:
; 546  : 		return (void*)soap_instantiate___ns1__getSettingsFile(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate___ns1__getSettingsFile@@YAPAU__ns1__getSettingsFile@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate___ns1__getSettingsFile
	add	esp, 20					; 00000014H
	jmp	$LN26@soap_insta
$LN8@soap_insta:

; 547  : 	case SOAP_TYPE___ns1__submitEpochResult:
; 548  : 		return (void*)soap_instantiate___ns1__submitEpochResult(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate___ns1__submitEpochResult@@YAPAU__ns1__submitEpochResult@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate___ns1__submitEpochResult
	add	esp, 20					; 00000014H
	jmp	$LN26@soap_insta
$LN7@soap_insta:

; 549  : #ifndef WITH_NOGLOBAL
; 550  : 	case SOAP_TYPE_SOAP_ENV__Header:
; 551  : 		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_SOAP_ENV__Header
	add	esp, 20					; 00000014H
	jmp	$LN26@soap_insta
$LN6@soap_insta:

; 552  : #endif
; 553  : #ifndef WITH_NOGLOBAL
; 554  : 	case SOAP_TYPE_SOAP_ENV__Code:
; 555  : 		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_SOAP_ENV__Code
	add	esp, 20					; 00000014H
	jmp	$LN26@soap_insta
$LN5@soap_insta:

; 556  : #endif
; 557  : #ifndef WITH_NOGLOBAL
; 558  : 	case SOAP_TYPE_SOAP_ENV__Detail:
; 559  : 		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_SOAP_ENV__Detail
	add	esp, 20					; 00000014H
	jmp	SHORT $LN26@soap_insta
$LN4@soap_insta:

; 560  : #endif
; 561  : #ifndef WITH_NOGLOBAL
; 562  : 	case SOAP_TYPE_SOAP_ENV__Reason:
; 563  : 		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_SOAP_ENV__Reason
	add	esp, 20					; 00000014H
	jmp	SHORT $LN26@soap_insta
$LN3@soap_insta:

; 564  : #endif
; 565  : #ifndef WITH_NOGLOBAL
; 566  : 	case SOAP_TYPE_SOAP_ENV__Fault:
; 567  : 		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_SOAP_ENV__Fault
	add	esp, 20					; 00000014H
	jmp	SHORT $LN26@soap_insta
$LN2@soap_insta:

; 568  : #endif
; 569  : 	case SOAP_TYPE_std__vectorTemplateOffloat:
; 570  : 		return (void*)soap_instantiate_std__vectorTemplateOffloat(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_std__vectorTemplateOffloat
	add	esp, 20					; 00000014H
	jmp	SHORT $LN26@soap_insta
$LN1@soap_insta:

; 571  : 	case SOAP_TYPE_std__vectorTemplateOfint:
; 572  : 		return (void*)soap_instantiate_std__vectorTemplateOfint(soap, -1, type, arrayType, n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_instantiate_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_std__vectorTemplateOfint
	add	esp, 20					; 00000014H
	jmp	SHORT $LN26@soap_insta
$LN24@soap_insta:

; 573  : 	}
; 574  : 	return NULL;

	xor	eax, eax
$LN26@soap_insta:

; 575  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN29@soap_insta:
	DD	$LN23@soap_insta
	DD	$LN22@soap_insta
	DD	$LN21@soap_insta
	DD	$LN20@soap_insta
	DD	$LN19@soap_insta
	DD	$LN17@soap_insta
	DD	$LN18@soap_insta
	DD	$LN16@soap_insta
	DD	$LN15@soap_insta
	DD	$LN14@soap_insta
	DD	$LN13@soap_insta
	DD	$LN12@soap_insta
	DD	$LN11@soap_insta
	DD	$LN1@soap_insta
	DD	$LN2@soap_insta
	DD	$LN10@soap_insta
	DD	$LN9@soap_insta
	DD	$LN8@soap_insta
	DD	$LN7@soap_insta
	DD	$LN6@soap_insta
	DD	$LN5@soap_insta
	DD	$LN4@soap_insta
	DD	$LN3@soap_insta
	DD	$LN24@soap_insta
$LN28@soap_insta:
	DB	0
	DB	23					; 00000017H
	DB	1
	DB	23					; 00000017H
	DB	2
	DB	23					; 00000017H
	DB	3
	DB	4
	DB	23					; 00000017H
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	23					; 00000017H
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	15					; 0000000fH
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	16					; 00000010H
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	23					; 00000017H
	DB	20					; 00000014H
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	21					; 00000015H
	DB	22					; 00000016H
?soap_instantiate@@YAPAXPAUsoap@@HPBD1PAI@Z ENDP	; soap_instantiate
_TEXT	ENDS
PUBLIC	??_E?$vector@HV?$allocator@H@std@@@std@@QAEPAXI@Z ; std::vector<int,std::allocator<int> >::`vector deleting destructor'
PUBLIC	??_G?$vector@HV?$allocator@H@std@@@std@@QAEPAXI@Z ; std::vector<int,std::allocator<int> >::`scalar deleting destructor'
PUBLIC	??_E?$vector@MV?$allocator@M@std@@@std@@QAEPAXI@Z ; std::vector<float,std::allocator<float> >::`vector deleting destructor'
PUBLIC	??_G?$vector@MV?$allocator@M@std@@@std@@QAEPAXI@Z ; std::vector<float,std::allocator<float> >::`scalar deleting destructor'
PUBLIC	??_E?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
PUBLIC	??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	?soap_fdelete@@YAHPAUsoap_clist@@@Z		; soap_fdelete
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_fdelete@@YAHPAUsoap_clist@@@Z
_TEXT	SEGMENT
tv491 = -1256						; size = 4
tv436 = -1256						; size = 4
tv413 = -1256						; size = 4
tv390 = -1256						; size = 4
tv367 = -1256						; size = 4
tv344 = -1256						; size = 4
tv321 = -1256						; size = 4
tv244 = -1256						; size = 4
tv213 = -1256						; size = 4
tv182 = -1256						; size = 4
tv151 = -1256						; size = 4
tv88 = -1256						; size = 4
tv567 = -1252						; size = 4
tv561 = -1252						; size = 4
tv553 = -1252						; size = 4
tv547 = -1252						; size = 4
tv490 = -1252						; size = 4
tv446 = -1252						; size = 4
tv435 = -1252						; size = 4
tv423 = -1252						; size = 4
tv412 = -1252						; size = 4
tv400 = -1252						; size = 4
tv389 = -1252						; size = 4
tv377 = -1252						; size = 4
tv366 = -1252						; size = 4
tv354 = -1252						; size = 4
tv343 = -1252						; size = 4
tv331 = -1252						; size = 4
tv320 = -1252						; size = 4
tv272 = -1252						; size = 4
tv258 = -1252						; size = 4
tv252 = -1252						; size = 4
tv243 = -1252						; size = 4
tv227 = -1252						; size = 4
tv212 = -1252						; size = 4
tv196 = -1252						; size = 4
tv181 = -1252						; size = 4
tv165 = -1252						; size = 4
tv150 = -1252						; size = 4
tv134 = -1252						; size = 4
tv87 = -1252						; size = 4
tv75 = -1252						; size = 4
tv65 = -1252						; size = 4
$T100460 = -1244					; size = 4
$T100461 = -1232					; size = 4
$T100464 = -1220					; size = 4
$T100465 = -1208					; size = 4
$T100466 = -1196					; size = 4
$T100471 = -1184					; size = 4
$T100472 = -1172					; size = 4
$T100475 = -1160					; size = 4
$T100476 = -1148					; size = 4
$T100477 = -1136					; size = 4
$T100482 = -1124					; size = 4
$T100483 = -1112					; size = 4
$T100486 = -1100					; size = 4
$T100487 = -1088					; size = 4
$T100488 = -1076					; size = 4
$T100493 = -1064					; size = 4
$T100494 = -1052					; size = 4
$T100497 = -1040					; size = 4
$T100498 = -1028					; size = 4
$T100499 = -1016					; size = 4
$T100504 = -1004					; size = 4
$T100505 = -992						; size = 4
$T100508 = -980						; size = 4
$T100509 = -968						; size = 4
$T100510 = -956						; size = 4
$T100515 = -944						; size = 4
$T100516 = -932						; size = 4
$T100519 = -920						; size = 4
$T100520 = -908						; size = 4
$T100523 = -896						; size = 4
$T100524 = -884						; size = 4
$T100527 = -872						; size = 4
$T100528 = -860						; size = 4
$T100529 = -848						; size = 4
$T100534 = -836						; size = 4
$T100535 = -824						; size = 4
$T100538 = -812						; size = 4
$T100539 = -800						; size = 4
$T100540 = -788						; size = 4
$T100545 = -776						; size = 4
$T100546 = -764						; size = 4
$T100549 = -752						; size = 4
$T100550 = -740						; size = 4
$T100551 = -728						; size = 4
$T100556 = -716						; size = 4
$T100557 = -704						; size = 4
$T100560 = -692						; size = 4
$T100561 = -680						; size = 4
$T100562 = -668						; size = 4
$T100567 = -656						; size = 4
$T100568 = -644						; size = 4
$T100571 = -632						; size = 4
$T100572 = -620						; size = 4
$T100573 = -608						; size = 4
$T100578 = -596						; size = 4
$T100579 = -584						; size = 4
$T100582 = -572						; size = 4
$T100583 = -560						; size = 4
$T100584 = -548						; size = 4
$T100589 = -536						; size = 4
$T100590 = -524						; size = 4
$T100593 = -512						; size = 4
$T100594 = -500						; size = 4
$T100595 = -488						; size = 4
$T100600 = -476						; size = 4
$T100601 = -464						; size = 4
$T100602 = -452						; size = 4
$T100603 = -440						; size = 4
$T100604 = -428						; size = 4
$T100605 = -416						; size = 4
$T100606 = -404						; size = 4
$T100607 = -392						; size = 4
$T100608 = -380						; size = 4
$T100609 = -368						; size = 4
$T100610 = -356						; size = 4
$T100611 = -344						; size = 4
$T100612 = -332						; size = 4
$T100613 = -320						; size = 4
$T100614 = -308						; size = 4
$T100615 = -296						; size = 4
$T100616 = -284						; size = 4
$T100617 = -272						; size = 4
$T100620 = -260						; size = 4
$T100621 = -248						; size = 4
$T100624 = -236						; size = 4
$T100625 = -224						; size = 4
$T100628 = -212						; size = 4
$T100629 = -200						; size = 4
_p$ = 8							; size = 4
?soap_fdelete@@YAHPAUsoap_clist@@@Z PROC		; soap_fdelete, COMDAT

; 578  : {	switch (p->type)

	push	ebp
	mov	ebp, esp
	sub	esp, 1256				; 000004e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1256]
	mov	ecx, 314				; 0000013aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv65[ebp], ecx
	mov	edx, DWORD PTR tv65[ebp]
	sub	edx, 8
	mov	DWORD PTR tv65[ebp], edx
	cmp	DWORD PTR tv65[ebp], 39			; 00000027H
	ja	$LN1@soap_fdele
	mov	eax, DWORD PTR tv65[ebp]
	movzx	ecx, BYTE PTR $LN159@soap_fdele[eax]
	jmp	DWORD PTR $LN160@soap_fdele[ecx*4]
$LN70@soap_fdele:

; 579  : 	{
; 580  : 	case SOAP_TYPE_xsd__anyType:
; 581  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN69@soap_fdele

; 582  : 			delete (xsd__anyType*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100461[ebp], ecx
	mov	edx, DWORD PTR $T100461[ebp]
	mov	DWORD PTR $T100460[ebp], edx
	cmp	DWORD PTR $T100460[ebp], 0
	je	SHORT $LN75@soap_fdele
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T100460[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T100460[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN76@soap_fdele
$LN75@soap_fdele:
	mov	DWORD PTR tv75[ebp], 0
$LN76@soap_fdele:

; 583  : 		else

	jmp	$LN68@soap_fdele
$LN69@soap_fdele:

; 584  : 			delete[] (xsd__anyType*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100466[ebp], ecx
	mov	edx, DWORD PTR $T100466[ebp]
	mov	DWORD PTR $T100465[ebp], edx
	mov	eax, DWORD PTR $T100465[ebp]
	mov	DWORD PTR $T100464[ebp], eax
	cmp	DWORD PTR $T100464[ebp], 0
	je	SHORT $LN79@soap_fdele
	mov	ecx, DWORD PTR $T100464[ebp]
	cmp	DWORD PTR [ecx-4], 0
	je	SHORT $LN77@soap_fdele
	mov	esi, esp
	push	3
	mov	edx, DWORD PTR $T100465[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T100465[ebp]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN78@soap_fdele
$LN77@soap_fdele:
	mov	eax, DWORD PTR $T100464[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR tv87[ebp], 0
$LN78@soap_fdele:
	mov	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv88[ebp], ecx
	jmp	SHORT $LN68@soap_fdele
$LN79@soap_fdele:
	mov	DWORD PTR tv88[ebp], 0
$LN68@soap_fdele:

; 585  : 		break;

	jmp	$LN71@soap_fdele
$LN67@soap_fdele:

; 586  : 	case SOAP_TYPE_xsd__boolean:
; 587  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN66@soap_fdele

; 588  : 			delete (xsd__boolean*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100472[ebp], ecx
	mov	edx, DWORD PTR $T100472[ebp]
	mov	DWORD PTR $T100471[ebp], edx
	cmp	DWORD PTR $T100471[ebp], 0
	je	SHORT $LN81@soap_fdele
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T100471[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T100471[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN82@soap_fdele
$LN81@soap_fdele:
	mov	DWORD PTR tv134[ebp], 0
$LN82@soap_fdele:

; 589  : 		else

	jmp	$LN65@soap_fdele
$LN66@soap_fdele:

; 590  : 			delete[] (xsd__boolean*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100477[ebp], ecx
	mov	edx, DWORD PTR $T100477[ebp]
	mov	DWORD PTR $T100476[ebp], edx
	mov	eax, DWORD PTR $T100476[ebp]
	mov	DWORD PTR $T100475[ebp], eax
	cmp	DWORD PTR $T100475[ebp], 0
	je	SHORT $LN85@soap_fdele
	mov	ecx, DWORD PTR $T100475[ebp]
	cmp	DWORD PTR [ecx-4], 0
	je	SHORT $LN83@soap_fdele
	mov	esi, esp
	push	3
	mov	edx, DWORD PTR $T100476[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T100476[ebp]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv150[ebp], eax
	jmp	SHORT $LN84@soap_fdele
$LN83@soap_fdele:
	mov	eax, DWORD PTR $T100475[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR tv150[ebp], 0
$LN84@soap_fdele:
	mov	ecx, DWORD PTR tv150[ebp]
	mov	DWORD PTR tv151[ebp], ecx
	jmp	SHORT $LN65@soap_fdele
$LN85@soap_fdele:
	mov	DWORD PTR tv151[ebp], 0
$LN65@soap_fdele:

; 591  : 		break;

	jmp	$LN71@soap_fdele
$LN64@soap_fdele:

; 592  : 	case SOAP_TYPE_xsd__float:
; 593  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN63@soap_fdele

; 594  : 			delete (xsd__float*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100483[ebp], ecx
	mov	edx, DWORD PTR $T100483[ebp]
	mov	DWORD PTR $T100482[ebp], edx
	cmp	DWORD PTR $T100482[ebp], 0
	je	SHORT $LN87@soap_fdele
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T100482[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T100482[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv165[ebp], eax
	jmp	SHORT $LN88@soap_fdele
$LN87@soap_fdele:
	mov	DWORD PTR tv165[ebp], 0
$LN88@soap_fdele:

; 595  : 		else

	jmp	$LN62@soap_fdele
$LN63@soap_fdele:

; 596  : 			delete[] (xsd__float*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100488[ebp], ecx
	mov	edx, DWORD PTR $T100488[ebp]
	mov	DWORD PTR $T100487[ebp], edx
	mov	eax, DWORD PTR $T100487[ebp]
	mov	DWORD PTR $T100486[ebp], eax
	cmp	DWORD PTR $T100486[ebp], 0
	je	SHORT $LN91@soap_fdele
	mov	ecx, DWORD PTR $T100486[ebp]
	cmp	DWORD PTR [ecx-4], 0
	je	SHORT $LN89@soap_fdele
	mov	esi, esp
	push	3
	mov	edx, DWORD PTR $T100487[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T100487[ebp]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv181[ebp], eax
	jmp	SHORT $LN90@soap_fdele
$LN89@soap_fdele:
	mov	eax, DWORD PTR $T100486[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR tv181[ebp], 0
$LN90@soap_fdele:
	mov	ecx, DWORD PTR tv181[ebp]
	mov	DWORD PTR tv182[ebp], ecx
	jmp	SHORT $LN62@soap_fdele
$LN91@soap_fdele:
	mov	DWORD PTR tv182[ebp], 0
$LN62@soap_fdele:

; 597  : 		break;

	jmp	$LN71@soap_fdele
$LN61@soap_fdele:

; 598  : 	case SOAP_TYPE_xsd__int:
; 599  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN60@soap_fdele

; 600  : 			delete (xsd__int*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100494[ebp], ecx
	mov	edx, DWORD PTR $T100494[ebp]
	mov	DWORD PTR $T100493[ebp], edx
	cmp	DWORD PTR $T100493[ebp], 0
	je	SHORT $LN93@soap_fdele
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T100493[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T100493[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv196[ebp], eax
	jmp	SHORT $LN94@soap_fdele
$LN93@soap_fdele:
	mov	DWORD PTR tv196[ebp], 0
$LN94@soap_fdele:

; 601  : 		else

	jmp	$LN59@soap_fdele
$LN60@soap_fdele:

; 602  : 			delete[] (xsd__int*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100499[ebp], ecx
	mov	edx, DWORD PTR $T100499[ebp]
	mov	DWORD PTR $T100498[ebp], edx
	mov	eax, DWORD PTR $T100498[ebp]
	mov	DWORD PTR $T100497[ebp], eax
	cmp	DWORD PTR $T100497[ebp], 0
	je	SHORT $LN97@soap_fdele
	mov	ecx, DWORD PTR $T100497[ebp]
	cmp	DWORD PTR [ecx-4], 0
	je	SHORT $LN95@soap_fdele
	mov	esi, esp
	push	3
	mov	edx, DWORD PTR $T100498[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T100498[ebp]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv212[ebp], eax
	jmp	SHORT $LN96@soap_fdele
$LN95@soap_fdele:
	mov	eax, DWORD PTR $T100497[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR tv212[ebp], 0
$LN96@soap_fdele:
	mov	ecx, DWORD PTR tv212[ebp]
	mov	DWORD PTR tv213[ebp], ecx
	jmp	SHORT $LN59@soap_fdele
$LN97@soap_fdele:
	mov	DWORD PTR tv213[ebp], 0
$LN59@soap_fdele:

; 603  : 		break;

	jmp	$LN71@soap_fdele
$LN58@soap_fdele:

; 604  : 	case SOAP_TYPE_xsd__long:
; 605  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN57@soap_fdele

; 606  : 			delete (xsd__long*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100505[ebp], ecx
	mov	edx, DWORD PTR $T100505[ebp]
	mov	DWORD PTR $T100504[ebp], edx
	cmp	DWORD PTR $T100504[ebp], 0
	je	SHORT $LN99@soap_fdele
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T100504[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T100504[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv227[ebp], eax
	jmp	SHORT $LN100@soap_fdele
$LN99@soap_fdele:
	mov	DWORD PTR tv227[ebp], 0
$LN100@soap_fdele:

; 607  : 		else

	jmp	$LN56@soap_fdele
$LN57@soap_fdele:

; 608  : 			delete[] (xsd__long*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100510[ebp], ecx
	mov	edx, DWORD PTR $T100510[ebp]
	mov	DWORD PTR $T100509[ebp], edx
	mov	eax, DWORD PTR $T100509[ebp]
	mov	DWORD PTR $T100508[ebp], eax
	cmp	DWORD PTR $T100508[ebp], 0
	je	SHORT $LN103@soap_fdele
	mov	ecx, DWORD PTR $T100508[ebp]
	cmp	DWORD PTR [ecx-4], 0
	je	SHORT $LN101@soap_fdele
	mov	esi, esp
	push	3
	mov	edx, DWORD PTR $T100509[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T100509[ebp]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv243[ebp], eax
	jmp	SHORT $LN102@soap_fdele
$LN101@soap_fdele:
	mov	eax, DWORD PTR $T100508[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR tv243[ebp], 0
$LN102@soap_fdele:
	mov	ecx, DWORD PTR tv243[ebp]
	mov	DWORD PTR tv244[ebp], ecx
	jmp	SHORT $LN56@soap_fdele
$LN103@soap_fdele:
	mov	DWORD PTR tv244[ebp], 0
$LN56@soap_fdele:

; 609  : 		break;

	jmp	$LN71@soap_fdele
$LN55@soap_fdele:

; 610  : 	case SOAP_TYPE_std__string:
; 611  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN54@soap_fdele

; 612  : 			delete (std::string*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100516[ebp], ecx
	mov	edx, DWORD PTR $T100516[ebp]
	mov	DWORD PTR $T100515[ebp], edx
	cmp	DWORD PTR $T100515[ebp], 0
	je	SHORT $LN105@soap_fdele
	push	1
	mov	ecx, DWORD PTR $T100515[ebp]
	call	??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z
	mov	DWORD PTR tv252[ebp], eax
	jmp	SHORT $LN106@soap_fdele
$LN105@soap_fdele:
	mov	DWORD PTR tv252[ebp], 0
$LN106@soap_fdele:

; 613  : 		else

	jmp	SHORT $LN53@soap_fdele
$LN54@soap_fdele:

; 614  : 			delete[] (std::string*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100520[ebp], ecx
	mov	edx, DWORD PTR $T100520[ebp]
	mov	DWORD PTR $T100519[ebp], edx
	cmp	DWORD PTR $T100519[ebp], 0
	je	SHORT $LN107@soap_fdele
	push	3
	mov	ecx, DWORD PTR $T100519[ebp]
	call	??_E?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z
	mov	DWORD PTR tv258[ebp], eax
	jmp	SHORT $LN53@soap_fdele
$LN107@soap_fdele:
	mov	DWORD PTR tv258[ebp], 0
$LN53@soap_fdele:

; 615  : 		break;

	jmp	$LN71@soap_fdele
$LN52@soap_fdele:

; 616  : 	case SOAP_TYPE_xsd__string:
; 617  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN51@soap_fdele

; 618  : 			delete (xsd__string*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100524[ebp], ecx
	mov	edx, DWORD PTR $T100524[ebp]
	mov	DWORD PTR $T100523[ebp], edx
	cmp	DWORD PTR $T100523[ebp], 0
	je	SHORT $LN109@soap_fdele
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T100523[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T100523[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv272[ebp], eax
	jmp	SHORT $LN110@soap_fdele
$LN109@soap_fdele:
	mov	DWORD PTR tv272[ebp], 0
$LN110@soap_fdele:

; 619  : 		else

	jmp	$LN50@soap_fdele
$LN51@soap_fdele:

; 620  : 			delete[] (xsd__string*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100529[ebp], ecx
	mov	edx, DWORD PTR $T100529[ebp]
	mov	DWORD PTR $T100528[ebp], edx
	mov	eax, DWORD PTR $T100528[ebp]
	mov	DWORD PTR $T100527[ebp], eax
	cmp	DWORD PTR $T100527[ebp], 0
	je	SHORT $LN113@soap_fdele
	mov	ecx, DWORD PTR $T100527[ebp]
	cmp	DWORD PTR [ecx-4], 0
	je	SHORT $LN111@soap_fdele
	mov	esi, esp
	push	3
	mov	edx, DWORD PTR $T100528[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T100528[ebp]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv320[ebp], eax
	jmp	SHORT $LN112@soap_fdele
$LN111@soap_fdele:
	mov	eax, DWORD PTR $T100527[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR tv320[ebp], 0
$LN112@soap_fdele:
	mov	ecx, DWORD PTR tv320[ebp]
	mov	DWORD PTR tv321[ebp], ecx
	jmp	SHORT $LN50@soap_fdele
$LN113@soap_fdele:
	mov	DWORD PTR tv321[ebp], 0
$LN50@soap_fdele:

; 621  : 		break;

	jmp	$LN71@soap_fdele
$LN49@soap_fdele:

; 622  : 	case SOAP_TYPE__ns2__getSessionIDElement:
; 623  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN48@soap_fdele

; 624  : 			delete (_ns2__getSessionIDElement*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100535[ebp], ecx
	mov	edx, DWORD PTR $T100535[ebp]
	mov	DWORD PTR $T100534[ebp], edx
	cmp	DWORD PTR $T100534[ebp], 0
	je	SHORT $LN115@soap_fdele
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T100534[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T100534[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv331[ebp], eax
	jmp	SHORT $LN116@soap_fdele
$LN115@soap_fdele:
	mov	DWORD PTR tv331[ebp], 0
$LN116@soap_fdele:

; 625  : 		else

	jmp	$LN47@soap_fdele
$LN48@soap_fdele:

; 626  : 			delete[] (_ns2__getSessionIDElement*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100540[ebp], ecx
	mov	edx, DWORD PTR $T100540[ebp]
	mov	DWORD PTR $T100539[ebp], edx
	mov	eax, DWORD PTR $T100539[ebp]
	mov	DWORD PTR $T100538[ebp], eax
	cmp	DWORD PTR $T100538[ebp], 0
	je	SHORT $LN119@soap_fdele
	mov	ecx, DWORD PTR $T100538[ebp]
	cmp	DWORD PTR [ecx-4], 0
	je	SHORT $LN117@soap_fdele
	mov	esi, esp
	push	3
	mov	edx, DWORD PTR $T100539[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T100539[ebp]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv343[ebp], eax
	jmp	SHORT $LN118@soap_fdele
$LN117@soap_fdele:
	mov	eax, DWORD PTR $T100538[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR tv343[ebp], 0
$LN118@soap_fdele:
	mov	ecx, DWORD PTR tv343[ebp]
	mov	DWORD PTR tv344[ebp], ecx
	jmp	SHORT $LN47@soap_fdele
$LN119@soap_fdele:
	mov	DWORD PTR tv344[ebp], 0
$LN47@soap_fdele:

; 627  : 		break;

	jmp	$LN71@soap_fdele
$LN46@soap_fdele:

; 628  : 	case SOAP_TYPE__ns2__getSessionIDResponseElement:
; 629  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN45@soap_fdele

; 630  : 			delete (_ns2__getSessionIDResponseElement*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100546[ebp], ecx
	mov	edx, DWORD PTR $T100546[ebp]
	mov	DWORD PTR $T100545[ebp], edx
	cmp	DWORD PTR $T100545[ebp], 0
	je	SHORT $LN121@soap_fdele
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T100545[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T100545[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv354[ebp], eax
	jmp	SHORT $LN122@soap_fdele
$LN121@soap_fdele:
	mov	DWORD PTR tv354[ebp], 0
$LN122@soap_fdele:

; 631  : 		else

	jmp	$LN44@soap_fdele
$LN45@soap_fdele:

; 632  : 			delete[] (_ns2__getSessionIDResponseElement*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100551[ebp], ecx
	mov	edx, DWORD PTR $T100551[ebp]
	mov	DWORD PTR $T100550[ebp], edx
	mov	eax, DWORD PTR $T100550[ebp]
	mov	DWORD PTR $T100549[ebp], eax
	cmp	DWORD PTR $T100549[ebp], 0
	je	SHORT $LN125@soap_fdele
	mov	ecx, DWORD PTR $T100549[ebp]
	cmp	DWORD PTR [ecx-4], 0
	je	SHORT $LN123@soap_fdele
	mov	esi, esp
	push	3
	mov	edx, DWORD PTR $T100550[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T100550[ebp]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv366[ebp], eax
	jmp	SHORT $LN124@soap_fdele
$LN123@soap_fdele:
	mov	eax, DWORD PTR $T100549[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR tv366[ebp], 0
$LN124@soap_fdele:
	mov	ecx, DWORD PTR tv366[ebp]
	mov	DWORD PTR tv367[ebp], ecx
	jmp	SHORT $LN44@soap_fdele
$LN125@soap_fdele:
	mov	DWORD PTR tv367[ebp], 0
$LN44@soap_fdele:

; 633  : 		break;

	jmp	$LN71@soap_fdele
$LN43@soap_fdele:

; 634  : 	case SOAP_TYPE__ns2__getSettingsFileElement:
; 635  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN42@soap_fdele

; 636  : 			delete (_ns2__getSettingsFileElement*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100557[ebp], ecx
	mov	edx, DWORD PTR $T100557[ebp]
	mov	DWORD PTR $T100556[ebp], edx
	cmp	DWORD PTR $T100556[ebp], 0
	je	SHORT $LN127@soap_fdele
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T100556[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T100556[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv377[ebp], eax
	jmp	SHORT $LN128@soap_fdele
$LN127@soap_fdele:
	mov	DWORD PTR tv377[ebp], 0
$LN128@soap_fdele:

; 637  : 		else

	jmp	$LN41@soap_fdele
$LN42@soap_fdele:

; 638  : 			delete[] (_ns2__getSettingsFileElement*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100562[ebp], ecx
	mov	edx, DWORD PTR $T100562[ebp]
	mov	DWORD PTR $T100561[ebp], edx
	mov	eax, DWORD PTR $T100561[ebp]
	mov	DWORD PTR $T100560[ebp], eax
	cmp	DWORD PTR $T100560[ebp], 0
	je	SHORT $LN131@soap_fdele
	mov	ecx, DWORD PTR $T100560[ebp]
	cmp	DWORD PTR [ecx-4], 0
	je	SHORT $LN129@soap_fdele
	mov	esi, esp
	push	3
	mov	edx, DWORD PTR $T100561[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T100561[ebp]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv389[ebp], eax
	jmp	SHORT $LN130@soap_fdele
$LN129@soap_fdele:
	mov	eax, DWORD PTR $T100560[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR tv389[ebp], 0
$LN130@soap_fdele:
	mov	ecx, DWORD PTR tv389[ebp]
	mov	DWORD PTR tv390[ebp], ecx
	jmp	SHORT $LN41@soap_fdele
$LN131@soap_fdele:
	mov	DWORD PTR tv390[ebp], 0
$LN41@soap_fdele:

; 639  : 		break;

	jmp	$LN71@soap_fdele
$LN40@soap_fdele:

; 640  : 	case SOAP_TYPE__ns2__getSettingsFileResponseElement:
; 641  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN39@soap_fdele

; 642  : 			delete (_ns2__getSettingsFileResponseElement*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100568[ebp], ecx
	mov	edx, DWORD PTR $T100568[ebp]
	mov	DWORD PTR $T100567[ebp], edx
	cmp	DWORD PTR $T100567[ebp], 0
	je	SHORT $LN133@soap_fdele
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T100567[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T100567[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv400[ebp], eax
	jmp	SHORT $LN134@soap_fdele
$LN133@soap_fdele:
	mov	DWORD PTR tv400[ebp], 0
$LN134@soap_fdele:

; 643  : 		else

	jmp	$LN38@soap_fdele
$LN39@soap_fdele:

; 644  : 			delete[] (_ns2__getSettingsFileResponseElement*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100573[ebp], ecx
	mov	edx, DWORD PTR $T100573[ebp]
	mov	DWORD PTR $T100572[ebp], edx
	mov	eax, DWORD PTR $T100572[ebp]
	mov	DWORD PTR $T100571[ebp], eax
	cmp	DWORD PTR $T100571[ebp], 0
	je	SHORT $LN137@soap_fdele
	mov	ecx, DWORD PTR $T100571[ebp]
	cmp	DWORD PTR [ecx-4], 0
	je	SHORT $LN135@soap_fdele
	mov	esi, esp
	push	3
	mov	edx, DWORD PTR $T100572[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T100572[ebp]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv412[ebp], eax
	jmp	SHORT $LN136@soap_fdele
$LN135@soap_fdele:
	mov	eax, DWORD PTR $T100571[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR tv412[ebp], 0
$LN136@soap_fdele:
	mov	ecx, DWORD PTR tv412[ebp]
	mov	DWORD PTR tv413[ebp], ecx
	jmp	SHORT $LN38@soap_fdele
$LN137@soap_fdele:
	mov	DWORD PTR tv413[ebp], 0
$LN38@soap_fdele:

; 645  : 		break;

	jmp	$LN71@soap_fdele
$LN37@soap_fdele:

; 646  : 	case SOAP_TYPE__ns2__submitEpochResultElement:
; 647  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN36@soap_fdele

; 648  : 			delete (_ns2__submitEpochResultElement*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100579[ebp], ecx
	mov	edx, DWORD PTR $T100579[ebp]
	mov	DWORD PTR $T100578[ebp], edx
	cmp	DWORD PTR $T100578[ebp], 0
	je	SHORT $LN139@soap_fdele
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T100578[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T100578[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv423[ebp], eax
	jmp	SHORT $LN140@soap_fdele
$LN139@soap_fdele:
	mov	DWORD PTR tv423[ebp], 0
$LN140@soap_fdele:

; 649  : 		else

	jmp	$LN35@soap_fdele
$LN36@soap_fdele:

; 650  : 			delete[] (_ns2__submitEpochResultElement*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100584[ebp], ecx
	mov	edx, DWORD PTR $T100584[ebp]
	mov	DWORD PTR $T100583[ebp], edx
	mov	eax, DWORD PTR $T100583[ebp]
	mov	DWORD PTR $T100582[ebp], eax
	cmp	DWORD PTR $T100582[ebp], 0
	je	SHORT $LN143@soap_fdele
	mov	ecx, DWORD PTR $T100582[ebp]
	cmp	DWORD PTR [ecx-4], 0
	je	SHORT $LN141@soap_fdele
	mov	esi, esp
	push	3
	mov	edx, DWORD PTR $T100583[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T100583[ebp]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv435[ebp], eax
	jmp	SHORT $LN142@soap_fdele
$LN141@soap_fdele:
	mov	eax, DWORD PTR $T100582[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR tv435[ebp], 0
$LN142@soap_fdele:
	mov	ecx, DWORD PTR tv435[ebp]
	mov	DWORD PTR tv436[ebp], ecx
	jmp	SHORT $LN35@soap_fdele
$LN143@soap_fdele:
	mov	DWORD PTR tv436[ebp], 0
$LN35@soap_fdele:

; 651  : 		break;

	jmp	$LN71@soap_fdele
$LN34@soap_fdele:

; 652  : 	case SOAP_TYPE__ns2__submitEpochResultResponseElement:
; 653  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN33@soap_fdele

; 654  : 			delete (_ns2__submitEpochResultResponseElement*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100590[ebp], ecx
	mov	edx, DWORD PTR $T100590[ebp]
	mov	DWORD PTR $T100589[ebp], edx
	cmp	DWORD PTR $T100589[ebp], 0
	je	SHORT $LN145@soap_fdele
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T100589[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T100589[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv446[ebp], eax
	jmp	SHORT $LN146@soap_fdele
$LN145@soap_fdele:
	mov	DWORD PTR tv446[ebp], 0
$LN146@soap_fdele:

; 655  : 		else

	jmp	$LN32@soap_fdele
$LN33@soap_fdele:

; 656  : 			delete[] (_ns2__submitEpochResultResponseElement*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100595[ebp], ecx
	mov	edx, DWORD PTR $T100595[ebp]
	mov	DWORD PTR $T100594[ebp], edx
	mov	eax, DWORD PTR $T100594[ebp]
	mov	DWORD PTR $T100593[ebp], eax
	cmp	DWORD PTR $T100593[ebp], 0
	je	SHORT $LN149@soap_fdele
	mov	ecx, DWORD PTR $T100593[ebp]
	cmp	DWORD PTR [ecx-4], 0
	je	SHORT $LN147@soap_fdele
	mov	esi, esp
	push	3
	mov	edx, DWORD PTR $T100594[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T100594[ebp]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv490[ebp], eax
	jmp	SHORT $LN148@soap_fdele
$LN147@soap_fdele:
	mov	eax, DWORD PTR $T100593[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR tv490[ebp], 0
$LN148@soap_fdele:
	mov	ecx, DWORD PTR tv490[ebp]
	mov	DWORD PTR tv491[ebp], ecx
	jmp	SHORT $LN32@soap_fdele
$LN149@soap_fdele:
	mov	DWORD PTR tv491[ebp], 0
$LN32@soap_fdele:

; 657  : 		break;

	jmp	$LN71@soap_fdele
$LN31@soap_fdele:

; 658  : 	case SOAP_TYPE___ns1__getSessionID:
; 659  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN30@soap_fdele

; 660  : 			delete (struct __ns1__getSessionID*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100600[ebp], ecx
	mov	edx, DWORD PTR $T100600[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 661  : 		else

	jmp	SHORT $LN29@soap_fdele
$LN30@soap_fdele:

; 662  : 			delete[] (struct __ns1__getSessionID*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100601[ebp], ecx
	mov	edx, DWORD PTR $T100601[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN29@soap_fdele:

; 663  : 		break;

	jmp	$LN71@soap_fdele
$LN28@soap_fdele:

; 664  : 	case SOAP_TYPE___ns1__getSettingsFile:
; 665  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN27@soap_fdele

; 666  : 			delete (struct __ns1__getSettingsFile*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100602[ebp], ecx
	mov	edx, DWORD PTR $T100602[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 667  : 		else

	jmp	SHORT $LN26@soap_fdele
$LN27@soap_fdele:

; 668  : 			delete[] (struct __ns1__getSettingsFile*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100603[ebp], ecx
	mov	edx, DWORD PTR $T100603[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN26@soap_fdele:

; 669  : 		break;

	jmp	$LN71@soap_fdele
$LN25@soap_fdele:

; 670  : 	case SOAP_TYPE___ns1__submitEpochResult:
; 671  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN24@soap_fdele

; 672  : 			delete (struct __ns1__submitEpochResult*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100604[ebp], ecx
	mov	edx, DWORD PTR $T100604[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 673  : 		else

	jmp	SHORT $LN23@soap_fdele
$LN24@soap_fdele:

; 674  : 			delete[] (struct __ns1__submitEpochResult*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100605[ebp], ecx
	mov	edx, DWORD PTR $T100605[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN23@soap_fdele:

; 675  : 		break;

	jmp	$LN71@soap_fdele
$LN22@soap_fdele:

; 676  : 	case SOAP_TYPE_SOAP_ENV__Header:
; 677  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN21@soap_fdele

; 678  : 			delete (struct SOAP_ENV__Header*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100606[ebp], ecx
	mov	edx, DWORD PTR $T100606[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 679  : 		else

	jmp	SHORT $LN20@soap_fdele
$LN21@soap_fdele:

; 680  : 			delete[] (struct SOAP_ENV__Header*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100607[ebp], ecx
	mov	edx, DWORD PTR $T100607[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN20@soap_fdele:

; 681  : 		break;

	jmp	$LN71@soap_fdele
$LN19@soap_fdele:

; 682  : 	case SOAP_TYPE_SOAP_ENV__Code:
; 683  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN18@soap_fdele

; 684  : 			delete (struct SOAP_ENV__Code*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100608[ebp], ecx
	mov	edx, DWORD PTR $T100608[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 685  : 		else

	jmp	SHORT $LN17@soap_fdele
$LN18@soap_fdele:

; 686  : 			delete[] (struct SOAP_ENV__Code*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100609[ebp], ecx
	mov	edx, DWORD PTR $T100609[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN17@soap_fdele:

; 687  : 		break;

	jmp	$LN71@soap_fdele
$LN16@soap_fdele:

; 688  : 	case SOAP_TYPE_SOAP_ENV__Detail:
; 689  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN15@soap_fdele

; 690  : 			delete (struct SOAP_ENV__Detail*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100610[ebp], ecx
	mov	edx, DWORD PTR $T100610[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 691  : 		else

	jmp	SHORT $LN14@soap_fdele
$LN15@soap_fdele:

; 692  : 			delete[] (struct SOAP_ENV__Detail*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100611[ebp], ecx
	mov	edx, DWORD PTR $T100611[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN14@soap_fdele:

; 693  : 		break;

	jmp	$LN71@soap_fdele
$LN13@soap_fdele:

; 694  : 	case SOAP_TYPE_SOAP_ENV__Reason:
; 695  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN12@soap_fdele

; 696  : 			delete (struct SOAP_ENV__Reason*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100612[ebp], ecx
	mov	edx, DWORD PTR $T100612[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 697  : 		else

	jmp	SHORT $LN11@soap_fdele
$LN12@soap_fdele:

; 698  : 			delete[] (struct SOAP_ENV__Reason*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100613[ebp], ecx
	mov	edx, DWORD PTR $T100613[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN11@soap_fdele:

; 699  : 		break;

	jmp	$LN71@soap_fdele
$LN10@soap_fdele:

; 700  : 	case SOAP_TYPE_SOAP_ENV__Fault:
; 701  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN9@soap_fdele

; 702  : 			delete (struct SOAP_ENV__Fault*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100614[ebp], ecx
	mov	edx, DWORD PTR $T100614[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 703  : 		else

	jmp	SHORT $LN8@soap_fdele
$LN9@soap_fdele:

; 704  : 			delete[] (struct SOAP_ENV__Fault*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100615[ebp], ecx
	mov	edx, DWORD PTR $T100615[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN8@soap_fdele:

; 705  : 		break;

	jmp	$LN71@soap_fdele
$LN7@soap_fdele:

; 706  : 	case SOAP_TYPE_std__vectorTemplateOffloat:
; 707  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN6@soap_fdele

; 708  : 			delete (std::vector<float >*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100617[ebp], ecx
	mov	edx, DWORD PTR $T100617[ebp]
	mov	DWORD PTR $T100616[ebp], edx
	cmp	DWORD PTR $T100616[ebp], 0
	je	SHORT $LN151@soap_fdele
	push	1
	mov	ecx, DWORD PTR $T100616[ebp]
	call	??_G?$vector@MV?$allocator@M@std@@@std@@QAEPAXI@Z
	mov	DWORD PTR tv547[ebp], eax
	jmp	SHORT $LN152@soap_fdele
$LN151@soap_fdele:
	mov	DWORD PTR tv547[ebp], 0
$LN152@soap_fdele:

; 709  : 		else

	jmp	SHORT $LN5@soap_fdele
$LN6@soap_fdele:

; 710  : 			delete[] (std::vector<float >*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100621[ebp], ecx
	mov	edx, DWORD PTR $T100621[ebp]
	mov	DWORD PTR $T100620[ebp], edx
	cmp	DWORD PTR $T100620[ebp], 0
	je	SHORT $LN153@soap_fdele
	push	3
	mov	ecx, DWORD PTR $T100620[ebp]
	call	??_E?$vector@MV?$allocator@M@std@@@std@@QAEPAXI@Z
	mov	DWORD PTR tv553[ebp], eax
	jmp	SHORT $LN5@soap_fdele
$LN153@soap_fdele:
	mov	DWORD PTR tv553[ebp], 0
$LN5@soap_fdele:

; 711  : 		break;

	jmp	$LN71@soap_fdele
$LN4@soap_fdele:

; 712  : 	case SOAP_TYPE_std__vectorTemplateOfint:
; 713  : 		if (p->size < 0)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN3@soap_fdele

; 714  : 			delete (std::vector<int >*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100625[ebp], ecx
	mov	edx, DWORD PTR $T100625[ebp]
	mov	DWORD PTR $T100624[ebp], edx
	cmp	DWORD PTR $T100624[ebp], 0
	je	SHORT $LN155@soap_fdele
	push	1
	mov	ecx, DWORD PTR $T100624[ebp]
	call	??_G?$vector@HV?$allocator@H@std@@@std@@QAEPAXI@Z
	mov	DWORD PTR tv561[ebp], eax
	jmp	SHORT $LN156@soap_fdele
$LN155@soap_fdele:
	mov	DWORD PTR tv561[ebp], 0
$LN156@soap_fdele:

; 715  : 		else

	jmp	SHORT $LN2@soap_fdele
$LN3@soap_fdele:

; 716  : 			delete[] (std::vector<int >*)p->ptr;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T100629[ebp], ecx
	mov	edx, DWORD PTR $T100629[ebp]
	mov	DWORD PTR $T100628[ebp], edx
	cmp	DWORD PTR $T100628[ebp], 0
	je	SHORT $LN157@soap_fdele
	push	3
	mov	ecx, DWORD PTR $T100628[ebp]
	call	??_E?$vector@HV?$allocator@H@std@@@std@@QAEPAXI@Z
	mov	DWORD PTR tv567[ebp], eax
	jmp	SHORT $LN2@soap_fdele
$LN157@soap_fdele:
	mov	DWORD PTR tv567[ebp], 0
$LN2@soap_fdele:

; 717  : 		break;

	jmp	SHORT $LN71@soap_fdele
$LN1@soap_fdele:

; 718  : 	default:	return SOAP_ERR;

	or	eax, -1
	jmp	SHORT $LN73@soap_fdele
$LN71@soap_fdele:

; 719  : 	}
; 720  : 	return SOAP_OK;

	xor	eax, eax
$LN73@soap_fdele:

; 721  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 1256				; 000004e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN160@soap_fdele:
	DD	$LN70@soap_fdele
	DD	$LN67@soap_fdele
	DD	$LN64@soap_fdele
	DD	$LN61@soap_fdele
	DD	$LN58@soap_fdele
	DD	$LN52@soap_fdele
	DD	$LN55@soap_fdele
	DD	$LN49@soap_fdele
	DD	$LN46@soap_fdele
	DD	$LN43@soap_fdele
	DD	$LN40@soap_fdele
	DD	$LN37@soap_fdele
	DD	$LN34@soap_fdele
	DD	$LN4@soap_fdele
	DD	$LN7@soap_fdele
	DD	$LN31@soap_fdele
	DD	$LN28@soap_fdele
	DD	$LN25@soap_fdele
	DD	$LN22@soap_fdele
	DD	$LN19@soap_fdele
	DD	$LN16@soap_fdele
	DD	$LN13@soap_fdele
	DD	$LN10@soap_fdele
	DD	$LN1@soap_fdele
$LN159@soap_fdele:
	DB	0
	DB	23					; 00000017H
	DB	1
	DB	23					; 00000017H
	DB	2
	DB	23					; 00000017H
	DB	3
	DB	4
	DB	23					; 00000017H
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	23					; 00000017H
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	15					; 0000000fH
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	16					; 00000010H
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	23					; 00000017H
	DB	20					; 00000014H
	DB	23					; 00000017H
	DB	23					; 00000017H
	DB	21					; 00000015H
	DB	22					; 00000016H
?soap_fdelete@@YAHPAUsoap_clist@@@Z ENDP		; soap_fdelete
_TEXT	ENDS
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??_E?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_E?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	mov	eax, DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_E?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ	; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??_G?$vector@MV?$allocator@M@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$vector@MV?$allocator@M@std@@@std@@QAEPAXI@Z PROC	; std::vector<float,std::allocator<float> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$vector@MV?$allocator@M@std@@@std@@QAEPAXI@Z ENDP	; std::vector<float,std::allocator<float> >::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??_E?$vector@MV?$allocator@M@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_E?$vector@MV?$allocator@M@std@@@std@@QAEPAXI@Z PROC	; std::vector<float,std::allocator<float> >::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@2
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_E?$vector@MV?$allocator@M@std@@@std@@QAEPAXI@Z ENDP	; std::vector<float,std::allocator<float> >::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??_G?$vector@HV?$allocator@H@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$vector@HV?$allocator@H@std@@@std@@QAEPAXI@Z PROC	; std::vector<int,std::allocator<int> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$vector@HV?$allocator@H@std@@@std@@QAEPAXI@Z ENDP	; std::vector<int,std::allocator<int> >::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??_E?$vector@HV?$allocator@H@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_E?$vector@HV?$allocator@H@std@@@std@@QAEPAXI@Z PROC	; std::vector<int,std::allocator<int> >::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@3
	push	OFFSET ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@3
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@3
$LN3@vector@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@3:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_E?$vector@HV?$allocator@H@std@@@std@@QAEPAXI@Z ENDP	; std::vector<int,std::allocator<int> >::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?soap_class_id_enter@@YAPAXPAUsoap@@PBDPAXHI11@Z ; soap_class_id_enter
EXTRN	_soap_id_enter:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_class_id_enter@@YAPAXPAUsoap@@PBDPAXHI11@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_id$ = 12						; size = 4
_p$ = 16						; size = 4
_t$ = 20						; size = 4
_n$ = 24						; size = 4
_type$ = 28						; size = 4
_arrayType$ = 32					; size = 4
?soap_class_id_enter@@YAPAXPAUsoap@@PBDPAXHI11@Z PROC	; soap_class_id_enter, COMDAT

; 724  : {	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	OFFSET ?soap_instantiate@@YAPAXPAUsoap@@HPBD1PAI@Z ; soap_instantiate
	mov	eax, DWORD PTR _arrayType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_id_enter
	add	esp, 36					; 00000024H

; 725  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_class_id_enter@@YAPAXPAUsoap@@PBDPAXHI11@Z ENDP	; soap_class_id_enter
_TEXT	ENDS
PUBLIC	?soap_container_insert@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_container_insert
PUBLIC	?soap_container_id_forward@@YAPAXPAUsoap@@PBDPAXIHHII@Z ; soap_container_id_forward
EXTRN	_soap_id_forward:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_container_id_forward@@YAPAXPAUsoap@@PBDPAXIHHII@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_href$ = 12						; size = 4
_p$ = 16						; size = 4
_len$ = 20						; size = 4
_st$ = 24						; size = 4
_tt$ = 28						; size = 4
_n$ = 32						; size = 4
_k$ = 36						; size = 4
?soap_container_id_forward@@YAPAXPAUsoap@@PBDPAXIHHII@Z PROC ; soap_container_id_forward, COMDAT

; 728  : {	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	OFFSET ?soap_container_insert@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_container_insert
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tt$[ebp]
	push	edx
	mov	eax, DWORD PTR _st$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _href$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_id_forward
	add	esp, 36					; 00000024H

; 729  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_container_id_forward@@YAPAXPAUsoap@@PBDPAXIHHII@Z ENDP ; soap_container_id_forward
_TEXT	ENDS
PUBLIC	??_C@_0CA@OPBHAEBF@Could?5not?5insert?5type?$DN?$CFd?5in?5?$CFd?6?$AA@ ; `string'
PUBLIC	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
PUBLIC	??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z ; std::vector<float,std::allocator<float> >::operator[]
PUBLIC	??_C@_0DO@FBODOPPA@Container?5insert?5type?$DN?$CFd?5in?5?$CFd?5l@ ; `string'
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0CA@OPBHAEBF@Could?5not?5insert?5type?$DN?$CFd?5in?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0CA@OPBHAEBF@Could?5not?5insert?5type?$DN?$CFd?5in?5?$CFd?6?$AA@ DB 'C'
	DB	'ould not insert type=%d in %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@FBODOPPA@Container?5insert?5type?$DN?$CFd?5in?5?$CFd?5l@
CONST	SEGMENT
??_C@_0DO@FBODOPPA@Container?5insert?5type?$DN?$CFd?5in?5?$CFd?5l@ DB 'Co'
	DB	'ntainer insert type=%d in %d location=%p object=%p len=%lu', 0aH
	DB	00H						; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_container_insert@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
tv64 = -232						; size = 4
_fdebug$87402 = -32					; size = 4
_fdebug$87389 = -20					; size = 4
_fdebug$87375 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_container_insert@@YAXPAUsoap@@HHPAXIPBXI@Z PROC	; soap_container_insert, COMDAT

; 736  : {	switch (tt)

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _tt$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 26			; 0000001aH
	je	$LN8@soap_conta
	cmp	DWORD PTR tv64[ebp], 27			; 0000001bH
	je	SHORT $LN12@soap_conta
	jmp	$LN4@soap_conta
$LN12@soap_conta:

; 737  : 	{
; 738  : 	case SOAP_TYPE_std__vectorTemplateOffloat:
; 739  : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN9@soap_conta
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN10@soap_conta
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN10@soap_conta:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN9@soap_conta
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$87375[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _tt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _st$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DO@FBODOPPA@Container?5insert?5type?$DN?$CFd?5in?5?$CFd?5l@
	mov	edx, DWORD PTR _fdebug$87375[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$87375[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@soap_conta:

; 740  : 		(*(std::vector<float >*)p)[len] = *(float *)q;

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z ; std::vector<float,std::allocator<float> >::operator[]
	mov	ecx, DWORD PTR _q$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 741  : 		break;

	jmp	$LN13@soap_conta
$LN8@soap_conta:

; 742  : 	case SOAP_TYPE_std__vectorTemplateOfint:
; 743  : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN5@soap_conta
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN6@soap_conta
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN6@soap_conta:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN5@soap_conta
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$87389[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _tt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _st$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DO@FBODOPPA@Container?5insert?5type?$DN?$CFd?5in?5?$CFd?5l@
	mov	edx, DWORD PTR _fdebug$87389[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$87389[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@soap_conta:

; 744  : 		(*(std::vector<int >*)p)[len] = *(int *)q;

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR _q$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 745  : 		break;

	jmp	SHORT $LN13@soap_conta
$LN4@soap_conta:

; 746  : 	default:
; 747  : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN1@soap_conta
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_conta
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_conta:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN1@soap_conta
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$87402[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _tt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _st$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CA@OPBHAEBF@Could?5not?5insert?5type?$DN?$CFd?5in?5?$CFd?6?$AA@
	mov	edx, DWORD PTR _fdebug$87402[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$87402[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@soap_conta:
$LN13@soap_conta:

; 748  : 	}
; 749  : #ifdef WIN32
; 750  : #pragma warning(pop)
; 751  : #endif
; 752  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_container_insert@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP	; soap_container_insert
_TEXT	ENDS
PUBLIC	?soap_default_byte@@YAXPAUsoap@@PAD@Z		; soap_default_byte
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default_byte@@YAXPAUsoap@@PAD@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_default_byte@@YAXPAUsoap@@PAD@Z PROC		; soap_default_byte, COMDAT

; 755  : {	(void)soap; /* appease -Wall -Werror */

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 756  : #ifdef SOAP_DEFAULT_byte
; 757  : 	*a = SOAP_DEFAULT_byte;
; 758  : #else
; 759  : 	*a = (char)0;

	mov	eax, DWORD PTR _a$[ebp]
	mov	BYTE PTR [eax], 0

; 760  : #endif
; 761  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_default_byte@@YAXPAUsoap@@PAD@Z ENDP		; soap_default_byte
_TEXT	ENDS
PUBLIC	?soap_put_byte@@YAHPAUsoap@@PBD11@Z		; soap_put_byte
EXTRN	_soap_embed:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_byte@@YAHPAUsoap@@PBD11@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_byte@@YAHPAUsoap@@PBD11@Z PROC		; soap_put_byte, COMDAT

; 764  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 765  : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);

	push	3
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 766  : 	if (soap_out_byte(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_byte@@YAHPAUsoap@@PBDH11@Z	; soap_out_byte
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_b

; 767  : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_b
$LN1@soap_put_b:

; 768  : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_b:

; 769  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_byte@@YAHPAUsoap@@PBD11@Z ENDP		; soap_put_byte
_TEXT	ENDS
EXTRN	_soap_outbyte:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out_byte@@YAHPAUsoap@@PBDH11@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_byte@@YAHPAUsoap@@PBDH11@Z PROC		; soap_out_byte, COMDAT

; 772  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 773  : 	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);

	push	3
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_outbyte
	add	esp, 24					; 00000018H

; 774  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_byte@@YAHPAUsoap@@PBDH11@Z ENDP		; soap_out_byte
_TEXT	ENDS
PUBLIC	?soap_get_byte@@YAPADPAUsoap@@PADPBD2@Z		; soap_get_byte
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_byte@@YAPADPAUsoap@@PADPBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_byte@@YAPADPAUsoap@@PADPBD2@Z PROC		; soap_get_byte, COMDAT

; 777  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 778  : 	if ((p = soap_in_byte(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_byte@@YAPADPAUsoap@@PBDPAD1@Z	; soap_in_byte
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_b

; 779  : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_b

; 780  : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_b
$LN2@soap_get_b:

; 781  : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_b:

; 782  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_byte@@YAPADPAUsoap@@PADPBD2@Z ENDP		; soap_get_byte
_TEXT	ENDS
EXTRN	_soap_inbyte:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in_byte@@YAPADPAUsoap@@PBDPAD1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_byte@@YAPADPAUsoap@@PBDPAD1@Z PROC		; soap_in_byte, COMDAT

; 785  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 786  : 	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);

	push	3
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_inbyte
	add	esp, 20					; 00000014H

; 787  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_byte@@YAPADPAUsoap@@PBDPAD1@Z ENDP		; soap_in_byte
_TEXT	ENDS
PUBLIC	?soap_default_int@@YAXPAUsoap@@PAH@Z		; soap_default_int
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default_int@@YAXPAUsoap@@PAH@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_default_int@@YAXPAUsoap@@PAH@Z PROC		; soap_default_int, COMDAT

; 790  : {	(void)soap; /* appease -Wall -Werror */

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 791  : #ifdef SOAP_DEFAULT_int
; 792  : 	*a = SOAP_DEFAULT_int;
; 793  : #else
; 794  : 	*a = (int)0;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], 0

; 795  : #endif
; 796  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_default_int@@YAXPAUsoap@@PAH@Z ENDP		; soap_default_int
_TEXT	ENDS
PUBLIC	?soap_put_int@@YAHPAUsoap@@PBHPBD2@Z		; soap_put_int
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_int@@YAHPAUsoap@@PBHPBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_int@@YAHPAUsoap@@PBHPBD2@Z PROC		; soap_put_int, COMDAT

; 799  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 800  : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);

	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 801  : 	if (soap_out_int(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_int@@YAHPAUsoap@@PBDHPBH1@Z	; soap_out_int
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_i

; 802  : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_i
$LN1@soap_put_i:

; 803  : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_i:

; 804  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_int@@YAHPAUsoap@@PBHPBD2@Z ENDP		; soap_put_int
_TEXT	ENDS
EXTRN	_soap_outint:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out_int@@YAHPAUsoap@@PBDHPBH1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_int@@YAHPAUsoap@@PBDHPBH1@Z PROC		; soap_out_int, COMDAT

; 807  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 808  : 	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);

	push	1
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_outint
	add	esp, 24					; 00000018H

; 809  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_int@@YAHPAUsoap@@PBDHPBH1@Z ENDP		; soap_out_int
_TEXT	ENDS
PUBLIC	?soap_get_int@@YAPAHPAUsoap@@PAHPBD2@Z		; soap_get_int
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_int@@YAPAHPAUsoap@@PAHPBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_int@@YAPAHPAUsoap@@PAHPBD2@Z PROC		; soap_get_int, COMDAT

; 812  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 813  : 	if ((p = soap_in_int(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_int@@YAPAHPAUsoap@@PBDPAH1@Z	; soap_in_int
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_i

; 814  : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_i

; 815  : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_i
$LN2@soap_get_i:

; 816  : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_i:

; 817  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_int@@YAPAHPAUsoap@@PAHPBD2@Z ENDP		; soap_get_int
_TEXT	ENDS
EXTRN	_soap_inint:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in_int@@YAPAHPAUsoap@@PBDPAH1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_int@@YAPAHPAUsoap@@PBDPAH1@Z PROC		; soap_in_int, COMDAT

; 820  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 821  : 	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);

	push	1
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_inint
	add	esp, 20					; 00000014H

; 822  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_int@@YAPAHPAUsoap@@PBDPAH1@Z ENDP		; soap_in_int
_TEXT	ENDS
PUBLIC	?soap_default_LONG64@@YAXPAUsoap@@PA_J@Z	; soap_default_LONG64
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default_LONG64@@YAXPAUsoap@@PA_J@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_default_LONG64@@YAXPAUsoap@@PA_J@Z PROC		; soap_default_LONG64, COMDAT

; 825  : {	(void)soap; /* appease -Wall -Werror */

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 826  : #ifdef SOAP_DEFAULT_LONG64
; 827  : 	*a = SOAP_DEFAULT_LONG64;
; 828  : #else
; 829  : 	*a = (LONG64)0;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 830  : #endif
; 831  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_default_LONG64@@YAXPAUsoap@@PA_J@Z ENDP		; soap_default_LONG64
_TEXT	ENDS
PUBLIC	?soap_put_LONG64@@YAHPAUsoap@@PB_JPBD2@Z	; soap_put_LONG64
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_LONG64@@YAHPAUsoap@@PB_JPBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_LONG64@@YAHPAUsoap@@PB_JPBD2@Z PROC		; soap_put_LONG64, COMDAT

; 834  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 835  : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_LONG64);

	push	16					; 00000010H
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 836  : 	if (soap_out_LONG64(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_LONG64@@YAHPAUsoap@@PBDHPB_J1@Z ; soap_out_LONG64
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_L

; 837  : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_L
$LN1@soap_put_L:

; 838  : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_L:

; 839  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_LONG64@@YAHPAUsoap@@PB_JPBD2@Z ENDP		; soap_put_LONG64
_TEXT	ENDS
EXTRN	_soap_outLONG64:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out_LONG64@@YAHPAUsoap@@PBDHPB_J1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_LONG64@@YAHPAUsoap@@PBDHPB_J1@Z PROC		; soap_out_LONG64, COMDAT

; 842  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 843  : 	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);

	push	16					; 00000010H
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_outLONG64
	add	esp, 24					; 00000018H

; 844  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_LONG64@@YAHPAUsoap@@PBDHPB_J1@Z ENDP		; soap_out_LONG64
_TEXT	ENDS
PUBLIC	?soap_get_LONG64@@YAPA_JPAUsoap@@PA_JPBD2@Z	; soap_get_LONG64
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_LONG64@@YAPA_JPAUsoap@@PA_JPBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_LONG64@@YAPA_JPAUsoap@@PA_JPBD2@Z PROC	; soap_get_LONG64, COMDAT

; 847  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 848  : 	if ((p = soap_in_LONG64(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_LONG64@@YAPA_JPAUsoap@@PBDPA_J1@Z ; soap_in_LONG64
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_L

; 849  : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_L

; 850  : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_L
$LN2@soap_get_L:

; 851  : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_L:

; 852  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_LONG64@@YAPA_JPAUsoap@@PA_JPBD2@Z ENDP	; soap_get_LONG64
_TEXT	ENDS
EXTRN	_soap_inLONG64:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in_LONG64@@YAPA_JPAUsoap@@PBDPA_J1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_LONG64@@YAPA_JPAUsoap@@PBDPA_J1@Z PROC		; soap_in_LONG64, COMDAT

; 855  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 856  : 	return soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);

	push	16					; 00000010H
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_inLONG64
	add	esp, 20					; 00000014H

; 857  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_LONG64@@YAPA_JPAUsoap@@PBDPA_J1@Z ENDP		; soap_in_LONG64
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	?soap_default_float@@YAXPAUsoap@@PAM@Z		; soap_default_float
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_default_float@@YAXPAUsoap@@PAM@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_default_float@@YAXPAUsoap@@PAM@Z PROC		; soap_default_float, COMDAT

; 860  : {	(void)soap; /* appease -Wall -Werror */

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 861  : #ifdef SOAP_DEFAULT_float
; 862  : 	*a = SOAP_DEFAULT_float;
; 863  : #else
; 864  : 	*a = (float)0;

	mov	eax, DWORD PTR _a$[ebp]
	fldz
	fstp	DWORD PTR [eax]

; 865  : #endif
; 866  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_default_float@@YAXPAUsoap@@PAM@Z ENDP		; soap_default_float
_TEXT	ENDS
PUBLIC	?soap_put_float@@YAHPAUsoap@@PBMPBD2@Z		; soap_put_float
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_float@@YAHPAUsoap@@PBMPBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_float@@YAHPAUsoap@@PBMPBD2@Z PROC		; soap_put_float, COMDAT

; 869  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 870  : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_float);

	push	13					; 0000000dH
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 871  : 	if (soap_out_float(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_float@@YAHPAUsoap@@PBDHPBM1@Z	; soap_out_float
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_f

; 872  : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_f
$LN1@soap_put_f:

; 873  : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_f:

; 874  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_float@@YAHPAUsoap@@PBMPBD2@Z ENDP		; soap_put_float
_TEXT	ENDS
EXTRN	_soap_outfloat:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out_float@@YAHPAUsoap@@PBDHPBM1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_float@@YAHPAUsoap@@PBDHPBM1@Z PROC		; soap_out_float, COMDAT

; 877  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 878  : 	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);

	push	13					; 0000000dH
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_outfloat
	add	esp, 24					; 00000018H

; 879  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_float@@YAHPAUsoap@@PBDHPBM1@Z ENDP		; soap_out_float
_TEXT	ENDS
PUBLIC	?soap_get_float@@YAPAMPAUsoap@@PAMPBD2@Z	; soap_get_float
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_float@@YAPAMPAUsoap@@PAMPBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_float@@YAPAMPAUsoap@@PAMPBD2@Z PROC		; soap_get_float, COMDAT

; 882  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 883  : 	if ((p = soap_in_float(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_float@@YAPAMPAUsoap@@PBDPAM1@Z	; soap_in_float
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_f

; 884  : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_f

; 885  : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_f
$LN2@soap_get_f:

; 886  : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_f:

; 887  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_float@@YAPAMPAUsoap@@PAMPBD2@Z ENDP		; soap_get_float
_TEXT	ENDS
EXTRN	_soap_infloat:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in_float@@YAPAMPAUsoap@@PBDPAM1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_float@@YAPAMPAUsoap@@PBDPAM1@Z PROC		; soap_in_float, COMDAT

; 890  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 891  : 	return soap_infloat(soap, tag, a, type, SOAP_TYPE_float);

	push	13					; 0000000dH
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_infloat
	add	esp, 20					; 00000014H

; 892  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_float@@YAPAMPAUsoap@@PBDPAM1@Z ENDP		; soap_in_float
_TEXT	ENDS
PUBLIC	?soap_default_bool@@YAXPAUsoap@@PA_N@Z		; soap_default_bool
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default_bool@@YAXPAUsoap@@PA_N@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_default_bool@@YAXPAUsoap@@PA_N@Z PROC		; soap_default_bool, COMDAT

; 895  : {	(void)soap; /* appease -Wall -Werror */

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 896  : #ifdef SOAP_DEFAULT_bool
; 897  : 	*a = SOAP_DEFAULT_bool;
; 898  : #else
; 899  : 	*a = (bool)0;

	mov	eax, DWORD PTR _a$[ebp]
	mov	BYTE PTR [eax], 0

; 900  : #endif
; 901  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_default_bool@@YAXPAUsoap@@PA_N@Z ENDP		; soap_default_bool
_TEXT	ENDS
PUBLIC	?soap_put_bool@@YAHPAUsoap@@PB_NPBD2@Z		; soap_put_bool
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_bool@@YAHPAUsoap@@PB_NPBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_bool@@YAHPAUsoap@@PB_NPBD2@Z PROC		; soap_put_bool, COMDAT

; 904  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 905  : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);

	push	11					; 0000000bH
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 906  : 	if (soap_out_bool(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_bool@@YAHPAUsoap@@PBDHPB_N1@Z	; soap_out_bool
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_b@2

; 907  : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_b@2
$LN1@soap_put_b@2:

; 908  : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_b@2:

; 909  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_bool@@YAHPAUsoap@@PB_NPBD2@Z ENDP		; soap_put_bool
_TEXT	ENDS
PUBLIC	?soap_bool2s@@YAPBDPAUsoap@@_N@Z		; soap_bool2s
EXTRN	_soap_code_str:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_bool2s@@YAPBDPAUsoap@@_N@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 1
?soap_bool2s@@YAPBDPAUsoap@@_N@Z PROC			; soap_bool2s, COMDAT

; 918  : {	return soap_code_str(soap_codes_bool, n!=0);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	eax, BYTE PTR _n$[ebp]
	neg	eax
	sbb	eax, eax
	neg	eax
	push	eax
	push	OFFSET _soap_codes_bool
	call	_soap_code_str
	add	esp, 8

; 919  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_bool2s@@YAPBDPAUsoap@@_N@Z ENDP			; soap_bool2s
_TEXT	ENDS
EXTRN	_soap_element_end_out:PROC
EXTRN	_soap_send:PROC
EXTRN	_soap_element_begin_out:PROC
EXTRN	_soap_embedded_id:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out_bool@@YAHPAUsoap@@PBDHPB_N1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_bool@@YAHPAUsoap@@PBDHPB_N1@Z PROC		; soap_out_bool, COMDAT

; 922  : {	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_embedded_id
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_begin_out
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN1@soap_out_b
	mov	eax, DWORD PTR _a$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_bool2s@@YAPBDPAUsoap@@_N@Z	; soap_bool2s
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_send
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_out_b
$LN1@soap_out_b:

; 923  : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN3@soap_out_b
$LN2@soap_out_b:

; 924  : 	return soap_element_end_out(soap, tag);

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_out
	add	esp, 8
$LN3@soap_out_b:

; 925  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_bool@@YAHPAUsoap@@PBDHPB_N1@Z ENDP		; soap_out_bool
_TEXT	ENDS
PUBLIC	?soap_get_bool@@YAPA_NPAUsoap@@PA_NPBD2@Z	; soap_get_bool
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_bool@@YAPA_NPAUsoap@@PA_NPBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_bool@@YAPA_NPAUsoap@@PA_NPBD2@Z PROC		; soap_get_bool, COMDAT

; 928  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 929  : 	if ((p = soap_in_bool(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_bool@@YAPA_NPAUsoap@@PBDPA_N1@Z ; soap_in_bool
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_b@2

; 930  : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_b@2

; 931  : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_b@2
$LN2@soap_get_b@2:

; 932  : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_b@2:

; 933  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_bool@@YAPA_NPAUsoap@@PA_NPBD2@Z ENDP		; soap_get_bool
_TEXT	ENDS
PUBLIC	?soap_s2bool@@YAHPAUsoap@@PBDPA_N@Z		; soap_s2bool
EXTRN	_soap_s2long:PROC
EXTRN	_soap_code:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_s2bool@@YAHPAUsoap@@PBDPA_N@Z
_TEXT	SEGMENT
_n$87597 = -20						; size = 4
_map$ = -8						; size = 4
_soap$ = 8						; size = 4
_s$ = 12						; size = 4
_a$ = 16						; size = 4
?soap_s2bool@@YAHPAUsoap@@PBDPA_N@Z PROC		; soap_s2bool, COMDAT

; 936  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 937  : 	const struct soap_code_map *map;
; 938  : 	if (!s)

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN5@soap_s2boo

; 939  : 		return SOAP_OK;

	xor	eax, eax
	jmp	SHORT $LN6@soap_s2boo
$LN5@soap_s2boo:

; 940  : 	map = soap_code(soap_codes_bool, s);

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	push	OFFSET _soap_codes_bool
	call	_soap_code
	add	esp, 8
	mov	DWORD PTR _map$[ebp], eax

; 941  : 	if (map)

	cmp	DWORD PTR _map$[ebp], 0
	je	SHORT $LN4@soap_s2boo

; 942  : 		*a = (bool)(map->code != 0);

	mov	eax, DWORD PTR _map$[ebp]
	cmp	DWORD PTR [eax], 0
	setne	cl
	mov	edx, DWORD PTR _a$[ebp]
	mov	BYTE PTR [edx], cl

; 943  : 	else

	jmp	SHORT $LN3@soap_s2boo
$LN4@soap_s2boo:

; 944  : 	{	long n;
; 945  : 		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)

	lea	eax, DWORD PTR _n$87597[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_s2long
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@soap_s2boo
	cmp	DWORD PTR _n$87597[ebp], 0
	jl	SHORT $LN1@soap_s2boo
	cmp	DWORD PTR _n$87597[ebp], 1
	jle	SHORT $LN2@soap_s2boo
$LN1@soap_s2boo:

; 946  : 			return soap->error = SOAP_TYPE;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 4
	mov	eax, 4
	jmp	SHORT $LN6@soap_s2boo
$LN2@soap_s2boo:

; 947  : 		*a = (bool)(n != 0);

	cmp	DWORD PTR _n$87597[ebp], 0
	setne	al
	mov	ecx, DWORD PTR _a$[ebp]
	mov	BYTE PTR [ecx], al
$LN3@soap_s2boo:

; 948  : 	}
; 949  : 	return SOAP_OK;

	xor	eax, eax
$LN6@soap_s2boo:

; 950  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@soap_s2boo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@soap_s2boo:
	DD	1
	DD	$LN9@soap_s2boo
$LN9@soap_s2boo:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@soap_s2boo
$LN8@soap_s2boo:
	DB	110					; 0000006eH
	DB	0
?soap_s2bool@@YAHPAUsoap@@PBDPA_N@Z ENDP		; soap_s2bool
_TEXT	ENDS
PUBLIC	??_C@_08FGCKPNBL@?3boolean?$AA@			; `string'
EXTRN	_soap_value:PROC
EXTRN	_soap_element_begin_in:PROC
;	COMDAT ??_C@_08FGCKPNBL@?3boolean?$AA@
CONST	SEGMENT
??_C@_08FGCKPNBL@?3boolean?$AA@ DB ':boolean', 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_in_bool@@YAPA_NPAUsoap@@PBDPA_N1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_bool@@YAPA_NPAUsoap@@PBDPA_N1@Z PROC		; soap_in_bool, COMDAT

; 953  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 954  : 	if (soap_element_begin_in(soap, tag, 0, NULL))

	push	0
	push	0
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN8@soap_in_bo

; 955  : 		return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_bo
$LN8@soap_in_bo:

; 956  : 	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+83124]
	test	ecx, ecx
	je	SHORT $LN7@soap_in_bo
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN7@soap_in_bo
	push	OFFSET ??_C@_08FGCKPNBL@?3boolean?$AA@
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 83124				; 000144b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN7@soap_in_bo

; 957  : 	{	soap->error = SOAP_TYPE;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 4

; 958  : 		return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_bo
$LN7@soap_in_bo:

; 959  : 	}
; 960  : 	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	push	0
	push	1
	push	11					; 0000000bH
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 81076				; 00013cb4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_enter
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 961  : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN6@soap_in_bo

; 962  : 		return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_bo
$LN6@soap_in_bo:

; 963  : 	if (soap->body && !*soap->href)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN5@soap_in_bo
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	test	ecx, ecx
	jne	SHORT $LN5@soap_in_bo

; 964  : 	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))

	cmp	DWORD PTR _a$[ebp], 0
	je	SHORT $LN3@soap_in_bo
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_value
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_s2bool@@YAHPAUsoap@@PBDPA_N@Z	; soap_s2bool
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@soap_in_bo
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@soap_in_bo
$LN3@soap_in_bo:

; 965  : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN9@soap_in_bo
$LN4@soap_in_bo:

; 966  : 	}
; 967  : 	else

	jmp	SHORT $LN2@soap_in_bo
$LN5@soap_in_bo:

; 968  : 	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);

	push	0
	push	0
	push	1
	push	0
	push	11					; 0000000bH
	push	0
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_forward
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 969  : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN2@soap_in_bo
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_in_bo

; 970  : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN9@soap_in_bo
$LN2@soap_in_bo:

; 971  : 	}
; 972  : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN9@soap_in_bo:

; 973  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_bool@@YAPA_NPAUsoap@@PBDPA_N1@Z ENDP		; soap_in_bool
_TEXT	ENDS
PUBLIC	?soap_default@_ns2__submitEpochResultResponseElement@@UAEXPAUsoap@@@Z ; _ns2__submitEpochResultResponseElement::soap_default
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default@_ns2__submitEpochResultResponseElement@@UAEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_default@_ns2__submitEpochResultResponseElement@@UAEXPAUsoap@@@Z PROC ; _ns2__submitEpochResultResponseElement::soap_default, COMDAT
; _this$ = ecx

; 976  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 977  : 	this->soap = soap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 978  : 	soap_default_bool(soap, &this->_ns2__submitEpochResultResponseElement::result);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_bool@@YAXPAUsoap@@PA_N@Z	; soap_default_bool
	add	esp, 8

; 979  : 	/* transient soap skipped */
; 980  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_default@_ns2__submitEpochResultResponseElement@@UAEXPAUsoap@@@Z ENDP ; _ns2__submitEpochResultResponseElement::soap_default
_TEXT	ENDS
PUBLIC	?soap_serialize@_ns2__submitEpochResultResponseElement@@UBEXPAUsoap@@@Z ; _ns2__submitEpochResultResponseElement::soap_serialize
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_serialize@_ns2__submitEpochResultResponseElement@@UBEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_serialize@_ns2__submitEpochResultResponseElement@@UBEXPAUsoap@@@Z PROC ; _ns2__submitEpochResultResponseElement::soap_serialize, COMDAT
; _this$ = ecx

; 983  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 984  : 	(void)soap; /* appease -Wall -Werror */
; 985  : 	/* transient soap skipped */
; 986  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_serialize@_ns2__submitEpochResultResponseElement@@UBEXPAUsoap@@@Z ENDP ; _ns2__submitEpochResultResponseElement::soap_serialize
_TEXT	ENDS
PUBLIC	?soap_put@_ns2__submitEpochResultResponseElement@@UBEHPAUsoap@@PBD1@Z ; _ns2__submitEpochResultResponseElement::soap_put
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put@_ns2__submitEpochResultResponseElement@@UBEHPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_id$ = -20						; size = 4
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_put@_ns2__submitEpochResultResponseElement@@UBEHPAUsoap@@PBD1@Z PROC ; _ns2__submitEpochResultResponseElement::soap_put, COMDAT
; _this$ = ecx

; 989  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 990  : 	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__submitEpochResultResponseElement);

	push	24					; 00000018H
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 991  : 	if (this->soap_out(soap, tag, id, type))

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@soap_put

; 992  : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put
$LN1@soap_put:

; 993  : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put:

; 994  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_put@_ns2__submitEpochResultResponseElement@@UBEHPAUsoap@@PBD1@Z ENDP ; _ns2__submitEpochResultResponseElement::soap_put
_TEXT	ENDS
PUBLIC	?soap_out__ns2__submitEpochResultResponseElement@@YAHPAUsoap@@PBDHPBV_ns2__submitEpochResultResponseElement@@1@Z ; soap_out__ns2__submitEpochResultResponseElement
PUBLIC	?soap_out@_ns2__submitEpochResultResponseElement@@UBEHPAUsoap@@PBDH1@Z ; _ns2__submitEpochResultResponseElement::soap_out
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out@_ns2__submitEpochResultResponseElement@@UBEHPAUsoap@@PBDH1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_out@_ns2__submitEpochResultResponseElement@@UBEHPAUsoap@@PBDH1@Z PROC ; _ns2__submitEpochResultResponseElement::soap_out, COMDAT
; _this$ = ecx

; 997  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 998  : 	return soap_out__ns2__submitEpochResultResponseElement(soap, tag, id, this, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out__ns2__submitEpochResultResponseElement@@YAHPAUsoap@@PBDHPBV_ns2__submitEpochResultResponseElement@@1@Z ; soap_out__ns2__submitEpochResultResponseElement
	add	esp, 20					; 00000014H

; 999  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?soap_out@_ns2__submitEpochResultResponseElement@@UBEHPAUsoap@@PBDH1@Z ENDP ; _ns2__submitEpochResultResponseElement::soap_out
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0L@FEKNHBLL@ns2?3result?$AA@		; `string'
EXTRN	_soap_element_result:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FEKNHBLL@ns2?3result?$AA@
CONST	SEGMENT
??_C@_0L@FEKNHBLL@ns2?3result?$AA@ DB 'ns2:result', 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_out__ns2__submitEpochResultResponseElement@@YAHPAUsoap@@PBDHPBV_ns2__submitEpochResultResponseElement@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out__ns2__submitEpochResultResponseElement@@YAHPAUsoap@@PBDHPBV_ns2__submitEpochResultResponseElement@@1@Z PROC ; soap_out__ns2__submitEpochResultResponseElement, COMDAT

; 1002 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1003 : 	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__submitEpochResultResponseElement), type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	24					; 00000018H
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_embedded_id
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_begin_out
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN2@soap_out__

; 1004 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN3@soap_out__
$LN2@soap_out__:

; 1005 : 	soap_element_result(soap, "ns2:result");

	push	OFFSET ??_C@_0L@FEKNHBLL@ns2?3result?$AA@
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_element_result
	add	esp, 8

; 1006 : 	if (soap_out_bool(soap, "ns2:result", -1, &(a->_ns2__submitEpochResultResponseElement::result), ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 4
	push	eax
	push	-1
	push	OFFSET ??_C@_0L@FEKNHBLL@ns2?3result?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_bool@@YAHPAUsoap@@PBDHPB_N1@Z	; soap_out_bool
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_out__

; 1007 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN3@soap_out__
$LN1@soap_out__:

; 1008 : 	/* transient soap skipped */
; 1009 : 	return soap_element_end_out(soap, tag);

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_out
	add	esp, 8
$LN3@soap_out__:

; 1010 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out__ns2__submitEpochResultResponseElement@@YAHPAUsoap@@PBDHPBV_ns2__submitEpochResultResponseElement@@1@Z ENDP ; soap_out__ns2__submitEpochResultResponseElement
_TEXT	ENDS
PUBLIC	?soap_get__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PAV1@PBD2@Z ; soap_get__ns2__submitEpochResultResponseElement
PUBLIC	?soap_get@_ns2__submitEpochResultResponseElement@@UAEPAXPAUsoap@@PBD1@Z ; _ns2__submitEpochResultResponseElement::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get@_ns2__submitEpochResultResponseElement@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_get@_ns2__submitEpochResultResponseElement@@UAEPAXPAUsoap@@PBD1@Z PROC ; _ns2__submitEpochResultResponseElement::soap_get, COMDAT
; _this$ = ecx

; 1013 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1014 : 	return soap_get__ns2__submitEpochResultResponseElement(soap, this, tag, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_get__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PAV1@PBD2@Z ; soap_get__ns2__submitEpochResultResponseElement
	add	esp, 16					; 00000010H

; 1015 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_get@_ns2__submitEpochResultResponseElement@@UAEPAXPAUsoap@@PBD1@Z ENDP ; _ns2__submitEpochResultResponseElement::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_get__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PAV1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PAV1@PBD2@Z PROC ; soap_get__ns2__submitEpochResultResponseElement, COMDAT

; 1018 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1019 : 	if ((p = soap_in__ns2__submitEpochResultResponseElement(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__submitEpochResultResponseElement
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get__

; 1020 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get__

; 1021 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get__
$LN2@soap_get__:

; 1022 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get__:

; 1023 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PAV1@PBD2@Z ENDP ; soap_get__ns2__submitEpochResultResponseElement
_TEXT	ENDS
PUBLIC	?soap_in@_ns2__submitEpochResultResponseElement@@UAEPAXPAUsoap@@PBD1@Z ; _ns2__submitEpochResultResponseElement::soap_in
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in@_ns2__submitEpochResultResponseElement@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_in@_ns2__submitEpochResultResponseElement@@UAEPAXPAUsoap@@PBD1@Z PROC ; _ns2__submitEpochResultResponseElement::soap_in, COMDAT
; _this$ = ecx

; 1026 : {	return soap_in__ns2__submitEpochResultResponseElement(soap, tag, this, type);

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__submitEpochResultResponseElement
	add	esp, 16					; 00000010H

; 1027 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_in@_ns2__submitEpochResultResponseElement@@UAEPAXPAUsoap@@PBD1@Z ENDP ; _ns2__submitEpochResultResponseElement::soap_in
_TEXT	ENDS
PUBLIC	?soap_copy__ns2__submitEpochResultResponseElement@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy__ns2__submitEpochResultResponseElement
EXTRN	_soap_check_result:PROC
EXTRN	_soap_revert:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PBDPAV1@1@Z
_TEXT	SEGMENT
_soap_flag_result1$ = -8				; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PBDPAV1@1@Z PROC ; soap_in__ns2__submitEpochResultResponseElement, COMDAT

; 1030 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1031 : 	if (soap_element_begin_in(soap, tag, 0, NULL))

	push	0
	push	0
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN16@soap_in__n

; 1032 : 		return NULL;

	xor	eax, eax
	jmp	$LN17@soap_in__n
$LN16@soap_in__n:

; 1033 : 	a = (_ns2__submitEpochResultResponseElement *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__submitEpochResultResponseElement, sizeof(_ns2__submitEpochResultResponseElement), soap->type, soap->arrayType);

	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	12					; 0000000cH
	push	24					; 00000018H
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 81076				; 00013cb4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_class_id_enter@@YAPAXPAUsoap@@PBDPAXHI11@Z ; soap_class_id_enter
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _a$[ebp], eax

; 1034 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN15@soap_in__n

; 1035 : 		return NULL;

	xor	eax, eax
	jmp	$LN17@soap_in__n
$LN15@soap_in__n:

; 1036 : 	if (soap->alloced)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87306]
	test	ecx, ecx
	je	SHORT $LN14@soap_in__n

; 1037 : 	{	a->soap_default(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1038 : 		if (soap->clist->type != SOAP_TYPE__ns2__submitEpochResultResponseElement)

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	cmp	DWORD PTR [ecx+8], 24			; 00000018H
	je	SHORT $LN14@soap_in__n

; 1039 : 		{	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 1040 : 			*soap->id = '\0';

	mov	eax, DWORD PTR _soap$[ebp]
	mov	BYTE PTR [eax+81076], 0

; 1041 : 			return (_ns2__submitEpochResultResponseElement *)a->soap_in(soap, tag, type);

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN17@soap_in__n
$LN14@soap_in__n:

; 1042 : 		}
; 1043 : 	}
; 1044 : 	size_t soap_flag_result1 = 1;

	mov	DWORD PTR _soap_flag_result1$[ebp], 1

; 1045 : 	if (soap->body && !*soap->href)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	$LN12@soap_in__n
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	test	ecx, ecx
	jne	$LN12@soap_in__n
$LN11@soap_in__n:

; 1046 : 	{
; 1047 : 		for (;;)
; 1048 : 		{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 1049 : 			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)

	cmp	DWORD PTR _soap_flag_result1$[ebp], 0
	je	SHORT $LN9@soap_in__n
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN9@soap_in__n

; 1050 : 				if (soap_in_bool(soap, "ns2:result", &(a->_ns2__submitEpochResultResponseElement::result), "xsd:boolean"))

	push	OFFSET ??_C@_0M@FGHMEICI@xsd?3boolean?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_0L@FEKNHBLL@ns2?3result?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_bool@@YAPA_NPAUsoap@@PBDPA_N1@Z ; soap_in_bool
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN9@soap_in__n

; 1051 : 				{	soap_flag_result1--;

	mov	eax, DWORD PTR _soap_flag_result1$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_result1$[ebp], eax

; 1052 : 					continue;

	jmp	SHORT $LN11@soap_in__n
$LN9@soap_in__n:

; 1053 : 				}
; 1054 : 			/* transient soap skipped */
; 1055 : 			soap_check_result(soap, "ns2:result");

	push	OFFSET ??_C@_0L@FEKNHBLL@ns2?3result?$AA@
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_check_result
	add	esp, 8

; 1056 : 			if (soap->error == SOAP_TAG_MISMATCH)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN7@soap_in__n

; 1057 : 				soap->error = soap_ignore_element(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_ignore_element@@YAHPAUsoap@@@Z	; soap_ignore_element
	add	esp, 4
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+90460], eax
$LN7@soap_in__n:

; 1058 : 			if (soap->error == SOAP_NO_TAG)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN6@soap_in__n

; 1059 : 				break;

	jmp	SHORT $LN10@soap_in__n
$LN6@soap_in__n:

; 1060 : 			if (soap->error)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 0
	je	SHORT $LN5@soap_in__n

; 1061 : 				return NULL;

	xor	eax, eax
	jmp	$LN17@soap_in__n
$LN5@soap_in__n:

; 1062 : 		}

	jmp	$LN11@soap_in__n
$LN10@soap_in__n:

; 1063 : 		if (soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@soap_in__n

; 1064 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in__n
$LN4@soap_in__n:

; 1065 : 	}
; 1066 : 	else

	jmp	SHORT $LN3@soap_in__n
$LN12@soap_in__n:

; 1067 : 	{	a = (_ns2__submitEpochResultResponseElement *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__submitEpochResultResponseElement, 0, sizeof(_ns2__submitEpochResultResponseElement), 0, soap_copy__ns2__submitEpochResultResponseElement);

	push	OFFSET ?soap_copy__ns2__submitEpochResultResponseElement@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy__ns2__submitEpochResultResponseElement
	push	0
	push	12					; 0000000cH
	push	0
	push	24					; 00000018H
	push	0
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_forward
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 1068 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN3@soap_in__n
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@soap_in__n

; 1069 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in__n
$LN3@soap_in__n:

; 1070 : 	}
; 1071 : 	if ((soap_flag_result1 > 0))

	cmp	DWORD PTR _soap_flag_result1$[ebp], 0
	jbe	SHORT $LN1@soap_in__n

; 1072 : 	{	soap->error = SOAP_OCCURS;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 44		; 0000002cH

; 1073 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in__n
$LN1@soap_in__n:

; 1074 : 	}
; 1075 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN17@soap_in__n:

; 1076 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PBDPAV1@1@Z ENDP ; soap_in__ns2__submitEpochResultResponseElement
_TEXT	ENDS
PUBLIC	?soap_new__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@H@Z ; soap_new__ns2__submitEpochResultResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_new__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@H@Z PROC ; soap_new__ns2__submitEpochResultResponseElement, COMDAT

; 1079 : {	return soap_instantiate__ns2__submitEpochResultResponseElement(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__submitEpochResultResponseElement
	add	esp, 20					; 00000014H

; 1080 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@H@Z ENDP ; soap_new__ns2__submitEpochResultResponseElement
_TEXT	ENDS
PUBLIC	?soap_delete__ns2__submitEpochResultResponseElement@@YAXPAUsoap@@PAV_ns2__submitEpochResultResponseElement@@@Z ; soap_delete__ns2__submitEpochResultResponseElement
EXTRN	_soap_delete:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete__ns2__submitEpochResultResponseElement@@YAXPAUsoap@@PAV_ns2__submitEpochResultResponseElement@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete__ns2__submitEpochResultResponseElement@@YAXPAUsoap@@PAV_ns2__submitEpochResultResponseElement@@@Z PROC ; soap_delete__ns2__submitEpochResultResponseElement, COMDAT

; 1083 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 1084 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete__ns2__submitEpochResultResponseElement@@YAXPAUsoap@@PAV_ns2__submitEpochResultResponseElement@@@Z ENDP ; soap_delete__ns2__submitEpochResultResponseElement
_TEXT	ENDS
PUBLIC	??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@ ; `string'
PUBLIC	??1_ns2__submitEpochResultResponseElement@@UAE@XZ ; _ns2__submitEpochResultResponseElement::~_ns2__submitEpochResultResponseElement
PUBLIC	??0_ns2__submitEpochResultResponseElement@@QAE@XZ ; _ns2__submitEpochResultResponseElement::_ns2__submitEpochResultResponseElement
PUBLIC	??_C@_0EF@BNGEMDMJ@soap_instantiate__ns2__submitEpo@ ; `string'
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	_soap_link:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
CONST	SEGMENT
??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@ DB 'Instantiate'
	DB	'd location=%p', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@BNGEMDMJ@soap_instantiate__ns2__submitEpo@
CONST	SEGMENT
??_C@_0EF@BNGEMDMJ@soap_instantiate__ns2__submitEpo@ DB 'soap_instantiate'
	DB	'__ns2__submitEpochResultResponseElement(%d, %s, %s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?soap_instantiate__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@HPBD1PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@HPBD1PAI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@HPBD1PAI@Z$1
__ehfuncinfo$?soap_instantiate__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@HPBD1PAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?soap_instantiate__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@HPBD1PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?soap_instantiate__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -320						; size = 4
tv159 = -316						; size = 4
tv133 = -316						; size = 4
tv77 = -316						; size = 4
$T100741 = -308						; size = 4
$T100742 = -296						; size = 4
$T100745 = -284						; size = 4
$T100746 = -272						; size = 4
$T100747 = -260						; size = 4
_fdebug$87760 = -56					; size = 4
_i$87751 = -44						; size = 4
_cp$ = -32						; size = 4
_fdebug$87726 = -20					; size = 4
__$EHRec$ = -12						; size = 12
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate__ns2__submitEpochResultResponseElement, COMDAT

; 1087 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?soap_instantiate__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@HPBD1PAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1088 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__submitEpochResultResponseElement(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN15@soap_insta@2
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN14@soap_insta@2
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN14@soap_insta@2:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN15@soap_insta@2
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$87726[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN18@soap_insta@2
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN19@soap_insta@2
$LN18@soap_insta@2:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN19@soap_insta@2:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN20@soap_insta@2
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN21@soap_insta@2
$LN20@soap_insta@2:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@soap_insta@2:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0EF@BNGEMDMJ@soap_instantiate__ns2__submitEpo@
	mov	edx, DWORD PTR _fdebug$87726[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$87726[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@soap_insta@2:

; 1089 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__submitEpochResultResponseElement, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	24					; 00000018H
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 1090 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN12@soap_insta@2

; 1091 : 		return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@2
$LN12@soap_insta@2:

; 1092 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN11@soap_insta@2

; 1093 : 	{	cp->ptr = (void*)new _ns2__submitEpochResultResponseElement;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T100742[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T100742[ebp], 0
	je	SHORT $LN22@soap_insta@2
	mov	ecx, DWORD PTR $T100742[ebp]
	call	??0_ns2__submitEpochResultResponseElement@@QAE@XZ ; _ns2__submitEpochResultResponseElement::_ns2__submitEpochResultResponseElement
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN23@soap_insta@2
$LN22@soap_insta@2:
	mov	DWORD PTR tv133[ebp], 0
$LN23@soap_insta@2:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T100741[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T100741[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1094 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN10@soap_insta@2

; 1095 : 			*size = sizeof(_ns2__submitEpochResultResponseElement);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN10@soap_insta@2:

; 1096 : 		((_ns2__submitEpochResultResponseElement*)cp->ptr)->soap = soap;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 1097 : 	}
; 1098 : 	else

	jmp	$LN9@soap_insta@2
$LN11@soap_insta@2:

; 1099 : 	{	cp->ptr = (void*)new _ns2__submitEpochResultResponseElement[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T100745[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T100745[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T100747[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T100747[ebp], 0
	je	SHORT $LN24@soap_insta@2
	mov	ecx, DWORD PTR $T100747[ebp]
	mov	edx, DWORD PTR $T100745[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1_ns2__submitEpochResultResponseElement@@UAE@XZ ; _ns2__submitEpochResultResponseElement::~_ns2__submitEpochResultResponseElement
	push	OFFSET ??0_ns2__submitEpochResultResponseElement@@QAE@XZ ; _ns2__submitEpochResultResponseElement::_ns2__submitEpochResultResponseElement
	mov	eax, DWORD PTR $T100745[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T100747[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T100747[ebp]
	add	edx, 4
	mov	DWORD PTR tv159[ebp], edx
	jmp	SHORT $LN25@soap_insta@2
$LN24@soap_insta@2:
	mov	DWORD PTR tv159[ebp], 0
$LN25@soap_insta@2:
	mov	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR $T100746[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T100746[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1100 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@soap_insta@2

; 1101 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 1102 : 			return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@2
$LN8@soap_insta@2:

; 1103 : 		}
; 1104 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@2

; 1105 : 			*size = n * sizeof(_ns2__submitEpochResultResponseElement);

	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN7@soap_insta@2:

; 1106 : 		for (int i = 0; i < n; i++)

	mov	DWORD PTR _i$87751[ebp], 0
	jmp	SHORT $LN6@soap_insta@2
$LN5@soap_insta@2:
	mov	eax, DWORD PTR _i$87751[ebp]
	add	eax, 1
	mov	DWORD PTR _i$87751[ebp], eax
$LN6@soap_insta@2:
	mov	eax, DWORD PTR _i$87751[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN9@soap_insta@2

; 1107 : 			((_ns2__submitEpochResultResponseElement*)cp->ptr)[i].soap = soap;

	mov	eax, DWORD PTR _i$87751[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [edx+eax+8], ecx
	jmp	SHORT $LN5@soap_insta@2
$LN9@soap_insta@2:

; 1108 : 	}
; 1109 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@2
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@2
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@2:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@2
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$87760[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$87760[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$87760[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@2:

; 1110 : 	return (_ns2__submitEpochResultResponseElement*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN16@soap_insta@2:

; 1111 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?soap_instantiate__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@HPBD1PAI@Z$0:
	mov	eax, DWORD PTR $T100742[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@HPBD1PAI@Z$1:
	mov	eax, DWORD PTR $T100747[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?soap_instantiate__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@HPBD1PAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-324]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?soap_instantiate__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@HPBD1PAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?soap_instantiate__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate__ns2__submitEpochResultResponseElement
PUBLIC	??_7_ns2__submitEpochResultResponseElement@@6B@	; _ns2__submitEpochResultResponseElement::`vftable'
PUBLIC	??_R4_ns2__submitEpochResultResponseElement@@6B@ ; _ns2__submitEpochResultResponseElement::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_ns2__submitEpochResultResponseElement@@@8 ; _ns2__submitEpochResultResponseElement `RTTI Type Descriptor'
PUBLIC	??_R3_ns2__submitEpochResultResponseElement@@8	; _ns2__submitEpochResultResponseElement::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_ns2__submitEpochResultResponseElement@@8	; _ns2__submitEpochResultResponseElement::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_ns2__submitEpochResultResponseElement@@8 ; _ns2__submitEpochResultResponseElement::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?soap_type@_ns2__submitEpochResultResponseElement@@UBEHXZ ; _ns2__submitEpochResultResponseElement::soap_type
PUBLIC	??_E_ns2__submitEpochResultResponseElement@@UAEPAXI@Z ; _ns2__submitEpochResultResponseElement::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@_ns2__submitEpochResultResponseElement@@8
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapstub.h
rdata$r	SEGMENT
??_R1A@?0A@EA@_ns2__submitEpochResultResponseElement@@8 DD FLAT:??_R0?AV_ns2__submitEpochResultResponseElement@@@8 ; _ns2__submitEpochResultResponseElement::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_ns2__submitEpochResultResponseElement@@8
rdata$r	ENDS
;	COMDAT ??_R2_ns2__submitEpochResultResponseElement@@8
rdata$r	SEGMENT
??_R2_ns2__submitEpochResultResponseElement@@8 DD FLAT:??_R1A@?0A@EA@_ns2__submitEpochResultResponseElement@@8 ; _ns2__submitEpochResultResponseElement::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_ns2__submitEpochResultResponseElement@@8
rdata$r	SEGMENT
??_R3_ns2__submitEpochResultResponseElement@@8 DD 00H	; _ns2__submitEpochResultResponseElement::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_ns2__submitEpochResultResponseElement@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_ns2__submitEpochResultResponseElement@@@8
_DATA	SEGMENT
??_R0?AV_ns2__submitEpochResultResponseElement@@@8 DD FLAT:??_7type_info@@6B@ ; _ns2__submitEpochResultResponseElement `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_ns2__submitEpochResultResponseElement@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_ns2__submitEpochResultResponseElement@@6B@
rdata$r	SEGMENT
??_R4_ns2__submitEpochResultResponseElement@@6B@ DD 00H	; _ns2__submitEpochResultResponseElement::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_ns2__submitEpochResultResponseElement@@@8
	DD	FLAT:??_R3_ns2__submitEpochResultResponseElement@@8
rdata$r	ENDS
;	COMDAT ??_7_ns2__submitEpochResultResponseElement@@6B@
CONST	SEGMENT
??_7_ns2__submitEpochResultResponseElement@@6B@ DD FLAT:??_R4_ns2__submitEpochResultResponseElement@@6B@ ; _ns2__submitEpochResultResponseElement::`vftable'
	DD	FLAT:?soap_type@_ns2__submitEpochResultResponseElement@@UBEHXZ
	DD	FLAT:?soap_default@_ns2__submitEpochResultResponseElement@@UAEXPAUsoap@@@Z
	DD	FLAT:?soap_serialize@_ns2__submitEpochResultResponseElement@@UBEXPAUsoap@@@Z
	DD	FLAT:?soap_put@_ns2__submitEpochResultResponseElement@@UBEHPAUsoap@@PBD1@Z
	DD	FLAT:?soap_out@_ns2__submitEpochResultResponseElement@@UBEHPAUsoap@@PBDH1@Z
	DD	FLAT:?soap_get@_ns2__submitEpochResultResponseElement@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:?soap_in@_ns2__submitEpochResultResponseElement@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:??_E_ns2__submitEpochResultResponseElement@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??0_ns2__submitEpochResultResponseElement@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_ns2__submitEpochResultResponseElement@@QAE@XZ PROC	; _ns2__submitEpochResultResponseElement::_ns2__submitEpochResultResponseElement, COMDAT
; _this$ = ecx

; 284  : 	_ns2__submitEpochResultResponseElement() : result((bool)0), soap(NULL) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_ns2__submitEpochResultResponseElement@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_ns2__submitEpochResultResponseElement@@QAE@XZ ENDP	; _ns2__submitEpochResultResponseElement::_ns2__submitEpochResultResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_type@_ns2__submitEpochResultResponseElement@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?soap_type@_ns2__submitEpochResultResponseElement@@UBEHXZ PROC ; _ns2__submitEpochResultResponseElement::soap_type, COMDAT
; _this$ = ecx

; 277  : 	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE__ns2__submitEpochResultResponseElement */

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 24					; 00000018H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_type@_ns2__submitEpochResultResponseElement@@UBEHXZ ENDP ; _ns2__submitEpochResultResponseElement::soap_type
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1_ns2__submitEpochResultResponseElement@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_ns2__submitEpochResultResponseElement@@UAE@XZ PROC	; _ns2__submitEpochResultResponseElement::~_ns2__submitEpochResultResponseElement, COMDAT
; _this$ = ecx

; 285  : 	virtual ~_ns2__submitEpochResultResponseElement() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_ns2__submitEpochResultResponseElement@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1_ns2__submitEpochResultResponseElement@@UAE@XZ ENDP	; _ns2__submitEpochResultResponseElement::~_ns2__submitEpochResultResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??_E_ns2__submitEpochResultResponseElement@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_E_ns2__submitEpochResultResponseElement@@UAEPAXI@Z PROC ; _ns2__submitEpochResultResponseElement::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@4
	push	OFFSET ??1_ns2__submitEpochResultResponseElement@@UAE@XZ ; _ns2__submitEpochResultResponseElement::~_ns2__submitEpochResultResponseElement
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@4
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@4
$LN3@vector@4:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_ns2__submitEpochResultResponseElement@@UAE@XZ ; _ns2__submitEpochResultResponseElement::~_ns2__submitEpochResultResponseElement
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@4:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@4:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_E_ns2__submitEpochResultResponseElement@@UAEPAXI@Z ENDP ; _ns2__submitEpochResultResponseElement::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??4_ns2__submitEpochResultResponseElement@@QAEAAV0@ABV0@@Z ; _ns2__submitEpochResultResponseElement::operator=
PUBLIC	??_C@_0DJ@ICBCKPOC@Copying?5_ns2__submitEpochResultR@ ; `string'
;	COMDAT ??_C@_0DJ@ICBCKPOC@Copying?5_ns2__submitEpochResultR@
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapc.cpp
CONST	SEGMENT
??_C@_0DJ@ICBCKPOC@Copying?5_ns2__submitEpochResultR@ DB 'Copying _ns2__s'
	DB	'ubmitEpochResultResponseElement %p -> %p', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy__ns2__submitEpochResultResponseElement@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$87783 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy__ns2__submitEpochResultResponseElement@@YAXPAUsoap@@HHPAXIPBXI@Z PROC ; soap_copy__ns2__submitEpochResultResponseElement, COMDAT

; 1113 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1114 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__submitEpochResultResponseElement %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$87783[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DJ@ICBCKPOC@Copying?5_ns2__submitEpochResultR@
	mov	edx, DWORD PTR _fdebug$87783[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$87783[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_:

; 1115 : 	*(_ns2__submitEpochResultResponseElement*)p = *(_ns2__submitEpochResultResponseElement*)q;

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	??4_ns2__submitEpochResultResponseElement@@QAEAAV0@ABV0@@Z

; 1116 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy__ns2__submitEpochResultResponseElement@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP ; soap_copy__ns2__submitEpochResultResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??4_ns2__submitEpochResultResponseElement@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4_ns2__submitEpochResultResponseElement@@QAEAAV0@ABV0@@Z PROC ; _ns2__submitEpochResultResponseElement::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4_ns2__submitEpochResultResponseElement@@QAEAAV0@ABV0@@Z ENDP ; _ns2__submitEpochResultResponseElement::operator=
_TEXT	ENDS
PUBLIC	?soap_default_std__vectorTemplateOffloat@@YAXPAUsoap@@PAV?$vector@MV?$allocator@M@std@@@std@@@Z ; soap_default_std__vectorTemplateOffloat
PUBLIC	?soap_default_std__vectorTemplateOfint@@YAXPAUsoap@@PAV?$vector@HV?$allocator@H@std@@@std@@@Z ; soap_default_std__vectorTemplateOfint
PUBLIC	?soap_default@_ns2__submitEpochResultElement@@UAEXPAUsoap@@@Z ; _ns2__submitEpochResultElement::soap_default
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default@_ns2__submitEpochResultElement@@UAEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_default@_ns2__submitEpochResultElement@@UAEXPAUsoap@@@Z PROC ; _ns2__submitEpochResultElement::soap_default, COMDAT
; _this$ = ecx

; 1119 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1120 : 	this->soap = soap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+112], ecx

; 1121 : 	this->_ns2__submitEpochResultElement::sessionID = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 1122 : 	soap_default_LONG64(soap, &this->_ns2__submitEpochResultElement::epoch);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_LONG64@@YAXPAUsoap@@PA_J@Z ; soap_default_LONG64
	add	esp, 8

; 1123 : 	soap_default_std__vectorTemplateOfint(soap, &this->_ns2__submitEpochResultElement::channel);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_std__vectorTemplateOfint@@YAXPAUsoap@@PAV?$vector@HV?$allocator@H@std@@@std@@@Z ; soap_default_std__vectorTemplateOfint
	add	esp, 8

; 1124 : 	soap_default_std__vectorTemplateOfint(soap, &this->_ns2__submitEpochResultElement::rank);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_std__vectorTemplateOfint@@YAXPAUsoap@@PAV?$vector@HV?$allocator@H@std@@@std@@@Z ; soap_default_std__vectorTemplateOfint
	add	esp, 8

; 1125 : 	soap_default_std__vectorTemplateOffloat(soap, &this->_ns2__submitEpochResultElement::PsysACTSTBY);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_std__vectorTemplateOffloat@@YAXPAUsoap@@PAV?$vector@MV?$allocator@M@std@@@std@@@Z ; soap_default_std__vectorTemplateOffloat
	add	esp, 8

; 1126 : 	soap_default_std__vectorTemplateOffloat(soap, &this->_ns2__submitEpochResultElement::PsysACT);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_std__vectorTemplateOffloat@@YAXPAUsoap@@PAV?$vector@MV?$allocator@M@std@@@std@@@Z ; soap_default_std__vectorTemplateOffloat
	add	esp, 8

; 1127 : 	soap_default_float(soap, &this->_ns2__submitEpochResultElement::PsysRD);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 104				; 00000068H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_float@@YAXPAUsoap@@PAM@Z	; soap_default_float
	add	esp, 8

; 1128 : 	soap_default_float(soap, &this->_ns2__submitEpochResultElement::PsysWR);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_float@@YAXPAUsoap@@PAM@Z	; soap_default_float
	add	esp, 8

; 1129 : 	/* transient soap skipped */
; 1130 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_default@_ns2__submitEpochResultElement@@UAEXPAUsoap@@@Z ENDP ; _ns2__submitEpochResultElement::soap_default
_TEXT	ENDS
PUBLIC	?soap_serialize_std__vectorTemplateOffloat@@YAXPAUsoap@@PBV?$vector@MV?$allocator@M@std@@@std@@@Z ; soap_serialize_std__vectorTemplateOffloat
PUBLIC	?soap_serialize_std__vectorTemplateOfint@@YAXPAUsoap@@PBV?$vector@HV?$allocator@H@std@@@std@@@Z ; soap_serialize_std__vectorTemplateOfint
PUBLIC	?soap_serialize@_ns2__submitEpochResultElement@@UBEXPAUsoap@@@Z ; _ns2__submitEpochResultElement::soap_serialize
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_serialize@_ns2__submitEpochResultElement@@UBEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_serialize@_ns2__submitEpochResultElement@@UBEXPAUsoap@@@Z PROC ; _ns2__submitEpochResultElement::soap_serialize, COMDAT
; _this$ = ecx

; 1133 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1134 : 	(void)soap; /* appease -Wall -Werror */
; 1135 : 	soap_serialize_PointerTostd__string(soap, &this->_ns2__submitEpochResultElement::sessionID);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_PointerTostd__string@@YAXPAUsoap@@PBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; soap_serialize_PointerTostd__string
	add	esp, 8

; 1136 : 	soap_serialize_std__vectorTemplateOfint(soap, &this->_ns2__submitEpochResultElement::channel);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_std__vectorTemplateOfint@@YAXPAUsoap@@PBV?$vector@HV?$allocator@H@std@@@std@@@Z ; soap_serialize_std__vectorTemplateOfint
	add	esp, 8

; 1137 : 	soap_serialize_std__vectorTemplateOfint(soap, &this->_ns2__submitEpochResultElement::rank);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_std__vectorTemplateOfint@@YAXPAUsoap@@PBV?$vector@HV?$allocator@H@std@@@std@@@Z ; soap_serialize_std__vectorTemplateOfint
	add	esp, 8

; 1138 : 	soap_serialize_std__vectorTemplateOffloat(soap, &this->_ns2__submitEpochResultElement::PsysACTSTBY);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_std__vectorTemplateOffloat@@YAXPAUsoap@@PBV?$vector@MV?$allocator@M@std@@@std@@@Z ; soap_serialize_std__vectorTemplateOffloat
	add	esp, 8

; 1139 : 	soap_serialize_std__vectorTemplateOffloat(soap, &this->_ns2__submitEpochResultElement::PsysACT);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_std__vectorTemplateOffloat@@YAXPAUsoap@@PBV?$vector@MV?$allocator@M@std@@@std@@@Z ; soap_serialize_std__vectorTemplateOffloat
	add	esp, 8

; 1140 : 	/* transient soap skipped */
; 1141 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_serialize@_ns2__submitEpochResultElement@@UBEXPAUsoap@@@Z ENDP ; _ns2__submitEpochResultElement::soap_serialize
_TEXT	ENDS
PUBLIC	?soap_put@_ns2__submitEpochResultElement@@UBEHPAUsoap@@PBD1@Z ; _ns2__submitEpochResultElement::soap_put
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put@_ns2__submitEpochResultElement@@UBEHPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_id$ = -20						; size = 4
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_put@_ns2__submitEpochResultElement@@UBEHPAUsoap@@PBD1@Z PROC ; _ns2__submitEpochResultElement::soap_put, COMDAT
; _this$ = ecx

; 1144 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1145 : 	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__submitEpochResultElement);

	push	23					; 00000017H
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 1146 : 	if (this->soap_out(soap, tag, id, type))

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@soap_put@2

; 1147 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put@2
$LN1@soap_put@2:

; 1148 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put@2:

; 1149 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_put@_ns2__submitEpochResultElement@@UBEHPAUsoap@@PBD1@Z ENDP ; _ns2__submitEpochResultElement::soap_put
_TEXT	ENDS
PUBLIC	?soap_out__ns2__submitEpochResultElement@@YAHPAUsoap@@PBDHPBV_ns2__submitEpochResultElement@@1@Z ; soap_out__ns2__submitEpochResultElement
PUBLIC	?soap_out@_ns2__submitEpochResultElement@@UBEHPAUsoap@@PBDH1@Z ; _ns2__submitEpochResultElement::soap_out
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out@_ns2__submitEpochResultElement@@UBEHPAUsoap@@PBDH1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_out@_ns2__submitEpochResultElement@@UBEHPAUsoap@@PBDH1@Z PROC ; _ns2__submitEpochResultElement::soap_out, COMDAT
; _this$ = ecx

; 1152 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1153 : 	return soap_out__ns2__submitEpochResultElement(soap, tag, id, this, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out__ns2__submitEpochResultElement@@YAHPAUsoap@@PBDHPBV_ns2__submitEpochResultElement@@1@Z ; soap_out__ns2__submitEpochResultElement
	add	esp, 20					; 00000014H

; 1154 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?soap_out@_ns2__submitEpochResultElement@@UBEHPAUsoap@@PBDH1@Z ENDP ; _ns2__submitEpochResultElement::soap_out
_TEXT	ENDS
PUBLIC	??_C@_0M@GGNACEFP@ns2?3float_8?$AA@		; `string'
PUBLIC	??_C@_0M@OBEIDIJA@ns2?3float_7?$AA@		; `string'
PUBLIC	??_C@_0BD@EAHCFMEN@ns2?3arrayOffloat_6?$AA@	; `string'
PUBLIC	?soap_out_std__vectorTemplateOffloat@@YAHPAUsoap@@PBDHPBV?$vector@MV?$allocator@M@std@@@std@@1@Z ; soap_out_std__vectorTemplateOffloat
PUBLIC	??_C@_0BD@GLFPAPIO@ns2?3arrayOffloat_5?$AA@	; `string'
PUBLIC	??_C@_0BB@BJHFFGIN@ns2?3arrayOfint_4?$AA@	; `string'
PUBLIC	?soap_out_std__vectorTemplateOfint@@YAHPAUsoap@@PBDHPBV?$vector@HV?$allocator@H@std@@@std@@1@Z ; soap_out_std__vectorTemplateOfint
PUBLIC	??_C@_0BB@FGDEMAEK@ns2?3arrayOfint_3?$AA@	; `string'
PUBLIC	??_C@_09LGLKGPMP@ns2?3int_2?$AA@		; `string'
PUBLIC	??_C@_0N@EOBKMJFL@ns2?3String_1?$AA@		; `string'
;	COMDAT ??_C@_0M@GGNACEFP@ns2?3float_8?$AA@
CONST	SEGMENT
??_C@_0M@GGNACEFP@ns2?3float_8?$AA@ DB 'ns2:float_8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OBEIDIJA@ns2?3float_7?$AA@
CONST	SEGMENT
??_C@_0M@OBEIDIJA@ns2?3float_7?$AA@ DB 'ns2:float_7', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EAHCFMEN@ns2?3arrayOffloat_6?$AA@
CONST	SEGMENT
??_C@_0BD@EAHCFMEN@ns2?3arrayOffloat_6?$AA@ DB 'ns2:arrayOffloat_6', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GLFPAPIO@ns2?3arrayOffloat_5?$AA@
CONST	SEGMENT
??_C@_0BD@GLFPAPIO@ns2?3arrayOffloat_5?$AA@ DB 'ns2:arrayOffloat_5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BJHFFGIN@ns2?3arrayOfint_4?$AA@
CONST	SEGMENT
??_C@_0BB@BJHFFGIN@ns2?3arrayOfint_4?$AA@ DB 'ns2:arrayOfint_4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FGDEMAEK@ns2?3arrayOfint_3?$AA@
CONST	SEGMENT
??_C@_0BB@FGDEMAEK@ns2?3arrayOfint_3?$AA@ DB 'ns2:arrayOfint_3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LGLKGPMP@ns2?3int_2?$AA@
CONST	SEGMENT
??_C@_09LGLKGPMP@ns2?3int_2?$AA@ DB 'ns2:int_2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EOBKMJFL@ns2?3String_1?$AA@
CONST	SEGMENT
??_C@_0N@EOBKMJFL@ns2?3String_1?$AA@ DB 'ns2:String_1', 00H ; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_out__ns2__submitEpochResultElement@@YAHPAUsoap@@PBDHPBV_ns2__submitEpochResultElement@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out__ns2__submitEpochResultElement@@YAHPAUsoap@@PBDHPBV_ns2__submitEpochResultElement@@1@Z PROC ; soap_out__ns2__submitEpochResultElement, COMDAT

; 1157 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1158 : 	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__submitEpochResultElement), type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	23					; 00000017H
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_embedded_id
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_begin_out
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN9@soap_out__@2

; 1159 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	$LN10@soap_out__@2
$LN9@soap_out__@2:

; 1160 : 	if (soap_out_PointerTostd__string(soap, "ns2:String_1", -1, &(a->_ns2__submitEpochResultElement::sessionID), ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 8
	push	eax
	push	-1
	push	OFFSET ??_C@_0N@EOBKMJFL@ns2?3String_1?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerTostd__string@@YAHPAUsoap@@PBDHPBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@1@Z ; soap_out_PointerTostd__string
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN8@soap_out__@2

; 1161 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	$LN10@soap_out__@2
$LN8@soap_out__@2:

; 1162 : 	if (soap_out_LONG64(soap, "ns2:int_2", -1, &(a->_ns2__submitEpochResultElement::epoch), ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	push	-1
	push	OFFSET ??_C@_09LGLKGPMP@ns2?3int_2?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_LONG64@@YAHPAUsoap@@PBDHPB_J1@Z ; soap_out_LONG64
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN7@soap_out__@2

; 1163 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	$LN10@soap_out__@2
$LN7@soap_out__@2:

; 1164 : 	if (soap_out_std__vectorTemplateOfint(soap, "ns2:arrayOfint_3", -1, &(a->_ns2__submitEpochResultElement::channel), ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	push	-1
	push	OFFSET ??_C@_0BB@FGDEMAEK@ns2?3arrayOfint_3?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_std__vectorTemplateOfint@@YAHPAUsoap@@PBDHPBV?$vector@HV?$allocator@H@std@@@std@@1@Z ; soap_out_std__vectorTemplateOfint
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN6@soap_out__@2

; 1165 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	$LN10@soap_out__@2
$LN6@soap_out__@2:

; 1166 : 	if (soap_out_std__vectorTemplateOfint(soap, "ns2:arrayOfint_4", -1, &(a->_ns2__submitEpochResultElement::rank), ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	push	-1
	push	OFFSET ??_C@_0BB@BJHFFGIN@ns2?3arrayOfint_4?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_std__vectorTemplateOfint@@YAHPAUsoap@@PBDHPBV?$vector@HV?$allocator@H@std@@@std@@1@Z ; soap_out_std__vectorTemplateOfint
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN5@soap_out__@2

; 1167 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	$LN10@soap_out__@2
$LN5@soap_out__@2:

; 1168 : 	if (soap_out_std__vectorTemplateOffloat(soap, "ns2:arrayOffloat_5", -1, &(a->_ns2__submitEpochResultElement::PsysACTSTBY), ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	push	-1
	push	OFFSET ??_C@_0BD@GLFPAPIO@ns2?3arrayOffloat_5?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_std__vectorTemplateOffloat@@YAHPAUsoap@@PBDHPBV?$vector@MV?$allocator@M@std@@@std@@1@Z ; soap_out_std__vectorTemplateOffloat
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN4@soap_out__@2

; 1169 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	$LN10@soap_out__@2
$LN4@soap_out__@2:

; 1170 : 	if (soap_out_std__vectorTemplateOffloat(soap, "ns2:arrayOffloat_6", -1, &(a->_ns2__submitEpochResultElement::PsysACT), ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	push	-1
	push	OFFSET ??_C@_0BD@EAHCFMEN@ns2?3arrayOffloat_6?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_std__vectorTemplateOffloat@@YAHPAUsoap@@PBDHPBV?$vector@MV?$allocator@M@std@@@std@@1@Z ; soap_out_std__vectorTemplateOffloat
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN3@soap_out__@2

; 1171 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN10@soap_out__@2
$LN3@soap_out__@2:

; 1172 : 	if (soap_out_float(soap, "ns2:float_7", -1, &(a->_ns2__submitEpochResultElement::PsysRD), ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 104				; 00000068H
	push	eax
	push	-1
	push	OFFSET ??_C@_0M@OBEIDIJA@ns2?3float_7?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_float@@YAHPAUsoap@@PBDHPBM1@Z	; soap_out_float
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN2@soap_out__@2

; 1173 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN10@soap_out__@2
$LN2@soap_out__@2:

; 1174 : 	if (soap_out_float(soap, "ns2:float_8", -1, &(a->_ns2__submitEpochResultElement::PsysWR), ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	push	-1
	push	OFFSET ??_C@_0M@GGNACEFP@ns2?3float_8?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_float@@YAHPAUsoap@@PBDHPBM1@Z	; soap_out_float
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_out__@2

; 1175 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN10@soap_out__@2
$LN1@soap_out__@2:

; 1176 : 	/* transient soap skipped */
; 1177 : 	return soap_element_end_out(soap, tag);

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_out
	add	esp, 8
$LN10@soap_out__@2:

; 1178 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out__ns2__submitEpochResultElement@@YAHPAUsoap@@PBDHPBV_ns2__submitEpochResultElement@@1@Z ENDP ; soap_out__ns2__submitEpochResultElement
_TEXT	ENDS
PUBLIC	?soap_get__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@PAV1@PBD2@Z ; soap_get__ns2__submitEpochResultElement
PUBLIC	?soap_get@_ns2__submitEpochResultElement@@UAEPAXPAUsoap@@PBD1@Z ; _ns2__submitEpochResultElement::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get@_ns2__submitEpochResultElement@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_get@_ns2__submitEpochResultElement@@UAEPAXPAUsoap@@PBD1@Z PROC ; _ns2__submitEpochResultElement::soap_get, COMDAT
; _this$ = ecx

; 1181 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1182 : 	return soap_get__ns2__submitEpochResultElement(soap, this, tag, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_get__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@PAV1@PBD2@Z ; soap_get__ns2__submitEpochResultElement
	add	esp, 16					; 00000010H

; 1183 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_get@_ns2__submitEpochResultElement@@UAEPAXPAUsoap@@PBD1@Z ENDP ; _ns2__submitEpochResultElement::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_get__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@PAV1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@PAV1@PBD2@Z PROC ; soap_get__ns2__submitEpochResultElement, COMDAT

; 1186 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1187 : 	if ((p = soap_in__ns2__submitEpochResultElement(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__submitEpochResultElement
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get__@2

; 1188 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get__@2

; 1189 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get__@2
$LN2@soap_get__@2:

; 1190 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get__@2:

; 1191 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@PAV1@PBD2@Z ENDP ; soap_get__ns2__submitEpochResultElement
_TEXT	ENDS
PUBLIC	?soap_in@_ns2__submitEpochResultElement@@UAEPAXPAUsoap@@PBD1@Z ; _ns2__submitEpochResultElement::soap_in
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in@_ns2__submitEpochResultElement@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_in@_ns2__submitEpochResultElement@@UAEPAXPAUsoap@@PBD1@Z PROC ; _ns2__submitEpochResultElement::soap_in, COMDAT
; _this$ = ecx

; 1194 : {	return soap_in__ns2__submitEpochResultElement(soap, tag, this, type);

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__submitEpochResultElement
	add	esp, 16					; 00000010H

; 1195 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_in@_ns2__submitEpochResultElement@@UAEPAXPAUsoap@@PBD1@Z ENDP ; _ns2__submitEpochResultElement::soap_in
_TEXT	ENDS
PUBLIC	?soap_copy__ns2__submitEpochResultElement@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy__ns2__submitEpochResultElement
PUBLIC	?soap_in_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@PBDPAV12@1@Z ; soap_in_std__vectorTemplateOffloat
PUBLIC	?soap_in_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@PBDPAV12@1@Z ; soap_in_std__vectorTemplateOfint
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@PBDPAV1@1@Z
_TEXT	SEGMENT
_soap_flag_float_USCORE81$ = -44			; size = 4
_soap_flag_float_USCORE71$ = -32			; size = 4
_soap_flag_int_USCORE21$ = -20				; size = 4
_soap_flag_String_USCORE11$ = -8			; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@PBDPAV1@1@Z PROC ; soap_in__ns2__submitEpochResultElement, COMDAT

; 1198 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1199 : 	if (soap_element_begin_in(soap, tag, 0, NULL))

	push	0
	push	0
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN32@soap_in__n@2

; 1200 : 		return NULL;

	xor	eax, eax
	jmp	$LN33@soap_in__n@2
$LN32@soap_in__n@2:

; 1201 : 	a = (_ns2__submitEpochResultElement *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__submitEpochResultElement, sizeof(_ns2__submitEpochResultElement), soap->type, soap->arrayType);

	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	120					; 00000078H
	push	23					; 00000017H
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 81076				; 00013cb4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_class_id_enter@@YAPAXPAUsoap@@PBDPAXHI11@Z ; soap_class_id_enter
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _a$[ebp], eax

; 1202 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN31@soap_in__n@2

; 1203 : 		return NULL;

	xor	eax, eax
	jmp	$LN33@soap_in__n@2
$LN31@soap_in__n@2:

; 1204 : 	if (soap->alloced)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87306]
	test	ecx, ecx
	je	SHORT $LN30@soap_in__n@2

; 1205 : 	{	a->soap_default(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1206 : 		if (soap->clist->type != SOAP_TYPE__ns2__submitEpochResultElement)

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	cmp	DWORD PTR [ecx+8], 23			; 00000017H
	je	SHORT $LN30@soap_in__n@2

; 1207 : 		{	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 1208 : 			*soap->id = '\0';

	mov	eax, DWORD PTR _soap$[ebp]
	mov	BYTE PTR [eax+81076], 0

; 1209 : 			return (_ns2__submitEpochResultElement *)a->soap_in(soap, tag, type);

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN33@soap_in__n@2
$LN30@soap_in__n@2:

; 1210 : 		}
; 1211 : 	}
; 1212 : 	size_t soap_flag_String_USCORE11 = 1;

	mov	DWORD PTR _soap_flag_String_USCORE11$[ebp], 1

; 1213 : 	size_t soap_flag_int_USCORE21 = 1;

	mov	DWORD PTR _soap_flag_int_USCORE21$[ebp], 1

; 1214 : 	size_t soap_flag_float_USCORE71 = 1;

	mov	DWORD PTR _soap_flag_float_USCORE71$[ebp], 1

; 1215 : 	size_t soap_flag_float_USCORE81 = 1;

	mov	DWORD PTR _soap_flag_float_USCORE81$[ebp], 1

; 1216 : 	if (soap->body && !*soap->href)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	$LN28@soap_in__n@2
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	test	ecx, ecx
	jne	$LN28@soap_in__n@2
$LN27@soap_in__n@2:

; 1217 : 	{
; 1218 : 		for (;;)
; 1219 : 		{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 1220 : 			if (soap_flag_String_USCORE11 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))

	cmp	DWORD PTR _soap_flag_String_USCORE11$[ebp], 0
	je	SHORT $LN25@soap_in__n@2
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	je	SHORT $LN24@soap_in__n@2
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN25@soap_in__n@2
$LN24@soap_in__n@2:

; 1221 : 				if (soap_in_PointerTostd__string(soap, "ns2:String_1", &(a->_ns2__submitEpochResultElement::sessionID), "xsd:string"))

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_0N@EOBKMJFL@ns2?3String_1?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_PointerTostd__string@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PBDPAPAV12@1@Z ; soap_in_PointerTostd__string
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN25@soap_in__n@2

; 1222 : 				{	soap_flag_String_USCORE11--;

	mov	eax, DWORD PTR _soap_flag_String_USCORE11$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_String_USCORE11$[ebp], eax

; 1223 : 					continue;

	jmp	SHORT $LN27@soap_in__n@2
$LN25@soap_in__n@2:

; 1224 : 				}
; 1225 : 			if (soap_flag_int_USCORE21 && soap->error == SOAP_TAG_MISMATCH)

	cmp	DWORD PTR _soap_flag_int_USCORE21$[ebp], 0
	je	SHORT $LN22@soap_in__n@2
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN22@soap_in__n@2

; 1226 : 				if (soap_in_LONG64(soap, "ns2:int_2", &(a->_ns2__submitEpochResultElement::epoch), "xsd:long"))

	push	OFFSET ??_C@_08PNDIDGIB@xsd?3long?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_09LGLKGPMP@ns2?3int_2?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_LONG64@@YAPA_JPAUsoap@@PBDPA_J1@Z ; soap_in_LONG64
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN22@soap_in__n@2

; 1227 : 				{	soap_flag_int_USCORE21--;

	mov	eax, DWORD PTR _soap_flag_int_USCORE21$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_int_USCORE21$[ebp], eax

; 1228 : 					continue;

	jmp	$LN27@soap_in__n@2
$LN22@soap_in__n@2:

; 1229 : 				}
; 1230 : 			if (soap->error == SOAP_TAG_MISMATCH)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN20@soap_in__n@2

; 1231 : 				if (soap_in_std__vectorTemplateOfint(soap, "ns2:arrayOfint_3", &(a->_ns2__submitEpochResultElement::channel), "xsd:int"))

	push	OFFSET ??_C@_07PCIGPDP@xsd?3int?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	push	OFFSET ??_C@_0BB@FGDEMAEK@ns2?3arrayOfint_3?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@PBDPAV12@1@Z ; soap_in_std__vectorTemplateOfint
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN20@soap_in__n@2

; 1232 : 					continue;

	jmp	$LN27@soap_in__n@2
$LN20@soap_in__n@2:

; 1233 : 			if (soap->error == SOAP_TAG_MISMATCH)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN18@soap_in__n@2

; 1234 : 				if (soap_in_std__vectorTemplateOfint(soap, "ns2:arrayOfint_4", &(a->_ns2__submitEpochResultElement::rank), "xsd:int"))

	push	OFFSET ??_C@_07PCIGPDP@xsd?3int?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	push	OFFSET ??_C@_0BB@BJHFFGIN@ns2?3arrayOfint_4?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@PBDPAV12@1@Z ; soap_in_std__vectorTemplateOfint
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN18@soap_in__n@2

; 1235 : 					continue;

	jmp	$LN27@soap_in__n@2
$LN18@soap_in__n@2:

; 1236 : 			if (soap->error == SOAP_TAG_MISMATCH)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN16@soap_in__n@2

; 1237 : 				if (soap_in_std__vectorTemplateOffloat(soap, "ns2:arrayOffloat_5", &(a->_ns2__submitEpochResultElement::PsysACTSTBY), "xsd:float"))

	push	OFFSET ??_C@_09ILBLHFBD@xsd?3float?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	push	OFFSET ??_C@_0BD@GLFPAPIO@ns2?3arrayOffloat_5?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@PBDPAV12@1@Z ; soap_in_std__vectorTemplateOffloat
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN16@soap_in__n@2

; 1238 : 					continue;

	jmp	$LN27@soap_in__n@2
$LN16@soap_in__n@2:

; 1239 : 			if (soap->error == SOAP_TAG_MISMATCH)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN14@soap_in__n@2

; 1240 : 				if (soap_in_std__vectorTemplateOffloat(soap, "ns2:arrayOffloat_6", &(a->_ns2__submitEpochResultElement::PsysACT), "xsd:float"))

	push	OFFSET ??_C@_09ILBLHFBD@xsd?3float?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	push	OFFSET ??_C@_0BD@EAHCFMEN@ns2?3arrayOffloat_6?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@PBDPAV12@1@Z ; soap_in_std__vectorTemplateOffloat
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN14@soap_in__n@2

; 1241 : 					continue;

	jmp	$LN27@soap_in__n@2
$LN14@soap_in__n@2:

; 1242 : 			if (soap_flag_float_USCORE71 && soap->error == SOAP_TAG_MISMATCH)

	cmp	DWORD PTR _soap_flag_float_USCORE71$[ebp], 0
	je	SHORT $LN12@soap_in__n@2
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN12@soap_in__n@2

; 1243 : 				if (soap_in_float(soap, "ns2:float_7", &(a->_ns2__submitEpochResultElement::PsysRD), "xsd:float"))

	push	OFFSET ??_C@_09ILBLHFBD@xsd?3float?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 104				; 00000068H
	push	eax
	push	OFFSET ??_C@_0M@OBEIDIJA@ns2?3float_7?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_float@@YAPAMPAUsoap@@PBDPAM1@Z	; soap_in_float
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN12@soap_in__n@2

; 1244 : 				{	soap_flag_float_USCORE71--;

	mov	eax, DWORD PTR _soap_flag_float_USCORE71$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_float_USCORE71$[ebp], eax

; 1245 : 					continue;

	jmp	$LN27@soap_in__n@2
$LN12@soap_in__n@2:

; 1246 : 				}
; 1247 : 			if (soap_flag_float_USCORE81 && soap->error == SOAP_TAG_MISMATCH)

	cmp	DWORD PTR _soap_flag_float_USCORE81$[ebp], 0
	je	SHORT $LN10@soap_in__n@2
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN10@soap_in__n@2

; 1248 : 				if (soap_in_float(soap, "ns2:float_8", &(a->_ns2__submitEpochResultElement::PsysWR), "xsd:float"))

	push	OFFSET ??_C@_09ILBLHFBD@xsd?3float?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	push	OFFSET ??_C@_0M@GGNACEFP@ns2?3float_8?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_float@@YAPAMPAUsoap@@PBDPAM1@Z	; soap_in_float
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN10@soap_in__n@2

; 1249 : 				{	soap_flag_float_USCORE81--;

	mov	eax, DWORD PTR _soap_flag_float_USCORE81$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_float_USCORE81$[ebp], eax

; 1250 : 					continue;

	jmp	$LN27@soap_in__n@2
$LN10@soap_in__n@2:

; 1251 : 				}
; 1252 : 			/* transient soap skipped */
; 1253 : 			if (soap->error == SOAP_TAG_MISMATCH)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN8@soap_in__n@2

; 1254 : 				soap->error = soap_ignore_element(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_ignore_element@@YAHPAUsoap@@@Z	; soap_ignore_element
	add	esp, 4
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+90460], eax
$LN8@soap_in__n@2:

; 1255 : 			if (soap->error == SOAP_NO_TAG)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN7@soap_in__n@2

; 1256 : 				break;

	jmp	SHORT $LN26@soap_in__n@2
$LN7@soap_in__n@2:

; 1257 : 			if (soap->error)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 0
	je	SHORT $LN6@soap_in__n@2

; 1258 : 				return NULL;

	xor	eax, eax
	jmp	$LN33@soap_in__n@2
$LN6@soap_in__n@2:

; 1259 : 		}

	jmp	$LN27@soap_in__n@2
$LN26@soap_in__n@2:

; 1260 : 		if (soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN5@soap_in__n@2

; 1261 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN33@soap_in__n@2
$LN5@soap_in__n@2:

; 1262 : 	}
; 1263 : 	else

	jmp	SHORT $LN4@soap_in__n@2
$LN28@soap_in__n@2:

; 1264 : 	{	a = (_ns2__submitEpochResultElement *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__submitEpochResultElement, 0, sizeof(_ns2__submitEpochResultElement), 0, soap_copy__ns2__submitEpochResultElement);

	push	OFFSET ?soap_copy__ns2__submitEpochResultElement@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy__ns2__submitEpochResultElement
	push	0
	push	120					; 00000078H
	push	0
	push	23					; 00000017H
	push	0
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_forward
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 1265 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN4@soap_in__n@2
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@soap_in__n@2

; 1266 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN33@soap_in__n@2
$LN4@soap_in__n@2:

; 1267 : 	}
; 1268 : 	if ((soap_flag_int_USCORE21 > 0 || soap_flag_float_USCORE71 > 0 || soap_flag_float_USCORE81 > 0))

	cmp	DWORD PTR _soap_flag_int_USCORE21$[ebp], 0
	ja	SHORT $LN1@soap_in__n@2
	cmp	DWORD PTR _soap_flag_float_USCORE71$[ebp], 0
	ja	SHORT $LN1@soap_in__n@2
	cmp	DWORD PTR _soap_flag_float_USCORE81$[ebp], 0
	jbe	SHORT $LN2@soap_in__n@2
$LN1@soap_in__n@2:

; 1269 : 	{	soap->error = SOAP_OCCURS;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 44		; 0000002cH

; 1270 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN33@soap_in__n@2
$LN2@soap_in__n@2:

; 1271 : 	}
; 1272 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN33@soap_in__n@2:

; 1273 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@PBDPAV1@1@Z ENDP ; soap_in__ns2__submitEpochResultElement
_TEXT	ENDS
PUBLIC	?soap_new__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@H@Z ; soap_new__ns2__submitEpochResultElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_new__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@H@Z PROC ; soap_new__ns2__submitEpochResultElement, COMDAT

; 1276 : {	return soap_instantiate__ns2__submitEpochResultElement(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__submitEpochResultElement
	add	esp, 20					; 00000014H

; 1277 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@H@Z ENDP ; soap_new__ns2__submitEpochResultElement
_TEXT	ENDS
PUBLIC	?soap_delete__ns2__submitEpochResultElement@@YAXPAUsoap@@PAV_ns2__submitEpochResultElement@@@Z ; soap_delete__ns2__submitEpochResultElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete__ns2__submitEpochResultElement@@YAXPAUsoap@@PAV_ns2__submitEpochResultElement@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete__ns2__submitEpochResultElement@@YAXPAUsoap@@PAV_ns2__submitEpochResultElement@@@Z PROC ; soap_delete__ns2__submitEpochResultElement, COMDAT

; 1280 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 1281 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete__ns2__submitEpochResultElement@@YAXPAUsoap@@PAV_ns2__submitEpochResultElement@@@Z ENDP ; soap_delete__ns2__submitEpochResultElement
_TEXT	ENDS
PUBLIC	??1_ns2__submitEpochResultElement@@UAE@XZ	; _ns2__submitEpochResultElement::~_ns2__submitEpochResultElement
PUBLIC	??0_ns2__submitEpochResultElement@@QAE@XZ	; _ns2__submitEpochResultElement::_ns2__submitEpochResultElement
PUBLIC	??_C@_0DN@ENFAGAGL@soap_instantiate__ns2__submitEpo@ ; `string'
;	COMDAT ??_C@_0DN@ENFAGAGL@soap_instantiate__ns2__submitEpo@
CONST	SEGMENT
??_C@_0DN@ENFAGAGL@soap_instantiate__ns2__submitEpo@ DB 'soap_instantiate'
	DB	'__ns2__submitEpochResultElement(%d, %s, %s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?soap_instantiate__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@HPBD1PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@HPBD1PAI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@HPBD1PAI@Z$1
__ehfuncinfo$?soap_instantiate__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@HPBD1PAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?soap_instantiate__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@HPBD1PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?soap_instantiate__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -320						; size = 4
tv159 = -316						; size = 4
tv133 = -316						; size = 4
tv77 = -316						; size = 4
$T100811 = -308						; size = 4
$T100812 = -296						; size = 4
$T100815 = -284						; size = 4
$T100816 = -272						; size = 4
$T100817 = -260						; size = 4
_fdebug$87961 = -56					; size = 4
_i$87952 = -44						; size = 4
_cp$ = -32						; size = 4
_fdebug$87927 = -20					; size = 4
__$EHRec$ = -12						; size = 12
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate__ns2__submitEpochResultElement, COMDAT

; 1284 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?soap_instantiate__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@HPBD1PAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1285 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__submitEpochResultElement(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN15@soap_insta@3
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN14@soap_insta@3
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN14@soap_insta@3:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN15@soap_insta@3
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$87927[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN18@soap_insta@3
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN19@soap_insta@3
$LN18@soap_insta@3:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN19@soap_insta@3:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN20@soap_insta@3
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN21@soap_insta@3
$LN20@soap_insta@3:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@soap_insta@3:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DN@ENFAGAGL@soap_instantiate__ns2__submitEpo@
	mov	edx, DWORD PTR _fdebug$87927[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$87927[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@soap_insta@3:

; 1286 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__submitEpochResultElement, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	23					; 00000017H
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 1287 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN12@soap_insta@3

; 1288 : 		return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@3
$LN12@soap_insta@3:

; 1289 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN11@soap_insta@3

; 1290 : 	{	cp->ptr = (void*)new _ns2__submitEpochResultElement;

	push	120					; 00000078H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T100812[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T100812[ebp], 0
	je	SHORT $LN22@soap_insta@3
	mov	ecx, DWORD PTR $T100812[ebp]
	call	??0_ns2__submitEpochResultElement@@QAE@XZ ; _ns2__submitEpochResultElement::_ns2__submitEpochResultElement
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN23@soap_insta@3
$LN22@soap_insta@3:
	mov	DWORD PTR tv133[ebp], 0
$LN23@soap_insta@3:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T100811[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T100811[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1291 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN10@soap_insta@3

; 1292 : 			*size = sizeof(_ns2__submitEpochResultElement);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 120			; 00000078H
$LN10@soap_insta@3:

; 1293 : 		((_ns2__submitEpochResultElement*)cp->ptr)->soap = soap;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+112], edx

; 1294 : 	}
; 1295 : 	else

	jmp	$LN9@soap_insta@3
$LN11@soap_insta@3:

; 1296 : 	{	cp->ptr = (void*)new _ns2__submitEpochResultElement[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T100815[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T100815[ebp]
	mov	edx, 120				; 00000078H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T100817[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T100817[ebp], 0
	je	SHORT $LN24@soap_insta@3
	mov	ecx, DWORD PTR $T100817[ebp]
	mov	edx, DWORD PTR $T100815[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1_ns2__submitEpochResultElement@@UAE@XZ ; _ns2__submitEpochResultElement::~_ns2__submitEpochResultElement
	push	OFFSET ??0_ns2__submitEpochResultElement@@QAE@XZ ; _ns2__submitEpochResultElement::_ns2__submitEpochResultElement
	mov	eax, DWORD PTR $T100815[ebp]
	push	eax
	push	120					; 00000078H
	mov	ecx, DWORD PTR $T100817[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T100817[ebp]
	add	edx, 4
	mov	DWORD PTR tv159[ebp], edx
	jmp	SHORT $LN25@soap_insta@3
$LN24@soap_insta@3:
	mov	DWORD PTR tv159[ebp], 0
$LN25@soap_insta@3:
	mov	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR $T100816[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T100816[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1297 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@soap_insta@3

; 1298 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 1299 : 			return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@3
$LN8@soap_insta@3:

; 1300 : 		}
; 1301 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@3

; 1302 : 			*size = n * sizeof(_ns2__submitEpochResultElement);

	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 120				; 00000078H
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN7@soap_insta@3:

; 1303 : 		for (int i = 0; i < n; i++)

	mov	DWORD PTR _i$87952[ebp], 0
	jmp	SHORT $LN6@soap_insta@3
$LN5@soap_insta@3:
	mov	eax, DWORD PTR _i$87952[ebp]
	add	eax, 1
	mov	DWORD PTR _i$87952[ebp], eax
$LN6@soap_insta@3:
	mov	eax, DWORD PTR _i$87952[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN9@soap_insta@3

; 1304 : 			((_ns2__submitEpochResultElement*)cp->ptr)[i].soap = soap;

	mov	eax, DWORD PTR _i$87952[ebp]
	imul	eax, 120				; 00000078H
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [edx+eax+112], ecx
	jmp	SHORT $LN5@soap_insta@3
$LN9@soap_insta@3:

; 1305 : 	}
; 1306 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@3
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@3
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@3:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@3
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$87961[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$87961[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$87961[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@3:

; 1307 : 	return (_ns2__submitEpochResultElement*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN16@soap_insta@3:

; 1308 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?soap_instantiate__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@HPBD1PAI@Z$0:
	mov	eax, DWORD PTR $T100812[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@HPBD1PAI@Z$1:
	mov	eax, DWORD PTR $T100817[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?soap_instantiate__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@HPBD1PAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-324]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?soap_instantiate__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@HPBD1PAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?soap_instantiate__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate__ns2__submitEpochResultElement
PUBLIC	??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ	; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	??_7_ns2__submitEpochResultElement@@6B@		; _ns2__submitEpochResultElement::`vftable'
PUBLIC	??_R4_ns2__submitEpochResultElement@@6B@	; _ns2__submitEpochResultElement::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_ns2__submitEpochResultElement@@@8	; _ns2__submitEpochResultElement `RTTI Type Descriptor'
PUBLIC	??_R3_ns2__submitEpochResultElement@@8		; _ns2__submitEpochResultElement::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_ns2__submitEpochResultElement@@8		; _ns2__submitEpochResultElement::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_ns2__submitEpochResultElement@@8	; _ns2__submitEpochResultElement::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?soap_type@_ns2__submitEpochResultElement@@UBEHXZ ; _ns2__submitEpochResultElement::soap_type
PUBLIC	??_E_ns2__submitEpochResultElement@@UAEPAXI@Z	; _ns2__submitEpochResultElement::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_ns2__submitEpochResultElement@@8
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapstub.h
rdata$r	SEGMENT
??_R1A@?0A@EA@_ns2__submitEpochResultElement@@8 DD FLAT:??_R0?AV_ns2__submitEpochResultElement@@@8 ; _ns2__submitEpochResultElement::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_ns2__submitEpochResultElement@@8
rdata$r	ENDS
;	COMDAT ??_R2_ns2__submitEpochResultElement@@8
rdata$r	SEGMENT
??_R2_ns2__submitEpochResultElement@@8 DD FLAT:??_R1A@?0A@EA@_ns2__submitEpochResultElement@@8 ; _ns2__submitEpochResultElement::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_ns2__submitEpochResultElement@@8
rdata$r	SEGMENT
??_R3_ns2__submitEpochResultElement@@8 DD 00H		; _ns2__submitEpochResultElement::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_ns2__submitEpochResultElement@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_ns2__submitEpochResultElement@@@8
_DATA	SEGMENT
??_R0?AV_ns2__submitEpochResultElement@@@8 DD FLAT:??_7type_info@@6B@ ; _ns2__submitEpochResultElement `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_ns2__submitEpochResultElement@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_ns2__submitEpochResultElement@@6B@
rdata$r	SEGMENT
??_R4_ns2__submitEpochResultElement@@6B@ DD 00H		; _ns2__submitEpochResultElement::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_ns2__submitEpochResultElement@@@8
	DD	FLAT:??_R3_ns2__submitEpochResultElement@@8
rdata$r	ENDS
;	COMDAT ??_7_ns2__submitEpochResultElement@@6B@
CONST	SEGMENT
??_7_ns2__submitEpochResultElement@@6B@ DD FLAT:??_R4_ns2__submitEpochResultElement@@6B@ ; _ns2__submitEpochResultElement::`vftable'
	DD	FLAT:?soap_type@_ns2__submitEpochResultElement@@UBEHXZ
	DD	FLAT:?soap_default@_ns2__submitEpochResultElement@@UAEXPAUsoap@@@Z
	DD	FLAT:?soap_serialize@_ns2__submitEpochResultElement@@UBEXPAUsoap@@@Z
	DD	FLAT:?soap_put@_ns2__submitEpochResultElement@@UBEHPAUsoap@@PBD1@Z
	DD	FLAT:?soap_out@_ns2__submitEpochResultElement@@UBEHPAUsoap@@PBDH1@Z
	DD	FLAT:?soap_get@_ns2__submitEpochResultElement@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:?soap_in@_ns2__submitEpochResultElement@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:??_E_ns2__submitEpochResultElement@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_ns2__submitEpochResultElement@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_ns2__submitEpochResultElement@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_ns2__submitEpochResultElement@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_ns2__submitEpochResultElement@@QAE@XZ$2
__ehfuncinfo$??0_ns2__submitEpochResultElement@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0_ns2__submitEpochResultElement@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??0_ns2__submitEpochResultElement@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0_ns2__submitEpochResultElement@@QAE@XZ PROC		; _ns2__submitEpochResultElement::_ns2__submitEpochResultElement, COMDAT
; _this$ = ecx

; 263  : 	_ns2__submitEpochResultElement() : sessionID(NULL), epoch(0), PsysRD(0), PsysWR(0), soap(NULL) { }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0_ns2__submitEpochResultElement@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_ns2__submitEpochResultElement@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+104]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+108]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+112], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_ns2__submitEpochResultElement@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0_ns2__submitEpochResultElement@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0_ns2__submitEpochResultElement@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
__ehhandler$??0_ns2__submitEpochResultElement@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0_ns2__submitEpochResultElement@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0_ns2__submitEpochResultElement@@QAE@XZ ENDP		; _ns2__submitEpochResultElement::_ns2__submitEpochResultElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_type@_ns2__submitEpochResultElement@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?soap_type@_ns2__submitEpochResultElement@@UBEHXZ PROC	; _ns2__submitEpochResultElement::soap_type, COMDAT
; _this$ = ecx

; 256  : 	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE__ns2__submitEpochResultElement */

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 23					; 00000017H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_type@_ns2__submitEpochResultElement@@UBEHXZ ENDP	; _ns2__submitEpochResultElement::soap_type
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_ns2__submitEpochResultElement@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_ns2__submitEpochResultElement@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1_ns2__submitEpochResultElement@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1_ns2__submitEpochResultElement@@UAE@XZ$2
__ehfuncinfo$??1_ns2__submitEpochResultElement@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1_ns2__submitEpochResultElement@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??1_ns2__submitEpochResultElement@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_ns2__submitEpochResultElement@@UAE@XZ PROC		; _ns2__submitEpochResultElement::~_ns2__submitEpochResultElement, COMDAT
; _this$ = ecx

; 264  : 	virtual ~_ns2__submitEpochResultElement() { }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_ns2__submitEpochResultElement@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_ns2__submitEpochResultElement@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_ns2__submitEpochResultElement@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1_ns2__submitEpochResultElement@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1_ns2__submitEpochResultElement@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
__ehhandler$??1_ns2__submitEpochResultElement@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_ns2__submitEpochResultElement@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_ns2__submitEpochResultElement@@UAE@XZ ENDP		; _ns2__submitEpochResultElement::~_ns2__submitEpochResultElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??_E_ns2__submitEpochResultElement@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_E_ns2__submitEpochResultElement@@UAEPAXI@Z PROC	; _ns2__submitEpochResultElement::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@5
	push	OFFSET ??1_ns2__submitEpochResultElement@@UAE@XZ ; _ns2__submitEpochResultElement::~_ns2__submitEpochResultElement
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	120					; 00000078H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@5
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@5
$LN3@vector@5:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_ns2__submitEpochResultElement@@UAE@XZ ; _ns2__submitEpochResultElement::~_ns2__submitEpochResultElement
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@5
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@5:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@5:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_E_ns2__submitEpochResultElement@@UAEPAXI@Z ENDP	; _ns2__submitEpochResultElement::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??4_ns2__submitEpochResultElement@@QAEAAV0@ABV0@@Z ; _ns2__submitEpochResultElement::operator=
PUBLIC	??_C@_0DB@BMIAKGCN@Copying?5_ns2__submitEpochResultE@ ; `string'
;	COMDAT ??_C@_0DB@BMIAKGCN@Copying?5_ns2__submitEpochResultE@
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapc.cpp
CONST	SEGMENT
??_C@_0DB@BMIAKGCN@Copying?5_ns2__submitEpochResultE@ DB 'Copying _ns2__s'
	DB	'ubmitEpochResultElement %p -> %p', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy__ns2__submitEpochResultElement@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$87983 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy__ns2__submitEpochResultElement@@YAXPAUsoap@@HHPAXIPBXI@Z PROC ; soap_copy__ns2__submitEpochResultElement, COMDAT

; 1310 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1311 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__submitEpochResultElement %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@2
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@2
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@2:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@2
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$87983[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DB@BMIAKGCN@Copying?5_ns2__submitEpochResultE@
	mov	edx, DWORD PTR _fdebug$87983[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$87983[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@2:

; 1312 : 	*(_ns2__submitEpochResultElement*)p = *(_ns2__submitEpochResultElement*)q;

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	??4_ns2__submitEpochResultElement@@QAEAAV0@ABV0@@Z

; 1313 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy__ns2__submitEpochResultElement@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP ; soap_copy__ns2__submitEpochResultElement
_TEXT	ENDS
PUBLIC	??4?$vector@MV?$allocator@M@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<float,std::allocator<float> >::operator=
PUBLIC	??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<int,std::allocator<int> >::operator=
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??4_ns2__submitEpochResultElement@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4_ns2__submitEpochResultElement@@QAEAAV0@ABV0@@Z PROC	; _ns2__submitEpochResultElement::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<int,std::allocator<int> >::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<int,std::allocator<int> >::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??4?$vector@MV?$allocator@M@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<float,std::allocator<float> >::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??4?$vector@MV?$allocator@M@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<float,std::allocator<float> >::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [ecx+104]
	fstp	DWORD PTR [eax+104]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [ecx+108]
	fstp	DWORD PTR [eax+108]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR [eax+112], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4_ns2__submitEpochResultElement@@QAEAAV0@ABV0@@Z ENDP	; _ns2__submitEpochResultElement::operator=
_TEXT	ENDS
PUBLIC	?soap_default@_ns2__getSettingsFileResponseElement@@UAEXPAUsoap@@@Z ; _ns2__getSettingsFileResponseElement::soap_default
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default@_ns2__getSettingsFileResponseElement@@UAEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_default@_ns2__getSettingsFileResponseElement@@UAEXPAUsoap@@@Z PROC ; _ns2__getSettingsFileResponseElement::soap_default, COMDAT
; _this$ = ecx

; 1316 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1317 : 	this->soap = soap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1318 : 	this->_ns2__getSettingsFileResponseElement::result = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1319 : 	/* transient soap skipped */
; 1320 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_default@_ns2__getSettingsFileResponseElement@@UAEXPAUsoap@@@Z ENDP ; _ns2__getSettingsFileResponseElement::soap_default
_TEXT	ENDS
PUBLIC	?soap_serialize@_ns2__getSettingsFileResponseElement@@UBEXPAUsoap@@@Z ; _ns2__getSettingsFileResponseElement::soap_serialize
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_serialize@_ns2__getSettingsFileResponseElement@@UBEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_serialize@_ns2__getSettingsFileResponseElement@@UBEXPAUsoap@@@Z PROC ; _ns2__getSettingsFileResponseElement::soap_serialize, COMDAT
; _this$ = ecx

; 1323 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1324 : 	(void)soap; /* appease -Wall -Werror */
; 1325 : 	soap_serialize_PointerTostd__string(soap, &this->_ns2__getSettingsFileResponseElement::result);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_PointerTostd__string@@YAXPAUsoap@@PBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; soap_serialize_PointerTostd__string
	add	esp, 8

; 1326 : 	/* transient soap skipped */
; 1327 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_serialize@_ns2__getSettingsFileResponseElement@@UBEXPAUsoap@@@Z ENDP ; _ns2__getSettingsFileResponseElement::soap_serialize
_TEXT	ENDS
PUBLIC	?soap_put@_ns2__getSettingsFileResponseElement@@UBEHPAUsoap@@PBD1@Z ; _ns2__getSettingsFileResponseElement::soap_put
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put@_ns2__getSettingsFileResponseElement@@UBEHPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_id$ = -20						; size = 4
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_put@_ns2__getSettingsFileResponseElement@@UBEHPAUsoap@@PBD1@Z PROC ; _ns2__getSettingsFileResponseElement::soap_put, COMDAT
; _this$ = ecx

; 1330 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1331 : 	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__getSettingsFileResponseElement);

	push	22					; 00000016H
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 1332 : 	if (this->soap_out(soap, tag, id, type))

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@soap_put@3

; 1333 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put@3
$LN1@soap_put@3:

; 1334 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put@3:

; 1335 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_put@_ns2__getSettingsFileResponseElement@@UBEHPAUsoap@@PBD1@Z ENDP ; _ns2__getSettingsFileResponseElement::soap_put
_TEXT	ENDS
PUBLIC	?soap_out__ns2__getSettingsFileResponseElement@@YAHPAUsoap@@PBDHPBV_ns2__getSettingsFileResponseElement@@1@Z ; soap_out__ns2__getSettingsFileResponseElement
PUBLIC	?soap_out@_ns2__getSettingsFileResponseElement@@UBEHPAUsoap@@PBDH1@Z ; _ns2__getSettingsFileResponseElement::soap_out
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out@_ns2__getSettingsFileResponseElement@@UBEHPAUsoap@@PBDH1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_out@_ns2__getSettingsFileResponseElement@@UBEHPAUsoap@@PBDH1@Z PROC ; _ns2__getSettingsFileResponseElement::soap_out, COMDAT
; _this$ = ecx

; 1338 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1339 : 	return soap_out__ns2__getSettingsFileResponseElement(soap, tag, id, this, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out__ns2__getSettingsFileResponseElement@@YAHPAUsoap@@PBDHPBV_ns2__getSettingsFileResponseElement@@1@Z ; soap_out__ns2__getSettingsFileResponseElement
	add	esp, 20					; 00000014H

; 1340 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?soap_out@_ns2__getSettingsFileResponseElement@@UBEHPAUsoap@@PBDH1@Z ENDP ; _ns2__getSettingsFileResponseElement::soap_out
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out__ns2__getSettingsFileResponseElement@@YAHPAUsoap@@PBDHPBV_ns2__getSettingsFileResponseElement@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out__ns2__getSettingsFileResponseElement@@YAHPAUsoap@@PBDHPBV_ns2__getSettingsFileResponseElement@@1@Z PROC ; soap_out__ns2__getSettingsFileResponseElement, COMDAT

; 1343 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1344 : 	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__getSettingsFileResponseElement), type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	22					; 00000016H
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_embedded_id
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_begin_out
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN3@soap_out__@3

; 1345 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN4@soap_out__@3
$LN3@soap_out__@3:

; 1346 : 	if (a->result)

	mov	eax, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@soap_out__@3

; 1347 : 		soap_element_result(soap, "ns2:result");

	push	OFFSET ??_C@_0L@FEKNHBLL@ns2?3result?$AA@
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_element_result
	add	esp, 8
$LN2@soap_out__@3:

; 1348 : 	if (soap_out_PointerTostd__string(soap, "ns2:result", -1, &(a->_ns2__getSettingsFileResponseElement::result), ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 4
	push	eax
	push	-1
	push	OFFSET ??_C@_0L@FEKNHBLL@ns2?3result?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerTostd__string@@YAHPAUsoap@@PBDHPBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@1@Z ; soap_out_PointerTostd__string
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_out__@3

; 1349 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN4@soap_out__@3
$LN1@soap_out__@3:

; 1350 : 	/* transient soap skipped */
; 1351 : 	return soap_element_end_out(soap, tag);

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_out
	add	esp, 8
$LN4@soap_out__@3:

; 1352 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out__ns2__getSettingsFileResponseElement@@YAHPAUsoap@@PBDHPBV_ns2__getSettingsFileResponseElement@@1@Z ENDP ; soap_out__ns2__getSettingsFileResponseElement
_TEXT	ENDS
PUBLIC	?soap_get__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PAV1@PBD2@Z ; soap_get__ns2__getSettingsFileResponseElement
PUBLIC	?soap_get@_ns2__getSettingsFileResponseElement@@UAEPAXPAUsoap@@PBD1@Z ; _ns2__getSettingsFileResponseElement::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get@_ns2__getSettingsFileResponseElement@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_get@_ns2__getSettingsFileResponseElement@@UAEPAXPAUsoap@@PBD1@Z PROC ; _ns2__getSettingsFileResponseElement::soap_get, COMDAT
; _this$ = ecx

; 1355 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1356 : 	return soap_get__ns2__getSettingsFileResponseElement(soap, this, tag, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_get__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PAV1@PBD2@Z ; soap_get__ns2__getSettingsFileResponseElement
	add	esp, 16					; 00000010H

; 1357 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_get@_ns2__getSettingsFileResponseElement@@UAEPAXPAUsoap@@PBD1@Z ENDP ; _ns2__getSettingsFileResponseElement::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_get__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PAV1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PAV1@PBD2@Z PROC ; soap_get__ns2__getSettingsFileResponseElement, COMDAT

; 1360 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1361 : 	if ((p = soap_in__ns2__getSettingsFileResponseElement(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__getSettingsFileResponseElement
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get__@3

; 1362 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get__@3

; 1363 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get__@3
$LN2@soap_get__@3:

; 1364 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get__@3:

; 1365 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PAV1@PBD2@Z ENDP ; soap_get__ns2__getSettingsFileResponseElement
_TEXT	ENDS
PUBLIC	?soap_in@_ns2__getSettingsFileResponseElement@@UAEPAXPAUsoap@@PBD1@Z ; _ns2__getSettingsFileResponseElement::soap_in
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in@_ns2__getSettingsFileResponseElement@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_in@_ns2__getSettingsFileResponseElement@@UAEPAXPAUsoap@@PBD1@Z PROC ; _ns2__getSettingsFileResponseElement::soap_in, COMDAT
; _this$ = ecx

; 1368 : {	return soap_in__ns2__getSettingsFileResponseElement(soap, tag, this, type);

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__getSettingsFileResponseElement
	add	esp, 16					; 00000010H

; 1369 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_in@_ns2__getSettingsFileResponseElement@@UAEPAXPAUsoap@@PBD1@Z ENDP ; _ns2__getSettingsFileResponseElement::soap_in
_TEXT	ENDS
PUBLIC	?soap_copy__ns2__getSettingsFileResponseElement@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy__ns2__getSettingsFileResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PBDPAV1@1@Z
_TEXT	SEGMENT
_soap_flag_result1$ = -8				; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PBDPAV1@1@Z PROC ; soap_in__ns2__getSettingsFileResponseElement, COMDAT

; 1372 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1373 : 	if (soap_element_begin_in(soap, tag, 0, NULL))

	push	0
	push	0
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN16@soap_in__n@3

; 1374 : 		return NULL;

	xor	eax, eax
	jmp	$LN17@soap_in__n@3
$LN16@soap_in__n@3:

; 1375 : 	a = (_ns2__getSettingsFileResponseElement *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__getSettingsFileResponseElement, sizeof(_ns2__getSettingsFileResponseElement), soap->type, soap->arrayType);

	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	12					; 0000000cH
	push	22					; 00000016H
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 81076				; 00013cb4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_class_id_enter@@YAPAXPAUsoap@@PBDPAXHI11@Z ; soap_class_id_enter
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _a$[ebp], eax

; 1376 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN15@soap_in__n@3

; 1377 : 		return NULL;

	xor	eax, eax
	jmp	$LN17@soap_in__n@3
$LN15@soap_in__n@3:

; 1378 : 	if (soap->alloced)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87306]
	test	ecx, ecx
	je	SHORT $LN14@soap_in__n@3

; 1379 : 	{	a->soap_default(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1380 : 		if (soap->clist->type != SOAP_TYPE__ns2__getSettingsFileResponseElement)

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	cmp	DWORD PTR [ecx+8], 22			; 00000016H
	je	SHORT $LN14@soap_in__n@3

; 1381 : 		{	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 1382 : 			*soap->id = '\0';

	mov	eax, DWORD PTR _soap$[ebp]
	mov	BYTE PTR [eax+81076], 0

; 1383 : 			return (_ns2__getSettingsFileResponseElement *)a->soap_in(soap, tag, type);

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN17@soap_in__n@3
$LN14@soap_in__n@3:

; 1384 : 		}
; 1385 : 	}
; 1386 : 	size_t soap_flag_result1 = 1;

	mov	DWORD PTR _soap_flag_result1$[ebp], 1

; 1387 : 	if (soap->body && !*soap->href)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	$LN12@soap_in__n@3
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	test	ecx, ecx
	jne	$LN12@soap_in__n@3
$LN11@soap_in__n@3:

; 1388 : 	{
; 1389 : 		for (;;)
; 1390 : 		{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 1391 : 			if (soap_flag_result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))

	cmp	DWORD PTR _soap_flag_result1$[ebp], 0
	je	SHORT $LN9@soap_in__n@3
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	je	SHORT $LN8@soap_in__n@3
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN9@soap_in__n@3
$LN8@soap_in__n@3:

; 1392 : 				if (soap_in_PointerTostd__string(soap, "ns2:result", &(a->_ns2__getSettingsFileResponseElement::result), "xsd:string"))

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_0L@FEKNHBLL@ns2?3result?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_PointerTostd__string@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PBDPAPAV12@1@Z ; soap_in_PointerTostd__string
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN9@soap_in__n@3

; 1393 : 				{	soap_flag_result1--;

	mov	eax, DWORD PTR _soap_flag_result1$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_result1$[ebp], eax

; 1394 : 					continue;

	jmp	SHORT $LN11@soap_in__n@3
$LN9@soap_in__n@3:

; 1395 : 				}
; 1396 : 			/* transient soap skipped */
; 1397 : 			soap_check_result(soap, "ns2:result");

	push	OFFSET ??_C@_0L@FEKNHBLL@ns2?3result?$AA@
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_check_result
	add	esp, 8

; 1398 : 			if (soap->error == SOAP_TAG_MISMATCH)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN6@soap_in__n@3

; 1399 : 				soap->error = soap_ignore_element(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_ignore_element@@YAHPAUsoap@@@Z	; soap_ignore_element
	add	esp, 4
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+90460], eax
$LN6@soap_in__n@3:

; 1400 : 			if (soap->error == SOAP_NO_TAG)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN5@soap_in__n@3

; 1401 : 				break;

	jmp	SHORT $LN10@soap_in__n@3
$LN5@soap_in__n@3:

; 1402 : 			if (soap->error)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 0
	je	SHORT $LN4@soap_in__n@3

; 1403 : 				return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in__n@3
$LN4@soap_in__n@3:

; 1404 : 		}

	jmp	$LN11@soap_in__n@3
$LN10@soap_in__n@3:

; 1405 : 		if (soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@soap_in__n@3

; 1406 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in__n@3
$LN3@soap_in__n@3:

; 1407 : 	}
; 1408 : 	else

	jmp	SHORT $LN2@soap_in__n@3
$LN12@soap_in__n@3:

; 1409 : 	{	a = (_ns2__getSettingsFileResponseElement *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__getSettingsFileResponseElement, 0, sizeof(_ns2__getSettingsFileResponseElement), 0, soap_copy__ns2__getSettingsFileResponseElement);

	push	OFFSET ?soap_copy__ns2__getSettingsFileResponseElement@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy__ns2__getSettingsFileResponseElement
	push	0
	push	12					; 0000000cH
	push	0
	push	22					; 00000016H
	push	0
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_forward
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 1410 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN2@soap_in__n@3
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_in__n@3

; 1411 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in__n@3
$LN2@soap_in__n@3:

; 1412 : 	}
; 1413 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN17@soap_in__n@3:

; 1414 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PBDPAV1@1@Z ENDP ; soap_in__ns2__getSettingsFileResponseElement
_TEXT	ENDS
PUBLIC	?soap_new__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@H@Z ; soap_new__ns2__getSettingsFileResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_new__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@H@Z PROC ; soap_new__ns2__getSettingsFileResponseElement, COMDAT

; 1417 : {	return soap_instantiate__ns2__getSettingsFileResponseElement(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__getSettingsFileResponseElement
	add	esp, 20					; 00000014H

; 1418 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@H@Z ENDP ; soap_new__ns2__getSettingsFileResponseElement
_TEXT	ENDS
PUBLIC	?soap_delete__ns2__getSettingsFileResponseElement@@YAXPAUsoap@@PAV_ns2__getSettingsFileResponseElement@@@Z ; soap_delete__ns2__getSettingsFileResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete__ns2__getSettingsFileResponseElement@@YAXPAUsoap@@PAV_ns2__getSettingsFileResponseElement@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete__ns2__getSettingsFileResponseElement@@YAXPAUsoap@@PAV_ns2__getSettingsFileResponseElement@@@Z PROC ; soap_delete__ns2__getSettingsFileResponseElement, COMDAT

; 1421 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 1422 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete__ns2__getSettingsFileResponseElement@@YAXPAUsoap@@PAV_ns2__getSettingsFileResponseElement@@@Z ENDP ; soap_delete__ns2__getSettingsFileResponseElement
_TEXT	ENDS
PUBLIC	??1_ns2__getSettingsFileResponseElement@@UAE@XZ	; _ns2__getSettingsFileResponseElement::~_ns2__getSettingsFileResponseElement
PUBLIC	??0_ns2__getSettingsFileResponseElement@@QAE@XZ	; _ns2__getSettingsFileResponseElement::_ns2__getSettingsFileResponseElement
PUBLIC	??_C@_0ED@DCGIFJIM@soap_instantiate__ns2__getSettin@ ; `string'
;	COMDAT ??_C@_0ED@DCGIFJIM@soap_instantiate__ns2__getSettin@
CONST	SEGMENT
??_C@_0ED@DCGIFJIM@soap_instantiate__ns2__getSettin@ DB 'soap_instantiate'
	DB	'__ns2__getSettingsFileResponseElement(%d, %s, %s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?soap_instantiate__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@HPBD1PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@HPBD1PAI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@HPBD1PAI@Z$1
__ehfuncinfo$?soap_instantiate__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@HPBD1PAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?soap_instantiate__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@HPBD1PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?soap_instantiate__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -320						; size = 4
tv159 = -316						; size = 4
tv133 = -316						; size = 4
tv77 = -316						; size = 4
$T100889 = -308						; size = 4
$T100890 = -296						; size = 4
$T100893 = -284						; size = 4
$T100894 = -272						; size = 4
$T100895 = -260						; size = 4
_fdebug$88128 = -56					; size = 4
_i$88119 = -44						; size = 4
_cp$ = -32						; size = 4
_fdebug$88094 = -20					; size = 4
__$EHRec$ = -12						; size = 12
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate__ns2__getSettingsFileResponseElement, COMDAT

; 1425 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?soap_instantiate__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@HPBD1PAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1426 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__getSettingsFileResponseElement(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN15@soap_insta@4
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN14@soap_insta@4
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN14@soap_insta@4:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN15@soap_insta@4
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$88094[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN18@soap_insta@4
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN19@soap_insta@4
$LN18@soap_insta@4:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN19@soap_insta@4:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN20@soap_insta@4
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN21@soap_insta@4
$LN20@soap_insta@4:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@soap_insta@4:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0ED@DCGIFJIM@soap_instantiate__ns2__getSettin@
	mov	edx, DWORD PTR _fdebug$88094[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$88094[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@soap_insta@4:

; 1427 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__getSettingsFileResponseElement, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	22					; 00000016H
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 1428 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN12@soap_insta@4

; 1429 : 		return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@4
$LN12@soap_insta@4:

; 1430 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN11@soap_insta@4

; 1431 : 	{	cp->ptr = (void*)new _ns2__getSettingsFileResponseElement;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T100890[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T100890[ebp], 0
	je	SHORT $LN22@soap_insta@4
	mov	ecx, DWORD PTR $T100890[ebp]
	call	??0_ns2__getSettingsFileResponseElement@@QAE@XZ ; _ns2__getSettingsFileResponseElement::_ns2__getSettingsFileResponseElement
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN23@soap_insta@4
$LN22@soap_insta@4:
	mov	DWORD PTR tv133[ebp], 0
$LN23@soap_insta@4:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T100889[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T100889[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1432 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN10@soap_insta@4

; 1433 : 			*size = sizeof(_ns2__getSettingsFileResponseElement);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN10@soap_insta@4:

; 1434 : 		((_ns2__getSettingsFileResponseElement*)cp->ptr)->soap = soap;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 1435 : 	}
; 1436 : 	else

	jmp	$LN9@soap_insta@4
$LN11@soap_insta@4:

; 1437 : 	{	cp->ptr = (void*)new _ns2__getSettingsFileResponseElement[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T100893[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T100893[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T100895[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T100895[ebp], 0
	je	SHORT $LN24@soap_insta@4
	mov	ecx, DWORD PTR $T100895[ebp]
	mov	edx, DWORD PTR $T100893[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1_ns2__getSettingsFileResponseElement@@UAE@XZ ; _ns2__getSettingsFileResponseElement::~_ns2__getSettingsFileResponseElement
	push	OFFSET ??0_ns2__getSettingsFileResponseElement@@QAE@XZ ; _ns2__getSettingsFileResponseElement::_ns2__getSettingsFileResponseElement
	mov	eax, DWORD PTR $T100893[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T100895[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T100895[ebp]
	add	edx, 4
	mov	DWORD PTR tv159[ebp], edx
	jmp	SHORT $LN25@soap_insta@4
$LN24@soap_insta@4:
	mov	DWORD PTR tv159[ebp], 0
$LN25@soap_insta@4:
	mov	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR $T100894[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T100894[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1438 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@soap_insta@4

; 1439 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 1440 : 			return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@4
$LN8@soap_insta@4:

; 1441 : 		}
; 1442 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@4

; 1443 : 			*size = n * sizeof(_ns2__getSettingsFileResponseElement);

	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN7@soap_insta@4:

; 1444 : 		for (int i = 0; i < n; i++)

	mov	DWORD PTR _i$88119[ebp], 0
	jmp	SHORT $LN6@soap_insta@4
$LN5@soap_insta@4:
	mov	eax, DWORD PTR _i$88119[ebp]
	add	eax, 1
	mov	DWORD PTR _i$88119[ebp], eax
$LN6@soap_insta@4:
	mov	eax, DWORD PTR _i$88119[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN9@soap_insta@4

; 1445 : 			((_ns2__getSettingsFileResponseElement*)cp->ptr)[i].soap = soap;

	mov	eax, DWORD PTR _i$88119[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [edx+eax+8], ecx
	jmp	SHORT $LN5@soap_insta@4
$LN9@soap_insta@4:

; 1446 : 	}
; 1447 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@4
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@4
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@4:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@4
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$88128[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$88128[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$88128[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@4:

; 1448 : 	return (_ns2__getSettingsFileResponseElement*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN16@soap_insta@4:

; 1449 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?soap_instantiate__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@HPBD1PAI@Z$0:
	mov	eax, DWORD PTR $T100890[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@HPBD1PAI@Z$1:
	mov	eax, DWORD PTR $T100895[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?soap_instantiate__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@HPBD1PAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-324]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?soap_instantiate__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@HPBD1PAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?soap_instantiate__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate__ns2__getSettingsFileResponseElement
PUBLIC	??_7_ns2__getSettingsFileResponseElement@@6B@	; _ns2__getSettingsFileResponseElement::`vftable'
PUBLIC	??_R4_ns2__getSettingsFileResponseElement@@6B@	; _ns2__getSettingsFileResponseElement::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_ns2__getSettingsFileResponseElement@@@8 ; _ns2__getSettingsFileResponseElement `RTTI Type Descriptor'
PUBLIC	??_R3_ns2__getSettingsFileResponseElement@@8	; _ns2__getSettingsFileResponseElement::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_ns2__getSettingsFileResponseElement@@8	; _ns2__getSettingsFileResponseElement::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_ns2__getSettingsFileResponseElement@@8 ; _ns2__getSettingsFileResponseElement::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?soap_type@_ns2__getSettingsFileResponseElement@@UBEHXZ ; _ns2__getSettingsFileResponseElement::soap_type
PUBLIC	??_E_ns2__getSettingsFileResponseElement@@UAEPAXI@Z ; _ns2__getSettingsFileResponseElement::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_ns2__getSettingsFileResponseElement@@8
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapstub.h
rdata$r	SEGMENT
??_R1A@?0A@EA@_ns2__getSettingsFileResponseElement@@8 DD FLAT:??_R0?AV_ns2__getSettingsFileResponseElement@@@8 ; _ns2__getSettingsFileResponseElement::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_ns2__getSettingsFileResponseElement@@8
rdata$r	ENDS
;	COMDAT ??_R2_ns2__getSettingsFileResponseElement@@8
rdata$r	SEGMENT
??_R2_ns2__getSettingsFileResponseElement@@8 DD FLAT:??_R1A@?0A@EA@_ns2__getSettingsFileResponseElement@@8 ; _ns2__getSettingsFileResponseElement::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_ns2__getSettingsFileResponseElement@@8
rdata$r	SEGMENT
??_R3_ns2__getSettingsFileResponseElement@@8 DD 00H	; _ns2__getSettingsFileResponseElement::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_ns2__getSettingsFileResponseElement@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_ns2__getSettingsFileResponseElement@@@8
_DATA	SEGMENT
??_R0?AV_ns2__getSettingsFileResponseElement@@@8 DD FLAT:??_7type_info@@6B@ ; _ns2__getSettingsFileResponseElement `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_ns2__getSettingsFileResponseElement@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_ns2__getSettingsFileResponseElement@@6B@
rdata$r	SEGMENT
??_R4_ns2__getSettingsFileResponseElement@@6B@ DD 00H	; _ns2__getSettingsFileResponseElement::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_ns2__getSettingsFileResponseElement@@@8
	DD	FLAT:??_R3_ns2__getSettingsFileResponseElement@@8
rdata$r	ENDS
;	COMDAT ??_7_ns2__getSettingsFileResponseElement@@6B@
CONST	SEGMENT
??_7_ns2__getSettingsFileResponseElement@@6B@ DD FLAT:??_R4_ns2__getSettingsFileResponseElement@@6B@ ; _ns2__getSettingsFileResponseElement::`vftable'
	DD	FLAT:?soap_type@_ns2__getSettingsFileResponseElement@@UBEHXZ
	DD	FLAT:?soap_default@_ns2__getSettingsFileResponseElement@@UAEXPAUsoap@@@Z
	DD	FLAT:?soap_serialize@_ns2__getSettingsFileResponseElement@@UBEXPAUsoap@@@Z
	DD	FLAT:?soap_put@_ns2__getSettingsFileResponseElement@@UBEHPAUsoap@@PBD1@Z
	DD	FLAT:?soap_out@_ns2__getSettingsFileResponseElement@@UBEHPAUsoap@@PBDH1@Z
	DD	FLAT:?soap_get@_ns2__getSettingsFileResponseElement@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:?soap_in@_ns2__getSettingsFileResponseElement@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:??_E_ns2__getSettingsFileResponseElement@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??0_ns2__getSettingsFileResponseElement@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_ns2__getSettingsFileResponseElement@@QAE@XZ PROC	; _ns2__getSettingsFileResponseElement::_ns2__getSettingsFileResponseElement, COMDAT
; _this$ = ecx

; 235  : 	_ns2__getSettingsFileResponseElement() : result(NULL), soap(NULL) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_ns2__getSettingsFileResponseElement@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_ns2__getSettingsFileResponseElement@@QAE@XZ ENDP	; _ns2__getSettingsFileResponseElement::_ns2__getSettingsFileResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_type@_ns2__getSettingsFileResponseElement@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?soap_type@_ns2__getSettingsFileResponseElement@@UBEHXZ PROC ; _ns2__getSettingsFileResponseElement::soap_type, COMDAT
; _this$ = ecx

; 228  : 	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE__ns2__getSettingsFileResponseElement */

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 22					; 00000016H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_type@_ns2__getSettingsFileResponseElement@@UBEHXZ ENDP ; _ns2__getSettingsFileResponseElement::soap_type
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1_ns2__getSettingsFileResponseElement@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_ns2__getSettingsFileResponseElement@@UAE@XZ PROC	; _ns2__getSettingsFileResponseElement::~_ns2__getSettingsFileResponseElement, COMDAT
; _this$ = ecx

; 236  : 	virtual ~_ns2__getSettingsFileResponseElement() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_ns2__getSettingsFileResponseElement@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1_ns2__getSettingsFileResponseElement@@UAE@XZ ENDP	; _ns2__getSettingsFileResponseElement::~_ns2__getSettingsFileResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??_E_ns2__getSettingsFileResponseElement@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_E_ns2__getSettingsFileResponseElement@@UAEPAXI@Z PROC ; _ns2__getSettingsFileResponseElement::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@6
	push	OFFSET ??1_ns2__getSettingsFileResponseElement@@UAE@XZ ; _ns2__getSettingsFileResponseElement::~_ns2__getSettingsFileResponseElement
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@6
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@6:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@6
$LN3@vector@6:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_ns2__getSettingsFileResponseElement@@UAE@XZ ; _ns2__getSettingsFileResponseElement::~_ns2__getSettingsFileResponseElement
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@6
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@6:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@6:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_E_ns2__getSettingsFileResponseElement@@UAEPAXI@Z ENDP ; _ns2__getSettingsFileResponseElement::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??4_ns2__getSettingsFileResponseElement@@QAEAAV0@ABV0@@Z ; _ns2__getSettingsFileResponseElement::operator=
PUBLIC	??_C@_0DH@LFIGGBHG@Copying?5_ns2__getSettingsFileRes@ ; `string'
;	COMDAT ??_C@_0DH@LFIGGBHG@Copying?5_ns2__getSettingsFileRes@
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapc.cpp
CONST	SEGMENT
??_C@_0DH@LFIGGBHG@Copying?5_ns2__getSettingsFileRes@ DB 'Copying _ns2__g'
	DB	'etSettingsFileResponseElement %p -> %p', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy__ns2__getSettingsFileResponseElement@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$88150 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy__ns2__getSettingsFileResponseElement@@YAXPAUsoap@@HHPAXIPBXI@Z PROC ; soap_copy__ns2__getSettingsFileResponseElement, COMDAT

; 1451 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1452 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__getSettingsFileResponseElement %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@3
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@3
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@3:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@3
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$88150[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DH@LFIGGBHG@Copying?5_ns2__getSettingsFileRes@
	mov	edx, DWORD PTR _fdebug$88150[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$88150[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@3:

; 1453 : 	*(_ns2__getSettingsFileResponseElement*)p = *(_ns2__getSettingsFileResponseElement*)q;

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	??4_ns2__getSettingsFileResponseElement@@QAEAAV0@ABV0@@Z

; 1454 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy__ns2__getSettingsFileResponseElement@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP ; soap_copy__ns2__getSettingsFileResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??4_ns2__getSettingsFileResponseElement@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4_ns2__getSettingsFileResponseElement@@QAEAAV0@ABV0@@Z PROC ; _ns2__getSettingsFileResponseElement::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4_ns2__getSettingsFileResponseElement@@QAEAAV0@ABV0@@Z ENDP ; _ns2__getSettingsFileResponseElement::operator=
_TEXT	ENDS
PUBLIC	?soap_default@_ns2__getSettingsFileElement@@UAEXPAUsoap@@@Z ; _ns2__getSettingsFileElement::soap_default
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default@_ns2__getSettingsFileElement@@UAEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_default@_ns2__getSettingsFileElement@@UAEXPAUsoap@@@Z PROC ; _ns2__getSettingsFileElement::soap_default, COMDAT
; _this$ = ecx

; 1457 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1458 : 	this->soap = soap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1459 : 	soap_default_int(soap, &this->_ns2__getSettingsFileElement::int_USCORE1);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_int@@YAXPAUsoap@@PAH@Z	; soap_default_int
	add	esp, 8

; 1460 : 	/* transient soap skipped */
; 1461 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_default@_ns2__getSettingsFileElement@@UAEXPAUsoap@@@Z ENDP ; _ns2__getSettingsFileElement::soap_default
_TEXT	ENDS
PUBLIC	?soap_serialize@_ns2__getSettingsFileElement@@UBEXPAUsoap@@@Z ; _ns2__getSettingsFileElement::soap_serialize
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_serialize@_ns2__getSettingsFileElement@@UBEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_serialize@_ns2__getSettingsFileElement@@UBEXPAUsoap@@@Z PROC ; _ns2__getSettingsFileElement::soap_serialize, COMDAT
; _this$ = ecx

; 1464 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1465 : 	(void)soap; /* appease -Wall -Werror */
; 1466 : 	/* transient soap skipped */
; 1467 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_serialize@_ns2__getSettingsFileElement@@UBEXPAUsoap@@@Z ENDP ; _ns2__getSettingsFileElement::soap_serialize
_TEXT	ENDS
PUBLIC	?soap_put@_ns2__getSettingsFileElement@@UBEHPAUsoap@@PBD1@Z ; _ns2__getSettingsFileElement::soap_put
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put@_ns2__getSettingsFileElement@@UBEHPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_id$ = -20						; size = 4
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_put@_ns2__getSettingsFileElement@@UBEHPAUsoap@@PBD1@Z PROC ; _ns2__getSettingsFileElement::soap_put, COMDAT
; _this$ = ecx

; 1470 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1471 : 	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__getSettingsFileElement);

	push	21					; 00000015H
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 1472 : 	if (this->soap_out(soap, tag, id, type))

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@soap_put@4

; 1473 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put@4
$LN1@soap_put@4:

; 1474 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put@4:

; 1475 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_put@_ns2__getSettingsFileElement@@UBEHPAUsoap@@PBD1@Z ENDP ; _ns2__getSettingsFileElement::soap_put
_TEXT	ENDS
PUBLIC	?soap_out__ns2__getSettingsFileElement@@YAHPAUsoap@@PBDHPBV_ns2__getSettingsFileElement@@1@Z ; soap_out__ns2__getSettingsFileElement
PUBLIC	?soap_out@_ns2__getSettingsFileElement@@UBEHPAUsoap@@PBDH1@Z ; _ns2__getSettingsFileElement::soap_out
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out@_ns2__getSettingsFileElement@@UBEHPAUsoap@@PBDH1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_out@_ns2__getSettingsFileElement@@UBEHPAUsoap@@PBDH1@Z PROC ; _ns2__getSettingsFileElement::soap_out, COMDAT
; _this$ = ecx

; 1478 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1479 : 	return soap_out__ns2__getSettingsFileElement(soap, tag, id, this, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out__ns2__getSettingsFileElement@@YAHPAUsoap@@PBDHPBV_ns2__getSettingsFileElement@@1@Z ; soap_out__ns2__getSettingsFileElement
	add	esp, 20					; 00000014H

; 1480 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?soap_out@_ns2__getSettingsFileElement@@UBEHPAUsoap@@PBDH1@Z ENDP ; _ns2__getSettingsFileElement::soap_out
_TEXT	ENDS
PUBLIC	??_C@_09JNJHDMAM@ns2?3int_1?$AA@		; `string'
;	COMDAT ??_C@_09JNJHDMAM@ns2?3int_1?$AA@
CONST	SEGMENT
??_C@_09JNJHDMAM@ns2?3int_1?$AA@ DB 'ns2:int_1', 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_out__ns2__getSettingsFileElement@@YAHPAUsoap@@PBDHPBV_ns2__getSettingsFileElement@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out__ns2__getSettingsFileElement@@YAHPAUsoap@@PBDHPBV_ns2__getSettingsFileElement@@1@Z PROC ; soap_out__ns2__getSettingsFileElement, COMDAT

; 1483 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1484 : 	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__getSettingsFileElement), type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_embedded_id
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_begin_out
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN2@soap_out__@4

; 1485 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN3@soap_out__@4
$LN2@soap_out__@4:

; 1486 : 	if (soap_out_int(soap, "ns2:int_1", -1, &(a->_ns2__getSettingsFileElement::int_USCORE1), ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 4
	push	eax
	push	-1
	push	OFFSET ??_C@_09JNJHDMAM@ns2?3int_1?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_int@@YAHPAUsoap@@PBDHPBH1@Z	; soap_out_int
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_out__@4

; 1487 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN3@soap_out__@4
$LN1@soap_out__@4:

; 1488 : 	/* transient soap skipped */
; 1489 : 	return soap_element_end_out(soap, tag);

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_out
	add	esp, 8
$LN3@soap_out__@4:

; 1490 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out__ns2__getSettingsFileElement@@YAHPAUsoap@@PBDHPBV_ns2__getSettingsFileElement@@1@Z ENDP ; soap_out__ns2__getSettingsFileElement
_TEXT	ENDS
PUBLIC	?soap_get__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@PAV1@PBD2@Z ; soap_get__ns2__getSettingsFileElement
PUBLIC	?soap_get@_ns2__getSettingsFileElement@@UAEPAXPAUsoap@@PBD1@Z ; _ns2__getSettingsFileElement::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get@_ns2__getSettingsFileElement@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_get@_ns2__getSettingsFileElement@@UAEPAXPAUsoap@@PBD1@Z PROC ; _ns2__getSettingsFileElement::soap_get, COMDAT
; _this$ = ecx

; 1493 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1494 : 	return soap_get__ns2__getSettingsFileElement(soap, this, tag, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_get__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@PAV1@PBD2@Z ; soap_get__ns2__getSettingsFileElement
	add	esp, 16					; 00000010H

; 1495 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_get@_ns2__getSettingsFileElement@@UAEPAXPAUsoap@@PBD1@Z ENDP ; _ns2__getSettingsFileElement::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_get__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@PAV1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@PAV1@PBD2@Z PROC ; soap_get__ns2__getSettingsFileElement, COMDAT

; 1498 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1499 : 	if ((p = soap_in__ns2__getSettingsFileElement(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__getSettingsFileElement
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get__@4

; 1500 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get__@4

; 1501 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get__@4
$LN2@soap_get__@4:

; 1502 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get__@4:

; 1503 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@PAV1@PBD2@Z ENDP ; soap_get__ns2__getSettingsFileElement
_TEXT	ENDS
PUBLIC	?soap_in@_ns2__getSettingsFileElement@@UAEPAXPAUsoap@@PBD1@Z ; _ns2__getSettingsFileElement::soap_in
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in@_ns2__getSettingsFileElement@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_in@_ns2__getSettingsFileElement@@UAEPAXPAUsoap@@PBD1@Z PROC ; _ns2__getSettingsFileElement::soap_in, COMDAT
; _this$ = ecx

; 1506 : {	return soap_in__ns2__getSettingsFileElement(soap, tag, this, type);

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__getSettingsFileElement
	add	esp, 16					; 00000010H

; 1507 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_in@_ns2__getSettingsFileElement@@UAEPAXPAUsoap@@PBD1@Z ENDP ; _ns2__getSettingsFileElement::soap_in
_TEXT	ENDS
PUBLIC	?soap_copy__ns2__getSettingsFileElement@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy__ns2__getSettingsFileElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@PBDPAV1@1@Z
_TEXT	SEGMENT
_soap_flag_int_USCORE11$ = -8				; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@PBDPAV1@1@Z PROC ; soap_in__ns2__getSettingsFileElement, COMDAT

; 1510 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1511 : 	if (soap_element_begin_in(soap, tag, 0, NULL))

	push	0
	push	0
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN16@soap_in__n@4

; 1512 : 		return NULL;

	xor	eax, eax
	jmp	$LN17@soap_in__n@4
$LN16@soap_in__n@4:

; 1513 : 	a = (_ns2__getSettingsFileElement *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__getSettingsFileElement, sizeof(_ns2__getSettingsFileElement), soap->type, soap->arrayType);

	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	12					; 0000000cH
	push	21					; 00000015H
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 81076				; 00013cb4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_class_id_enter@@YAPAXPAUsoap@@PBDPAXHI11@Z ; soap_class_id_enter
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _a$[ebp], eax

; 1514 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN15@soap_in__n@4

; 1515 : 		return NULL;

	xor	eax, eax
	jmp	$LN17@soap_in__n@4
$LN15@soap_in__n@4:

; 1516 : 	if (soap->alloced)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87306]
	test	ecx, ecx
	je	SHORT $LN14@soap_in__n@4

; 1517 : 	{	a->soap_default(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1518 : 		if (soap->clist->type != SOAP_TYPE__ns2__getSettingsFileElement)

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	cmp	DWORD PTR [ecx+8], 21			; 00000015H
	je	SHORT $LN14@soap_in__n@4

; 1519 : 		{	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 1520 : 			*soap->id = '\0';

	mov	eax, DWORD PTR _soap$[ebp]
	mov	BYTE PTR [eax+81076], 0

; 1521 : 			return (_ns2__getSettingsFileElement *)a->soap_in(soap, tag, type);

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN17@soap_in__n@4
$LN14@soap_in__n@4:

; 1522 : 		}
; 1523 : 	}
; 1524 : 	size_t soap_flag_int_USCORE11 = 1;

	mov	DWORD PTR _soap_flag_int_USCORE11$[ebp], 1

; 1525 : 	if (soap->body && !*soap->href)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	$LN12@soap_in__n@4
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	test	ecx, ecx
	jne	$LN12@soap_in__n@4
$LN11@soap_in__n@4:

; 1526 : 	{
; 1527 : 		for (;;)
; 1528 : 		{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 1529 : 			if (soap_flag_int_USCORE11 && soap->error == SOAP_TAG_MISMATCH)

	cmp	DWORD PTR _soap_flag_int_USCORE11$[ebp], 0
	je	SHORT $LN9@soap_in__n@4
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN9@soap_in__n@4

; 1530 : 				if (soap_in_int(soap, "ns2:int_1", &(a->_ns2__getSettingsFileElement::int_USCORE1), "xsd:int"))

	push	OFFSET ??_C@_07PCIGPDP@xsd?3int?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_09JNJHDMAM@ns2?3int_1?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_int@@YAPAHPAUsoap@@PBDPAH1@Z	; soap_in_int
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN9@soap_in__n@4

; 1531 : 				{	soap_flag_int_USCORE11--;

	mov	eax, DWORD PTR _soap_flag_int_USCORE11$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_int_USCORE11$[ebp], eax

; 1532 : 					continue;

	jmp	SHORT $LN11@soap_in__n@4
$LN9@soap_in__n@4:

; 1533 : 				}
; 1534 : 			/* transient soap skipped */
; 1535 : 			if (soap->error == SOAP_TAG_MISMATCH)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN7@soap_in__n@4

; 1536 : 				soap->error = soap_ignore_element(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_ignore_element@@YAHPAUsoap@@@Z	; soap_ignore_element
	add	esp, 4
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+90460], eax
$LN7@soap_in__n@4:

; 1537 : 			if (soap->error == SOAP_NO_TAG)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN6@soap_in__n@4

; 1538 : 				break;

	jmp	SHORT $LN10@soap_in__n@4
$LN6@soap_in__n@4:

; 1539 : 			if (soap->error)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 0
	je	SHORT $LN5@soap_in__n@4

; 1540 : 				return NULL;

	xor	eax, eax
	jmp	$LN17@soap_in__n@4
$LN5@soap_in__n@4:

; 1541 : 		}

	jmp	$LN11@soap_in__n@4
$LN10@soap_in__n@4:

; 1542 : 		if (soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@soap_in__n@4

; 1543 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in__n@4
$LN4@soap_in__n@4:

; 1544 : 	}
; 1545 : 	else

	jmp	SHORT $LN3@soap_in__n@4
$LN12@soap_in__n@4:

; 1546 : 	{	a = (_ns2__getSettingsFileElement *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__getSettingsFileElement, 0, sizeof(_ns2__getSettingsFileElement), 0, soap_copy__ns2__getSettingsFileElement);

	push	OFFSET ?soap_copy__ns2__getSettingsFileElement@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy__ns2__getSettingsFileElement
	push	0
	push	12					; 0000000cH
	push	0
	push	21					; 00000015H
	push	0
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_forward
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 1547 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN3@soap_in__n@4
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@soap_in__n@4

; 1548 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in__n@4
$LN3@soap_in__n@4:

; 1549 : 	}
; 1550 : 	if ((soap_flag_int_USCORE11 > 0))

	cmp	DWORD PTR _soap_flag_int_USCORE11$[ebp], 0
	jbe	SHORT $LN1@soap_in__n@4

; 1551 : 	{	soap->error = SOAP_OCCURS;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 44		; 0000002cH

; 1552 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in__n@4
$LN1@soap_in__n@4:

; 1553 : 	}
; 1554 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN17@soap_in__n@4:

; 1555 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@PBDPAV1@1@Z ENDP ; soap_in__ns2__getSettingsFileElement
_TEXT	ENDS
PUBLIC	?soap_new__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@H@Z ; soap_new__ns2__getSettingsFileElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_new__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@H@Z PROC ; soap_new__ns2__getSettingsFileElement, COMDAT

; 1558 : {	return soap_instantiate__ns2__getSettingsFileElement(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__getSettingsFileElement
	add	esp, 20					; 00000014H

; 1559 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@H@Z ENDP ; soap_new__ns2__getSettingsFileElement
_TEXT	ENDS
PUBLIC	?soap_delete__ns2__getSettingsFileElement@@YAXPAUsoap@@PAV_ns2__getSettingsFileElement@@@Z ; soap_delete__ns2__getSettingsFileElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete__ns2__getSettingsFileElement@@YAXPAUsoap@@PAV_ns2__getSettingsFileElement@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete__ns2__getSettingsFileElement@@YAXPAUsoap@@PAV_ns2__getSettingsFileElement@@@Z PROC ; soap_delete__ns2__getSettingsFileElement, COMDAT

; 1562 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 1563 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete__ns2__getSettingsFileElement@@YAXPAUsoap@@PAV_ns2__getSettingsFileElement@@@Z ENDP ; soap_delete__ns2__getSettingsFileElement
_TEXT	ENDS
PUBLIC	??1_ns2__getSettingsFileElement@@UAE@XZ		; _ns2__getSettingsFileElement::~_ns2__getSettingsFileElement
PUBLIC	??0_ns2__getSettingsFileElement@@QAE@XZ		; _ns2__getSettingsFileElement::_ns2__getSettingsFileElement
PUBLIC	??_C@_0DL@JFMHBGLC@soap_instantiate__ns2__getSettin@ ; `string'
;	COMDAT ??_C@_0DL@JFMHBGLC@soap_instantiate__ns2__getSettin@
CONST	SEGMENT
??_C@_0DL@JFMHBGLC@soap_instantiate__ns2__getSettin@ DB 'soap_instantiate'
	DB	'__ns2__getSettingsFileElement(%d, %s, %s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?soap_instantiate__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@HPBD1PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@HPBD1PAI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@HPBD1PAI@Z$1
__ehfuncinfo$?soap_instantiate__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@HPBD1PAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?soap_instantiate__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@HPBD1PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?soap_instantiate__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -320						; size = 4
tv159 = -316						; size = 4
tv133 = -316						; size = 4
tv77 = -316						; size = 4
$T100947 = -308						; size = 4
$T100948 = -296						; size = 4
$T100951 = -284						; size = 4
$T100952 = -272						; size = 4
$T100953 = -260						; size = 4
_fdebug$88295 = -56					; size = 4
_i$88286 = -44						; size = 4
_cp$ = -32						; size = 4
_fdebug$88261 = -20					; size = 4
__$EHRec$ = -12						; size = 12
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate__ns2__getSettingsFileElement, COMDAT

; 1566 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?soap_instantiate__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@HPBD1PAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1567 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__getSettingsFileElement(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN15@soap_insta@5
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN14@soap_insta@5
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN14@soap_insta@5:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN15@soap_insta@5
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$88261[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN18@soap_insta@5
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN19@soap_insta@5
$LN18@soap_insta@5:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN19@soap_insta@5:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN20@soap_insta@5
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN21@soap_insta@5
$LN20@soap_insta@5:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@soap_insta@5:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DL@JFMHBGLC@soap_instantiate__ns2__getSettin@
	mov	edx, DWORD PTR _fdebug$88261[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$88261[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@soap_insta@5:

; 1568 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__getSettingsFileElement, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	21					; 00000015H
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 1569 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN12@soap_insta@5

; 1570 : 		return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@5
$LN12@soap_insta@5:

; 1571 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN11@soap_insta@5

; 1572 : 	{	cp->ptr = (void*)new _ns2__getSettingsFileElement;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T100948[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T100948[ebp], 0
	je	SHORT $LN22@soap_insta@5
	mov	ecx, DWORD PTR $T100948[ebp]
	call	??0_ns2__getSettingsFileElement@@QAE@XZ	; _ns2__getSettingsFileElement::_ns2__getSettingsFileElement
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN23@soap_insta@5
$LN22@soap_insta@5:
	mov	DWORD PTR tv133[ebp], 0
$LN23@soap_insta@5:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T100947[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T100947[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1573 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN10@soap_insta@5

; 1574 : 			*size = sizeof(_ns2__getSettingsFileElement);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN10@soap_insta@5:

; 1575 : 		((_ns2__getSettingsFileElement*)cp->ptr)->soap = soap;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 1576 : 	}
; 1577 : 	else

	jmp	$LN9@soap_insta@5
$LN11@soap_insta@5:

; 1578 : 	{	cp->ptr = (void*)new _ns2__getSettingsFileElement[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T100951[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T100951[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T100953[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T100953[ebp], 0
	je	SHORT $LN24@soap_insta@5
	mov	ecx, DWORD PTR $T100953[ebp]
	mov	edx, DWORD PTR $T100951[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1_ns2__getSettingsFileElement@@UAE@XZ ; _ns2__getSettingsFileElement::~_ns2__getSettingsFileElement
	push	OFFSET ??0_ns2__getSettingsFileElement@@QAE@XZ ; _ns2__getSettingsFileElement::_ns2__getSettingsFileElement
	mov	eax, DWORD PTR $T100951[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T100953[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T100953[ebp]
	add	edx, 4
	mov	DWORD PTR tv159[ebp], edx
	jmp	SHORT $LN25@soap_insta@5
$LN24@soap_insta@5:
	mov	DWORD PTR tv159[ebp], 0
$LN25@soap_insta@5:
	mov	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR $T100952[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T100952[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1579 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@soap_insta@5

; 1580 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 1581 : 			return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@5
$LN8@soap_insta@5:

; 1582 : 		}
; 1583 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@5

; 1584 : 			*size = n * sizeof(_ns2__getSettingsFileElement);

	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN7@soap_insta@5:

; 1585 : 		for (int i = 0; i < n; i++)

	mov	DWORD PTR _i$88286[ebp], 0
	jmp	SHORT $LN6@soap_insta@5
$LN5@soap_insta@5:
	mov	eax, DWORD PTR _i$88286[ebp]
	add	eax, 1
	mov	DWORD PTR _i$88286[ebp], eax
$LN6@soap_insta@5:
	mov	eax, DWORD PTR _i$88286[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN9@soap_insta@5

; 1586 : 			((_ns2__getSettingsFileElement*)cp->ptr)[i].soap = soap;

	mov	eax, DWORD PTR _i$88286[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [edx+eax+8], ecx
	jmp	SHORT $LN5@soap_insta@5
$LN9@soap_insta@5:

; 1587 : 	}
; 1588 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@5
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@5
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@5:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@5
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$88295[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$88295[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$88295[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@5:

; 1589 : 	return (_ns2__getSettingsFileElement*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN16@soap_insta@5:

; 1590 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?soap_instantiate__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@HPBD1PAI@Z$0:
	mov	eax, DWORD PTR $T100948[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@HPBD1PAI@Z$1:
	mov	eax, DWORD PTR $T100953[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?soap_instantiate__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@HPBD1PAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-324]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?soap_instantiate__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@HPBD1PAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?soap_instantiate__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate__ns2__getSettingsFileElement
PUBLIC	??_7_ns2__getSettingsFileElement@@6B@		; _ns2__getSettingsFileElement::`vftable'
PUBLIC	??_R4_ns2__getSettingsFileElement@@6B@		; _ns2__getSettingsFileElement::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_ns2__getSettingsFileElement@@@8	; _ns2__getSettingsFileElement `RTTI Type Descriptor'
PUBLIC	??_R3_ns2__getSettingsFileElement@@8		; _ns2__getSettingsFileElement::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_ns2__getSettingsFileElement@@8		; _ns2__getSettingsFileElement::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_ns2__getSettingsFileElement@@8	; _ns2__getSettingsFileElement::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?soap_type@_ns2__getSettingsFileElement@@UBEHXZ	; _ns2__getSettingsFileElement::soap_type
PUBLIC	??_E_ns2__getSettingsFileElement@@UAEPAXI@Z	; _ns2__getSettingsFileElement::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_ns2__getSettingsFileElement@@8
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapstub.h
rdata$r	SEGMENT
??_R1A@?0A@EA@_ns2__getSettingsFileElement@@8 DD FLAT:??_R0?AV_ns2__getSettingsFileElement@@@8 ; _ns2__getSettingsFileElement::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_ns2__getSettingsFileElement@@8
rdata$r	ENDS
;	COMDAT ??_R2_ns2__getSettingsFileElement@@8
rdata$r	SEGMENT
??_R2_ns2__getSettingsFileElement@@8 DD FLAT:??_R1A@?0A@EA@_ns2__getSettingsFileElement@@8 ; _ns2__getSettingsFileElement::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_ns2__getSettingsFileElement@@8
rdata$r	SEGMENT
??_R3_ns2__getSettingsFileElement@@8 DD 00H		; _ns2__getSettingsFileElement::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_ns2__getSettingsFileElement@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_ns2__getSettingsFileElement@@@8
_DATA	SEGMENT
??_R0?AV_ns2__getSettingsFileElement@@@8 DD FLAT:??_7type_info@@6B@ ; _ns2__getSettingsFileElement `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_ns2__getSettingsFileElement@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_ns2__getSettingsFileElement@@6B@
rdata$r	SEGMENT
??_R4_ns2__getSettingsFileElement@@6B@ DD 00H		; _ns2__getSettingsFileElement::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_ns2__getSettingsFileElement@@@8
	DD	FLAT:??_R3_ns2__getSettingsFileElement@@8
rdata$r	ENDS
;	COMDAT ??_7_ns2__getSettingsFileElement@@6B@
CONST	SEGMENT
??_7_ns2__getSettingsFileElement@@6B@ DD FLAT:??_R4_ns2__getSettingsFileElement@@6B@ ; _ns2__getSettingsFileElement::`vftable'
	DD	FLAT:?soap_type@_ns2__getSettingsFileElement@@UBEHXZ
	DD	FLAT:?soap_default@_ns2__getSettingsFileElement@@UAEXPAUsoap@@@Z
	DD	FLAT:?soap_serialize@_ns2__getSettingsFileElement@@UBEXPAUsoap@@@Z
	DD	FLAT:?soap_put@_ns2__getSettingsFileElement@@UBEHPAUsoap@@PBD1@Z
	DD	FLAT:?soap_out@_ns2__getSettingsFileElement@@UBEHPAUsoap@@PBDH1@Z
	DD	FLAT:?soap_get@_ns2__getSettingsFileElement@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:?soap_in@_ns2__getSettingsFileElement@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:??_E_ns2__getSettingsFileElement@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??0_ns2__getSettingsFileElement@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_ns2__getSettingsFileElement@@QAE@XZ PROC		; _ns2__getSettingsFileElement::_ns2__getSettingsFileElement, COMDAT
; _this$ = ecx

; 214  : 	_ns2__getSettingsFileElement() : int_USCORE1(0), soap(NULL) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_ns2__getSettingsFileElement@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_ns2__getSettingsFileElement@@QAE@XZ ENDP		; _ns2__getSettingsFileElement::_ns2__getSettingsFileElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_type@_ns2__getSettingsFileElement@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?soap_type@_ns2__getSettingsFileElement@@UBEHXZ PROC	; _ns2__getSettingsFileElement::soap_type, COMDAT
; _this$ = ecx

; 207  : 	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE__ns2__getSettingsFileElement */

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 21					; 00000015H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_type@_ns2__getSettingsFileElement@@UBEHXZ ENDP	; _ns2__getSettingsFileElement::soap_type
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1_ns2__getSettingsFileElement@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_ns2__getSettingsFileElement@@UAE@XZ PROC		; _ns2__getSettingsFileElement::~_ns2__getSettingsFileElement, COMDAT
; _this$ = ecx

; 215  : 	virtual ~_ns2__getSettingsFileElement() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_ns2__getSettingsFileElement@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1_ns2__getSettingsFileElement@@UAE@XZ ENDP		; _ns2__getSettingsFileElement::~_ns2__getSettingsFileElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??_E_ns2__getSettingsFileElement@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_E_ns2__getSettingsFileElement@@UAEPAXI@Z PROC	; _ns2__getSettingsFileElement::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@7
	push	OFFSET ??1_ns2__getSettingsFileElement@@UAE@XZ ; _ns2__getSettingsFileElement::~_ns2__getSettingsFileElement
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@7
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@7:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@7
$LN3@vector@7:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_ns2__getSettingsFileElement@@UAE@XZ	; _ns2__getSettingsFileElement::~_ns2__getSettingsFileElement
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@7
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@7:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@7:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_E_ns2__getSettingsFileElement@@UAEPAXI@Z ENDP	; _ns2__getSettingsFileElement::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??4_ns2__getSettingsFileElement@@QAEAAV0@ABV0@@Z ; _ns2__getSettingsFileElement::operator=
PUBLIC	??_C@_0CP@NKPFPCKO@Copying?5_ns2__getSettingsFileEle@ ; `string'
;	COMDAT ??_C@_0CP@NKPFPCKO@Copying?5_ns2__getSettingsFileEle@
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapc.cpp
CONST	SEGMENT
??_C@_0CP@NKPFPCKO@Copying?5_ns2__getSettingsFileEle@ DB 'Copying _ns2__g'
	DB	'etSettingsFileElement %p -> %p', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy__ns2__getSettingsFileElement@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$88317 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy__ns2__getSettingsFileElement@@YAXPAUsoap@@HHPAXIPBXI@Z PROC ; soap_copy__ns2__getSettingsFileElement, COMDAT

; 1592 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1593 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__getSettingsFileElement %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@4
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@4
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@4:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@4
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$88317[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CP@NKPFPCKO@Copying?5_ns2__getSettingsFileEle@
	mov	edx, DWORD PTR _fdebug$88317[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$88317[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@4:

; 1594 : 	*(_ns2__getSettingsFileElement*)p = *(_ns2__getSettingsFileElement*)q;

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	??4_ns2__getSettingsFileElement@@QAEAAV0@ABV0@@Z

; 1595 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy__ns2__getSettingsFileElement@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP ; soap_copy__ns2__getSettingsFileElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??4_ns2__getSettingsFileElement@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4_ns2__getSettingsFileElement@@QAEAAV0@ABV0@@Z PROC	; _ns2__getSettingsFileElement::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4_ns2__getSettingsFileElement@@QAEAAV0@ABV0@@Z ENDP	; _ns2__getSettingsFileElement::operator=
_TEXT	ENDS
PUBLIC	?soap_default@_ns2__getSessionIDResponseElement@@UAEXPAUsoap@@@Z ; _ns2__getSessionIDResponseElement::soap_default
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default@_ns2__getSessionIDResponseElement@@UAEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_default@_ns2__getSessionIDResponseElement@@UAEXPAUsoap@@@Z PROC ; _ns2__getSessionIDResponseElement::soap_default, COMDAT
; _this$ = ecx

; 1598 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1599 : 	this->soap = soap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1600 : 	soap_default_int(soap, &this->_ns2__getSessionIDResponseElement::result);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_int@@YAXPAUsoap@@PAH@Z	; soap_default_int
	add	esp, 8

; 1601 : 	/* transient soap skipped */
; 1602 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_default@_ns2__getSessionIDResponseElement@@UAEXPAUsoap@@@Z ENDP ; _ns2__getSessionIDResponseElement::soap_default
_TEXT	ENDS
PUBLIC	?soap_serialize@_ns2__getSessionIDResponseElement@@UBEXPAUsoap@@@Z ; _ns2__getSessionIDResponseElement::soap_serialize
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_serialize@_ns2__getSessionIDResponseElement@@UBEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_serialize@_ns2__getSessionIDResponseElement@@UBEXPAUsoap@@@Z PROC ; _ns2__getSessionIDResponseElement::soap_serialize, COMDAT
; _this$ = ecx

; 1605 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1606 : 	(void)soap; /* appease -Wall -Werror */
; 1607 : 	/* transient soap skipped */
; 1608 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_serialize@_ns2__getSessionIDResponseElement@@UBEXPAUsoap@@@Z ENDP ; _ns2__getSessionIDResponseElement::soap_serialize
_TEXT	ENDS
PUBLIC	?soap_put@_ns2__getSessionIDResponseElement@@UBEHPAUsoap@@PBD1@Z ; _ns2__getSessionIDResponseElement::soap_put
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put@_ns2__getSessionIDResponseElement@@UBEHPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_id$ = -20						; size = 4
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_put@_ns2__getSessionIDResponseElement@@UBEHPAUsoap@@PBD1@Z PROC ; _ns2__getSessionIDResponseElement::soap_put, COMDAT
; _this$ = ecx

; 1611 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1612 : 	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__getSessionIDResponseElement);

	push	20					; 00000014H
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 1613 : 	if (this->soap_out(soap, tag, id, type))

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@soap_put@5

; 1614 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put@5
$LN1@soap_put@5:

; 1615 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put@5:

; 1616 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_put@_ns2__getSessionIDResponseElement@@UBEHPAUsoap@@PBD1@Z ENDP ; _ns2__getSessionIDResponseElement::soap_put
_TEXT	ENDS
PUBLIC	?soap_out__ns2__getSessionIDResponseElement@@YAHPAUsoap@@PBDHPBV_ns2__getSessionIDResponseElement@@1@Z ; soap_out__ns2__getSessionIDResponseElement
PUBLIC	?soap_out@_ns2__getSessionIDResponseElement@@UBEHPAUsoap@@PBDH1@Z ; _ns2__getSessionIDResponseElement::soap_out
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out@_ns2__getSessionIDResponseElement@@UBEHPAUsoap@@PBDH1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_out@_ns2__getSessionIDResponseElement@@UBEHPAUsoap@@PBDH1@Z PROC ; _ns2__getSessionIDResponseElement::soap_out, COMDAT
; _this$ = ecx

; 1619 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1620 : 	return soap_out__ns2__getSessionIDResponseElement(soap, tag, id, this, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out__ns2__getSessionIDResponseElement@@YAHPAUsoap@@PBDHPBV_ns2__getSessionIDResponseElement@@1@Z ; soap_out__ns2__getSessionIDResponseElement
	add	esp, 20					; 00000014H

; 1621 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?soap_out@_ns2__getSessionIDResponseElement@@UBEHPAUsoap@@PBDH1@Z ENDP ; _ns2__getSessionIDResponseElement::soap_out
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out__ns2__getSessionIDResponseElement@@YAHPAUsoap@@PBDHPBV_ns2__getSessionIDResponseElement@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out__ns2__getSessionIDResponseElement@@YAHPAUsoap@@PBDHPBV_ns2__getSessionIDResponseElement@@1@Z PROC ; soap_out__ns2__getSessionIDResponseElement, COMDAT

; 1624 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1625 : 	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__getSessionIDResponseElement), type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_embedded_id
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_begin_out
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN2@soap_out__@5

; 1626 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN3@soap_out__@5
$LN2@soap_out__@5:

; 1627 : 	soap_element_result(soap, "ns2:result");

	push	OFFSET ??_C@_0L@FEKNHBLL@ns2?3result?$AA@
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_element_result
	add	esp, 8

; 1628 : 	if (soap_out_int(soap, "ns2:result", -1, &(a->_ns2__getSessionIDResponseElement::result), ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 4
	push	eax
	push	-1
	push	OFFSET ??_C@_0L@FEKNHBLL@ns2?3result?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_int@@YAHPAUsoap@@PBDHPBH1@Z	; soap_out_int
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_out__@5

; 1629 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN3@soap_out__@5
$LN1@soap_out__@5:

; 1630 : 	/* transient soap skipped */
; 1631 : 	return soap_element_end_out(soap, tag);

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_out
	add	esp, 8
$LN3@soap_out__@5:

; 1632 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out__ns2__getSessionIDResponseElement@@YAHPAUsoap@@PBDHPBV_ns2__getSessionIDResponseElement@@1@Z ENDP ; soap_out__ns2__getSessionIDResponseElement
_TEXT	ENDS
PUBLIC	?soap_get__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PAV1@PBD2@Z ; soap_get__ns2__getSessionIDResponseElement
PUBLIC	?soap_get@_ns2__getSessionIDResponseElement@@UAEPAXPAUsoap@@PBD1@Z ; _ns2__getSessionIDResponseElement::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get@_ns2__getSessionIDResponseElement@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_get@_ns2__getSessionIDResponseElement@@UAEPAXPAUsoap@@PBD1@Z PROC ; _ns2__getSessionIDResponseElement::soap_get, COMDAT
; _this$ = ecx

; 1635 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1636 : 	return soap_get__ns2__getSessionIDResponseElement(soap, this, tag, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_get__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PAV1@PBD2@Z ; soap_get__ns2__getSessionIDResponseElement
	add	esp, 16					; 00000010H

; 1637 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_get@_ns2__getSessionIDResponseElement@@UAEPAXPAUsoap@@PBD1@Z ENDP ; _ns2__getSessionIDResponseElement::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_get__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PAV1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PAV1@PBD2@Z PROC ; soap_get__ns2__getSessionIDResponseElement, COMDAT

; 1640 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1641 : 	if ((p = soap_in__ns2__getSessionIDResponseElement(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__getSessionIDResponseElement
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get__@5

; 1642 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get__@5

; 1643 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get__@5
$LN2@soap_get__@5:

; 1644 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get__@5:

; 1645 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PAV1@PBD2@Z ENDP ; soap_get__ns2__getSessionIDResponseElement
_TEXT	ENDS
PUBLIC	?soap_in@_ns2__getSessionIDResponseElement@@UAEPAXPAUsoap@@PBD1@Z ; _ns2__getSessionIDResponseElement::soap_in
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in@_ns2__getSessionIDResponseElement@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_in@_ns2__getSessionIDResponseElement@@UAEPAXPAUsoap@@PBD1@Z PROC ; _ns2__getSessionIDResponseElement::soap_in, COMDAT
; _this$ = ecx

; 1648 : {	return soap_in__ns2__getSessionIDResponseElement(soap, tag, this, type);

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__getSessionIDResponseElement
	add	esp, 16					; 00000010H

; 1649 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_in@_ns2__getSessionIDResponseElement@@UAEPAXPAUsoap@@PBD1@Z ENDP ; _ns2__getSessionIDResponseElement::soap_in
_TEXT	ENDS
PUBLIC	?soap_copy__ns2__getSessionIDResponseElement@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy__ns2__getSessionIDResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PBDPAV1@1@Z
_TEXT	SEGMENT
_soap_flag_result1$ = -8				; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PBDPAV1@1@Z PROC ; soap_in__ns2__getSessionIDResponseElement, COMDAT

; 1652 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1653 : 	if (soap_element_begin_in(soap, tag, 0, NULL))

	push	0
	push	0
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN16@soap_in__n@5

; 1654 : 		return NULL;

	xor	eax, eax
	jmp	$LN17@soap_in__n@5
$LN16@soap_in__n@5:

; 1655 : 	a = (_ns2__getSessionIDResponseElement *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__getSessionIDResponseElement, sizeof(_ns2__getSessionIDResponseElement), soap->type, soap->arrayType);

	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	12					; 0000000cH
	push	20					; 00000014H
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 81076				; 00013cb4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_class_id_enter@@YAPAXPAUsoap@@PBDPAXHI11@Z ; soap_class_id_enter
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _a$[ebp], eax

; 1656 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN15@soap_in__n@5

; 1657 : 		return NULL;

	xor	eax, eax
	jmp	$LN17@soap_in__n@5
$LN15@soap_in__n@5:

; 1658 : 	if (soap->alloced)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87306]
	test	ecx, ecx
	je	SHORT $LN14@soap_in__n@5

; 1659 : 	{	a->soap_default(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1660 : 		if (soap->clist->type != SOAP_TYPE__ns2__getSessionIDResponseElement)

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	cmp	DWORD PTR [ecx+8], 20			; 00000014H
	je	SHORT $LN14@soap_in__n@5

; 1661 : 		{	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 1662 : 			*soap->id = '\0';

	mov	eax, DWORD PTR _soap$[ebp]
	mov	BYTE PTR [eax+81076], 0

; 1663 : 			return (_ns2__getSessionIDResponseElement *)a->soap_in(soap, tag, type);

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN17@soap_in__n@5
$LN14@soap_in__n@5:

; 1664 : 		}
; 1665 : 	}
; 1666 : 	size_t soap_flag_result1 = 1;

	mov	DWORD PTR _soap_flag_result1$[ebp], 1

; 1667 : 	if (soap->body && !*soap->href)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	$LN12@soap_in__n@5
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	test	ecx, ecx
	jne	$LN12@soap_in__n@5
$LN11@soap_in__n@5:

; 1668 : 	{
; 1669 : 		for (;;)
; 1670 : 		{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 1671 : 			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)

	cmp	DWORD PTR _soap_flag_result1$[ebp], 0
	je	SHORT $LN9@soap_in__n@5
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN9@soap_in__n@5

; 1672 : 				if (soap_in_int(soap, "ns2:result", &(a->_ns2__getSessionIDResponseElement::result), "xsd:int"))

	push	OFFSET ??_C@_07PCIGPDP@xsd?3int?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_0L@FEKNHBLL@ns2?3result?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_int@@YAPAHPAUsoap@@PBDPAH1@Z	; soap_in_int
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN9@soap_in__n@5

; 1673 : 				{	soap_flag_result1--;

	mov	eax, DWORD PTR _soap_flag_result1$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_result1$[ebp], eax

; 1674 : 					continue;

	jmp	SHORT $LN11@soap_in__n@5
$LN9@soap_in__n@5:

; 1675 : 				}
; 1676 : 			/* transient soap skipped */
; 1677 : 			soap_check_result(soap, "ns2:result");

	push	OFFSET ??_C@_0L@FEKNHBLL@ns2?3result?$AA@
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_check_result
	add	esp, 8

; 1678 : 			if (soap->error == SOAP_TAG_MISMATCH)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN7@soap_in__n@5

; 1679 : 				soap->error = soap_ignore_element(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_ignore_element@@YAHPAUsoap@@@Z	; soap_ignore_element
	add	esp, 4
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+90460], eax
$LN7@soap_in__n@5:

; 1680 : 			if (soap->error == SOAP_NO_TAG)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN6@soap_in__n@5

; 1681 : 				break;

	jmp	SHORT $LN10@soap_in__n@5
$LN6@soap_in__n@5:

; 1682 : 			if (soap->error)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 0
	je	SHORT $LN5@soap_in__n@5

; 1683 : 				return NULL;

	xor	eax, eax
	jmp	$LN17@soap_in__n@5
$LN5@soap_in__n@5:

; 1684 : 		}

	jmp	$LN11@soap_in__n@5
$LN10@soap_in__n@5:

; 1685 : 		if (soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@soap_in__n@5

; 1686 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in__n@5
$LN4@soap_in__n@5:

; 1687 : 	}
; 1688 : 	else

	jmp	SHORT $LN3@soap_in__n@5
$LN12@soap_in__n@5:

; 1689 : 	{	a = (_ns2__getSessionIDResponseElement *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__getSessionIDResponseElement, 0, sizeof(_ns2__getSessionIDResponseElement), 0, soap_copy__ns2__getSessionIDResponseElement);

	push	OFFSET ?soap_copy__ns2__getSessionIDResponseElement@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy__ns2__getSessionIDResponseElement
	push	0
	push	12					; 0000000cH
	push	0
	push	20					; 00000014H
	push	0
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_forward
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 1690 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN3@soap_in__n@5
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@soap_in__n@5

; 1691 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in__n@5
$LN3@soap_in__n@5:

; 1692 : 	}
; 1693 : 	if ((soap_flag_result1 > 0))

	cmp	DWORD PTR _soap_flag_result1$[ebp], 0
	jbe	SHORT $LN1@soap_in__n@5

; 1694 : 	{	soap->error = SOAP_OCCURS;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 44		; 0000002cH

; 1695 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in__n@5
$LN1@soap_in__n@5:

; 1696 : 	}
; 1697 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN17@soap_in__n@5:

; 1698 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PBDPAV1@1@Z ENDP ; soap_in__ns2__getSessionIDResponseElement
_TEXT	ENDS
PUBLIC	?soap_new__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@H@Z ; soap_new__ns2__getSessionIDResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_new__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@H@Z PROC ; soap_new__ns2__getSessionIDResponseElement, COMDAT

; 1701 : {	return soap_instantiate__ns2__getSessionIDResponseElement(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__getSessionIDResponseElement
	add	esp, 20					; 00000014H

; 1702 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@H@Z ENDP ; soap_new__ns2__getSessionIDResponseElement
_TEXT	ENDS
PUBLIC	?soap_delete__ns2__getSessionIDResponseElement@@YAXPAUsoap@@PAV_ns2__getSessionIDResponseElement@@@Z ; soap_delete__ns2__getSessionIDResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete__ns2__getSessionIDResponseElement@@YAXPAUsoap@@PAV_ns2__getSessionIDResponseElement@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete__ns2__getSessionIDResponseElement@@YAXPAUsoap@@PAV_ns2__getSessionIDResponseElement@@@Z PROC ; soap_delete__ns2__getSessionIDResponseElement, COMDAT

; 1705 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 1706 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete__ns2__getSessionIDResponseElement@@YAXPAUsoap@@PAV_ns2__getSessionIDResponseElement@@@Z ENDP ; soap_delete__ns2__getSessionIDResponseElement
_TEXT	ENDS
PUBLIC	??1_ns2__getSessionIDResponseElement@@UAE@XZ	; _ns2__getSessionIDResponseElement::~_ns2__getSessionIDResponseElement
PUBLIC	??0_ns2__getSessionIDResponseElement@@QAE@XZ	; _ns2__getSessionIDResponseElement::_ns2__getSessionIDResponseElement
PUBLIC	??_C@_0EA@FHLKBNFK@soap_instantiate__ns2__getSessio@ ; `string'
;	COMDAT ??_C@_0EA@FHLKBNFK@soap_instantiate__ns2__getSessio@
CONST	SEGMENT
??_C@_0EA@FHLKBNFK@soap_instantiate__ns2__getSessio@ DB 'soap_instantiate'
	DB	'__ns2__getSessionIDResponseElement(%d, %s, %s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?soap_instantiate__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@HPBD1PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@HPBD1PAI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@HPBD1PAI@Z$1
__ehfuncinfo$?soap_instantiate__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@HPBD1PAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?soap_instantiate__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@HPBD1PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?soap_instantiate__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -320						; size = 4
tv159 = -316						; size = 4
tv133 = -316						; size = 4
tv77 = -316						; size = 4
$T101005 = -308						; size = 4
$T101006 = -296						; size = 4
$T101009 = -284						; size = 4
$T101010 = -272						; size = 4
$T101011 = -260						; size = 4
_fdebug$88461 = -56					; size = 4
_i$88452 = -44						; size = 4
_cp$ = -32						; size = 4
_fdebug$88427 = -20					; size = 4
__$EHRec$ = -12						; size = 12
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate__ns2__getSessionIDResponseElement, COMDAT

; 1709 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?soap_instantiate__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@HPBD1PAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1710 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__getSessionIDResponseElement(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN15@soap_insta@6
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN14@soap_insta@6
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN14@soap_insta@6:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN15@soap_insta@6
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$88427[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN18@soap_insta@6
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN19@soap_insta@6
$LN18@soap_insta@6:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN19@soap_insta@6:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN20@soap_insta@6
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN21@soap_insta@6
$LN20@soap_insta@6:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@soap_insta@6:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0EA@FHLKBNFK@soap_instantiate__ns2__getSessio@
	mov	edx, DWORD PTR _fdebug$88427[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$88427[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@soap_insta@6:

; 1711 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__getSessionIDResponseElement, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	20					; 00000014H
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 1712 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN12@soap_insta@6

; 1713 : 		return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@6
$LN12@soap_insta@6:

; 1714 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN11@soap_insta@6

; 1715 : 	{	cp->ptr = (void*)new _ns2__getSessionIDResponseElement;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101006[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T101006[ebp], 0
	je	SHORT $LN22@soap_insta@6
	mov	ecx, DWORD PTR $T101006[ebp]
	call	??0_ns2__getSessionIDResponseElement@@QAE@XZ ; _ns2__getSessionIDResponseElement::_ns2__getSessionIDResponseElement
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN23@soap_insta@6
$LN22@soap_insta@6:
	mov	DWORD PTR tv133[ebp], 0
$LN23@soap_insta@6:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T101005[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101005[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1716 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN10@soap_insta@6

; 1717 : 			*size = sizeof(_ns2__getSessionIDResponseElement);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN10@soap_insta@6:

; 1718 : 		((_ns2__getSessionIDResponseElement*)cp->ptr)->soap = soap;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 1719 : 	}
; 1720 : 	else

	jmp	$LN9@soap_insta@6
$LN11@soap_insta@6:

; 1721 : 	{	cp->ptr = (void*)new _ns2__getSessionIDResponseElement[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T101009[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T101009[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101011[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T101011[ebp], 0
	je	SHORT $LN24@soap_insta@6
	mov	ecx, DWORD PTR $T101011[ebp]
	mov	edx, DWORD PTR $T101009[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1_ns2__getSessionIDResponseElement@@UAE@XZ ; _ns2__getSessionIDResponseElement::~_ns2__getSessionIDResponseElement
	push	OFFSET ??0_ns2__getSessionIDResponseElement@@QAE@XZ ; _ns2__getSessionIDResponseElement::_ns2__getSessionIDResponseElement
	mov	eax, DWORD PTR $T101009[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T101011[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T101011[ebp]
	add	edx, 4
	mov	DWORD PTR tv159[ebp], edx
	jmp	SHORT $LN25@soap_insta@6
$LN24@soap_insta@6:
	mov	DWORD PTR tv159[ebp], 0
$LN25@soap_insta@6:
	mov	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR $T101010[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101010[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1722 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@soap_insta@6

; 1723 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 1724 : 			return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@6
$LN8@soap_insta@6:

; 1725 : 		}
; 1726 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@6

; 1727 : 			*size = n * sizeof(_ns2__getSessionIDResponseElement);

	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN7@soap_insta@6:

; 1728 : 		for (int i = 0; i < n; i++)

	mov	DWORD PTR _i$88452[ebp], 0
	jmp	SHORT $LN6@soap_insta@6
$LN5@soap_insta@6:
	mov	eax, DWORD PTR _i$88452[ebp]
	add	eax, 1
	mov	DWORD PTR _i$88452[ebp], eax
$LN6@soap_insta@6:
	mov	eax, DWORD PTR _i$88452[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN9@soap_insta@6

; 1729 : 			((_ns2__getSessionIDResponseElement*)cp->ptr)[i].soap = soap;

	mov	eax, DWORD PTR _i$88452[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [edx+eax+8], ecx
	jmp	SHORT $LN5@soap_insta@6
$LN9@soap_insta@6:

; 1730 : 	}
; 1731 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@6
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@6
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@6:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@6
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$88461[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$88461[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$88461[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@6:

; 1732 : 	return (_ns2__getSessionIDResponseElement*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN16@soap_insta@6:

; 1733 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?soap_instantiate__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@HPBD1PAI@Z$0:
	mov	eax, DWORD PTR $T101006[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@HPBD1PAI@Z$1:
	mov	eax, DWORD PTR $T101011[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?soap_instantiate__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@HPBD1PAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-324]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?soap_instantiate__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@HPBD1PAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?soap_instantiate__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate__ns2__getSessionIDResponseElement
PUBLIC	??_7_ns2__getSessionIDResponseElement@@6B@	; _ns2__getSessionIDResponseElement::`vftable'
PUBLIC	??_R4_ns2__getSessionIDResponseElement@@6B@	; _ns2__getSessionIDResponseElement::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_ns2__getSessionIDResponseElement@@@8	; _ns2__getSessionIDResponseElement `RTTI Type Descriptor'
PUBLIC	??_R3_ns2__getSessionIDResponseElement@@8	; _ns2__getSessionIDResponseElement::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_ns2__getSessionIDResponseElement@@8	; _ns2__getSessionIDResponseElement::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_ns2__getSessionIDResponseElement@@8 ; _ns2__getSessionIDResponseElement::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?soap_type@_ns2__getSessionIDResponseElement@@UBEHXZ ; _ns2__getSessionIDResponseElement::soap_type
PUBLIC	??_E_ns2__getSessionIDResponseElement@@UAEPAXI@Z ; _ns2__getSessionIDResponseElement::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_ns2__getSessionIDResponseElement@@8
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapstub.h
rdata$r	SEGMENT
??_R1A@?0A@EA@_ns2__getSessionIDResponseElement@@8 DD FLAT:??_R0?AV_ns2__getSessionIDResponseElement@@@8 ; _ns2__getSessionIDResponseElement::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_ns2__getSessionIDResponseElement@@8
rdata$r	ENDS
;	COMDAT ??_R2_ns2__getSessionIDResponseElement@@8
rdata$r	SEGMENT
??_R2_ns2__getSessionIDResponseElement@@8 DD FLAT:??_R1A@?0A@EA@_ns2__getSessionIDResponseElement@@8 ; _ns2__getSessionIDResponseElement::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_ns2__getSessionIDResponseElement@@8
rdata$r	SEGMENT
??_R3_ns2__getSessionIDResponseElement@@8 DD 00H	; _ns2__getSessionIDResponseElement::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_ns2__getSessionIDResponseElement@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_ns2__getSessionIDResponseElement@@@8
_DATA	SEGMENT
??_R0?AV_ns2__getSessionIDResponseElement@@@8 DD FLAT:??_7type_info@@6B@ ; _ns2__getSessionIDResponseElement `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_ns2__getSessionIDResponseElement@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_ns2__getSessionIDResponseElement@@6B@
rdata$r	SEGMENT
??_R4_ns2__getSessionIDResponseElement@@6B@ DD 00H	; _ns2__getSessionIDResponseElement::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_ns2__getSessionIDResponseElement@@@8
	DD	FLAT:??_R3_ns2__getSessionIDResponseElement@@8
rdata$r	ENDS
;	COMDAT ??_7_ns2__getSessionIDResponseElement@@6B@
CONST	SEGMENT
??_7_ns2__getSessionIDResponseElement@@6B@ DD FLAT:??_R4_ns2__getSessionIDResponseElement@@6B@ ; _ns2__getSessionIDResponseElement::`vftable'
	DD	FLAT:?soap_type@_ns2__getSessionIDResponseElement@@UBEHXZ
	DD	FLAT:?soap_default@_ns2__getSessionIDResponseElement@@UAEXPAUsoap@@@Z
	DD	FLAT:?soap_serialize@_ns2__getSessionIDResponseElement@@UBEXPAUsoap@@@Z
	DD	FLAT:?soap_put@_ns2__getSessionIDResponseElement@@UBEHPAUsoap@@PBD1@Z
	DD	FLAT:?soap_out@_ns2__getSessionIDResponseElement@@UBEHPAUsoap@@PBDH1@Z
	DD	FLAT:?soap_get@_ns2__getSessionIDResponseElement@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:?soap_in@_ns2__getSessionIDResponseElement@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:??_E_ns2__getSessionIDResponseElement@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??0_ns2__getSessionIDResponseElement@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_ns2__getSessionIDResponseElement@@QAE@XZ PROC	; _ns2__getSessionIDResponseElement::_ns2__getSessionIDResponseElement, COMDAT
; _this$ = ecx

; 193  : 	_ns2__getSessionIDResponseElement() : result(0), soap(NULL) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_ns2__getSessionIDResponseElement@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_ns2__getSessionIDResponseElement@@QAE@XZ ENDP	; _ns2__getSessionIDResponseElement::_ns2__getSessionIDResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_type@_ns2__getSessionIDResponseElement@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?soap_type@_ns2__getSessionIDResponseElement@@UBEHXZ PROC ; _ns2__getSessionIDResponseElement::soap_type, COMDAT
; _this$ = ecx

; 186  : 	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE__ns2__getSessionIDResponseElement */

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_type@_ns2__getSessionIDResponseElement@@UBEHXZ ENDP ; _ns2__getSessionIDResponseElement::soap_type
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1_ns2__getSessionIDResponseElement@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_ns2__getSessionIDResponseElement@@UAE@XZ PROC	; _ns2__getSessionIDResponseElement::~_ns2__getSessionIDResponseElement, COMDAT
; _this$ = ecx

; 194  : 	virtual ~_ns2__getSessionIDResponseElement() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_ns2__getSessionIDResponseElement@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1_ns2__getSessionIDResponseElement@@UAE@XZ ENDP	; _ns2__getSessionIDResponseElement::~_ns2__getSessionIDResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??_E_ns2__getSessionIDResponseElement@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_E_ns2__getSessionIDResponseElement@@UAEPAXI@Z PROC	; _ns2__getSessionIDResponseElement::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@8
	push	OFFSET ??1_ns2__getSessionIDResponseElement@@UAE@XZ ; _ns2__getSessionIDResponseElement::~_ns2__getSessionIDResponseElement
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@8
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@8:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@8
$LN3@vector@8:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_ns2__getSessionIDResponseElement@@UAE@XZ ; _ns2__getSessionIDResponseElement::~_ns2__getSessionIDResponseElement
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@8
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@8:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@8:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_E_ns2__getSessionIDResponseElement@@UAEPAXI@Z ENDP	; _ns2__getSessionIDResponseElement::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??4_ns2__getSessionIDResponseElement@@QAEAAV0@ABV0@@Z ; _ns2__getSessionIDResponseElement::operator=
PUBLIC	??_C@_0DE@GBGMEEIN@Copying?5_ns2__getSessionIDRespon@ ; `string'
;	COMDAT ??_C@_0DE@GBGMEEIN@Copying?5_ns2__getSessionIDRespon@
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapc.cpp
CONST	SEGMENT
??_C@_0DE@GBGMEEIN@Copying?5_ns2__getSessionIDRespon@ DB 'Copying _ns2__g'
	DB	'etSessionIDResponseElement %p -> %p', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy__ns2__getSessionIDResponseElement@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$88483 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy__ns2__getSessionIDResponseElement@@YAXPAUsoap@@HHPAXIPBXI@Z PROC ; soap_copy__ns2__getSessionIDResponseElement, COMDAT

; 1735 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1736 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__getSessionIDResponseElement %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@5
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@5
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@5:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@5
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$88483[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DE@GBGMEEIN@Copying?5_ns2__getSessionIDRespon@
	mov	edx, DWORD PTR _fdebug$88483[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$88483[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@5:

; 1737 : 	*(_ns2__getSessionIDResponseElement*)p = *(_ns2__getSessionIDResponseElement*)q;

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	??4_ns2__getSessionIDResponseElement@@QAEAAV0@ABV0@@Z

; 1738 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy__ns2__getSessionIDResponseElement@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP ; soap_copy__ns2__getSessionIDResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??4_ns2__getSessionIDResponseElement@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4_ns2__getSessionIDResponseElement@@QAEAAV0@ABV0@@Z PROC ; _ns2__getSessionIDResponseElement::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4_ns2__getSessionIDResponseElement@@QAEAAV0@ABV0@@Z ENDP ; _ns2__getSessionIDResponseElement::operator=
_TEXT	ENDS
PUBLIC	?soap_default@_ns2__getSessionIDElement@@UAEXPAUsoap@@@Z ; _ns2__getSessionIDElement::soap_default
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default@_ns2__getSessionIDElement@@UAEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_default@_ns2__getSessionIDElement@@UAEXPAUsoap@@@Z PROC ; _ns2__getSessionIDElement::soap_default, COMDAT
; _this$ = ecx

; 1741 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1742 : 	this->soap = soap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1743 : 	this->_ns2__getSessionIDElement::String_USCORE1 = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1744 : 	/* transient soap skipped */
; 1745 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_default@_ns2__getSessionIDElement@@UAEXPAUsoap@@@Z ENDP ; _ns2__getSessionIDElement::soap_default
_TEXT	ENDS
PUBLIC	?soap_serialize@_ns2__getSessionIDElement@@UBEXPAUsoap@@@Z ; _ns2__getSessionIDElement::soap_serialize
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_serialize@_ns2__getSessionIDElement@@UBEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_serialize@_ns2__getSessionIDElement@@UBEXPAUsoap@@@Z PROC ; _ns2__getSessionIDElement::soap_serialize, COMDAT
; _this$ = ecx

; 1748 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1749 : 	(void)soap; /* appease -Wall -Werror */
; 1750 : 	soap_serialize_PointerTostd__string(soap, &this->_ns2__getSessionIDElement::String_USCORE1);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_PointerTostd__string@@YAXPAUsoap@@PBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; soap_serialize_PointerTostd__string
	add	esp, 8

; 1751 : 	/* transient soap skipped */
; 1752 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_serialize@_ns2__getSessionIDElement@@UBEXPAUsoap@@@Z ENDP ; _ns2__getSessionIDElement::soap_serialize
_TEXT	ENDS
PUBLIC	?soap_put@_ns2__getSessionIDElement@@UBEHPAUsoap@@PBD1@Z ; _ns2__getSessionIDElement::soap_put
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put@_ns2__getSessionIDElement@@UBEHPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_id$ = -20						; size = 4
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_put@_ns2__getSessionIDElement@@UBEHPAUsoap@@PBD1@Z PROC ; _ns2__getSessionIDElement::soap_put, COMDAT
; _this$ = ecx

; 1755 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1756 : 	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns2__getSessionIDElement);

	push	19					; 00000013H
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 1757 : 	if (this->soap_out(soap, tag, id, type))

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@soap_put@6

; 1758 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put@6
$LN1@soap_put@6:

; 1759 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put@6:

; 1760 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_put@_ns2__getSessionIDElement@@UBEHPAUsoap@@PBD1@Z ENDP ; _ns2__getSessionIDElement::soap_put
_TEXT	ENDS
PUBLIC	?soap_out__ns2__getSessionIDElement@@YAHPAUsoap@@PBDHPBV_ns2__getSessionIDElement@@1@Z ; soap_out__ns2__getSessionIDElement
PUBLIC	?soap_out@_ns2__getSessionIDElement@@UBEHPAUsoap@@PBDH1@Z ; _ns2__getSessionIDElement::soap_out
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out@_ns2__getSessionIDElement@@UBEHPAUsoap@@PBDH1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_out@_ns2__getSessionIDElement@@UBEHPAUsoap@@PBDH1@Z PROC ; _ns2__getSessionIDElement::soap_out, COMDAT
; _this$ = ecx

; 1763 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1764 : 	return soap_out__ns2__getSessionIDElement(soap, tag, id, this, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out__ns2__getSessionIDElement@@YAHPAUsoap@@PBDHPBV_ns2__getSessionIDElement@@1@Z ; soap_out__ns2__getSessionIDElement
	add	esp, 20					; 00000014H

; 1765 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?soap_out@_ns2__getSessionIDElement@@UBEHPAUsoap@@PBDH1@Z ENDP ; _ns2__getSessionIDElement::soap_out
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out__ns2__getSessionIDElement@@YAHPAUsoap@@PBDHPBV_ns2__getSessionIDElement@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out__ns2__getSessionIDElement@@YAHPAUsoap@@PBDHPBV_ns2__getSessionIDElement@@1@Z PROC ; soap_out__ns2__getSessionIDElement, COMDAT

; 1768 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1769 : 	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__getSessionIDElement), type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_embedded_id
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_begin_out
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN2@soap_out__@6

; 1770 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN3@soap_out__@6
$LN2@soap_out__@6:

; 1771 : 	if (soap_out_PointerTostd__string(soap, "ns2:String_1", -1, &(a->_ns2__getSessionIDElement::String_USCORE1), ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 4
	push	eax
	push	-1
	push	OFFSET ??_C@_0N@EOBKMJFL@ns2?3String_1?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerTostd__string@@YAHPAUsoap@@PBDHPBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@1@Z ; soap_out_PointerTostd__string
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_out__@6

; 1772 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN3@soap_out__@6
$LN1@soap_out__@6:

; 1773 : 	/* transient soap skipped */
; 1774 : 	return soap_element_end_out(soap, tag);

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_out
	add	esp, 8
$LN3@soap_out__@6:

; 1775 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out__ns2__getSessionIDElement@@YAHPAUsoap@@PBDHPBV_ns2__getSessionIDElement@@1@Z ENDP ; soap_out__ns2__getSessionIDElement
_TEXT	ENDS
PUBLIC	?soap_get__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@PAV1@PBD2@Z ; soap_get__ns2__getSessionIDElement
PUBLIC	?soap_get@_ns2__getSessionIDElement@@UAEPAXPAUsoap@@PBD1@Z ; _ns2__getSessionIDElement::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get@_ns2__getSessionIDElement@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_get@_ns2__getSessionIDElement@@UAEPAXPAUsoap@@PBD1@Z PROC ; _ns2__getSessionIDElement::soap_get, COMDAT
; _this$ = ecx

; 1778 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1779 : 	return soap_get__ns2__getSessionIDElement(soap, this, tag, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_get__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@PAV1@PBD2@Z ; soap_get__ns2__getSessionIDElement
	add	esp, 16					; 00000010H

; 1780 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_get@_ns2__getSessionIDElement@@UAEPAXPAUsoap@@PBD1@Z ENDP ; _ns2__getSessionIDElement::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_get__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@PAV1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@PAV1@PBD2@Z PROC ; soap_get__ns2__getSessionIDElement, COMDAT

; 1783 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1784 : 	if ((p = soap_in__ns2__getSessionIDElement(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__getSessionIDElement
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get__@6

; 1785 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get__@6

; 1786 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get__@6
$LN2@soap_get__@6:

; 1787 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get__@6:

; 1788 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@PAV1@PBD2@Z ENDP ; soap_get__ns2__getSessionIDElement
_TEXT	ENDS
PUBLIC	?soap_in@_ns2__getSessionIDElement@@UAEPAXPAUsoap@@PBD1@Z ; _ns2__getSessionIDElement::soap_in
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in@_ns2__getSessionIDElement@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_in@_ns2__getSessionIDElement@@UAEPAXPAUsoap@@PBD1@Z PROC ; _ns2__getSessionIDElement::soap_in, COMDAT
; _this$ = ecx

; 1791 : {	return soap_in__ns2__getSessionIDElement(soap, tag, this, type);

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@PBDPAV1@1@Z ; soap_in__ns2__getSessionIDElement
	add	esp, 16					; 00000010H

; 1792 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_in@_ns2__getSessionIDElement@@UAEPAXPAUsoap@@PBD1@Z ENDP ; _ns2__getSessionIDElement::soap_in
_TEXT	ENDS
PUBLIC	?soap_copy__ns2__getSessionIDElement@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy__ns2__getSessionIDElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@PBDPAV1@1@Z
_TEXT	SEGMENT
_soap_flag_String_USCORE11$ = -8			; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@PBDPAV1@1@Z PROC ; soap_in__ns2__getSessionIDElement, COMDAT

; 1795 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1796 : 	if (soap_element_begin_in(soap, tag, 0, NULL))

	push	0
	push	0
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN16@soap_in__n@6

; 1797 : 		return NULL;

	xor	eax, eax
	jmp	$LN17@soap_in__n@6
$LN16@soap_in__n@6:

; 1798 : 	a = (_ns2__getSessionIDElement *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__getSessionIDElement, sizeof(_ns2__getSessionIDElement), soap->type, soap->arrayType);

	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	12					; 0000000cH
	push	19					; 00000013H
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 81076				; 00013cb4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_class_id_enter@@YAPAXPAUsoap@@PBDPAXHI11@Z ; soap_class_id_enter
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _a$[ebp], eax

; 1799 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN15@soap_in__n@6

; 1800 : 		return NULL;

	xor	eax, eax
	jmp	$LN17@soap_in__n@6
$LN15@soap_in__n@6:

; 1801 : 	if (soap->alloced)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87306]
	test	ecx, ecx
	je	SHORT $LN14@soap_in__n@6

; 1802 : 	{	a->soap_default(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1803 : 		if (soap->clist->type != SOAP_TYPE__ns2__getSessionIDElement)

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	cmp	DWORD PTR [ecx+8], 19			; 00000013H
	je	SHORT $LN14@soap_in__n@6

; 1804 : 		{	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 1805 : 			*soap->id = '\0';

	mov	eax, DWORD PTR _soap$[ebp]
	mov	BYTE PTR [eax+81076], 0

; 1806 : 			return (_ns2__getSessionIDElement *)a->soap_in(soap, tag, type);

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN17@soap_in__n@6
$LN14@soap_in__n@6:

; 1807 : 		}
; 1808 : 	}
; 1809 : 	size_t soap_flag_String_USCORE11 = 1;

	mov	DWORD PTR _soap_flag_String_USCORE11$[ebp], 1

; 1810 : 	if (soap->body && !*soap->href)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	$LN12@soap_in__n@6
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	test	ecx, ecx
	jne	$LN12@soap_in__n@6
$LN11@soap_in__n@6:

; 1811 : 	{
; 1812 : 		for (;;)
; 1813 : 		{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 1814 : 			if (soap_flag_String_USCORE11 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))

	cmp	DWORD PTR _soap_flag_String_USCORE11$[ebp], 0
	je	SHORT $LN9@soap_in__n@6
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	je	SHORT $LN8@soap_in__n@6
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN9@soap_in__n@6
$LN8@soap_in__n@6:

; 1815 : 				if (soap_in_PointerTostd__string(soap, "ns2:String_1", &(a->_ns2__getSessionIDElement::String_USCORE1), "xsd:string"))

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_0N@EOBKMJFL@ns2?3String_1?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_PointerTostd__string@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PBDPAPAV12@1@Z ; soap_in_PointerTostd__string
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN9@soap_in__n@6

; 1816 : 				{	soap_flag_String_USCORE11--;

	mov	eax, DWORD PTR _soap_flag_String_USCORE11$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_String_USCORE11$[ebp], eax

; 1817 : 					continue;

	jmp	SHORT $LN11@soap_in__n@6
$LN9@soap_in__n@6:

; 1818 : 				}
; 1819 : 			/* transient soap skipped */
; 1820 : 			if (soap->error == SOAP_TAG_MISMATCH)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN6@soap_in__n@6

; 1821 : 				soap->error = soap_ignore_element(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_ignore_element@@YAHPAUsoap@@@Z	; soap_ignore_element
	add	esp, 4
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+90460], eax
$LN6@soap_in__n@6:

; 1822 : 			if (soap->error == SOAP_NO_TAG)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN5@soap_in__n@6

; 1823 : 				break;

	jmp	SHORT $LN10@soap_in__n@6
$LN5@soap_in__n@6:

; 1824 : 			if (soap->error)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 0
	je	SHORT $LN4@soap_in__n@6

; 1825 : 				return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in__n@6
$LN4@soap_in__n@6:

; 1826 : 		}

	jmp	$LN11@soap_in__n@6
$LN10@soap_in__n@6:

; 1827 : 		if (soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@soap_in__n@6

; 1828 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in__n@6
$LN3@soap_in__n@6:

; 1829 : 	}
; 1830 : 	else

	jmp	SHORT $LN2@soap_in__n@6
$LN12@soap_in__n@6:

; 1831 : 	{	a = (_ns2__getSessionIDElement *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__getSessionIDElement, 0, sizeof(_ns2__getSessionIDElement), 0, soap_copy__ns2__getSessionIDElement);

	push	OFFSET ?soap_copy__ns2__getSessionIDElement@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy__ns2__getSessionIDElement
	push	0
	push	12					; 0000000cH
	push	0
	push	19					; 00000013H
	push	0
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_forward
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 1832 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN2@soap_in__n@6
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_in__n@6

; 1833 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in__n@6
$LN2@soap_in__n@6:

; 1834 : 	}
; 1835 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN17@soap_in__n@6:

; 1836 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@PBDPAV1@1@Z ENDP ; soap_in__ns2__getSessionIDElement
_TEXT	ENDS
PUBLIC	?soap_new__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@H@Z ; soap_new__ns2__getSessionIDElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_new__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@H@Z PROC ; soap_new__ns2__getSessionIDElement, COMDAT

; 1839 : {	return soap_instantiate__ns2__getSessionIDElement(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__getSessionIDElement
	add	esp, 20					; 00000014H

; 1840 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@H@Z ENDP ; soap_new__ns2__getSessionIDElement
_TEXT	ENDS
PUBLIC	?soap_delete__ns2__getSessionIDElement@@YAXPAUsoap@@PAV_ns2__getSessionIDElement@@@Z ; soap_delete__ns2__getSessionIDElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete__ns2__getSessionIDElement@@YAXPAUsoap@@PAV_ns2__getSessionIDElement@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete__ns2__getSessionIDElement@@YAXPAUsoap@@PAV_ns2__getSessionIDElement@@@Z PROC ; soap_delete__ns2__getSessionIDElement, COMDAT

; 1843 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 1844 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete__ns2__getSessionIDElement@@YAXPAUsoap@@PAV_ns2__getSessionIDElement@@@Z ENDP ; soap_delete__ns2__getSessionIDElement
_TEXT	ENDS
PUBLIC	??1_ns2__getSessionIDElement@@UAE@XZ		; _ns2__getSessionIDElement::~_ns2__getSessionIDElement
PUBLIC	??0_ns2__getSessionIDElement@@QAE@XZ		; _ns2__getSessionIDElement::_ns2__getSessionIDElement
PUBLIC	??_C@_0DI@PAGLBOKM@soap_instantiate__ns2__getSessio@ ; `string'
;	COMDAT ??_C@_0DI@PAGLBOKM@soap_instantiate__ns2__getSessio@
CONST	SEGMENT
??_C@_0DI@PAGLBOKM@soap_instantiate__ns2__getSessio@ DB 'soap_instantiate'
	DB	'__ns2__getSessionIDElement(%d, %s, %s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?soap_instantiate__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@HPBD1PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@HPBD1PAI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@HPBD1PAI@Z$1
__ehfuncinfo$?soap_instantiate__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@HPBD1PAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?soap_instantiate__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@HPBD1PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?soap_instantiate__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -320						; size = 4
tv159 = -316						; size = 4
tv133 = -316						; size = 4
tv77 = -316						; size = 4
$T101063 = -308						; size = 4
$T101064 = -296						; size = 4
$T101067 = -284						; size = 4
$T101068 = -272						; size = 4
$T101069 = -260						; size = 4
_fdebug$88627 = -56					; size = 4
_i$88618 = -44						; size = 4
_cp$ = -32						; size = 4
_fdebug$88593 = -20					; size = 4
__$EHRec$ = -12						; size = 12
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate__ns2__getSessionIDElement, COMDAT

; 1847 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?soap_instantiate__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@HPBD1PAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1848 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__getSessionIDElement(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN15@soap_insta@7
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN14@soap_insta@7
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN14@soap_insta@7:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN15@soap_insta@7
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$88593[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN18@soap_insta@7
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN19@soap_insta@7
$LN18@soap_insta@7:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN19@soap_insta@7:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN20@soap_insta@7
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN21@soap_insta@7
$LN20@soap_insta@7:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@soap_insta@7:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DI@PAGLBOKM@soap_instantiate__ns2__getSessio@
	mov	edx, DWORD PTR _fdebug$88593[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$88593[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@soap_insta@7:

; 1849 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns2__getSessionIDElement, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	19					; 00000013H
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 1850 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN12@soap_insta@7

; 1851 : 		return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@7
$LN12@soap_insta@7:

; 1852 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN11@soap_insta@7

; 1853 : 	{	cp->ptr = (void*)new _ns2__getSessionIDElement;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101064[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T101064[ebp], 0
	je	SHORT $LN22@soap_insta@7
	mov	ecx, DWORD PTR $T101064[ebp]
	call	??0_ns2__getSessionIDElement@@QAE@XZ	; _ns2__getSessionIDElement::_ns2__getSessionIDElement
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN23@soap_insta@7
$LN22@soap_insta@7:
	mov	DWORD PTR tv133[ebp], 0
$LN23@soap_insta@7:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T101063[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101063[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1854 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN10@soap_insta@7

; 1855 : 			*size = sizeof(_ns2__getSessionIDElement);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN10@soap_insta@7:

; 1856 : 		((_ns2__getSessionIDElement*)cp->ptr)->soap = soap;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 1857 : 	}
; 1858 : 	else

	jmp	$LN9@soap_insta@7
$LN11@soap_insta@7:

; 1859 : 	{	cp->ptr = (void*)new _ns2__getSessionIDElement[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T101067[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T101067[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101069[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T101069[ebp], 0
	je	SHORT $LN24@soap_insta@7
	mov	ecx, DWORD PTR $T101069[ebp]
	mov	edx, DWORD PTR $T101067[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1_ns2__getSessionIDElement@@UAE@XZ ; _ns2__getSessionIDElement::~_ns2__getSessionIDElement
	push	OFFSET ??0_ns2__getSessionIDElement@@QAE@XZ ; _ns2__getSessionIDElement::_ns2__getSessionIDElement
	mov	eax, DWORD PTR $T101067[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T101069[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T101069[ebp]
	add	edx, 4
	mov	DWORD PTR tv159[ebp], edx
	jmp	SHORT $LN25@soap_insta@7
$LN24@soap_insta@7:
	mov	DWORD PTR tv159[ebp], 0
$LN25@soap_insta@7:
	mov	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR $T101068[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101068[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1860 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@soap_insta@7

; 1861 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 1862 : 			return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@7
$LN8@soap_insta@7:

; 1863 : 		}
; 1864 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@7

; 1865 : 			*size = n * sizeof(_ns2__getSessionIDElement);

	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN7@soap_insta@7:

; 1866 : 		for (int i = 0; i < n; i++)

	mov	DWORD PTR _i$88618[ebp], 0
	jmp	SHORT $LN6@soap_insta@7
$LN5@soap_insta@7:
	mov	eax, DWORD PTR _i$88618[ebp]
	add	eax, 1
	mov	DWORD PTR _i$88618[ebp], eax
$LN6@soap_insta@7:
	mov	eax, DWORD PTR _i$88618[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN9@soap_insta@7

; 1867 : 			((_ns2__getSessionIDElement*)cp->ptr)[i].soap = soap;

	mov	eax, DWORD PTR _i$88618[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [edx+eax+8], ecx
	jmp	SHORT $LN5@soap_insta@7
$LN9@soap_insta@7:

; 1868 : 	}
; 1869 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@7
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@7
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@7:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@7
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$88627[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$88627[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$88627[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@7:

; 1870 : 	return (_ns2__getSessionIDElement*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN16@soap_insta@7:

; 1871 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?soap_instantiate__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@HPBD1PAI@Z$0:
	mov	eax, DWORD PTR $T101064[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@HPBD1PAI@Z$1:
	mov	eax, DWORD PTR $T101069[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?soap_instantiate__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@HPBD1PAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-324]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?soap_instantiate__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@HPBD1PAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?soap_instantiate__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate__ns2__getSessionIDElement
PUBLIC	??_7_ns2__getSessionIDElement@@6B@		; _ns2__getSessionIDElement::`vftable'
PUBLIC	??_R4_ns2__getSessionIDElement@@6B@		; _ns2__getSessionIDElement::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_ns2__getSessionIDElement@@@8		; _ns2__getSessionIDElement `RTTI Type Descriptor'
PUBLIC	??_R3_ns2__getSessionIDElement@@8		; _ns2__getSessionIDElement::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_ns2__getSessionIDElement@@8		; _ns2__getSessionIDElement::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_ns2__getSessionIDElement@@8	; _ns2__getSessionIDElement::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?soap_type@_ns2__getSessionIDElement@@UBEHXZ	; _ns2__getSessionIDElement::soap_type
PUBLIC	??_E_ns2__getSessionIDElement@@UAEPAXI@Z	; _ns2__getSessionIDElement::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@_ns2__getSessionIDElement@@8
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapstub.h
rdata$r	SEGMENT
??_R1A@?0A@EA@_ns2__getSessionIDElement@@8 DD FLAT:??_R0?AV_ns2__getSessionIDElement@@@8 ; _ns2__getSessionIDElement::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_ns2__getSessionIDElement@@8
rdata$r	ENDS
;	COMDAT ??_R2_ns2__getSessionIDElement@@8
rdata$r	SEGMENT
??_R2_ns2__getSessionIDElement@@8 DD FLAT:??_R1A@?0A@EA@_ns2__getSessionIDElement@@8 ; _ns2__getSessionIDElement::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_ns2__getSessionIDElement@@8
rdata$r	SEGMENT
??_R3_ns2__getSessionIDElement@@8 DD 00H		; _ns2__getSessionIDElement::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_ns2__getSessionIDElement@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_ns2__getSessionIDElement@@@8
_DATA	SEGMENT
??_R0?AV_ns2__getSessionIDElement@@@8 DD FLAT:??_7type_info@@6B@ ; _ns2__getSessionIDElement `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_ns2__getSessionIDElement@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_ns2__getSessionIDElement@@6B@
rdata$r	SEGMENT
??_R4_ns2__getSessionIDElement@@6B@ DD 00H		; _ns2__getSessionIDElement::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_ns2__getSessionIDElement@@@8
	DD	FLAT:??_R3_ns2__getSessionIDElement@@8
rdata$r	ENDS
;	COMDAT ??_7_ns2__getSessionIDElement@@6B@
CONST	SEGMENT
??_7_ns2__getSessionIDElement@@6B@ DD FLAT:??_R4_ns2__getSessionIDElement@@6B@ ; _ns2__getSessionIDElement::`vftable'
	DD	FLAT:?soap_type@_ns2__getSessionIDElement@@UBEHXZ
	DD	FLAT:?soap_default@_ns2__getSessionIDElement@@UAEXPAUsoap@@@Z
	DD	FLAT:?soap_serialize@_ns2__getSessionIDElement@@UBEXPAUsoap@@@Z
	DD	FLAT:?soap_put@_ns2__getSessionIDElement@@UBEHPAUsoap@@PBD1@Z
	DD	FLAT:?soap_out@_ns2__getSessionIDElement@@UBEHPAUsoap@@PBDH1@Z
	DD	FLAT:?soap_get@_ns2__getSessionIDElement@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:?soap_in@_ns2__getSessionIDElement@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:??_E_ns2__getSessionIDElement@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??0_ns2__getSessionIDElement@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_ns2__getSessionIDElement@@QAE@XZ PROC		; _ns2__getSessionIDElement::_ns2__getSessionIDElement, COMDAT
; _this$ = ecx

; 172  : 	_ns2__getSessionIDElement() : String_USCORE1(NULL), soap(NULL) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_ns2__getSessionIDElement@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_ns2__getSessionIDElement@@QAE@XZ ENDP		; _ns2__getSessionIDElement::_ns2__getSessionIDElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_type@_ns2__getSessionIDElement@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?soap_type@_ns2__getSessionIDElement@@UBEHXZ PROC	; _ns2__getSessionIDElement::soap_type, COMDAT
; _this$ = ecx

; 165  : 	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE__ns2__getSessionIDElement */

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 19					; 00000013H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_type@_ns2__getSessionIDElement@@UBEHXZ ENDP	; _ns2__getSessionIDElement::soap_type
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1_ns2__getSessionIDElement@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_ns2__getSessionIDElement@@UAE@XZ PROC		; _ns2__getSessionIDElement::~_ns2__getSessionIDElement, COMDAT
; _this$ = ecx

; 173  : 	virtual ~_ns2__getSessionIDElement() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_ns2__getSessionIDElement@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1_ns2__getSessionIDElement@@UAE@XZ ENDP		; _ns2__getSessionIDElement::~_ns2__getSessionIDElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??_E_ns2__getSessionIDElement@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_E_ns2__getSessionIDElement@@UAEPAXI@Z PROC		; _ns2__getSessionIDElement::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@9
	push	OFFSET ??1_ns2__getSessionIDElement@@UAE@XZ ; _ns2__getSessionIDElement::~_ns2__getSessionIDElement
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@9
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@9:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@9
$LN3@vector@9:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_ns2__getSessionIDElement@@UAE@XZ	; _ns2__getSessionIDElement::~_ns2__getSessionIDElement
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@9
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@9:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@9:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_E_ns2__getSessionIDElement@@UAEPAXI@Z ENDP		; _ns2__getSessionIDElement::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??4_ns2__getSessionIDElement@@QAEAAV0@ABV0@@Z	; _ns2__getSessionIDElement::operator=
PUBLIC	??_C@_0CM@GPOIOEFL@Copying?5_ns2__getSessionIDElemen@ ; `string'
;	COMDAT ??_C@_0CM@GPOIOEFL@Copying?5_ns2__getSessionIDElemen@
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapc.cpp
CONST	SEGMENT
??_C@_0CM@GPOIOEFL@Copying?5_ns2__getSessionIDElemen@ DB 'Copying _ns2__g'
	DB	'etSessionIDElement %p -> %p', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy__ns2__getSessionIDElement@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$88649 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy__ns2__getSessionIDElement@@YAXPAUsoap@@HHPAXIPBXI@Z PROC ; soap_copy__ns2__getSessionIDElement, COMDAT

; 1873 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1874 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns2__getSessionIDElement %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@6
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@6
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@6:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@6
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$88649[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CM@GPOIOEFL@Copying?5_ns2__getSessionIDElemen@
	mov	edx, DWORD PTR _fdebug$88649[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$88649[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@6:

; 1875 : 	*(_ns2__getSessionIDElement*)p = *(_ns2__getSessionIDElement*)q;

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	??4_ns2__getSessionIDElement@@QAEAAV0@ABV0@@Z

; 1876 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy__ns2__getSessionIDElement@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP ; soap_copy__ns2__getSessionIDElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??4_ns2__getSessionIDElement@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4_ns2__getSessionIDElement@@QAEAAV0@ABV0@@Z PROC	; _ns2__getSessionIDElement::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4_ns2__getSessionIDElement@@QAEAAV0@ABV0@@Z ENDP	; _ns2__getSessionIDElement::operator=
_TEXT	ENDS
PUBLIC	?soap_default_std__string@@YAXPAUsoap@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; soap_default_std__string
EXTRN	__imp_?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z:PROC
EXTRN	__imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB:DWORD
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default_std__string@@YAXPAUsoap@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_default_std__string@@YAXPAUsoap@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; soap_default_std__string, COMDAT

; 1879 : {	(void)soap; /* appease -Wall -Werror */

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1880 : 	p->erase();

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _p$[ebp]
	call	DWORD PTR __imp_?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1881 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_default_std__string@@YAXPAUsoap@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; soap_default_std__string
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_serialize_std__string@@YAXPAUsoap@@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_serialize_std__string@@YAXPAUsoap@@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; soap_serialize_std__string, COMDAT

; 1884 : {	(void)soap; (void)p; /* appease -Wall -Werror */

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1885 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize_std__string@@YAXPAUsoap@@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; soap_serialize_std__string
_TEXT	ENDS
PUBLIC	?soap_put_std__string@@YAHPAUsoap@@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD2@Z ; soap_put_std__string
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_std__string@@YAHPAUsoap@@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_std__string@@YAHPAUsoap@@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD2@Z PROC ; soap_put_std__string, COMDAT

; 1888 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1889 : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);

	push	18					; 00000012H
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 1890 : 	if (soap_out_std__string(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_std__string@@YAHPAUsoap@@PBDHPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@1@Z ; soap_out_std__string
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_s

; 1891 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_s
$LN1@soap_put_s:

; 1892 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_s:

; 1893 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_std__string@@YAHPAUsoap@@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD2@Z ENDP ; soap_put_std__string
_TEXT	ENDS
EXTRN	_soap_string_out:PROC
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	_soap_element_null:PROC
EXTRN	__imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out_std__string@@YAHPAUsoap@@PBDHPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_s$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_std__string@@YAHPAUsoap@@PBDHPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@1@Z PROC ; soap_out_std__string, COMDAT

; 1895 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1896 : 	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 8388608				; 00800000H
	je	SHORT $LN3@soap_out_s
	mov	esi, esp
	mov	ecx, DWORD PTR _s$[ebp]
	call	DWORD PTR __imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@soap_out_s

; 1897 : 		return soap_element_null(soap, tag, id, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_element_null
	add	esp, 16					; 00000010H
	jmp	SHORT $LN4@soap_out_s
$LN3@soap_out_s:

; 1898 : 	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_embedded_id
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_begin_out
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN1@soap_out_s
	push	0
	mov	esi, esp
	mov	ecx, DWORD PTR _s$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_string_out
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@soap_out_s
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_out
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_out_s
$LN1@soap_out_s:

; 1899 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN4@soap_out_s
$LN2@soap_out_s:

; 1900 : 	return SOAP_OK;

	xor	eax, eax
$LN4@soap_out_s:

; 1901 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_std__string@@YAHPAUsoap@@PBDHPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@1@Z ENDP ; soap_out_std__string
_TEXT	ENDS
PUBLIC	?soap_get_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PAV12@PBD2@Z ; soap_get_std__string
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PAV12@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PAV12@PBD2@Z PROC ; soap_get_std__string, COMDAT

; 1904 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1905 : 	if ((p = soap_in_std__string(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PBDPAV12@1@Z ; soap_in_std__string
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_s

; 1906 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_s

; 1907 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_s
$LN2@soap_get_s:

; 1908 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_s:

; 1909 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PAV12@PBD2@Z ENDP ; soap_get_std__string
_TEXT	ENDS
PUBLIC	?soap_copy_std__string@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy_std__string
PUBLIC	?soap_new_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@H@Z ; soap_new_std__string
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
EXTRN	_soap_string_in:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PBDPAV12@1@Z
_TEXT	SEGMENT
_t$88705 = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_s$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PBDPAV12@1@Z PROC ; soap_in_std__string, COMDAT

; 1912 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1913 : 	if (soap_element_begin_in(soap, tag, 1, NULL))

	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN10@soap_in_st

; 1914 : 		return NULL;

	xor	eax, eax
	jmp	$LN11@soap_in_st
$LN10@soap_in_st:

; 1915 : 	if (!s)

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN9@soap_in_st

; 1916 : 		s = soap_new_std__string(soap, -1);

	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_new_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@H@Z ; soap_new_std__string
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax
$LN9@soap_in_st:

; 1917 : 	if (soap->null)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87300]
	test	ecx, ecx
	je	SHORT $LN8@soap_in_st

; 1918 : 		if (s)

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN8@soap_in_st

; 1919 : 			s->erase();

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _s$[ebp]
	call	DWORD PTR __imp_?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@soap_in_st:

; 1920 : 	if (soap->body && !*soap->href)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	$LN6@soap_in_st
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	test	ecx, ecx
	jne	SHORT $LN6@soap_in_st

; 1921 : 	{	
; 1922 : 		char *t;
; 1923 : 		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);

	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	32					; 00000020H
	push	18					; 00000012H
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 81076				; 00013cb4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_class_id_enter@@YAPAXPAUsoap@@PBDPAXHI11@Z ; soap_class_id_enter
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _s$[ebp], eax

; 1924 : 		if (s)

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN5@soap_in_st

; 1925 : 		{
; 1926 : 			if ((t = soap_string_in(soap, 1, -1, -1)))

	push	-1
	push	-1
	push	1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_string_in
	add	esp, 16					; 00000010H
	mov	DWORD PTR _t$88705[ebp], eax
	cmp	DWORD PTR _t$88705[ebp], 0
	je	SHORT $LN4@soap_in_st

; 1927 : 				s->assign(t);

	mov	esi, esp
	mov	eax, DWORD PTR _t$88705[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1928 : 			else

	jmp	SHORT $LN5@soap_in_st
$LN4@soap_in_st:

; 1929 : 				return NULL;

	xor	eax, eax
	jmp	$LN11@soap_in_st
$LN5@soap_in_st:

; 1930 : 		}
; 1931 : 	}
; 1932 : 	else

	jmp	SHORT $LN2@soap_in_st
$LN6@soap_in_st:

; 1933 : 		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);

	push	OFFSET ?soap_copy_std__string@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy_std__string
	push	0
	push	32					; 00000020H
	push	0
	push	18					; 00000012H
	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	32					; 00000020H
	push	18					; 00000012H
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 81076				; 00013cb4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_class_id_enter@@YAPAXPAUsoap@@PBDPAXHI11@Z ; soap_class_id_enter
	add	esp, 28					; 0000001cH
	push	eax
	mov	edx, DWORD PTR _soap$[ebp]
	add	edx, 82100				; 000140b4H
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_id_forward
	add	esp, 36					; 00000024H
	mov	DWORD PTR _s$[ebp], eax
$LN2@soap_in_st:

; 1934 : 	if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN1@soap_in_st
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@soap_in_st

; 1935 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN11@soap_in_st
$LN1@soap_in_st:

; 1936 : 	return s;

	mov	eax, DWORD PTR _s$[ebp]
$LN11@soap_in_st:

; 1937 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PBDPAV12@1@Z ENDP ; soap_in_std__string
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_new_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@H@Z PROC ; soap_new_std__string, COMDAT

; 1940 : {	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_std__string
	add	esp, 20					; 00000014H

; 1941 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@H@Z ENDP ; soap_new_std__string
_TEXT	ENDS
PUBLIC	?soap_delete_std__string@@YAXPAUsoap@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; soap_delete_std__string
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete_std__string@@YAXPAUsoap@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete_std__string@@YAXPAUsoap@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; soap_delete_std__string, COMDAT

; 1944 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 1945 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete_std__string@@YAXPAUsoap@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; soap_delete_std__string
_TEXT	ENDS
PUBLIC	??0_Has_debug_it@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Has_debug_it::_Has_debug_it
PUBLIC	??_C@_0CK@BGNEEPNA@soap_instantiate_std__string?$CI?$CFd?0@ ; `string'
EXTRN	__imp_??_F?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_Has_debug_it@01@@Z:PROC
;	COMDAT ??_C@_0CK@BGNEEPNA@soap_instantiate_std__string?$CI?$CFd?0@
CONST	SEGMENT
??_C@_0CK@BGNEEPNA@soap_instantiate_std__string?$CI?$CFd?0@ DB 'soap_inst'
	DB	'antiate_std__string(%d, %s, %s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?soap_instantiate_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@HPBD1PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@HPBD1PAI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@HPBD1PAI@Z$1
__ehfuncinfo$?soap_instantiate_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@HPBD1PAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?soap_instantiate_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@HPBD1PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?soap_instantiate_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -320						; size = 4
tv161 = -316						; size = 4
tv137 = -316						; size = 4
tv77 = -316						; size = 4
$T101114 = -308						; size = 4
$T101115 = -296						; size = 4
$T101116 = -281						; size = 1
$T101119 = -272						; size = 4
$T101120 = -260						; size = 4
$T101121 = -248						; size = 4
_fdebug$88764 = -44					; size = 4
_cp$ = -32						; size = 4
_fdebug$88735 = -20					; size = 4
__$EHRec$ = -12						; size = 12
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate_std__string, COMDAT

; 1948 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?soap_instantiate_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@HPBD1PAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1949 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN12@soap_insta@8
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN11@soap_insta@8
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN11@soap_insta@8:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN12@soap_insta@8
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$88735[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN15@soap_insta@8
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN16@soap_insta@8
$LN15@soap_insta@8:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN16@soap_insta@8:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN17@soap_insta@8
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN18@soap_insta@8
$LN17@soap_insta@8:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN18@soap_insta@8:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CK@BGNEEPNA@soap_instantiate_std__string?$CI?$CFd?0@
	mov	edx, DWORD PTR _fdebug$88735[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$88735[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@soap_insta@8:

; 1950 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	18					; 00000012H
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 1951 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN9@soap_insta@8

; 1952 : 		return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@8
$LN9@soap_insta@8:

; 1953 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	$LN8@soap_insta@8

; 1954 : 	{	cp->ptr = (void*)new std::string;

	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101115[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T101115[ebp], 0
	je	SHORT $LN19@soap_insta@8
	push	1
	lea	ecx, DWORD PTR $T101116[ebp]
	call	??0_Has_debug_it@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Has_debug_it::_Has_debug_it
	mov	esi, esp
	movzx	eax, BYTE PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T101115[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_Has_debug_it@01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN20@soap_insta@8
$LN19@soap_insta@8:
	mov	DWORD PTR tv137[ebp], 0
$LN20@soap_insta@8:
	mov	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR $T101114[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR $T101114[ebp]
	mov	DWORD PTR [edx+4], eax

; 1955 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@8

; 1956 : 			*size = sizeof(std::string);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 32			; 00000020H
$LN7@soap_insta@8:

; 1957 : 	}
; 1958 : 	else

	jmp	$LN6@soap_insta@8
$LN8@soap_insta@8:

; 1959 : 	{	cp->ptr = (void*)new std::string[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T101119[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T101119[ebp]
	mov	edx, 32					; 00000020H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101121[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T101121[ebp], 0
	je	SHORT $LN21@soap_insta@8
	mov	ecx, DWORD PTR $T101121[ebp]
	mov	edx, DWORD PTR $T101119[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	push	eax
	mov	ecx, DWORD PTR __imp_??_F?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
	push	ecx
	mov	edx, DWORD PTR $T101119[ebp]
	push	edx
	push	32					; 00000020H
	mov	eax, DWORD PTR $T101121[ebp]
	add	eax, 4
	push	eax
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	ecx, DWORD PTR $T101121[ebp]
	add	ecx, 4
	mov	DWORD PTR tv161[ebp], ecx
	jmp	SHORT $LN22@soap_insta@8
$LN21@soap_insta@8:
	mov	DWORD PTR tv161[ebp], 0
$LN22@soap_insta@8:
	mov	edx, DWORD PTR tv161[ebp]
	mov	DWORD PTR $T101120[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR $T101120[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1960 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@soap_insta@8

; 1961 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 1962 : 			return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@8
$LN5@soap_insta@8:

; 1963 : 		}
; 1964 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN6@soap_insta@8

; 1965 : 			*size = n * sizeof(std::string);

	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN6@soap_insta@8:

; 1966 : 	}
; 1967 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@8
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@8
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@8:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@8
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$88764[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$88764[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$88764[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@8:

; 1968 : 	return (std::string*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN13@soap_insta@8:

; 1969 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?soap_instantiate_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@HPBD1PAI@Z$0:
	mov	eax, DWORD PTR $T101115[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@HPBD1PAI@Z$1:
	mov	eax, DWORD PTR $T101121[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?soap_instantiate_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@HPBD1PAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-324]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?soap_instantiate_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@HPBD1PAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?soap_instantiate_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate_std__string
PUBLIC	??_C@_0BO@FLBDFFBB@Copying?5std?3?3string?5?$CFp?5?9?$DO?5?$CFp?6?$AA@ ; `string'
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
;	COMDAT ??_C@_0BO@FLBDFFBB@Copying?5std?3?3string?5?$CFp?5?9?$DO?5?$CFp?6?$AA@
CONST	SEGMENT
??_C@_0BO@FLBDFFBB@Copying?5std?3?3string?5?$CFp?5?9?$DO?5?$CFp?6?$AA@ DB 'C'
	DB	'opying std::string %p -> %p', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy_std__string@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$88782 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy_std__string@@YAXPAUsoap@@HHPAXIPBXI@Z PROC	; soap_copy_std__string, COMDAT

; 1971 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1972 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@7
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@7
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@7:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@7
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$88782[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BO@FLBDFFBB@Copying?5std?3?3string?5?$CFp?5?9?$DO?5?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$88782[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$88782[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@7:

; 1973 : 	*(std::string*)p = *(std::string*)q;

	mov	esi, esp
	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1974 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy_std__string@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP	; soap_copy_std__string
_TEXT	ENDS
PUBLIC	?soap_default@xsd__string@@UAEXPAUsoap@@@Z	; xsd__string::soap_default
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default@xsd__string@@UAEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_default@xsd__string@@UAEXPAUsoap@@@Z PROC		; xsd__string::soap_default, COMDAT
; _this$ = ecx

; 1977 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1978 : 	this->soap = soap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1979 : 	soap_default_std__string(soap, &this->xsd__string::__item);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_std__string@@YAXPAUsoap@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; soap_default_std__string
	add	esp, 8

; 1980 : 	this->xsd__anyType::__item = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1981 : 	/* transient soap skipped */
; 1982 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_default@xsd__string@@UAEXPAUsoap@@@Z ENDP		; xsd__string::soap_default
_TEXT	ENDS
PUBLIC	?soap_serialize@xsd__string@@UBEXPAUsoap@@@Z	; xsd__string::soap_serialize
EXTRN	_soap_embedded:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_serialize@xsd__string@@UBEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_serialize@xsd__string@@UBEXPAUsoap@@@Z PROC	; xsd__string::soap_serialize, COMDAT
; _this$ = ecx

; 1985 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1986 : 	(void)soap; /* appease -Wall -Werror */
; 1987 : 	soap_embedded(soap, &this->xsd__string::__item, SOAP_TYPE_std__string);

	push	18					; 00000012H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_embedded
	add	esp, 12					; 0000000cH

; 1988 : 	soap_serialize_std__string(soap, &this->xsd__string::__item);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_std__string@@YAXPAUsoap@@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; soap_serialize_std__string
	add	esp, 8

; 1989 : 	/* transient soap skipped */
; 1990 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_serialize@xsd__string@@UBEXPAUsoap@@@Z ENDP	; xsd__string::soap_serialize
_TEXT	ENDS
PUBLIC	?soap_put@xsd__string@@UBEHPAUsoap@@PBD1@Z	; xsd__string::soap_put
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put@xsd__string@@UBEHPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_id$ = -20						; size = 4
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_put@xsd__string@@UBEHPAUsoap@@PBD1@Z PROC		; xsd__string::soap_put, COMDAT
; _this$ = ecx

; 1993 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1994 : 	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__string);

	push	17					; 00000011H
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 1995 : 	if (this->soap_out(soap, tag, id, type))

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@soap_put@7

; 1996 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put@7
$LN1@soap_put@7:

; 1997 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put@7:

; 1998 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_put@xsd__string@@UBEHPAUsoap@@PBD1@Z ENDP		; xsd__string::soap_put
_TEXT	ENDS
PUBLIC	?soap_out_xsd__string@@YAHPAUsoap@@PBDHPBVxsd__string@@1@Z ; soap_out_xsd__string
PUBLIC	?soap_out@xsd__string@@UBEHPAUsoap@@PBDH1@Z	; xsd__string::soap_out
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out@xsd__string@@UBEHPAUsoap@@PBDH1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_out@xsd__string@@UBEHPAUsoap@@PBDH1@Z PROC	; xsd__string::soap_out, COMDAT
; _this$ = ecx

; 2001 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2002 : 	return soap_out_xsd__string(soap, tag, id, this, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_xsd__string@@YAHPAUsoap@@PBDHPBVxsd__string@@1@Z ; soap_out_xsd__string
	add	esp, 20					; 00000014H

; 2003 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?soap_out@xsd__string@@UBEHPAUsoap@@PBDH1@Z ENDP	; xsd__string::soap_out
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out_xsd__string@@YAHPAUsoap@@PBDHPBVxsd__string@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_xsd__string@@YAHPAUsoap@@PBDHPBVxsd__string@@1@Z PROC ; soap_out_xsd__string, COMDAT

; 2006 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2007 : 	return soap_out_std__string(soap, tag, id, &(a->xsd__string::__item), "xsd:string");

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_out_std__string@@YAHPAUsoap@@PBDHPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@1@Z ; soap_out_std__string
	add	esp, 20					; 00000014H

; 2008 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_xsd__string@@YAHPAUsoap@@PBDHPBVxsd__string@@1@Z ENDP ; soap_out_xsd__string
_TEXT	ENDS
PUBLIC	?soap_get_xsd__string@@YAPAVxsd__string@@PAUsoap@@PAV1@PBD2@Z ; soap_get_xsd__string
PUBLIC	?soap_get@xsd__string@@UAEPAXPAUsoap@@PBD1@Z	; xsd__string::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get@xsd__string@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_get@xsd__string@@UAEPAXPAUsoap@@PBD1@Z PROC	; xsd__string::soap_get, COMDAT
; _this$ = ecx

; 2011 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2012 : 	return soap_get_xsd__string(soap, this, tag, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_get_xsd__string@@YAPAVxsd__string@@PAUsoap@@PAV1@PBD2@Z ; soap_get_xsd__string
	add	esp, 16					; 00000010H

; 2013 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_get@xsd__string@@UAEPAXPAUsoap@@PBD1@Z ENDP	; xsd__string::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_get_xsd__string@@YAPAVxsd__string@@PAUsoap@@PAV1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_xsd__string@@YAPAVxsd__string@@PAUsoap@@PAV1@PBD2@Z PROC ; soap_get_xsd__string, COMDAT

; 2016 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2017 : 	if ((p = soap_in_xsd__string(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__string@@YAPAVxsd__string@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__string
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_x

; 2018 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_x

; 2019 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_x
$LN2@soap_get_x:

; 2020 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_x:

; 2021 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_xsd__string@@YAPAVxsd__string@@PAUsoap@@PAV1@PBD2@Z ENDP ; soap_get_xsd__string
_TEXT	ENDS
PUBLIC	?soap_in@xsd__string@@UAEPAXPAUsoap@@PBD1@Z	; xsd__string::soap_in
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in@xsd__string@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_in@xsd__string@@UAEPAXPAUsoap@@PBD1@Z PROC	; xsd__string::soap_in, COMDAT
; _this$ = ecx

; 2024 : {	return soap_in_xsd__string(soap, tag, this, type);

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__string@@YAPAVxsd__string@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__string
	add	esp, 16					; 00000010H

; 2025 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_in@xsd__string@@UAEPAXPAUsoap@@PBD1@Z ENDP	; xsd__string::soap_in
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in_xsd__string@@YAPAVxsd__string@@PAUsoap@@PBDPAV1@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_xsd__string@@YAPAVxsd__string@@PAUsoap@@PBDPAV1@1@Z PROC ; soap_in_xsd__string, COMDAT

; 2028 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2029 : 	if (soap_element_begin_in(soap, tag, 1, NULL))

	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN5@soap_in_xs

; 2030 : 		return NULL;

	xor	eax, eax
	jmp	$LN6@soap_in_xs
$LN5@soap_in_xs:

; 2031 : 	if (!(a = (xsd__string *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__string, sizeof(xsd__string), soap->type, soap->arrayType)))

	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	44					; 0000002cH
	push	17					; 00000011H
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 81076				; 00013cb4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_class_id_enter@@YAPAXPAUsoap@@PBDPAXHI11@Z ; soap_class_id_enter
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN4@soap_in_xs

; 2032 : 	{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 2033 : 		return NULL;

	xor	eax, eax
	jmp	$LN6@soap_in_xs
$LN4@soap_in_xs:

; 2034 : 	}
; 2035 : 	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 2036 : 	*soap->id = '\0';

	mov	eax, DWORD PTR _soap$[ebp]
	mov	BYTE PTR [eax+81076], 0

; 2037 : 	if (soap->alloced)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87306]
	test	ecx, ecx
	je	SHORT $LN3@soap_in_xs

; 2038 : 	{	a->soap_default(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2039 : 		if (soap->clist->type != SOAP_TYPE_xsd__string)

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	cmp	DWORD PTR [ecx+8], 17			; 00000011H
	je	SHORT $LN3@soap_in_xs

; 2040 : 			return (xsd__string *)a->soap_in(soap, tag, type);

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN6@soap_in_xs
$LN3@soap_in_xs:

; 2041 : 	}
; 2042 : 	if (!soap_in_std__string(soap, tag, &(a->xsd__string::__item), "xsd:string"))

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_in_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PBDPAV12@1@Z ; soap_in_std__string
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN1@soap_in_xs

; 2043 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN6@soap_in_xs
$LN1@soap_in_xs:

; 2044 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN6@soap_in_xs:

; 2045 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_xsd__string@@YAPAVxsd__string@@PAUsoap@@PBDPAV1@1@Z ENDP ; soap_in_xsd__string
_TEXT	ENDS
PUBLIC	?soap_new_xsd__string@@YAPAVxsd__string@@PAUsoap@@H@Z ; soap_new_xsd__string
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_new_xsd__string@@YAPAVxsd__string@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new_xsd__string@@YAPAVxsd__string@@PAUsoap@@H@Z PROC ; soap_new_xsd__string, COMDAT

; 2048 : {	return soap_instantiate_xsd__string(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate_xsd__string@@YAPAVxsd__string@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_xsd__string
	add	esp, 20					; 00000014H

; 2049 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new_xsd__string@@YAPAVxsd__string@@PAUsoap@@H@Z ENDP ; soap_new_xsd__string
_TEXT	ENDS
PUBLIC	?soap_delete_xsd__string@@YAXPAUsoap@@PAVxsd__string@@@Z ; soap_delete_xsd__string
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete_xsd__string@@YAXPAUsoap@@PAVxsd__string@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete_xsd__string@@YAXPAUsoap@@PAVxsd__string@@@Z PROC ; soap_delete_xsd__string, COMDAT

; 2052 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 2053 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete_xsd__string@@YAXPAUsoap@@PAVxsd__string@@@Z ENDP ; soap_delete_xsd__string
_TEXT	ENDS
PUBLIC	??1xsd__string@@UAE@XZ				; xsd__string::~xsd__string
PUBLIC	??0xsd__string@@QAE@XZ				; xsd__string::xsd__string
PUBLIC	??_C@_0CK@DOCKFNED@soap_instantiate_xsd__string?$CI?$CFd?0@ ; `string'
;	COMDAT ??_C@_0CK@DOCKFNED@soap_instantiate_xsd__string?$CI?$CFd?0@
CONST	SEGMENT
??_C@_0CK@DOCKFNED@soap_instantiate_xsd__string?$CI?$CFd?0@ DB 'soap_inst'
	DB	'antiate_xsd__string(%d, %s, %s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?soap_instantiate_xsd__string@@YAPAVxsd__string@@PAUsoap@@HPBD1PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__string@@YAPAVxsd__string@@PAUsoap@@HPBD1PAI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__string@@YAPAVxsd__string@@PAUsoap@@HPBD1PAI@Z$1
__ehfuncinfo$?soap_instantiate_xsd__string@@YAPAVxsd__string@@PAUsoap@@HPBD1PAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?soap_instantiate_xsd__string@@YAPAVxsd__string@@PAUsoap@@HPBD1PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?soap_instantiate_xsd__string@@YAPAVxsd__string@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -320						; size = 4
tv163 = -316						; size = 4
tv133 = -316						; size = 4
tv77 = -316						; size = 4
$T101162 = -308						; size = 4
$T101163 = -296						; size = 4
$T101166 = -284						; size = 4
$T101167 = -272						; size = 4
$T101168 = -260						; size = 4
_fdebug$88905 = -56					; size = 4
_i$88896 = -44						; size = 4
_cp$ = -32						; size = 4
_fdebug$88871 = -20					; size = 4
__$EHRec$ = -12						; size = 12
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate_xsd__string@@YAPAVxsd__string@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate_xsd__string, COMDAT

; 2056 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?soap_instantiate_xsd__string@@YAPAVxsd__string@@PAUsoap@@HPBD1PAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2057 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN15@soap_insta@9
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN14@soap_insta@9
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN14@soap_insta@9:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN15@soap_insta@9
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$88871[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN18@soap_insta@9
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN19@soap_insta@9
$LN18@soap_insta@9:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN19@soap_insta@9:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN20@soap_insta@9
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN21@soap_insta@9
$LN20@soap_insta@9:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@soap_insta@9:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CK@DOCKFNED@soap_instantiate_xsd__string?$CI?$CFd?0@
	mov	edx, DWORD PTR _fdebug$88871[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$88871[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@soap_insta@9:

; 2058 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__string, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	17					; 00000011H
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 2059 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN12@soap_insta@9

; 2060 : 		return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@9
$LN12@soap_insta@9:

; 2061 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN11@soap_insta@9

; 2062 : 	{	cp->ptr = (void*)new xsd__string;

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101163[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T101163[ebp], 0
	je	SHORT $LN22@soap_insta@9
	mov	ecx, DWORD PTR $T101163[ebp]
	call	??0xsd__string@@QAE@XZ			; xsd__string::xsd__string
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN23@soap_insta@9
$LN22@soap_insta@9:
	mov	DWORD PTR tv133[ebp], 0
$LN23@soap_insta@9:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T101162[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101162[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2063 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN10@soap_insta@9

; 2064 : 			*size = sizeof(xsd__string);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 44			; 0000002cH
$LN10@soap_insta@9:

; 2065 : 		((xsd__string*)cp->ptr)->soap = soap;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 2066 : 	}
; 2067 : 	else

	jmp	$LN9@soap_insta@9
$LN11@soap_insta@9:

; 2068 : 	{	cp->ptr = (void*)new xsd__string[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T101166[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T101166[ebp]
	mov	edx, 44					; 0000002cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101168[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T101168[ebp], 0
	je	SHORT $LN24@soap_insta@9
	mov	ecx, DWORD PTR $T101168[ebp]
	mov	edx, DWORD PTR $T101166[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1xsd__string@@UAE@XZ		; xsd__string::~xsd__string
	push	OFFSET ??0xsd__string@@QAE@XZ		; xsd__string::xsd__string
	mov	eax, DWORD PTR $T101166[ebp]
	push	eax
	push	44					; 0000002cH
	mov	ecx, DWORD PTR $T101168[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T101168[ebp]
	add	edx, 4
	mov	DWORD PTR tv163[ebp], edx
	jmp	SHORT $LN25@soap_insta@9
$LN24@soap_insta@9:
	mov	DWORD PTR tv163[ebp], 0
$LN25@soap_insta@9:
	mov	eax, DWORD PTR tv163[ebp]
	mov	DWORD PTR $T101167[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101167[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2069 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@soap_insta@9

; 2070 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 2071 : 			return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@9
$LN8@soap_insta@9:

; 2072 : 		}
; 2073 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@9

; 2074 : 			*size = n * sizeof(xsd__string);

	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN7@soap_insta@9:

; 2075 : 		for (int i = 0; i < n; i++)

	mov	DWORD PTR _i$88896[ebp], 0
	jmp	SHORT $LN6@soap_insta@9
$LN5@soap_insta@9:
	mov	eax, DWORD PTR _i$88896[ebp]
	add	eax, 1
	mov	DWORD PTR _i$88896[ebp], eax
$LN6@soap_insta@9:
	mov	eax, DWORD PTR _i$88896[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN9@soap_insta@9

; 2076 : 			((xsd__string*)cp->ptr)[i].soap = soap;

	mov	eax, DWORD PTR _i$88896[ebp]
	imul	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [edx+eax+8], ecx
	jmp	SHORT $LN5@soap_insta@9
$LN9@soap_insta@9:

; 2077 : 	}
; 2078 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@9
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@9
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@9:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@9
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$88905[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$88905[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$88905[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@9:

; 2079 : 	return (xsd__string*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN16@soap_insta@9:

; 2080 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?soap_instantiate_xsd__string@@YAPAVxsd__string@@PAUsoap@@HPBD1PAI@Z$0:
	mov	eax, DWORD PTR $T101163[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate_xsd__string@@YAPAVxsd__string@@PAUsoap@@HPBD1PAI@Z$1:
	mov	eax, DWORD PTR $T101168[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?soap_instantiate_xsd__string@@YAPAVxsd__string@@PAUsoap@@HPBD1PAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-324]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?soap_instantiate_xsd__string@@YAPAVxsd__string@@PAUsoap@@HPBD1PAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?soap_instantiate_xsd__string@@YAPAVxsd__string@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate_xsd__string
PUBLIC	??1xsd__anyType@@UAE@XZ				; xsd__anyType::~xsd__anyType
PUBLIC	??_7xsd__string@@6B@				; xsd__string::`vftable'
PUBLIC	??0xsd__anyType@@QAE@XZ				; xsd__anyType::xsd__anyType
PUBLIC	??_R4xsd__string@@6B@				; xsd__string::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVxsd__string@@@8				; xsd__string `RTTI Type Descriptor'
PUBLIC	??_R3xsd__string@@8				; xsd__string::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2xsd__string@@8				; xsd__string::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@xsd__string@@8			; xsd__string::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@xsd__anyType@@8			; xsd__anyType::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVxsd__anyType@@@8			; xsd__anyType `RTTI Type Descriptor'
PUBLIC	??_R3xsd__anyType@@8				; xsd__anyType::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2xsd__anyType@@8				; xsd__anyType::`RTTI Base Class Array'
PUBLIC	?soap_type@xsd__string@@UBEHXZ			; xsd__string::soap_type
PUBLIC	??_Exsd__string@@UAEPAXI@Z			; xsd__string::`vector deleting destructor'
;	COMDAT ??_R2xsd__anyType@@8
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapstub.h
rdata$r	SEGMENT
??_R2xsd__anyType@@8 DD FLAT:??_R1A@?0A@EA@xsd__anyType@@8 ; xsd__anyType::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3xsd__anyType@@8
rdata$r	SEGMENT
??_R3xsd__anyType@@8 DD 00H				; xsd__anyType::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2xsd__anyType@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVxsd__anyType@@@8
_DATA	SEGMENT
??_R0?AVxsd__anyType@@@8 DD FLAT:??_7type_info@@6B@	; xsd__anyType `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVxsd__anyType@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@xsd__anyType@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@xsd__anyType@@8 DD FLAT:??_R0?AVxsd__anyType@@@8 ; xsd__anyType::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3xsd__anyType@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@xsd__string@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@xsd__string@@8 DD FLAT:??_R0?AVxsd__string@@@8 ; xsd__string::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3xsd__string@@8
rdata$r	ENDS
;	COMDAT ??_R2xsd__string@@8
rdata$r	SEGMENT
??_R2xsd__string@@8 DD FLAT:??_R1A@?0A@EA@xsd__string@@8 ; xsd__string::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@xsd__anyType@@8
rdata$r	ENDS
;	COMDAT ??_R3xsd__string@@8
rdata$r	SEGMENT
??_R3xsd__string@@8 DD 00H				; xsd__string::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2xsd__string@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVxsd__string@@@8
_DATA	SEGMENT
??_R0?AVxsd__string@@@8 DD FLAT:??_7type_info@@6B@	; xsd__string `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVxsd__string@@', 00H
_DATA	ENDS
;	COMDAT ??_R4xsd__string@@6B@
rdata$r	SEGMENT
??_R4xsd__string@@6B@ DD 00H				; xsd__string::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVxsd__string@@@8
	DD	FLAT:??_R3xsd__string@@8
rdata$r	ENDS
;	COMDAT ??_7xsd__string@@6B@
CONST	SEGMENT
??_7xsd__string@@6B@ DD FLAT:??_R4xsd__string@@6B@	; xsd__string::`vftable'
	DD	FLAT:?soap_type@xsd__string@@UBEHXZ
	DD	FLAT:?soap_default@xsd__string@@UAEXPAUsoap@@@Z
	DD	FLAT:?soap_serialize@xsd__string@@UBEXPAUsoap@@@Z
	DD	FLAT:?soap_put@xsd__string@@UBEHPAUsoap@@PBD1@Z
	DD	FLAT:?soap_out@xsd__string@@UBEHPAUsoap@@PBDH1@Z
	DD	FLAT:?soap_get@xsd__string@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:?soap_in@xsd__string@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:??_Exsd__string@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0xsd__string@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0xsd__string@@QAE@XZ$0
__ehfuncinfo$??0xsd__string@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0xsd__string@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??0xsd__string@@QAE@XZ
_TEXT	SEGMENT
$T101181 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0xsd__string@@QAE@XZ PROC				; xsd__string::xsd__string, COMDAT
; _this$ = ecx

; 151  : 	xsd__string()  { }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0xsd__string@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0xsd__anyType@@QAE@XZ			; xsd__anyType::xsd__anyType
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7xsd__string@@6B@
	push	1
	lea	ecx, DWORD PTR $T101181[ebp]
	call	??0_Has_debug_it@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Has_debug_it::_Has_debug_it
	mov	esi, esp
	movzx	eax, BYTE PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_Has_debug_it@01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0xsd__string@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1xsd__anyType@@UAE@XZ			; xsd__anyType::~xsd__anyType
__ehhandler$??0xsd__string@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0xsd__string@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0xsd__string@@QAE@XZ ENDP				; xsd__string::xsd__string
PUBLIC	??_7xsd__anyType@@6B@				; xsd__anyType::`vftable'
PUBLIC	??_R4xsd__anyType@@6B@				; xsd__anyType::`RTTI Complete Object Locator'
PUBLIC	?soap_type@xsd__anyType@@UBEHXZ			; xsd__anyType::soap_type
PUBLIC	?soap_default@xsd__anyType@@UAEXPAUsoap@@@Z	; xsd__anyType::soap_default
PUBLIC	?soap_serialize@xsd__anyType@@UBEXPAUsoap@@@Z	; xsd__anyType::soap_serialize
PUBLIC	?soap_put@xsd__anyType@@UBEHPAUsoap@@PBD1@Z	; xsd__anyType::soap_put
PUBLIC	?soap_out@xsd__anyType@@UBEHPAUsoap@@PBDH1@Z	; xsd__anyType::soap_out
PUBLIC	?soap_get@xsd__anyType@@UAEPAXPAUsoap@@PBD1@Z	; xsd__anyType::soap_get
PUBLIC	?soap_in@xsd__anyType@@UAEPAXPAUsoap@@PBD1@Z	; xsd__anyType::soap_in
PUBLIC	??_Exsd__anyType@@UAEPAXI@Z			; xsd__anyType::`vector deleting destructor'
;	COMDAT ??_R4xsd__anyType@@6B@
rdata$r	SEGMENT
??_R4xsd__anyType@@6B@ DD 00H				; xsd__anyType::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVxsd__anyType@@@8
	DD	FLAT:??_R3xsd__anyType@@8
rdata$r	ENDS
;	COMDAT ??_7xsd__anyType@@6B@
CONST	SEGMENT
??_7xsd__anyType@@6B@ DD FLAT:??_R4xsd__anyType@@6B@	; xsd__anyType::`vftable'
	DD	FLAT:?soap_type@xsd__anyType@@UBEHXZ
	DD	FLAT:?soap_default@xsd__anyType@@UAEXPAUsoap@@@Z
	DD	FLAT:?soap_serialize@xsd__anyType@@UBEXPAUsoap@@@Z
	DD	FLAT:?soap_put@xsd__anyType@@UBEHPAUsoap@@PBD1@Z
	DD	FLAT:?soap_out@xsd__anyType@@UBEHPAUsoap@@PBDH1@Z
	DD	FLAT:?soap_get@xsd__anyType@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:?soap_in@xsd__anyType@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:??_Exsd__anyType@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??0xsd__anyType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0xsd__anyType@@QAE@XZ PROC				; xsd__anyType::xsd__anyType, COMDAT
; _this$ = ecx

; 47   : 	xsd__anyType() : __item(NULL), soap(NULL) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7xsd__anyType@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0xsd__anyType@@QAE@XZ ENDP				; xsd__anyType::xsd__anyType
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_type@xsd__anyType@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?soap_type@xsd__anyType@@UBEHXZ PROC			; xsd__anyType::soap_type, COMDAT
; _this$ = ecx

; 40   : 	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_xsd__anyType */

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_type@xsd__anyType@@UBEHXZ ENDP			; xsd__anyType::soap_type
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1xsd__anyType@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1xsd__anyType@@UAE@XZ PROC				; xsd__anyType::~xsd__anyType, COMDAT
; _this$ = ecx

; 48   : 	virtual ~xsd__anyType() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7xsd__anyType@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1xsd__anyType@@UAE@XZ ENDP				; xsd__anyType::~xsd__anyType
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_type@xsd__string@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?soap_type@xsd__string@@UBEHXZ PROC			; xsd__string::soap_type, COMDAT
; _this$ = ecx

; 144  : 	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_xsd__string */

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 17					; 00000011H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_type@xsd__string@@UBEHXZ ENDP			; xsd__string::soap_type
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1xsd__string@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1xsd__string@@UAE@XZ$0
__ehfuncinfo$??1xsd__string@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1xsd__string@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??1xsd__string@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1xsd__string@@UAE@XZ PROC				; xsd__string::~xsd__string, COMDAT
; _this$ = ecx

; 152  : 	virtual ~xsd__string() { }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1xsd__string@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7xsd__string@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	esi, esp
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1xsd__anyType@@UAE@XZ			; xsd__anyType::~xsd__anyType
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1xsd__string@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1xsd__anyType@@UAE@XZ			; xsd__anyType::~xsd__anyType
__ehhandler$??1xsd__string@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1xsd__string@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1xsd__string@@UAE@XZ ENDP				; xsd__string::~xsd__string
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??_Exsd__string@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Exsd__string@@UAEPAXI@Z PROC				; xsd__string::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@10
	push	OFFSET ??1xsd__string@@UAE@XZ		; xsd__string::~xsd__string
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	44					; 0000002cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@10
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@10:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@10
$LN3@vector@10:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1xsd__string@@UAE@XZ			; xsd__string::~xsd__string
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@10
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@10:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@10:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Exsd__string@@UAEPAXI@Z ENDP				; xsd__string::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??4xsd__string@@QAEAAV0@ABV0@@Z			; xsd__string::operator=
PUBLIC	??_C@_0BO@OEPIOGDI@Copying?5xsd__string?5?$CFp?5?9?$DO?5?$CFp?6?$AA@ ; `string'
PUBLIC	?soap_copy_xsd__string@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy_xsd__string
;	COMDAT ??_C@_0BO@OEPIOGDI@Copying?5xsd__string?5?$CFp?5?9?$DO?5?$CFp?6?$AA@
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapc.cpp
CONST	SEGMENT
??_C@_0BO@OEPIOGDI@Copying?5xsd__string?5?$CFp?5?9?$DO?5?$CFp?6?$AA@ DB 'C'
	DB	'opying xsd__string %p -> %p', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy_xsd__string@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$88927 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy_xsd__string@@YAXPAUsoap@@HHPAXIPBXI@Z PROC	; soap_copy_xsd__string, COMDAT

; 2082 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2083 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__string %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@8
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@8
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@8:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@8
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$88927[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BO@OEPIOGDI@Copying?5xsd__string?5?$CFp?5?9?$DO?5?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$88927[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$88927[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@8:

; 2084 : 	*(xsd__string*)p = *(xsd__string*)q;

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	??4xsd__string@@QAEAAV0@ABV0@@Z

; 2085 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy_xsd__string@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP	; soap_copy_xsd__string
_TEXT	ENDS
PUBLIC	??4xsd__anyType@@QAEAAV0@ABV0@@Z		; xsd__anyType::operator=
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??4xsd__string@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4xsd__string@@QAEAAV0@ABV0@@Z PROC			; xsd__string::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4xsd__anyType@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4xsd__string@@QAEAAV0@ABV0@@Z ENDP			; xsd__string::operator=
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??4xsd__anyType@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4xsd__anyType@@QAEAAV0@ABV0@@Z PROC			; xsd__anyType::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4xsd__anyType@@QAEAAV0@ABV0@@Z ENDP			; xsd__anyType::operator=
_TEXT	ENDS
PUBLIC	?soap_default@xsd__long@@UAEXPAUsoap@@@Z	; xsd__long::soap_default
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default@xsd__long@@UAEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_default@xsd__long@@UAEXPAUsoap@@@Z PROC		; xsd__long::soap_default, COMDAT
; _this$ = ecx

; 2088 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2089 : 	this->soap = soap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2090 : 	soap_default_LONG64(soap, &this->xsd__long::__item);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_LONG64@@YAXPAUsoap@@PA_J@Z ; soap_default_LONG64
	add	esp, 8

; 2091 : 	this->xsd__anyType::__item = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 2092 : 	/* transient soap skipped */
; 2093 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_default@xsd__long@@UAEXPAUsoap@@@Z ENDP		; xsd__long::soap_default
_TEXT	ENDS
PUBLIC	?soap_serialize@xsd__long@@UBEXPAUsoap@@@Z	; xsd__long::soap_serialize
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_serialize@xsd__long@@UBEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_serialize@xsd__long@@UBEXPAUsoap@@@Z PROC		; xsd__long::soap_serialize, COMDAT
; _this$ = ecx

; 2096 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2097 : 	(void)soap; /* appease -Wall -Werror */
; 2098 : 	/* transient soap skipped */
; 2099 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_serialize@xsd__long@@UBEXPAUsoap@@@Z ENDP		; xsd__long::soap_serialize
_TEXT	ENDS
PUBLIC	?soap_put@xsd__long@@UBEHPAUsoap@@PBD1@Z	; xsd__long::soap_put
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put@xsd__long@@UBEHPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_id$ = -20						; size = 4
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_put@xsd__long@@UBEHPAUsoap@@PBD1@Z PROC		; xsd__long::soap_put, COMDAT
; _this$ = ecx

; 2102 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2103 : 	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__long);

	push	15					; 0000000fH
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 2104 : 	if (this->soap_out(soap, tag, id, type))

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@soap_put@8

; 2105 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put@8
$LN1@soap_put@8:

; 2106 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put@8:

; 2107 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_put@xsd__long@@UBEHPAUsoap@@PBD1@Z ENDP		; xsd__long::soap_put
_TEXT	ENDS
PUBLIC	?soap_out_xsd__long@@YAHPAUsoap@@PBDHPBVxsd__long@@1@Z ; soap_out_xsd__long
PUBLIC	?soap_out@xsd__long@@UBEHPAUsoap@@PBDH1@Z	; xsd__long::soap_out
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out@xsd__long@@UBEHPAUsoap@@PBDH1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_out@xsd__long@@UBEHPAUsoap@@PBDH1@Z PROC		; xsd__long::soap_out, COMDAT
; _this$ = ecx

; 2110 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2111 : 	return soap_out_xsd__long(soap, tag, id, this, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_xsd__long@@YAHPAUsoap@@PBDHPBVxsd__long@@1@Z ; soap_out_xsd__long
	add	esp, 20					; 00000014H

; 2112 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?soap_out@xsd__long@@UBEHPAUsoap@@PBDH1@Z ENDP		; xsd__long::soap_out
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out_xsd__long@@YAHPAUsoap@@PBDHPBVxsd__long@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_xsd__long@@YAHPAUsoap@@PBDHPBVxsd__long@@1@Z PROC ; soap_out_xsd__long, COMDAT

; 2115 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2116 : 	return soap_out_LONG64(soap, tag, id, &(a->xsd__long::__item), "xsd:long");

	push	OFFSET ??_C@_08PNDIDGIB@xsd?3long?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_out_LONG64@@YAHPAUsoap@@PBDHPB_J1@Z ; soap_out_LONG64
	add	esp, 20					; 00000014H

; 2117 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_xsd__long@@YAHPAUsoap@@PBDHPBVxsd__long@@1@Z ENDP ; soap_out_xsd__long
_TEXT	ENDS
PUBLIC	?soap_get_xsd__long@@YAPAVxsd__long@@PAUsoap@@PAV1@PBD2@Z ; soap_get_xsd__long
PUBLIC	?soap_get@xsd__long@@UAEPAXPAUsoap@@PBD1@Z	; xsd__long::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get@xsd__long@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_get@xsd__long@@UAEPAXPAUsoap@@PBD1@Z PROC		; xsd__long::soap_get, COMDAT
; _this$ = ecx

; 2120 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2121 : 	return soap_get_xsd__long(soap, this, tag, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_get_xsd__long@@YAPAVxsd__long@@PAUsoap@@PAV1@PBD2@Z ; soap_get_xsd__long
	add	esp, 16					; 00000010H

; 2122 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_get@xsd__long@@UAEPAXPAUsoap@@PBD1@Z ENDP		; xsd__long::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_get_xsd__long@@YAPAVxsd__long@@PAUsoap@@PAV1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_xsd__long@@YAPAVxsd__long@@PAUsoap@@PAV1@PBD2@Z PROC ; soap_get_xsd__long, COMDAT

; 2125 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2126 : 	if ((p = soap_in_xsd__long(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__long@@YAPAVxsd__long@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__long
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_x@2

; 2127 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_x@2

; 2128 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_x@2
$LN2@soap_get_x@2:

; 2129 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_x@2:

; 2130 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_xsd__long@@YAPAVxsd__long@@PAUsoap@@PAV1@PBD2@Z ENDP ; soap_get_xsd__long
_TEXT	ENDS
PUBLIC	?soap_in@xsd__long@@UAEPAXPAUsoap@@PBD1@Z	; xsd__long::soap_in
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in@xsd__long@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_in@xsd__long@@UAEPAXPAUsoap@@PBD1@Z PROC		; xsd__long::soap_in, COMDAT
; _this$ = ecx

; 2133 : {	return soap_in_xsd__long(soap, tag, this, type);

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__long@@YAPAVxsd__long@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__long
	add	esp, 16					; 00000010H

; 2134 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_in@xsd__long@@UAEPAXPAUsoap@@PBD1@Z ENDP		; xsd__long::soap_in
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in_xsd__long@@YAPAVxsd__long@@PAUsoap@@PBDPAV1@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_xsd__long@@YAPAVxsd__long@@PAUsoap@@PBDPAV1@1@Z PROC ; soap_in_xsd__long, COMDAT

; 2137 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2138 : 	if (soap_element_begin_in(soap, tag, 1, NULL))

	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN5@soap_in_xs@2

; 2139 : 		return NULL;

	xor	eax, eax
	jmp	$LN6@soap_in_xs@2
$LN5@soap_in_xs@2:

; 2140 : 	if (!(a = (xsd__long *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__long, sizeof(xsd__long), soap->type, soap->arrayType)))

	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	24					; 00000018H
	push	15					; 0000000fH
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 81076				; 00013cb4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_class_id_enter@@YAPAXPAUsoap@@PBDPAXHI11@Z ; soap_class_id_enter
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN4@soap_in_xs@2

; 2141 : 	{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 2142 : 		return NULL;

	xor	eax, eax
	jmp	$LN6@soap_in_xs@2
$LN4@soap_in_xs@2:

; 2143 : 	}
; 2144 : 	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 2145 : 	*soap->id = '\0';

	mov	eax, DWORD PTR _soap$[ebp]
	mov	BYTE PTR [eax+81076], 0

; 2146 : 	if (soap->alloced)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87306]
	test	ecx, ecx
	je	SHORT $LN3@soap_in_xs@2

; 2147 : 	{	a->soap_default(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2148 : 		if (soap->clist->type != SOAP_TYPE_xsd__long)

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	cmp	DWORD PTR [ecx+8], 15			; 0000000fH
	je	SHORT $LN3@soap_in_xs@2

; 2149 : 			return (xsd__long *)a->soap_in(soap, tag, type);

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN6@soap_in_xs@2
$LN3@soap_in_xs@2:

; 2150 : 	}
; 2151 : 	if (!soap_in_LONG64(soap, tag, &(a->xsd__long::__item), "xsd:long"))

	push	OFFSET ??_C@_08PNDIDGIB@xsd?3long?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_in_LONG64@@YAPA_JPAUsoap@@PBDPA_J1@Z ; soap_in_LONG64
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN1@soap_in_xs@2

; 2152 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN6@soap_in_xs@2
$LN1@soap_in_xs@2:

; 2153 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN6@soap_in_xs@2:

; 2154 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_xsd__long@@YAPAVxsd__long@@PAUsoap@@PBDPAV1@1@Z ENDP ; soap_in_xsd__long
_TEXT	ENDS
PUBLIC	?soap_new_xsd__long@@YAPAVxsd__long@@PAUsoap@@H@Z ; soap_new_xsd__long
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_new_xsd__long@@YAPAVxsd__long@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new_xsd__long@@YAPAVxsd__long@@PAUsoap@@H@Z PROC	; soap_new_xsd__long, COMDAT

; 2157 : {	return soap_instantiate_xsd__long(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate_xsd__long@@YAPAVxsd__long@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_xsd__long
	add	esp, 20					; 00000014H

; 2158 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new_xsd__long@@YAPAVxsd__long@@PAUsoap@@H@Z ENDP	; soap_new_xsd__long
_TEXT	ENDS
PUBLIC	?soap_delete_xsd__long@@YAXPAUsoap@@PAVxsd__long@@@Z ; soap_delete_xsd__long
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete_xsd__long@@YAXPAUsoap@@PAVxsd__long@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete_xsd__long@@YAXPAUsoap@@PAVxsd__long@@@Z PROC ; soap_delete_xsd__long, COMDAT

; 2161 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 2162 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete_xsd__long@@YAXPAUsoap@@PAVxsd__long@@@Z ENDP ; soap_delete_xsd__long
_TEXT	ENDS
PUBLIC	??1xsd__long@@UAE@XZ				; xsd__long::~xsd__long
PUBLIC	??0xsd__long@@QAE@XZ				; xsd__long::xsd__long
PUBLIC	??_C@_0CI@EMGOPDKF@soap_instantiate_xsd__long?$CI?$CFd?0?5?$CF@ ; `string'
;	COMDAT ??_C@_0CI@EMGOPDKF@soap_instantiate_xsd__long?$CI?$CFd?0?5?$CF@
CONST	SEGMENT
??_C@_0CI@EMGOPDKF@soap_instantiate_xsd__long?$CI?$CFd?0?5?$CF@ DB 'soap_'
	DB	'instantiate_xsd__long(%d, %s, %s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?soap_instantiate_xsd__long@@YAPAVxsd__long@@PAUsoap@@HPBD1PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__long@@YAPAVxsd__long@@PAUsoap@@HPBD1PAI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__long@@YAPAVxsd__long@@PAUsoap@@HPBD1PAI@Z$1
__ehfuncinfo$?soap_instantiate_xsd__long@@YAPAVxsd__long@@PAUsoap@@HPBD1PAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?soap_instantiate_xsd__long@@YAPAVxsd__long@@PAUsoap@@HPBD1PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?soap_instantiate_xsd__long@@YAPAVxsd__long@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -320						; size = 4
tv163 = -316						; size = 4
tv133 = -316						; size = 4
tv77 = -316						; size = 4
$T101244 = -308						; size = 4
$T101245 = -296						; size = 4
$T101248 = -284						; size = 4
$T101249 = -272						; size = 4
$T101250 = -260						; size = 4
_fdebug$89056 = -56					; size = 4
_i$89047 = -44						; size = 4
_cp$ = -32						; size = 4
_fdebug$89022 = -20					; size = 4
__$EHRec$ = -12						; size = 12
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate_xsd__long@@YAPAVxsd__long@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate_xsd__long, COMDAT

; 2165 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?soap_instantiate_xsd__long@@YAPAVxsd__long@@PAUsoap@@HPBD1PAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2166 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__long(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN15@soap_insta@10
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN14@soap_insta@10
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN14@soap_insta@10:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN15@soap_insta@10
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89022[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN18@soap_insta@10
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN19@soap_insta@10
$LN18@soap_insta@10:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN19@soap_insta@10:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN20@soap_insta@10
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN21@soap_insta@10
$LN20@soap_insta@10:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@soap_insta@10:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CI@EMGOPDKF@soap_instantiate_xsd__long?$CI?$CFd?0?5?$CF@
	mov	edx, DWORD PTR _fdebug$89022[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89022[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@soap_insta@10:

; 2167 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__long, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	15					; 0000000fH
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 2168 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN12@soap_insta@10

; 2169 : 		return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@10
$LN12@soap_insta@10:

; 2170 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN11@soap_insta@10

; 2171 : 	{	cp->ptr = (void*)new xsd__long;

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101245[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T101245[ebp], 0
	je	SHORT $LN22@soap_insta@10
	mov	ecx, DWORD PTR $T101245[ebp]
	call	??0xsd__long@@QAE@XZ			; xsd__long::xsd__long
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN23@soap_insta@10
$LN22@soap_insta@10:
	mov	DWORD PTR tv133[ebp], 0
$LN23@soap_insta@10:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T101244[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101244[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2172 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN10@soap_insta@10

; 2173 : 			*size = sizeof(xsd__long);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 24			; 00000018H
$LN10@soap_insta@10:

; 2174 : 		((xsd__long*)cp->ptr)->soap = soap;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 2175 : 	}
; 2176 : 	else

	jmp	$LN9@soap_insta@10
$LN11@soap_insta@10:

; 2177 : 	{	cp->ptr = (void*)new xsd__long[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T101248[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T101248[ebp]
	mov	edx, 24					; 00000018H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101250[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T101250[ebp], 0
	je	SHORT $LN24@soap_insta@10
	mov	ecx, DWORD PTR $T101250[ebp]
	mov	edx, DWORD PTR $T101248[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1xsd__long@@UAE@XZ		; xsd__long::~xsd__long
	push	OFFSET ??0xsd__long@@QAE@XZ		; xsd__long::xsd__long
	mov	eax, DWORD PTR $T101248[ebp]
	push	eax
	push	24					; 00000018H
	mov	ecx, DWORD PTR $T101250[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T101250[ebp]
	add	edx, 4
	mov	DWORD PTR tv163[ebp], edx
	jmp	SHORT $LN25@soap_insta@10
$LN24@soap_insta@10:
	mov	DWORD PTR tv163[ebp], 0
$LN25@soap_insta@10:
	mov	eax, DWORD PTR tv163[ebp]
	mov	DWORD PTR $T101249[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101249[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2178 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@soap_insta@10

; 2179 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 2180 : 			return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@10
$LN8@soap_insta@10:

; 2181 : 		}
; 2182 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@10

; 2183 : 			*size = n * sizeof(xsd__long);

	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN7@soap_insta@10:

; 2184 : 		for (int i = 0; i < n; i++)

	mov	DWORD PTR _i$89047[ebp], 0
	jmp	SHORT $LN6@soap_insta@10
$LN5@soap_insta@10:
	mov	eax, DWORD PTR _i$89047[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89047[ebp], eax
$LN6@soap_insta@10:
	mov	eax, DWORD PTR _i$89047[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN9@soap_insta@10

; 2185 : 			((xsd__long*)cp->ptr)[i].soap = soap;

	mov	eax, DWORD PTR _i$89047[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [edx+eax+8], ecx
	jmp	SHORT $LN5@soap_insta@10
$LN9@soap_insta@10:

; 2186 : 	}
; 2187 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@10
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@10
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@10:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@10
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89056[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$89056[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89056[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@10:

; 2188 : 	return (xsd__long*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN16@soap_insta@10:

; 2189 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?soap_instantiate_xsd__long@@YAPAVxsd__long@@PAUsoap@@HPBD1PAI@Z$0:
	mov	eax, DWORD PTR $T101245[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate_xsd__long@@YAPAVxsd__long@@PAUsoap@@HPBD1PAI@Z$1:
	mov	eax, DWORD PTR $T101250[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?soap_instantiate_xsd__long@@YAPAVxsd__long@@PAUsoap@@HPBD1PAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-324]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?soap_instantiate_xsd__long@@YAPAVxsd__long@@PAUsoap@@HPBD1PAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?soap_instantiate_xsd__long@@YAPAVxsd__long@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate_xsd__long
PUBLIC	??_7xsd__long@@6B@				; xsd__long::`vftable'
PUBLIC	??_R4xsd__long@@6B@				; xsd__long::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVxsd__long@@@8				; xsd__long `RTTI Type Descriptor'
PUBLIC	??_R3xsd__long@@8				; xsd__long::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2xsd__long@@8				; xsd__long::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@xsd__long@@8			; xsd__long::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?soap_type@xsd__long@@UBEHXZ			; xsd__long::soap_type
PUBLIC	??_Exsd__long@@UAEPAXI@Z			; xsd__long::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@xsd__long@@8
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapstub.h
rdata$r	SEGMENT
??_R1A@?0A@EA@xsd__long@@8 DD FLAT:??_R0?AVxsd__long@@@8 ; xsd__long::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3xsd__long@@8
rdata$r	ENDS
;	COMDAT ??_R2xsd__long@@8
rdata$r	SEGMENT
??_R2xsd__long@@8 DD FLAT:??_R1A@?0A@EA@xsd__long@@8	; xsd__long::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@xsd__anyType@@8
rdata$r	ENDS
;	COMDAT ??_R3xsd__long@@8
rdata$r	SEGMENT
??_R3xsd__long@@8 DD 00H				; xsd__long::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2xsd__long@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVxsd__long@@@8
_DATA	SEGMENT
??_R0?AVxsd__long@@@8 DD FLAT:??_7type_info@@6B@	; xsd__long `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVxsd__long@@', 00H
_DATA	ENDS
;	COMDAT ??_R4xsd__long@@6B@
rdata$r	SEGMENT
??_R4xsd__long@@6B@ DD 00H				; xsd__long::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVxsd__long@@@8
	DD	FLAT:??_R3xsd__long@@8
rdata$r	ENDS
;	COMDAT ??_7xsd__long@@6B@
CONST	SEGMENT
??_7xsd__long@@6B@ DD FLAT:??_R4xsd__long@@6B@		; xsd__long::`vftable'
	DD	FLAT:?soap_type@xsd__long@@UBEHXZ
	DD	FLAT:?soap_default@xsd__long@@UAEXPAUsoap@@@Z
	DD	FLAT:?soap_serialize@xsd__long@@UBEXPAUsoap@@@Z
	DD	FLAT:?soap_put@xsd__long@@UBEHPAUsoap@@PBD1@Z
	DD	FLAT:?soap_out@xsd__long@@UBEHPAUsoap@@PBDH1@Z
	DD	FLAT:?soap_get@xsd__long@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:?soap_in@xsd__long@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:??_Exsd__long@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??0xsd__long@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0xsd__long@@QAE@XZ PROC				; xsd__long::xsd__long, COMDAT
; _this$ = ecx

; 127  : 	xsd__long() : __item(0) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0xsd__anyType@@QAE@XZ			; xsd__anyType::xsd__anyType
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7xsd__long@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0xsd__long@@QAE@XZ ENDP				; xsd__long::xsd__long
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_type@xsd__long@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?soap_type@xsd__long@@UBEHXZ PROC			; xsd__long::soap_type, COMDAT
; _this$ = ecx

; 120  : 	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_xsd__long */

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 15					; 0000000fH
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_type@xsd__long@@UBEHXZ ENDP			; xsd__long::soap_type
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1xsd__long@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1xsd__long@@UAE@XZ PROC				; xsd__long::~xsd__long, COMDAT
; _this$ = ecx

; 128  : 	virtual ~xsd__long() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7xsd__long@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1xsd__anyType@@UAE@XZ			; xsd__anyType::~xsd__anyType
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1xsd__long@@UAE@XZ ENDP				; xsd__long::~xsd__long
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??_Exsd__long@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Exsd__long@@UAEPAXI@Z PROC				; xsd__long::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@11
	push	OFFSET ??1xsd__long@@UAE@XZ		; xsd__long::~xsd__long
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@11
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@11:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@11
$LN3@vector@11:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1xsd__long@@UAE@XZ			; xsd__long::~xsd__long
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@11
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@11:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@11:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Exsd__long@@UAEPAXI@Z ENDP				; xsd__long::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??4xsd__long@@QAEAAV0@ABV0@@Z			; xsd__long::operator=
PUBLIC	??_C@_0BM@GAMJHCIH@Copying?5xsd__long?5?$CFp?5?9?$DO?5?$CFp?6?$AA@ ; `string'
PUBLIC	?soap_copy_xsd__long@@YAXPAUsoap@@HHPAXIPBXI@Z	; soap_copy_xsd__long
;	COMDAT ??_C@_0BM@GAMJHCIH@Copying?5xsd__long?5?$CFp?5?9?$DO?5?$CFp?6?$AA@
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapc.cpp
CONST	SEGMENT
??_C@_0BM@GAMJHCIH@Copying?5xsd__long?5?$CFp?5?9?$DO?5?$CFp?6?$AA@ DB 'Co'
	DB	'pying xsd__long %p -> %p', 0aH, 00H		; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy_xsd__long@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$89078 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy_xsd__long@@YAXPAUsoap@@HHPAXIPBXI@Z PROC	; soap_copy_xsd__long, COMDAT

; 2191 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2192 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__long %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@9
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@9
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@9:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@9
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89078[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BM@GAMJHCIH@Copying?5xsd__long?5?$CFp?5?9?$DO?5?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$89078[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89078[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@9:

; 2193 : 	*(xsd__long*)p = *(xsd__long*)q;

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	??4xsd__long@@QAEAAV0@ABV0@@Z

; 2194 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy_xsd__long@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP	; soap_copy_xsd__long
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??4xsd__long@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4xsd__long@@QAEAAV0@ABV0@@Z PROC			; xsd__long::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4xsd__anyType@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4xsd__long@@QAEAAV0@ABV0@@Z ENDP			; xsd__long::operator=
_TEXT	ENDS
PUBLIC	?soap_default@xsd__int@@UAEXPAUsoap@@@Z		; xsd__int::soap_default
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default@xsd__int@@UAEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_default@xsd__int@@UAEXPAUsoap@@@Z PROC		; xsd__int::soap_default, COMDAT
; _this$ = ecx

; 2197 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2198 : 	this->soap = soap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2199 : 	soap_default_int(soap, &this->xsd__int::__item);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_int@@YAXPAUsoap@@PAH@Z	; soap_default_int
	add	esp, 8

; 2200 : 	this->xsd__anyType::__item = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 2201 : 	/* transient soap skipped */
; 2202 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_default@xsd__int@@UAEXPAUsoap@@@Z ENDP		; xsd__int::soap_default
_TEXT	ENDS
PUBLIC	?soap_serialize@xsd__int@@UBEXPAUsoap@@@Z	; xsd__int::soap_serialize
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_serialize@xsd__int@@UBEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_serialize@xsd__int@@UBEXPAUsoap@@@Z PROC		; xsd__int::soap_serialize, COMDAT
; _this$ = ecx

; 2205 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2206 : 	(void)soap; /* appease -Wall -Werror */
; 2207 : 	/* transient soap skipped */
; 2208 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_serialize@xsd__int@@UBEXPAUsoap@@@Z ENDP		; xsd__int::soap_serialize
_TEXT	ENDS
PUBLIC	?soap_put@xsd__int@@UBEHPAUsoap@@PBD1@Z		; xsd__int::soap_put
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put@xsd__int@@UBEHPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_id$ = -20						; size = 4
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_put@xsd__int@@UBEHPAUsoap@@PBD1@Z PROC		; xsd__int::soap_put, COMDAT
; _this$ = ecx

; 2211 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2212 : 	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__int);

	push	14					; 0000000eH
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 2213 : 	if (this->soap_out(soap, tag, id, type))

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@soap_put@9

; 2214 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put@9
$LN1@soap_put@9:

; 2215 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put@9:

; 2216 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_put@xsd__int@@UBEHPAUsoap@@PBD1@Z ENDP		; xsd__int::soap_put
_TEXT	ENDS
PUBLIC	?soap_out_xsd__int@@YAHPAUsoap@@PBDHPBVxsd__int@@1@Z ; soap_out_xsd__int
PUBLIC	?soap_out@xsd__int@@UBEHPAUsoap@@PBDH1@Z	; xsd__int::soap_out
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out@xsd__int@@UBEHPAUsoap@@PBDH1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_out@xsd__int@@UBEHPAUsoap@@PBDH1@Z PROC		; xsd__int::soap_out, COMDAT
; _this$ = ecx

; 2219 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2220 : 	return soap_out_xsd__int(soap, tag, id, this, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_xsd__int@@YAHPAUsoap@@PBDHPBVxsd__int@@1@Z ; soap_out_xsd__int
	add	esp, 20					; 00000014H

; 2221 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?soap_out@xsd__int@@UBEHPAUsoap@@PBDH1@Z ENDP		; xsd__int::soap_out
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out_xsd__int@@YAHPAUsoap@@PBDHPBVxsd__int@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_xsd__int@@YAHPAUsoap@@PBDHPBVxsd__int@@1@Z PROC ; soap_out_xsd__int, COMDAT

; 2224 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2225 : 	return soap_out_int(soap, tag, id, &(a->xsd__int::__item), "xsd:int");

	push	OFFSET ??_C@_07PCIGPDP@xsd?3int?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_out_int@@YAHPAUsoap@@PBDHPBH1@Z	; soap_out_int
	add	esp, 20					; 00000014H

; 2226 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_xsd__int@@YAHPAUsoap@@PBDHPBVxsd__int@@1@Z ENDP ; soap_out_xsd__int
_TEXT	ENDS
PUBLIC	?soap_get_xsd__int@@YAPAVxsd__int@@PAUsoap@@PAV1@PBD2@Z ; soap_get_xsd__int
PUBLIC	?soap_get@xsd__int@@UAEPAXPAUsoap@@PBD1@Z	; xsd__int::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get@xsd__int@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_get@xsd__int@@UAEPAXPAUsoap@@PBD1@Z PROC		; xsd__int::soap_get, COMDAT
; _this$ = ecx

; 2229 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2230 : 	return soap_get_xsd__int(soap, this, tag, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_get_xsd__int@@YAPAVxsd__int@@PAUsoap@@PAV1@PBD2@Z ; soap_get_xsd__int
	add	esp, 16					; 00000010H

; 2231 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_get@xsd__int@@UAEPAXPAUsoap@@PBD1@Z ENDP		; xsd__int::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_get_xsd__int@@YAPAVxsd__int@@PAUsoap@@PAV1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_xsd__int@@YAPAVxsd__int@@PAUsoap@@PAV1@PBD2@Z PROC ; soap_get_xsd__int, COMDAT

; 2234 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2235 : 	if ((p = soap_in_xsd__int(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__int@@YAPAVxsd__int@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__int
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_x@3

; 2236 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_x@3

; 2237 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_x@3
$LN2@soap_get_x@3:

; 2238 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_x@3:

; 2239 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_xsd__int@@YAPAVxsd__int@@PAUsoap@@PAV1@PBD2@Z ENDP ; soap_get_xsd__int
_TEXT	ENDS
PUBLIC	?soap_in@xsd__int@@UAEPAXPAUsoap@@PBD1@Z	; xsd__int::soap_in
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in@xsd__int@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_in@xsd__int@@UAEPAXPAUsoap@@PBD1@Z PROC		; xsd__int::soap_in, COMDAT
; _this$ = ecx

; 2242 : {	return soap_in_xsd__int(soap, tag, this, type);

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__int@@YAPAVxsd__int@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__int
	add	esp, 16					; 00000010H

; 2243 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_in@xsd__int@@UAEPAXPAUsoap@@PBD1@Z ENDP		; xsd__int::soap_in
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in_xsd__int@@YAPAVxsd__int@@PAUsoap@@PBDPAV1@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_xsd__int@@YAPAVxsd__int@@PAUsoap@@PBDPAV1@1@Z PROC ; soap_in_xsd__int, COMDAT

; 2246 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2247 : 	if (soap_element_begin_in(soap, tag, 1, NULL))

	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN5@soap_in_xs@3

; 2248 : 		return NULL;

	xor	eax, eax
	jmp	$LN6@soap_in_xs@3
$LN5@soap_in_xs@3:

; 2249 : 	if (!(a = (xsd__int *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__int, sizeof(xsd__int), soap->type, soap->arrayType)))

	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	16					; 00000010H
	push	14					; 0000000eH
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 81076				; 00013cb4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_class_id_enter@@YAPAXPAUsoap@@PBDPAXHI11@Z ; soap_class_id_enter
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN4@soap_in_xs@3

; 2250 : 	{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 2251 : 		return NULL;

	xor	eax, eax
	jmp	$LN6@soap_in_xs@3
$LN4@soap_in_xs@3:

; 2252 : 	}
; 2253 : 	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 2254 : 	*soap->id = '\0';

	mov	eax, DWORD PTR _soap$[ebp]
	mov	BYTE PTR [eax+81076], 0

; 2255 : 	if (soap->alloced)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87306]
	test	ecx, ecx
	je	SHORT $LN3@soap_in_xs@3

; 2256 : 	{	a->soap_default(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2257 : 		if (soap->clist->type != SOAP_TYPE_xsd__int)

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	cmp	DWORD PTR [ecx+8], 14			; 0000000eH
	je	SHORT $LN3@soap_in_xs@3

; 2258 : 			return (xsd__int *)a->soap_in(soap, tag, type);

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN6@soap_in_xs@3
$LN3@soap_in_xs@3:

; 2259 : 	}
; 2260 : 	if (!soap_in_int(soap, tag, &(a->xsd__int::__item), "xsd:int"))

	push	OFFSET ??_C@_07PCIGPDP@xsd?3int?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_in_int@@YAPAHPAUsoap@@PBDPAH1@Z	; soap_in_int
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN1@soap_in_xs@3

; 2261 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN6@soap_in_xs@3
$LN1@soap_in_xs@3:

; 2262 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN6@soap_in_xs@3:

; 2263 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_xsd__int@@YAPAVxsd__int@@PAUsoap@@PBDPAV1@1@Z ENDP ; soap_in_xsd__int
_TEXT	ENDS
PUBLIC	?soap_new_xsd__int@@YAPAVxsd__int@@PAUsoap@@H@Z	; soap_new_xsd__int
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_new_xsd__int@@YAPAVxsd__int@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new_xsd__int@@YAPAVxsd__int@@PAUsoap@@H@Z PROC	; soap_new_xsd__int, COMDAT

; 2266 : {	return soap_instantiate_xsd__int(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate_xsd__int@@YAPAVxsd__int@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_xsd__int
	add	esp, 20					; 00000014H

; 2267 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new_xsd__int@@YAPAVxsd__int@@PAUsoap@@H@Z ENDP	; soap_new_xsd__int
_TEXT	ENDS
PUBLIC	?soap_delete_xsd__int@@YAXPAUsoap@@PAVxsd__int@@@Z ; soap_delete_xsd__int
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete_xsd__int@@YAXPAUsoap@@PAVxsd__int@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete_xsd__int@@YAXPAUsoap@@PAVxsd__int@@@Z PROC	; soap_delete_xsd__int, COMDAT

; 2270 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 2271 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete_xsd__int@@YAXPAUsoap@@PAVxsd__int@@@Z ENDP	; soap_delete_xsd__int
_TEXT	ENDS
PUBLIC	??1xsd__int@@UAE@XZ				; xsd__int::~xsd__int
PUBLIC	??0xsd__int@@QAE@XZ				; xsd__int::xsd__int
PUBLIC	??_C@_0CH@JBGIKIJL@soap_instantiate_xsd__int?$CI?$CFd?0?5?$CFs@ ; `string'
;	COMDAT ??_C@_0CH@JBGIKIJL@soap_instantiate_xsd__int?$CI?$CFd?0?5?$CFs@
CONST	SEGMENT
??_C@_0CH@JBGIKIJL@soap_instantiate_xsd__int?$CI?$CFd?0?5?$CFs@ DB 'soap_'
	DB	'instantiate_xsd__int(%d, %s, %s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?soap_instantiate_xsd__int@@YAPAVxsd__int@@PAUsoap@@HPBD1PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__int@@YAPAVxsd__int@@PAUsoap@@HPBD1PAI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__int@@YAPAVxsd__int@@PAUsoap@@HPBD1PAI@Z$1
__ehfuncinfo$?soap_instantiate_xsd__int@@YAPAVxsd__int@@PAUsoap@@HPBD1PAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?soap_instantiate_xsd__int@@YAPAVxsd__int@@PAUsoap@@HPBD1PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?soap_instantiate_xsd__int@@YAPAVxsd__int@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -320						; size = 4
tv163 = -316						; size = 4
tv133 = -316						; size = 4
tv77 = -316						; size = 4
$T101303 = -308						; size = 4
$T101304 = -296						; size = 4
$T101307 = -284						; size = 4
$T101308 = -272						; size = 4
$T101309 = -260						; size = 4
_fdebug$89204 = -56					; size = 4
_i$89195 = -44						; size = 4
_cp$ = -32						; size = 4
_fdebug$89170 = -20					; size = 4
__$EHRec$ = -12						; size = 12
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate_xsd__int@@YAPAVxsd__int@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate_xsd__int, COMDAT

; 2274 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?soap_instantiate_xsd__int@@YAPAVxsd__int@@PAUsoap@@HPBD1PAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2275 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__int(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN15@soap_insta@11
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN14@soap_insta@11
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN14@soap_insta@11:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN15@soap_insta@11
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89170[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN18@soap_insta@11
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN19@soap_insta@11
$LN18@soap_insta@11:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN19@soap_insta@11:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN20@soap_insta@11
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN21@soap_insta@11
$LN20@soap_insta@11:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@soap_insta@11:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CH@JBGIKIJL@soap_instantiate_xsd__int?$CI?$CFd?0?5?$CFs@
	mov	edx, DWORD PTR _fdebug$89170[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89170[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@soap_insta@11:

; 2276 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__int, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	14					; 0000000eH
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 2277 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN12@soap_insta@11

; 2278 : 		return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@11
$LN12@soap_insta@11:

; 2279 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN11@soap_insta@11

; 2280 : 	{	cp->ptr = (void*)new xsd__int;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101304[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T101304[ebp], 0
	je	SHORT $LN22@soap_insta@11
	mov	ecx, DWORD PTR $T101304[ebp]
	call	??0xsd__int@@QAE@XZ			; xsd__int::xsd__int
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN23@soap_insta@11
$LN22@soap_insta@11:
	mov	DWORD PTR tv133[ebp], 0
$LN23@soap_insta@11:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T101303[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101303[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2281 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN10@soap_insta@11

; 2282 : 			*size = sizeof(xsd__int);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
$LN10@soap_insta@11:

; 2283 : 		((xsd__int*)cp->ptr)->soap = soap;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 2284 : 	}
; 2285 : 	else

	jmp	$LN9@soap_insta@11
$LN11@soap_insta@11:

; 2286 : 	{	cp->ptr = (void*)new xsd__int[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T101307[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T101307[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101309[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T101309[ebp], 0
	je	SHORT $LN24@soap_insta@11
	mov	ecx, DWORD PTR $T101309[ebp]
	mov	edx, DWORD PTR $T101307[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1xsd__int@@UAE@XZ		; xsd__int::~xsd__int
	push	OFFSET ??0xsd__int@@QAE@XZ		; xsd__int::xsd__int
	mov	eax, DWORD PTR $T101307[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T101309[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T101309[ebp]
	add	edx, 4
	mov	DWORD PTR tv163[ebp], edx
	jmp	SHORT $LN25@soap_insta@11
$LN24@soap_insta@11:
	mov	DWORD PTR tv163[ebp], 0
$LN25@soap_insta@11:
	mov	eax, DWORD PTR tv163[ebp]
	mov	DWORD PTR $T101308[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101308[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2287 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@soap_insta@11

; 2288 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 2289 : 			return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@11
$LN8@soap_insta@11:

; 2290 : 		}
; 2291 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@11

; 2292 : 			*size = n * sizeof(xsd__int);

	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN7@soap_insta@11:

; 2293 : 		for (int i = 0; i < n; i++)

	mov	DWORD PTR _i$89195[ebp], 0
	jmp	SHORT $LN6@soap_insta@11
$LN5@soap_insta@11:
	mov	eax, DWORD PTR _i$89195[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89195[ebp], eax
$LN6@soap_insta@11:
	mov	eax, DWORD PTR _i$89195[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN9@soap_insta@11

; 2294 : 			((xsd__int*)cp->ptr)[i].soap = soap;

	mov	eax, DWORD PTR _i$89195[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [edx+eax+8], ecx
	jmp	SHORT $LN5@soap_insta@11
$LN9@soap_insta@11:

; 2295 : 	}
; 2296 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@11
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@11
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@11:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@11
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89204[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$89204[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89204[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@11:

; 2297 : 	return (xsd__int*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN16@soap_insta@11:

; 2298 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?soap_instantiate_xsd__int@@YAPAVxsd__int@@PAUsoap@@HPBD1PAI@Z$0:
	mov	eax, DWORD PTR $T101304[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate_xsd__int@@YAPAVxsd__int@@PAUsoap@@HPBD1PAI@Z$1:
	mov	eax, DWORD PTR $T101309[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?soap_instantiate_xsd__int@@YAPAVxsd__int@@PAUsoap@@HPBD1PAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-324]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?soap_instantiate_xsd__int@@YAPAVxsd__int@@PAUsoap@@HPBD1PAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?soap_instantiate_xsd__int@@YAPAVxsd__int@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate_xsd__int
PUBLIC	??_7xsd__int@@6B@				; xsd__int::`vftable'
PUBLIC	??_R4xsd__int@@6B@				; xsd__int::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVxsd__int@@@8				; xsd__int `RTTI Type Descriptor'
PUBLIC	??_R3xsd__int@@8				; xsd__int::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2xsd__int@@8				; xsd__int::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@xsd__int@@8			; xsd__int::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?soap_type@xsd__int@@UBEHXZ			; xsd__int::soap_type
PUBLIC	??_Exsd__int@@UAEPAXI@Z				; xsd__int::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@xsd__int@@8
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapstub.h
rdata$r	SEGMENT
??_R1A@?0A@EA@xsd__int@@8 DD FLAT:??_R0?AVxsd__int@@@8	; xsd__int::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3xsd__int@@8
rdata$r	ENDS
;	COMDAT ??_R2xsd__int@@8
rdata$r	SEGMENT
??_R2xsd__int@@8 DD FLAT:??_R1A@?0A@EA@xsd__int@@8	; xsd__int::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@xsd__anyType@@8
rdata$r	ENDS
;	COMDAT ??_R3xsd__int@@8
rdata$r	SEGMENT
??_R3xsd__int@@8 DD 00H					; xsd__int::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2xsd__int@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVxsd__int@@@8
_DATA	SEGMENT
??_R0?AVxsd__int@@@8 DD FLAT:??_7type_info@@6B@		; xsd__int `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVxsd__int@@', 00H
_DATA	ENDS
;	COMDAT ??_R4xsd__int@@6B@
rdata$r	SEGMENT
??_R4xsd__int@@6B@ DD 00H				; xsd__int::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVxsd__int@@@8
	DD	FLAT:??_R3xsd__int@@8
rdata$r	ENDS
;	COMDAT ??_7xsd__int@@6B@
CONST	SEGMENT
??_7xsd__int@@6B@ DD FLAT:??_R4xsd__int@@6B@		; xsd__int::`vftable'
	DD	FLAT:?soap_type@xsd__int@@UBEHXZ
	DD	FLAT:?soap_default@xsd__int@@UAEXPAUsoap@@@Z
	DD	FLAT:?soap_serialize@xsd__int@@UBEXPAUsoap@@@Z
	DD	FLAT:?soap_put@xsd__int@@UBEHPAUsoap@@PBD1@Z
	DD	FLAT:?soap_out@xsd__int@@UBEHPAUsoap@@PBDH1@Z
	DD	FLAT:?soap_get@xsd__int@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:?soap_in@xsd__int@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:??_Exsd__int@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??0xsd__int@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0xsd__int@@QAE@XZ PROC				; xsd__int::xsd__int, COMDAT
; _this$ = ecx

; 107  : 	xsd__int() : __item(0) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0xsd__anyType@@QAE@XZ			; xsd__anyType::xsd__anyType
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7xsd__int@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0xsd__int@@QAE@XZ ENDP				; xsd__int::xsd__int
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_type@xsd__int@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?soap_type@xsd__int@@UBEHXZ PROC			; xsd__int::soap_type, COMDAT
; _this$ = ecx

; 100  : 	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_xsd__int */

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 14					; 0000000eH
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_type@xsd__int@@UBEHXZ ENDP			; xsd__int::soap_type
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1xsd__int@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1xsd__int@@UAE@XZ PROC				; xsd__int::~xsd__int, COMDAT
; _this$ = ecx

; 108  : 	virtual ~xsd__int() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7xsd__int@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1xsd__anyType@@UAE@XZ			; xsd__anyType::~xsd__anyType
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1xsd__int@@UAE@XZ ENDP				; xsd__int::~xsd__int
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??_Exsd__int@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Exsd__int@@UAEPAXI@Z PROC				; xsd__int::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@12
	push	OFFSET ??1xsd__int@@UAE@XZ		; xsd__int::~xsd__int
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@12
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@12:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@12
$LN3@vector@12:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1xsd__int@@UAE@XZ			; xsd__int::~xsd__int
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@12
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@12:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@12:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Exsd__int@@UAEPAXI@Z ENDP				; xsd__int::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??4xsd__int@@QAEAAV0@ABV0@@Z			; xsd__int::operator=
PUBLIC	??_C@_0BL@OBLGIMCA@Copying?5xsd__int?5?$CFp?5?9?$DO?5?$CFp?6?$AA@ ; `string'
PUBLIC	?soap_copy_xsd__int@@YAXPAUsoap@@HHPAXIPBXI@Z	; soap_copy_xsd__int
;	COMDAT ??_C@_0BL@OBLGIMCA@Copying?5xsd__int?5?$CFp?5?9?$DO?5?$CFp?6?$AA@
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapc.cpp
CONST	SEGMENT
??_C@_0BL@OBLGIMCA@Copying?5xsd__int?5?$CFp?5?9?$DO?5?$CFp?6?$AA@ DB 'Cop'
	DB	'ying xsd__int %p -> %p', 0aH, 00H		; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy_xsd__int@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$89226 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy_xsd__int@@YAXPAUsoap@@HHPAXIPBXI@Z PROC	; soap_copy_xsd__int, COMDAT

; 2300 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2301 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__int %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@10
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@10
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@10:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@10
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89226[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BL@OBLGIMCA@Copying?5xsd__int?5?$CFp?5?9?$DO?5?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$89226[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89226[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@10:

; 2302 : 	*(xsd__int*)p = *(xsd__int*)q;

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	??4xsd__int@@QAEAAV0@ABV0@@Z

; 2303 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy_xsd__int@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP	; soap_copy_xsd__int
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??4xsd__int@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4xsd__int@@QAEAAV0@ABV0@@Z PROC			; xsd__int::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4xsd__anyType@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4xsd__int@@QAEAAV0@ABV0@@Z ENDP			; xsd__int::operator=
_TEXT	ENDS
PUBLIC	?soap_default@xsd__float@@UAEXPAUsoap@@@Z	; xsd__float::soap_default
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default@xsd__float@@UAEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_default@xsd__float@@UAEXPAUsoap@@@Z PROC		; xsd__float::soap_default, COMDAT
; _this$ = ecx

; 2306 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2307 : 	this->soap = soap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2308 : 	soap_default_float(soap, &this->xsd__float::__item);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_float@@YAXPAUsoap@@PAM@Z	; soap_default_float
	add	esp, 8

; 2309 : 	this->xsd__anyType::__item = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 2310 : 	/* transient soap skipped */
; 2311 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_default@xsd__float@@UAEXPAUsoap@@@Z ENDP		; xsd__float::soap_default
_TEXT	ENDS
PUBLIC	?soap_serialize@xsd__float@@UBEXPAUsoap@@@Z	; xsd__float::soap_serialize
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_serialize@xsd__float@@UBEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_serialize@xsd__float@@UBEXPAUsoap@@@Z PROC	; xsd__float::soap_serialize, COMDAT
; _this$ = ecx

; 2314 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2315 : 	(void)soap; /* appease -Wall -Werror */
; 2316 : 	/* transient soap skipped */
; 2317 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_serialize@xsd__float@@UBEXPAUsoap@@@Z ENDP	; xsd__float::soap_serialize
_TEXT	ENDS
PUBLIC	?soap_put@xsd__float@@UBEHPAUsoap@@PBD1@Z	; xsd__float::soap_put
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put@xsd__float@@UBEHPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_id$ = -20						; size = 4
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_put@xsd__float@@UBEHPAUsoap@@PBD1@Z PROC		; xsd__float::soap_put, COMDAT
; _this$ = ecx

; 2320 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2321 : 	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__float);

	push	12					; 0000000cH
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 2322 : 	if (this->soap_out(soap, tag, id, type))

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@soap_put@10

; 2323 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put@10
$LN1@soap_put@10:

; 2324 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put@10:

; 2325 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_put@xsd__float@@UBEHPAUsoap@@PBD1@Z ENDP		; xsd__float::soap_put
_TEXT	ENDS
PUBLIC	?soap_out_xsd__float@@YAHPAUsoap@@PBDHPBVxsd__float@@1@Z ; soap_out_xsd__float
PUBLIC	?soap_out@xsd__float@@UBEHPAUsoap@@PBDH1@Z	; xsd__float::soap_out
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out@xsd__float@@UBEHPAUsoap@@PBDH1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_out@xsd__float@@UBEHPAUsoap@@PBDH1@Z PROC		; xsd__float::soap_out, COMDAT
; _this$ = ecx

; 2328 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2329 : 	return soap_out_xsd__float(soap, tag, id, this, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_xsd__float@@YAHPAUsoap@@PBDHPBVxsd__float@@1@Z ; soap_out_xsd__float
	add	esp, 20					; 00000014H

; 2330 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?soap_out@xsd__float@@UBEHPAUsoap@@PBDH1@Z ENDP		; xsd__float::soap_out
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out_xsd__float@@YAHPAUsoap@@PBDHPBVxsd__float@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_xsd__float@@YAHPAUsoap@@PBDHPBVxsd__float@@1@Z PROC ; soap_out_xsd__float, COMDAT

; 2333 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2334 : 	return soap_out_float(soap, tag, id, &(a->xsd__float::__item), "xsd:float");

	push	OFFSET ??_C@_09ILBLHFBD@xsd?3float?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_out_float@@YAHPAUsoap@@PBDHPBM1@Z	; soap_out_float
	add	esp, 20					; 00000014H

; 2335 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_xsd__float@@YAHPAUsoap@@PBDHPBVxsd__float@@1@Z ENDP ; soap_out_xsd__float
_TEXT	ENDS
PUBLIC	?soap_get_xsd__float@@YAPAVxsd__float@@PAUsoap@@PAV1@PBD2@Z ; soap_get_xsd__float
PUBLIC	?soap_get@xsd__float@@UAEPAXPAUsoap@@PBD1@Z	; xsd__float::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get@xsd__float@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_get@xsd__float@@UAEPAXPAUsoap@@PBD1@Z PROC	; xsd__float::soap_get, COMDAT
; _this$ = ecx

; 2338 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2339 : 	return soap_get_xsd__float(soap, this, tag, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_get_xsd__float@@YAPAVxsd__float@@PAUsoap@@PAV1@PBD2@Z ; soap_get_xsd__float
	add	esp, 16					; 00000010H

; 2340 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_get@xsd__float@@UAEPAXPAUsoap@@PBD1@Z ENDP	; xsd__float::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_get_xsd__float@@YAPAVxsd__float@@PAUsoap@@PAV1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_xsd__float@@YAPAVxsd__float@@PAUsoap@@PAV1@PBD2@Z PROC ; soap_get_xsd__float, COMDAT

; 2343 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2344 : 	if ((p = soap_in_xsd__float(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__float@@YAPAVxsd__float@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__float
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_x@4

; 2345 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_x@4

; 2346 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_x@4
$LN2@soap_get_x@4:

; 2347 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_x@4:

; 2348 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_xsd__float@@YAPAVxsd__float@@PAUsoap@@PAV1@PBD2@Z ENDP ; soap_get_xsd__float
_TEXT	ENDS
PUBLIC	?soap_in@xsd__float@@UAEPAXPAUsoap@@PBD1@Z	; xsd__float::soap_in
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in@xsd__float@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_in@xsd__float@@UAEPAXPAUsoap@@PBD1@Z PROC		; xsd__float::soap_in, COMDAT
; _this$ = ecx

; 2351 : {	return soap_in_xsd__float(soap, tag, this, type);

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__float@@YAPAVxsd__float@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__float
	add	esp, 16					; 00000010H

; 2352 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_in@xsd__float@@UAEPAXPAUsoap@@PBD1@Z ENDP		; xsd__float::soap_in
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in_xsd__float@@YAPAVxsd__float@@PAUsoap@@PBDPAV1@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_xsd__float@@YAPAVxsd__float@@PAUsoap@@PBDPAV1@1@Z PROC ; soap_in_xsd__float, COMDAT

; 2355 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2356 : 	if (soap_element_begin_in(soap, tag, 1, NULL))

	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN5@soap_in_xs@4

; 2357 : 		return NULL;

	xor	eax, eax
	jmp	$LN6@soap_in_xs@4
$LN5@soap_in_xs@4:

; 2358 : 	if (!(a = (xsd__float *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__float, sizeof(xsd__float), soap->type, soap->arrayType)))

	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	16					; 00000010H
	push	12					; 0000000cH
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 81076				; 00013cb4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_class_id_enter@@YAPAXPAUsoap@@PBDPAXHI11@Z ; soap_class_id_enter
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN4@soap_in_xs@4

; 2359 : 	{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 2360 : 		return NULL;

	xor	eax, eax
	jmp	$LN6@soap_in_xs@4
$LN4@soap_in_xs@4:

; 2361 : 	}
; 2362 : 	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 2363 : 	*soap->id = '\0';

	mov	eax, DWORD PTR _soap$[ebp]
	mov	BYTE PTR [eax+81076], 0

; 2364 : 	if (soap->alloced)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87306]
	test	ecx, ecx
	je	SHORT $LN3@soap_in_xs@4

; 2365 : 	{	a->soap_default(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2366 : 		if (soap->clist->type != SOAP_TYPE_xsd__float)

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	cmp	DWORD PTR [ecx+8], 12			; 0000000cH
	je	SHORT $LN3@soap_in_xs@4

; 2367 : 			return (xsd__float *)a->soap_in(soap, tag, type);

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN6@soap_in_xs@4
$LN3@soap_in_xs@4:

; 2368 : 	}
; 2369 : 	if (!soap_in_float(soap, tag, &(a->xsd__float::__item), "xsd:float"))

	push	OFFSET ??_C@_09ILBLHFBD@xsd?3float?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_in_float@@YAPAMPAUsoap@@PBDPAM1@Z	; soap_in_float
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN1@soap_in_xs@4

; 2370 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN6@soap_in_xs@4
$LN1@soap_in_xs@4:

; 2371 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN6@soap_in_xs@4:

; 2372 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_xsd__float@@YAPAVxsd__float@@PAUsoap@@PBDPAV1@1@Z ENDP ; soap_in_xsd__float
_TEXT	ENDS
PUBLIC	?soap_new_xsd__float@@YAPAVxsd__float@@PAUsoap@@H@Z ; soap_new_xsd__float
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_new_xsd__float@@YAPAVxsd__float@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new_xsd__float@@YAPAVxsd__float@@PAUsoap@@H@Z PROC ; soap_new_xsd__float, COMDAT

; 2375 : {	return soap_instantiate_xsd__float(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate_xsd__float@@YAPAVxsd__float@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_xsd__float
	add	esp, 20					; 00000014H

; 2376 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new_xsd__float@@YAPAVxsd__float@@PAUsoap@@H@Z ENDP ; soap_new_xsd__float
_TEXT	ENDS
PUBLIC	?soap_delete_xsd__float@@YAXPAUsoap@@PAVxsd__float@@@Z ; soap_delete_xsd__float
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete_xsd__float@@YAXPAUsoap@@PAVxsd__float@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete_xsd__float@@YAXPAUsoap@@PAVxsd__float@@@Z PROC ; soap_delete_xsd__float, COMDAT

; 2379 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 2380 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete_xsd__float@@YAXPAUsoap@@PAVxsd__float@@@Z ENDP ; soap_delete_xsd__float
_TEXT	ENDS
PUBLIC	??1xsd__float@@UAE@XZ				; xsd__float::~xsd__float
PUBLIC	??0xsd__float@@QAE@XZ				; xsd__float::xsd__float
PUBLIC	??_C@_0CJ@OKKBFHME@soap_instantiate_xsd__float?$CI?$CFd?0?5@ ; `string'
;	COMDAT ??_C@_0CJ@OKKBFHME@soap_instantiate_xsd__float?$CI?$CFd?0?5@
CONST	SEGMENT
??_C@_0CJ@OKKBFHME@soap_instantiate_xsd__float?$CI?$CFd?0?5@ DB 'soap_ins'
	DB	'tantiate_xsd__float(%d, %s, %s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?soap_instantiate_xsd__float@@YAPAVxsd__float@@PAUsoap@@HPBD1PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__float@@YAPAVxsd__float@@PAUsoap@@HPBD1PAI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__float@@YAPAVxsd__float@@PAUsoap@@HPBD1PAI@Z$1
__ehfuncinfo$?soap_instantiate_xsd__float@@YAPAVxsd__float@@PAUsoap@@HPBD1PAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?soap_instantiate_xsd__float@@YAPAVxsd__float@@PAUsoap@@HPBD1PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?soap_instantiate_xsd__float@@YAPAVxsd__float@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -320						; size = 4
tv163 = -316						; size = 4
tv133 = -316						; size = 4
tv77 = -316						; size = 4
$T101362 = -308						; size = 4
$T101363 = -296						; size = 4
$T101366 = -284						; size = 4
$T101367 = -272						; size = 4
$T101368 = -260						; size = 4
_fdebug$89352 = -56					; size = 4
_i$89343 = -44						; size = 4
_cp$ = -32						; size = 4
_fdebug$89318 = -20					; size = 4
__$EHRec$ = -12						; size = 12
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate_xsd__float@@YAPAVxsd__float@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate_xsd__float, COMDAT

; 2383 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?soap_instantiate_xsd__float@@YAPAVxsd__float@@PAUsoap@@HPBD1PAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2384 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__float(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN15@soap_insta@12
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN14@soap_insta@12
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN14@soap_insta@12:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN15@soap_insta@12
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89318[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN18@soap_insta@12
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN19@soap_insta@12
$LN18@soap_insta@12:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN19@soap_insta@12:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN20@soap_insta@12
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN21@soap_insta@12
$LN20@soap_insta@12:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@soap_insta@12:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CJ@OKKBFHME@soap_instantiate_xsd__float?$CI?$CFd?0?5@
	mov	edx, DWORD PTR _fdebug$89318[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89318[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@soap_insta@12:

; 2385 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__float, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	12					; 0000000cH
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 2386 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN12@soap_insta@12

; 2387 : 		return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@12
$LN12@soap_insta@12:

; 2388 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN11@soap_insta@12

; 2389 : 	{	cp->ptr = (void*)new xsd__float;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101363[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T101363[ebp], 0
	je	SHORT $LN22@soap_insta@12
	mov	ecx, DWORD PTR $T101363[ebp]
	call	??0xsd__float@@QAE@XZ			; xsd__float::xsd__float
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN23@soap_insta@12
$LN22@soap_insta@12:
	mov	DWORD PTR tv133[ebp], 0
$LN23@soap_insta@12:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T101362[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101362[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2390 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN10@soap_insta@12

; 2391 : 			*size = sizeof(xsd__float);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
$LN10@soap_insta@12:

; 2392 : 		((xsd__float*)cp->ptr)->soap = soap;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 2393 : 	}
; 2394 : 	else

	jmp	$LN9@soap_insta@12
$LN11@soap_insta@12:

; 2395 : 	{	cp->ptr = (void*)new xsd__float[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T101366[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T101366[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101368[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T101368[ebp], 0
	je	SHORT $LN24@soap_insta@12
	mov	ecx, DWORD PTR $T101368[ebp]
	mov	edx, DWORD PTR $T101366[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1xsd__float@@UAE@XZ		; xsd__float::~xsd__float
	push	OFFSET ??0xsd__float@@QAE@XZ		; xsd__float::xsd__float
	mov	eax, DWORD PTR $T101366[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T101368[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T101368[ebp]
	add	edx, 4
	mov	DWORD PTR tv163[ebp], edx
	jmp	SHORT $LN25@soap_insta@12
$LN24@soap_insta@12:
	mov	DWORD PTR tv163[ebp], 0
$LN25@soap_insta@12:
	mov	eax, DWORD PTR tv163[ebp]
	mov	DWORD PTR $T101367[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101367[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2396 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@soap_insta@12

; 2397 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 2398 : 			return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@12
$LN8@soap_insta@12:

; 2399 : 		}
; 2400 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@12

; 2401 : 			*size = n * sizeof(xsd__float);

	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN7@soap_insta@12:

; 2402 : 		for (int i = 0; i < n; i++)

	mov	DWORD PTR _i$89343[ebp], 0
	jmp	SHORT $LN6@soap_insta@12
$LN5@soap_insta@12:
	mov	eax, DWORD PTR _i$89343[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89343[ebp], eax
$LN6@soap_insta@12:
	mov	eax, DWORD PTR _i$89343[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN9@soap_insta@12

; 2403 : 			((xsd__float*)cp->ptr)[i].soap = soap;

	mov	eax, DWORD PTR _i$89343[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [edx+eax+8], ecx
	jmp	SHORT $LN5@soap_insta@12
$LN9@soap_insta@12:

; 2404 : 	}
; 2405 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@12
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@12
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@12:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@12
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89352[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$89352[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89352[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@12:

; 2406 : 	return (xsd__float*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN16@soap_insta@12:

; 2407 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?soap_instantiate_xsd__float@@YAPAVxsd__float@@PAUsoap@@HPBD1PAI@Z$0:
	mov	eax, DWORD PTR $T101363[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate_xsd__float@@YAPAVxsd__float@@PAUsoap@@HPBD1PAI@Z$1:
	mov	eax, DWORD PTR $T101368[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?soap_instantiate_xsd__float@@YAPAVxsd__float@@PAUsoap@@HPBD1PAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-324]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?soap_instantiate_xsd__float@@YAPAVxsd__float@@PAUsoap@@HPBD1PAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?soap_instantiate_xsd__float@@YAPAVxsd__float@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate_xsd__float
PUBLIC	??_7xsd__float@@6B@				; xsd__float::`vftable'
PUBLIC	??_R4xsd__float@@6B@				; xsd__float::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVxsd__float@@@8				; xsd__float `RTTI Type Descriptor'
PUBLIC	??_R3xsd__float@@8				; xsd__float::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2xsd__float@@8				; xsd__float::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@xsd__float@@8			; xsd__float::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?soap_type@xsd__float@@UBEHXZ			; xsd__float::soap_type
PUBLIC	??_Exsd__float@@UAEPAXI@Z			; xsd__float::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@xsd__float@@8
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapstub.h
rdata$r	SEGMENT
??_R1A@?0A@EA@xsd__float@@8 DD FLAT:??_R0?AVxsd__float@@@8 ; xsd__float::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3xsd__float@@8
rdata$r	ENDS
;	COMDAT ??_R2xsd__float@@8
rdata$r	SEGMENT
??_R2xsd__float@@8 DD FLAT:??_R1A@?0A@EA@xsd__float@@8	; xsd__float::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@xsd__anyType@@8
rdata$r	ENDS
;	COMDAT ??_R3xsd__float@@8
rdata$r	SEGMENT
??_R3xsd__float@@8 DD 00H				; xsd__float::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2xsd__float@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVxsd__float@@@8
_DATA	SEGMENT
??_R0?AVxsd__float@@@8 DD FLAT:??_7type_info@@6B@	; xsd__float `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVxsd__float@@', 00H
_DATA	ENDS
;	COMDAT ??_R4xsd__float@@6B@
rdata$r	SEGMENT
??_R4xsd__float@@6B@ DD 00H				; xsd__float::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVxsd__float@@@8
	DD	FLAT:??_R3xsd__float@@8
rdata$r	ENDS
;	COMDAT ??_7xsd__float@@6B@
CONST	SEGMENT
??_7xsd__float@@6B@ DD FLAT:??_R4xsd__float@@6B@	; xsd__float::`vftable'
	DD	FLAT:?soap_type@xsd__float@@UBEHXZ
	DD	FLAT:?soap_default@xsd__float@@UAEXPAUsoap@@@Z
	DD	FLAT:?soap_serialize@xsd__float@@UBEXPAUsoap@@@Z
	DD	FLAT:?soap_put@xsd__float@@UBEHPAUsoap@@PBD1@Z
	DD	FLAT:?soap_out@xsd__float@@UBEHPAUsoap@@PBDH1@Z
	DD	FLAT:?soap_get@xsd__float@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:?soap_in@xsd__float@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:??_Exsd__float@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??0xsd__float@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0xsd__float@@QAE@XZ PROC				; xsd__float::xsd__float, COMDAT
; _this$ = ecx

; 87   : 	xsd__float() : __item(0) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0xsd__anyType@@QAE@XZ			; xsd__anyType::xsd__anyType
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7xsd__float@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0xsd__float@@QAE@XZ ENDP				; xsd__float::xsd__float
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_type@xsd__float@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?soap_type@xsd__float@@UBEHXZ PROC			; xsd__float::soap_type, COMDAT
; _this$ = ecx

; 80   : 	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_xsd__float */

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_type@xsd__float@@UBEHXZ ENDP			; xsd__float::soap_type
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1xsd__float@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1xsd__float@@UAE@XZ PROC				; xsd__float::~xsd__float, COMDAT
; _this$ = ecx

; 88   : 	virtual ~xsd__float() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7xsd__float@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1xsd__anyType@@UAE@XZ			; xsd__anyType::~xsd__anyType
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1xsd__float@@UAE@XZ ENDP				; xsd__float::~xsd__float
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??_Exsd__float@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Exsd__float@@UAEPAXI@Z PROC				; xsd__float::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@13
	push	OFFSET ??1xsd__float@@UAE@XZ		; xsd__float::~xsd__float
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@13
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@13:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@13
$LN3@vector@13:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1xsd__float@@UAE@XZ			; xsd__float::~xsd__float
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@13
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@13:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@13:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Exsd__float@@UAEPAXI@Z ENDP				; xsd__float::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??4xsd__float@@QAEAAV0@ABV0@@Z			; xsd__float::operator=
PUBLIC	??_C@_0BN@KLIIHFMB@Copying?5xsd__float?5?$CFp?5?9?$DO?5?$CFp?6?$AA@ ; `string'
PUBLIC	?soap_copy_xsd__float@@YAXPAUsoap@@HHPAXIPBXI@Z	; soap_copy_xsd__float
;	COMDAT ??_C@_0BN@KLIIHFMB@Copying?5xsd__float?5?$CFp?5?9?$DO?5?$CFp?6?$AA@
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapc.cpp
CONST	SEGMENT
??_C@_0BN@KLIIHFMB@Copying?5xsd__float?5?$CFp?5?9?$DO?5?$CFp?6?$AA@ DB 'C'
	DB	'opying xsd__float %p -> %p', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy_xsd__float@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$89374 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy_xsd__float@@YAXPAUsoap@@HHPAXIPBXI@Z PROC	; soap_copy_xsd__float, COMDAT

; 2409 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2410 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__float %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@11
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@11
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@11:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@11
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89374[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BN@KLIIHFMB@Copying?5xsd__float?5?$CFp?5?9?$DO?5?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$89374[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89374[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@11:

; 2411 : 	*(xsd__float*)p = *(xsd__float*)q;

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	??4xsd__float@@QAEAAV0@ABV0@@Z

; 2412 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy_xsd__float@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP	; soap_copy_xsd__float
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??4xsd__float@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4xsd__float@@QAEAAV0@ABV0@@Z PROC			; xsd__float::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4xsd__anyType@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4xsd__float@@QAEAAV0@ABV0@@Z ENDP			; xsd__float::operator=
_TEXT	ENDS
PUBLIC	?soap_default@xsd__boolean@@UAEXPAUsoap@@@Z	; xsd__boolean::soap_default
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default@xsd__boolean@@UAEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_default@xsd__boolean@@UAEXPAUsoap@@@Z PROC	; xsd__boolean::soap_default, COMDAT
; _this$ = ecx

; 2415 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2416 : 	this->soap = soap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2417 : 	soap_default_bool(soap, &this->xsd__boolean::__item);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_bool@@YAXPAUsoap@@PA_N@Z	; soap_default_bool
	add	esp, 8

; 2418 : 	this->xsd__anyType::__item = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 2419 : 	/* transient soap skipped */
; 2420 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_default@xsd__boolean@@UAEXPAUsoap@@@Z ENDP	; xsd__boolean::soap_default
_TEXT	ENDS
PUBLIC	?soap_serialize@xsd__boolean@@UBEXPAUsoap@@@Z	; xsd__boolean::soap_serialize
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_serialize@xsd__boolean@@UBEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_serialize@xsd__boolean@@UBEXPAUsoap@@@Z PROC	; xsd__boolean::soap_serialize, COMDAT
; _this$ = ecx

; 2423 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2424 : 	(void)soap; /* appease -Wall -Werror */
; 2425 : 	/* transient soap skipped */
; 2426 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_serialize@xsd__boolean@@UBEXPAUsoap@@@Z ENDP	; xsd__boolean::soap_serialize
_TEXT	ENDS
PUBLIC	?soap_put@xsd__boolean@@UBEHPAUsoap@@PBD1@Z	; xsd__boolean::soap_put
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put@xsd__boolean@@UBEHPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_id$ = -20						; size = 4
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_put@xsd__boolean@@UBEHPAUsoap@@PBD1@Z PROC	; xsd__boolean::soap_put, COMDAT
; _this$ = ecx

; 2429 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2430 : 	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__boolean);

	push	10					; 0000000aH
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 2431 : 	if (this->soap_out(soap, tag, id, type))

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@soap_put@11

; 2432 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put@11
$LN1@soap_put@11:

; 2433 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put@11:

; 2434 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_put@xsd__boolean@@UBEHPAUsoap@@PBD1@Z ENDP	; xsd__boolean::soap_put
_TEXT	ENDS
PUBLIC	?soap_out_xsd__boolean@@YAHPAUsoap@@PBDHPBVxsd__boolean@@1@Z ; soap_out_xsd__boolean
PUBLIC	?soap_out@xsd__boolean@@UBEHPAUsoap@@PBDH1@Z	; xsd__boolean::soap_out
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out@xsd__boolean@@UBEHPAUsoap@@PBDH1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_out@xsd__boolean@@UBEHPAUsoap@@PBDH1@Z PROC	; xsd__boolean::soap_out, COMDAT
; _this$ = ecx

; 2437 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2438 : 	return soap_out_xsd__boolean(soap, tag, id, this, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_xsd__boolean@@YAHPAUsoap@@PBDHPBVxsd__boolean@@1@Z ; soap_out_xsd__boolean
	add	esp, 20					; 00000014H

; 2439 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?soap_out@xsd__boolean@@UBEHPAUsoap@@PBDH1@Z ENDP	; xsd__boolean::soap_out
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out_xsd__boolean@@YAHPAUsoap@@PBDHPBVxsd__boolean@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_xsd__boolean@@YAHPAUsoap@@PBDHPBVxsd__boolean@@1@Z PROC ; soap_out_xsd__boolean, COMDAT

; 2442 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2443 : 	return soap_out_bool(soap, tag, id, &(a->xsd__boolean::__item), "xsd:boolean");

	push	OFFSET ??_C@_0M@FGHMEICI@xsd?3boolean?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_out_bool@@YAHPAUsoap@@PBDHPB_N1@Z	; soap_out_bool
	add	esp, 20					; 00000014H

; 2444 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_xsd__boolean@@YAHPAUsoap@@PBDHPBVxsd__boolean@@1@Z ENDP ; soap_out_xsd__boolean
_TEXT	ENDS
PUBLIC	?soap_get_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@PAV1@PBD2@Z ; soap_get_xsd__boolean
PUBLIC	?soap_get@xsd__boolean@@UAEPAXPAUsoap@@PBD1@Z	; xsd__boolean::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get@xsd__boolean@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_get@xsd__boolean@@UAEPAXPAUsoap@@PBD1@Z PROC	; xsd__boolean::soap_get, COMDAT
; _this$ = ecx

; 2447 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2448 : 	return soap_get_xsd__boolean(soap, this, tag, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_get_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@PAV1@PBD2@Z ; soap_get_xsd__boolean
	add	esp, 16					; 00000010H

; 2449 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_get@xsd__boolean@@UAEPAXPAUsoap@@PBD1@Z ENDP	; xsd__boolean::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_get_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@PAV1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@PAV1@PBD2@Z PROC ; soap_get_xsd__boolean, COMDAT

; 2452 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2453 : 	if ((p = soap_in_xsd__boolean(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__boolean
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_x@5

; 2454 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_x@5

; 2455 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_x@5
$LN2@soap_get_x@5:

; 2456 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_x@5:

; 2457 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@PAV1@PBD2@Z ENDP ; soap_get_xsd__boolean
_TEXT	ENDS
PUBLIC	?soap_in@xsd__boolean@@UAEPAXPAUsoap@@PBD1@Z	; xsd__boolean::soap_in
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in@xsd__boolean@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_in@xsd__boolean@@UAEPAXPAUsoap@@PBD1@Z PROC	; xsd__boolean::soap_in, COMDAT
; _this$ = ecx

; 2460 : {	return soap_in_xsd__boolean(soap, tag, this, type);

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__boolean
	add	esp, 16					; 00000010H

; 2461 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_in@xsd__boolean@@UAEPAXPAUsoap@@PBD1@Z ENDP	; xsd__boolean::soap_in
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@PBDPAV1@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@PBDPAV1@1@Z PROC ; soap_in_xsd__boolean, COMDAT

; 2464 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2465 : 	if (soap_element_begin_in(soap, tag, 1, NULL))

	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN5@soap_in_xs@5

; 2466 : 		return NULL;

	xor	eax, eax
	jmp	$LN6@soap_in_xs@5
$LN5@soap_in_xs@5:

; 2467 : 	if (!(a = (xsd__boolean *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(xsd__boolean), soap->type, soap->arrayType)))

	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	16					; 00000010H
	push	10					; 0000000aH
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 81076				; 00013cb4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_class_id_enter@@YAPAXPAUsoap@@PBDPAXHI11@Z ; soap_class_id_enter
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN4@soap_in_xs@5

; 2468 : 	{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 2469 : 		return NULL;

	xor	eax, eax
	jmp	$LN6@soap_in_xs@5
$LN4@soap_in_xs@5:

; 2470 : 	}
; 2471 : 	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 2472 : 	*soap->id = '\0';

	mov	eax, DWORD PTR _soap$[ebp]
	mov	BYTE PTR [eax+81076], 0

; 2473 : 	if (soap->alloced)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87306]
	test	ecx, ecx
	je	SHORT $LN3@soap_in_xs@5

; 2474 : 	{	a->soap_default(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2475 : 		if (soap->clist->type != SOAP_TYPE_xsd__boolean)

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	cmp	DWORD PTR [ecx+8], 10			; 0000000aH
	je	SHORT $LN3@soap_in_xs@5

; 2476 : 			return (xsd__boolean *)a->soap_in(soap, tag, type);

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN6@soap_in_xs@5
$LN3@soap_in_xs@5:

; 2477 : 	}
; 2478 : 	if (!soap_in_bool(soap, tag, &(a->xsd__boolean::__item), "xsd:boolean"))

	push	OFFSET ??_C@_0M@FGHMEICI@xsd?3boolean?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_in_bool@@YAPA_NPAUsoap@@PBDPA_N1@Z ; soap_in_bool
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN1@soap_in_xs@5

; 2479 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN6@soap_in_xs@5
$LN1@soap_in_xs@5:

; 2480 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN6@soap_in_xs@5:

; 2481 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@PBDPAV1@1@Z ENDP ; soap_in_xsd__boolean
_TEXT	ENDS
PUBLIC	?soap_new_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@H@Z ; soap_new_xsd__boolean
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_new_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@H@Z PROC ; soap_new_xsd__boolean, COMDAT

; 2484 : {	return soap_instantiate_xsd__boolean(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_xsd__boolean
	add	esp, 20					; 00000014H

; 2485 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@H@Z ENDP ; soap_new_xsd__boolean
_TEXT	ENDS
PUBLIC	?soap_delete_xsd__boolean@@YAXPAUsoap@@PAVxsd__boolean@@@Z ; soap_delete_xsd__boolean
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete_xsd__boolean@@YAXPAUsoap@@PAVxsd__boolean@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete_xsd__boolean@@YAXPAUsoap@@PAVxsd__boolean@@@Z PROC ; soap_delete_xsd__boolean, COMDAT

; 2488 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 2489 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete_xsd__boolean@@YAXPAUsoap@@PAVxsd__boolean@@@Z ENDP ; soap_delete_xsd__boolean
_TEXT	ENDS
PUBLIC	??1xsd__boolean@@UAE@XZ				; xsd__boolean::~xsd__boolean
PUBLIC	??0xsd__boolean@@QAE@XZ				; xsd__boolean::xsd__boolean
PUBLIC	??_C@_0CL@ODHBMEMM@soap_instantiate_xsd__boolean?$CI?$CFd@ ; `string'
;	COMDAT ??_C@_0CL@ODHBMEMM@soap_instantiate_xsd__boolean?$CI?$CFd@
CONST	SEGMENT
??_C@_0CL@ODHBMEMM@soap_instantiate_xsd__boolean?$CI?$CFd@ DB 'soap_insta'
	DB	'ntiate_xsd__boolean(%d, %s, %s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?soap_instantiate_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@HPBD1PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@HPBD1PAI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@HPBD1PAI@Z$1
__ehfuncinfo$?soap_instantiate_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@HPBD1PAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?soap_instantiate_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@HPBD1PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?soap_instantiate_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -320						; size = 4
tv163 = -316						; size = 4
tv133 = -316						; size = 4
tv77 = -316						; size = 4
$T101421 = -308						; size = 4
$T101422 = -296						; size = 4
$T101425 = -284						; size = 4
$T101426 = -272						; size = 4
$T101427 = -260						; size = 4
_fdebug$89500 = -56					; size = 4
_i$89491 = -44						; size = 4
_cp$ = -32						; size = 4
_fdebug$89466 = -20					; size = 4
__$EHRec$ = -12						; size = 12
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate_xsd__boolean, COMDAT

; 2492 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?soap_instantiate_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@HPBD1PAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2493 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__boolean(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN15@soap_insta@13
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN14@soap_insta@13
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN14@soap_insta@13:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN15@soap_insta@13
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89466[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN18@soap_insta@13
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN19@soap_insta@13
$LN18@soap_insta@13:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN19@soap_insta@13:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN20@soap_insta@13
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN21@soap_insta@13
$LN20@soap_insta@13:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@soap_insta@13:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CL@ODHBMEMM@soap_instantiate_xsd__boolean?$CI?$CFd@
	mov	edx, DWORD PTR _fdebug$89466[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89466[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@soap_insta@13:

; 2494 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__boolean, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	10					; 0000000aH
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 2495 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN12@soap_insta@13

; 2496 : 		return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@13
$LN12@soap_insta@13:

; 2497 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN11@soap_insta@13

; 2498 : 	{	cp->ptr = (void*)new xsd__boolean;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101422[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T101422[ebp], 0
	je	SHORT $LN22@soap_insta@13
	mov	ecx, DWORD PTR $T101422[ebp]
	call	??0xsd__boolean@@QAE@XZ			; xsd__boolean::xsd__boolean
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN23@soap_insta@13
$LN22@soap_insta@13:
	mov	DWORD PTR tv133[ebp], 0
$LN23@soap_insta@13:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T101421[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101421[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2499 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN10@soap_insta@13

; 2500 : 			*size = sizeof(xsd__boolean);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
$LN10@soap_insta@13:

; 2501 : 		((xsd__boolean*)cp->ptr)->soap = soap;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 2502 : 	}
; 2503 : 	else

	jmp	$LN9@soap_insta@13
$LN11@soap_insta@13:

; 2504 : 	{	cp->ptr = (void*)new xsd__boolean[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T101425[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T101425[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101427[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T101427[ebp], 0
	je	SHORT $LN24@soap_insta@13
	mov	ecx, DWORD PTR $T101427[ebp]
	mov	edx, DWORD PTR $T101425[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1xsd__boolean@@UAE@XZ		; xsd__boolean::~xsd__boolean
	push	OFFSET ??0xsd__boolean@@QAE@XZ		; xsd__boolean::xsd__boolean
	mov	eax, DWORD PTR $T101425[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T101427[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T101427[ebp]
	add	edx, 4
	mov	DWORD PTR tv163[ebp], edx
	jmp	SHORT $LN25@soap_insta@13
$LN24@soap_insta@13:
	mov	DWORD PTR tv163[ebp], 0
$LN25@soap_insta@13:
	mov	eax, DWORD PTR tv163[ebp]
	mov	DWORD PTR $T101426[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101426[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2505 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@soap_insta@13

; 2506 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 2507 : 			return NULL;

	xor	eax, eax
	jmp	$LN16@soap_insta@13
$LN8@soap_insta@13:

; 2508 : 		}
; 2509 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@13

; 2510 : 			*size = n * sizeof(xsd__boolean);

	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN7@soap_insta@13:

; 2511 : 		for (int i = 0; i < n; i++)

	mov	DWORD PTR _i$89491[ebp], 0
	jmp	SHORT $LN6@soap_insta@13
$LN5@soap_insta@13:
	mov	eax, DWORD PTR _i$89491[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89491[ebp], eax
$LN6@soap_insta@13:
	mov	eax, DWORD PTR _i$89491[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN9@soap_insta@13

; 2512 : 			((xsd__boolean*)cp->ptr)[i].soap = soap;

	mov	eax, DWORD PTR _i$89491[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [edx+eax+8], ecx
	jmp	SHORT $LN5@soap_insta@13
$LN9@soap_insta@13:

; 2513 : 	}
; 2514 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@13
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@13
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@13:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@13
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89500[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$89500[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89500[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@13:

; 2515 : 	return (xsd__boolean*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN16@soap_insta@13:

; 2516 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?soap_instantiate_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@HPBD1PAI@Z$0:
	mov	eax, DWORD PTR $T101422[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@HPBD1PAI@Z$1:
	mov	eax, DWORD PTR $T101427[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?soap_instantiate_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@HPBD1PAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-324]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?soap_instantiate_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@HPBD1PAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?soap_instantiate_xsd__boolean@@YAPAVxsd__boolean@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate_xsd__boolean
PUBLIC	??_7xsd__boolean@@6B@				; xsd__boolean::`vftable'
PUBLIC	??_R4xsd__boolean@@6B@				; xsd__boolean::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVxsd__boolean@@@8			; xsd__boolean `RTTI Type Descriptor'
PUBLIC	??_R3xsd__boolean@@8				; xsd__boolean::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2xsd__boolean@@8				; xsd__boolean::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@xsd__boolean@@8			; xsd__boolean::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?soap_type@xsd__boolean@@UBEHXZ			; xsd__boolean::soap_type
PUBLIC	??_Exsd__boolean@@UAEPAXI@Z			; xsd__boolean::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@xsd__boolean@@8
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapstub.h
rdata$r	SEGMENT
??_R1A@?0A@EA@xsd__boolean@@8 DD FLAT:??_R0?AVxsd__boolean@@@8 ; xsd__boolean::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3xsd__boolean@@8
rdata$r	ENDS
;	COMDAT ??_R2xsd__boolean@@8
rdata$r	SEGMENT
??_R2xsd__boolean@@8 DD FLAT:??_R1A@?0A@EA@xsd__boolean@@8 ; xsd__boolean::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@xsd__anyType@@8
rdata$r	ENDS
;	COMDAT ??_R3xsd__boolean@@8
rdata$r	SEGMENT
??_R3xsd__boolean@@8 DD 00H				; xsd__boolean::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2xsd__boolean@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVxsd__boolean@@@8
_DATA	SEGMENT
??_R0?AVxsd__boolean@@@8 DD FLAT:??_7type_info@@6B@	; xsd__boolean `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVxsd__boolean@@', 00H
_DATA	ENDS
;	COMDAT ??_R4xsd__boolean@@6B@
rdata$r	SEGMENT
??_R4xsd__boolean@@6B@ DD 00H				; xsd__boolean::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVxsd__boolean@@@8
	DD	FLAT:??_R3xsd__boolean@@8
rdata$r	ENDS
;	COMDAT ??_7xsd__boolean@@6B@
CONST	SEGMENT
??_7xsd__boolean@@6B@ DD FLAT:??_R4xsd__boolean@@6B@	; xsd__boolean::`vftable'
	DD	FLAT:?soap_type@xsd__boolean@@UBEHXZ
	DD	FLAT:?soap_default@xsd__boolean@@UAEXPAUsoap@@@Z
	DD	FLAT:?soap_serialize@xsd__boolean@@UBEXPAUsoap@@@Z
	DD	FLAT:?soap_put@xsd__boolean@@UBEHPAUsoap@@PBD1@Z
	DD	FLAT:?soap_out@xsd__boolean@@UBEHPAUsoap@@PBDH1@Z
	DD	FLAT:?soap_get@xsd__boolean@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:?soap_in@xsd__boolean@@UAEPAXPAUsoap@@PBD1@Z
	DD	FLAT:??_Exsd__boolean@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??0xsd__boolean@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0xsd__boolean@@QAE@XZ PROC				; xsd__boolean::xsd__boolean, COMDAT
; _this$ = ecx

; 67   : 	xsd__boolean() : __item((bool)0) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0xsd__anyType@@QAE@XZ			; xsd__anyType::xsd__anyType
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7xsd__boolean@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0xsd__boolean@@QAE@XZ ENDP				; xsd__boolean::xsd__boolean
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_type@xsd__boolean@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?soap_type@xsd__boolean@@UBEHXZ PROC			; xsd__boolean::soap_type, COMDAT
; _this$ = ecx

; 60   : 	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_xsd__boolean */

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 10					; 0000000aH
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_type@xsd__boolean@@UBEHXZ ENDP			; xsd__boolean::soap_type
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1xsd__boolean@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1xsd__boolean@@UAE@XZ PROC				; xsd__boolean::~xsd__boolean, COMDAT
; _this$ = ecx

; 68   : 	virtual ~xsd__boolean() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7xsd__boolean@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1xsd__anyType@@UAE@XZ			; xsd__anyType::~xsd__anyType
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1xsd__boolean@@UAE@XZ ENDP				; xsd__boolean::~xsd__boolean
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??_Exsd__boolean@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Exsd__boolean@@UAEPAXI@Z PROC			; xsd__boolean::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@14
	push	OFFSET ??1xsd__boolean@@UAE@XZ		; xsd__boolean::~xsd__boolean
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@14
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@14:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@14
$LN3@vector@14:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1xsd__boolean@@UAE@XZ			; xsd__boolean::~xsd__boolean
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@14
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@14:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@14:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Exsd__boolean@@UAEPAXI@Z ENDP			; xsd__boolean::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??4xsd__boolean@@QAEAAV0@ABV0@@Z		; xsd__boolean::operator=
PUBLIC	??_C@_0BP@JOMEEAMJ@Copying?5xsd__boolean?5?$CFp?5?9?$DO?5?$CFp?6?$AA@ ; `string'
PUBLIC	?soap_copy_xsd__boolean@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy_xsd__boolean
;	COMDAT ??_C@_0BP@JOMEEAMJ@Copying?5xsd__boolean?5?$CFp?5?9?$DO?5?$CFp?6?$AA@
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapc.cpp
CONST	SEGMENT
??_C@_0BP@JOMEEAMJ@Copying?5xsd__boolean?5?$CFp?5?9?$DO?5?$CFp?6?$AA@ DB 'C'
	DB	'opying xsd__boolean %p -> %p', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy_xsd__boolean@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$89522 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy_xsd__boolean@@YAXPAUsoap@@HHPAXIPBXI@Z PROC	; soap_copy_xsd__boolean, COMDAT

; 2518 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2519 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__boolean %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@12
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@12
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@12:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@12
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89522[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BP@JOMEEAMJ@Copying?5xsd__boolean?5?$CFp?5?9?$DO?5?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$89522[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89522[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@12:

; 2520 : 	*(xsd__boolean*)p = *(xsd__boolean*)q;

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	??4xsd__boolean@@QAEAAV0@ABV0@@Z

; 2521 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy_xsd__boolean@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP	; soap_copy_xsd__boolean
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??4xsd__boolean@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4xsd__boolean@@QAEAAV0@ABV0@@Z PROC			; xsd__boolean::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4xsd__anyType@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+12]
	mov	BYTE PTR [eax+12], dl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4xsd__boolean@@QAEAAV0@ABV0@@Z ENDP			; xsd__boolean::operator=
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_default@xsd__anyType@@UAEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_default@xsd__anyType@@UAEXPAUsoap@@@Z PROC	; xsd__anyType::soap_default, COMDAT
; _this$ = ecx

; 2524 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2525 : 	this->soap = soap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2526 : 	this->xsd__anyType::__item = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 2527 : 	/* transient soap skipped */
; 2528 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_default@xsd__anyType@@UAEXPAUsoap@@@Z ENDP	; xsd__anyType::soap_default
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_serialize@xsd__anyType@@UBEXPAUsoap@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
?soap_serialize@xsd__anyType@@UBEXPAUsoap@@@Z PROC	; xsd__anyType::soap_serialize, COMDAT
; _this$ = ecx

; 2531 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2532 : 	(void)soap; /* appease -Wall -Werror */
; 2533 : 	/* transient soap skipped */
; 2534 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?soap_serialize@xsd__anyType@@UBEXPAUsoap@@@Z ENDP	; xsd__anyType::soap_serialize
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_put@xsd__anyType@@UBEHPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_id$ = -20						; size = 4
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_put@xsd__anyType@@UBEHPAUsoap@@PBD1@Z PROC	; xsd__anyType::soap_put, COMDAT
; _this$ = ecx

; 2537 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2538 : 	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__anyType);

	push	8
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 2539 : 	if (this->soap_out(soap, tag, id, type))

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@soap_put@12

; 2540 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put@12
$LN1@soap_put@12:

; 2541 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put@12:

; 2542 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_put@xsd__anyType@@UBEHPAUsoap@@PBD1@Z ENDP	; xsd__anyType::soap_put
_TEXT	ENDS
PUBLIC	?soap_out_xsd__anyType@@YAHPAUsoap@@PBDHPBVxsd__anyType@@1@Z ; soap_out_xsd__anyType
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out@xsd__anyType@@UBEHPAUsoap@@PBDH1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_out@xsd__anyType@@UBEHPAUsoap@@PBDH1@Z PROC	; xsd__anyType::soap_out, COMDAT
; _this$ = ecx

; 2545 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2546 : 	return soap_out_xsd__anyType(soap, tag, id, this, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_xsd__anyType@@YAHPAUsoap@@PBDHPBVxsd__anyType@@1@Z ; soap_out_xsd__anyType
	add	esp, 20					; 00000014H

; 2547 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?soap_out@xsd__anyType@@UBEHPAUsoap@@PBDH1@Z ENDP	; xsd__anyType::soap_out
_TEXT	ENDS
EXTRN	_soap_outliteral:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out_xsd__anyType@@YAHPAUsoap@@PBDHPBVxsd__anyType@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_xsd__anyType@@YAHPAUsoap@@PBDHPBVxsd__anyType@@1@Z PROC ; soap_out_xsd__anyType, COMDAT

; 2550 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2551 : 	return soap_outliteral(soap, tag, &(a->xsd__anyType::__item), NULL);

	push	0
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_outliteral
	add	esp, 16					; 00000010H

; 2552 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_xsd__anyType@@YAHPAUsoap@@PBDHPBVxsd__anyType@@1@Z ENDP ; soap_out_xsd__anyType
_TEXT	ENDS
PUBLIC	?soap_get_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@PAV1@PBD2@Z ; soap_get_xsd__anyType
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get@xsd__anyType@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_get@xsd__anyType@@UAEPAXPAUsoap@@PBD1@Z PROC	; xsd__anyType::soap_get, COMDAT
; _this$ = ecx

; 2555 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2556 : 	return soap_get_xsd__anyType(soap, this, tag, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_get_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@PAV1@PBD2@Z ; soap_get_xsd__anyType
	add	esp, 16					; 00000010H

; 2557 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_get@xsd__anyType@@UAEPAXPAUsoap@@PBD1@Z ENDP	; xsd__anyType::soap_get
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_get_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@PAV1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@PAV1@PBD2@Z PROC ; soap_get_xsd__anyType, COMDAT

; 2560 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2561 : 	if ((p = soap_in_xsd__anyType(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__anyType
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_x@6

; 2562 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_x@6

; 2563 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_x@6
$LN2@soap_get_x@6:

; 2564 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_x@6:

; 2565 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@PAV1@PBD2@Z ENDP ; soap_get_xsd__anyType
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in@xsd__anyType@@UAEPAXPAUsoap@@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_type$ = 16						; size = 4
?soap_in@xsd__anyType@@UAEPAXPAUsoap@@PBD1@Z PROC	; xsd__anyType::soap_in, COMDAT
; _this$ = ecx

; 2568 : {	return soap_in_xsd__anyType(soap, tag, this, type);

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@PBDPAV1@1@Z ; soap_in_xsd__anyType
	add	esp, 16					; 00000010H

; 2569 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?soap_in@xsd__anyType@@UAEPAXPAUsoap@@PBD1@Z ENDP	; xsd__anyType::soap_in
_TEXT	ENDS
EXTRN	_soap_inliteral:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@PBDPAV1@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@PBDPAV1@1@Z PROC ; soap_in_xsd__anyType, COMDAT

; 2572 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2573 : 	if (soap_element_begin_in(soap, tag, 1, NULL))

	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN5@soap_in_xs@6

; 2574 : 		return NULL;

	xor	eax, eax
	jmp	$LN6@soap_in_xs@6
$LN5@soap_in_xs@6:

; 2575 : 	if (!(a = (xsd__anyType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), soap->type, soap->arrayType)))

	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	12					; 0000000cH
	push	8
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 81076				; 00013cb4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_class_id_enter@@YAPAXPAUsoap@@PBDPAXHI11@Z ; soap_class_id_enter
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN4@soap_in_xs@6

; 2576 : 	{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 2577 : 		return NULL;

	xor	eax, eax
	jmp	$LN6@soap_in_xs@6
$LN4@soap_in_xs@6:

; 2578 : 	}
; 2579 : 	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 2580 : 	*soap->id = '\0';

	mov	eax, DWORD PTR _soap$[ebp]
	mov	BYTE PTR [eax+81076], 0

; 2581 : 	if (soap->alloced)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87306]
	test	ecx, ecx
	je	SHORT $LN3@soap_in_xs@6

; 2582 : 	{	a->soap_default(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2583 : 		if (soap->clist->type != SOAP_TYPE_xsd__anyType)

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	cmp	DWORD PTR [ecx+8], 8
	je	SHORT $LN3@soap_in_xs@6

; 2584 : 			return (xsd__anyType *)a->soap_in(soap, tag, type);

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN6@soap_in_xs@6
$LN3@soap_in_xs@6:

; 2585 : 	}
; 2586 : 	if (!soap_inliteral(soap, tag, &(a->xsd__anyType::__item)))

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_inliteral
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@soap_in_xs@6

; 2587 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN6@soap_in_xs@6
$LN1@soap_in_xs@6:

; 2588 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN6@soap_in_xs@6:

; 2589 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@PBDPAV1@1@Z ENDP ; soap_in_xsd__anyType
_TEXT	ENDS
PUBLIC	?soap_new_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@H@Z ; soap_new_xsd__anyType
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_new_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@H@Z PROC ; soap_new_xsd__anyType, COMDAT

; 2592 : {	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_xsd__anyType
	add	esp, 20					; 00000014H

; 2593 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@H@Z ENDP ; soap_new_xsd__anyType
_TEXT	ENDS
PUBLIC	?soap_delete_xsd__anyType@@YAXPAUsoap@@PAVxsd__anyType@@@Z ; soap_delete_xsd__anyType
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete_xsd__anyType@@YAXPAUsoap@@PAVxsd__anyType@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete_xsd__anyType@@YAXPAUsoap@@PAVxsd__anyType@@@Z PROC ; soap_delete_xsd__anyType, COMDAT

; 2596 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 2597 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete_xsd__anyType@@YAXPAUsoap@@PAVxsd__anyType@@@Z ENDP ; soap_delete_xsd__anyType
_TEXT	ENDS
PUBLIC	??_C@_0CL@DNAPPIJ@soap_instantiate_xsd__anyType?$CI?$CFd@ ; `string'
;	COMDAT ??_C@_0CL@DNAPPIJ@soap_instantiate_xsd__anyType?$CI?$CFd@
CONST	SEGMENT
??_C@_0CL@DNAPPIJ@soap_instantiate_xsd__anyType?$CI?$CFd@ DB 'soap_instan'
	DB	'tiate_xsd__anyType(%d, %s, %s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$11
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -740						; size = 4
tv601 = -736						; size = 4
tv575 = -736						; size = 4
tv533 = -736						; size = 4
tv500 = -736						; size = 4
tv451 = -736						; size = 4
tv386 = -736						; size = 4
tv337 = -736						; size = 4
tv304 = -736						; size = 4
tv255 = -736						; size = 4
tv222 = -736						; size = 4
tv173 = -736						; size = 4
tv140 = -736						; size = 4
tv77 = -736						; size = 4
$T101480 = -728						; size = 4
$T101481 = -716						; size = 4
$T101484 = -704						; size = 4
$T101485 = -692						; size = 4
$T101486 = -680						; size = 4
$T101489 = -668						; size = 4
$T101490 = -656						; size = 4
$T101493 = -644						; size = 4
$T101494 = -632						; size = 4
$T101495 = -620						; size = 4
$T101498 = -608						; size = 4
$T101499 = -596						; size = 4
$T101502 = -584						; size = 4
$T101503 = -572						; size = 4
$T101504 = -560						; size = 4
$T101507 = -548						; size = 4
$T101508 = -536						; size = 4
$T101511 = -524						; size = 4
$T101512 = -512						; size = 4
$T101513 = -500						; size = 4
$T101516 = -488						; size = 4
$T101517 = -476						; size = 4
$T101520 = -464						; size = 4
$T101521 = -452						; size = 4
$T101522 = -440						; size = 4
$T101525 = -428						; size = 4
$T101526 = -416						; size = 4
$T101529 = -404						; size = 4
$T101530 = -392						; size = 4
$T101531 = -380						; size = 4
_fdebug$89813 = -176					; size = 4
_i$89804 = -164						; size = 4
_fdebug$89781 = -152					; size = 4
_i$89772 = -140						; size = 4
_fdebug$89748 = -128					; size = 4
_i$89739 = -116						; size = 4
_fdebug$89715 = -104					; size = 4
_i$89706 = -92						; size = 4
_fdebug$89682 = -80					; size = 4
_i$89673 = -68						; size = 4
_fdebug$89649 = -56					; size = 4
_i$89640 = -44						; size = 4
_cp$ = -32						; size = 4
_fdebug$89614 = -20					; size = 4
__$EHRec$ = -12						; size = 12
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate_xsd__anyType, COMDAT

; 2600 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 728				; 000002d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-740]
	mov	ecx, 182				; 000000b6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2601 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN75@soap_insta@14
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN74@soap_insta@14
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN74@soap_insta@14:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN75@soap_insta@14
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89614[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN78@soap_insta@14
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN79@soap_insta@14
$LN78@soap_insta@14:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN79@soap_insta@14:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN80@soap_insta@14
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN81@soap_insta@14
$LN80@soap_insta@14:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN81@soap_insta@14:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CL@DNAPPIJ@soap_instantiate_xsd__anyType?$CI?$CFd@
	mov	edx, DWORD PTR _fdebug$89614[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89614[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN75@soap_insta@14:

; 2602 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anyType, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	8
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 2603 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN72@soap_insta@14

; 2604 : 		return NULL;

	xor	eax, eax
	jmp	$LN76@soap_insta@14
$LN72@soap_insta@14:

; 2605 : 	if (type && !soap_match_tag(soap, type, "xsd:boolean"))

	cmp	DWORD PTR _type$[ebp], 0
	je	$LN71@soap_insta@14
	push	OFFSET ??_C@_0M@FGHMEICI@xsd?3boolean?$AA@
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN71@soap_insta@14

; 2606 : 	{	cp->type = SOAP_TYPE_xsd__boolean;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [eax+8], 10			; 0000000aH

; 2607 : 		if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	$LN70@soap_insta@14

; 2608 : 		{	cp->ptr = (void*)new xsd__boolean;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101481[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T101481[ebp], 0
	je	SHORT $LN82@soap_insta@14
	mov	ecx, DWORD PTR $T101481[ebp]
	call	??0xsd__boolean@@QAE@XZ			; xsd__boolean::xsd__boolean
	mov	DWORD PTR tv140[ebp], eax
	jmp	SHORT $LN83@soap_insta@14
$LN82@soap_insta@14:
	mov	DWORD PTR tv140[ebp], 0
$LN83@soap_insta@14:
	mov	eax, DWORD PTR tv140[ebp]
	mov	DWORD PTR $T101480[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101480[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2609 : 			if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN69@soap_insta@14

; 2610 : 			{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 2611 : 				return NULL;

	xor	eax, eax
	jmp	$LN76@soap_insta@14
$LN69@soap_insta@14:

; 2612 : 			}
; 2613 : 			if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN68@soap_insta@14

; 2614 : 				*size = sizeof(xsd__boolean);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
$LN68@soap_insta@14:

; 2615 : 			((xsd__boolean*)cp->ptr)->soap = soap;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 2616 : 		}
; 2617 : 		else

	jmp	$LN67@soap_insta@14
$LN70@soap_insta@14:

; 2618 : 		{	cp->ptr = (void*)new xsd__boolean[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T101484[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T101484[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101486[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T101486[ebp], 0
	je	SHORT $LN84@soap_insta@14
	mov	ecx, DWORD PTR $T101486[ebp]
	mov	edx, DWORD PTR $T101484[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1xsd__boolean@@UAE@XZ		; xsd__boolean::~xsd__boolean
	push	OFFSET ??0xsd__boolean@@QAE@XZ		; xsd__boolean::xsd__boolean
	mov	eax, DWORD PTR $T101484[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T101486[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T101486[ebp]
	add	edx, 4
	mov	DWORD PTR tv173[ebp], edx
	jmp	SHORT $LN85@soap_insta@14
$LN84@soap_insta@14:
	mov	DWORD PTR tv173[ebp], 0
$LN85@soap_insta@14:
	mov	eax, DWORD PTR tv173[ebp]
	mov	DWORD PTR $T101485[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101485[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2619 : 			if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN66@soap_insta@14

; 2620 : 				*size = n * sizeof(xsd__boolean);

	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN66@soap_insta@14:

; 2621 : 			for (int i = 0; i < n; i++)

	mov	DWORD PTR _i$89640[ebp], 0
	jmp	SHORT $LN65@soap_insta@14
$LN64@soap_insta@14:
	mov	eax, DWORD PTR _i$89640[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89640[ebp], eax
$LN65@soap_insta@14:
	mov	eax, DWORD PTR _i$89640[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN67@soap_insta@14

; 2622 : 				((xsd__boolean*)cp->ptr)[i].soap = soap;

	mov	eax, DWORD PTR _i$89640[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [edx+eax+8], ecx
	jmp	SHORT $LN64@soap_insta@14
$LN67@soap_insta@14:

; 2623 : 		}
; 2624 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN62@soap_insta@14
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN61@soap_insta@14
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN61@soap_insta@14:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN62@soap_insta@14
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89649[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$89649[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89649[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN62@soap_insta@14:

; 2625 : 		return (xsd__boolean*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
	jmp	$LN76@soap_insta@14
$LN71@soap_insta@14:

; 2626 : 	}
; 2627 : 	if (type && !soap_match_tag(soap, type, "xsd:float"))

	cmp	DWORD PTR _type$[ebp], 0
	je	$LN59@soap_insta@14
	push	OFFSET ??_C@_09ILBLHFBD@xsd?3float?$AA@
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN59@soap_insta@14

; 2628 : 	{	cp->type = SOAP_TYPE_xsd__float;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [eax+8], 12			; 0000000cH

; 2629 : 		if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	$LN58@soap_insta@14

; 2630 : 		{	cp->ptr = (void*)new xsd__float;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101490[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T101490[ebp], 0
	je	SHORT $LN86@soap_insta@14
	mov	ecx, DWORD PTR $T101490[ebp]
	call	??0xsd__float@@QAE@XZ			; xsd__float::xsd__float
	mov	DWORD PTR tv222[ebp], eax
	jmp	SHORT $LN87@soap_insta@14
$LN86@soap_insta@14:
	mov	DWORD PTR tv222[ebp], 0
$LN87@soap_insta@14:
	mov	eax, DWORD PTR tv222[ebp]
	mov	DWORD PTR $T101489[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101489[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2631 : 			if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN57@soap_insta@14

; 2632 : 			{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 2633 : 				return NULL;

	xor	eax, eax
	jmp	$LN76@soap_insta@14
$LN57@soap_insta@14:

; 2634 : 			}
; 2635 : 			if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN56@soap_insta@14

; 2636 : 				*size = sizeof(xsd__float);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
$LN56@soap_insta@14:

; 2637 : 			((xsd__float*)cp->ptr)->soap = soap;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 2638 : 		}
; 2639 : 		else

	jmp	$LN55@soap_insta@14
$LN58@soap_insta@14:

; 2640 : 		{	cp->ptr = (void*)new xsd__float[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T101493[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T101493[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101495[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T101495[ebp], 0
	je	SHORT $LN88@soap_insta@14
	mov	ecx, DWORD PTR $T101495[ebp]
	mov	edx, DWORD PTR $T101493[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1xsd__float@@UAE@XZ		; xsd__float::~xsd__float
	push	OFFSET ??0xsd__float@@QAE@XZ		; xsd__float::xsd__float
	mov	eax, DWORD PTR $T101493[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T101495[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T101495[ebp]
	add	edx, 4
	mov	DWORD PTR tv255[ebp], edx
	jmp	SHORT $LN89@soap_insta@14
$LN88@soap_insta@14:
	mov	DWORD PTR tv255[ebp], 0
$LN89@soap_insta@14:
	mov	eax, DWORD PTR tv255[ebp]
	mov	DWORD PTR $T101494[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101494[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2641 : 			if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN54@soap_insta@14

; 2642 : 				*size = n * sizeof(xsd__float);

	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN54@soap_insta@14:

; 2643 : 			for (int i = 0; i < n; i++)

	mov	DWORD PTR _i$89673[ebp], 0
	jmp	SHORT $LN53@soap_insta@14
$LN52@soap_insta@14:
	mov	eax, DWORD PTR _i$89673[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89673[ebp], eax
$LN53@soap_insta@14:
	mov	eax, DWORD PTR _i$89673[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN55@soap_insta@14

; 2644 : 				((xsd__float*)cp->ptr)[i].soap = soap;

	mov	eax, DWORD PTR _i$89673[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [edx+eax+8], ecx
	jmp	SHORT $LN52@soap_insta@14
$LN55@soap_insta@14:

; 2645 : 		}
; 2646 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN50@soap_insta@14
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN49@soap_insta@14
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN49@soap_insta@14:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN50@soap_insta@14
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89682[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$89682[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89682[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN50@soap_insta@14:

; 2647 : 		return (xsd__float*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
	jmp	$LN76@soap_insta@14
$LN59@soap_insta@14:

; 2648 : 	}
; 2649 : 	if (type && !soap_match_tag(soap, type, "xsd:int"))

	cmp	DWORD PTR _type$[ebp], 0
	je	$LN47@soap_insta@14
	push	OFFSET ??_C@_07PCIGPDP@xsd?3int?$AA@
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN47@soap_insta@14

; 2650 : 	{	cp->type = SOAP_TYPE_xsd__int;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [eax+8], 14			; 0000000eH

; 2651 : 		if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	$LN46@soap_insta@14

; 2652 : 		{	cp->ptr = (void*)new xsd__int;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101499[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T101499[ebp], 0
	je	SHORT $LN90@soap_insta@14
	mov	ecx, DWORD PTR $T101499[ebp]
	call	??0xsd__int@@QAE@XZ			; xsd__int::xsd__int
	mov	DWORD PTR tv304[ebp], eax
	jmp	SHORT $LN91@soap_insta@14
$LN90@soap_insta@14:
	mov	DWORD PTR tv304[ebp], 0
$LN91@soap_insta@14:
	mov	eax, DWORD PTR tv304[ebp]
	mov	DWORD PTR $T101498[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101498[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2653 : 			if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN45@soap_insta@14

; 2654 : 			{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 2655 : 				return NULL;

	xor	eax, eax
	jmp	$LN76@soap_insta@14
$LN45@soap_insta@14:

; 2656 : 			}
; 2657 : 			if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN44@soap_insta@14

; 2658 : 				*size = sizeof(xsd__int);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 16			; 00000010H
$LN44@soap_insta@14:

; 2659 : 			((xsd__int*)cp->ptr)->soap = soap;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 2660 : 		}
; 2661 : 		else

	jmp	$LN43@soap_insta@14
$LN46@soap_insta@14:

; 2662 : 		{	cp->ptr = (void*)new xsd__int[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T101502[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T101502[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101504[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T101504[ebp], 0
	je	SHORT $LN92@soap_insta@14
	mov	ecx, DWORD PTR $T101504[ebp]
	mov	edx, DWORD PTR $T101502[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1xsd__int@@UAE@XZ		; xsd__int::~xsd__int
	push	OFFSET ??0xsd__int@@QAE@XZ		; xsd__int::xsd__int
	mov	eax, DWORD PTR $T101502[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T101504[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T101504[ebp]
	add	edx, 4
	mov	DWORD PTR tv337[ebp], edx
	jmp	SHORT $LN93@soap_insta@14
$LN92@soap_insta@14:
	mov	DWORD PTR tv337[ebp], 0
$LN93@soap_insta@14:
	mov	eax, DWORD PTR tv337[ebp]
	mov	DWORD PTR $T101503[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101503[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2663 : 			if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN42@soap_insta@14

; 2664 : 				*size = n * sizeof(xsd__int);

	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN42@soap_insta@14:

; 2665 : 			for (int i = 0; i < n; i++)

	mov	DWORD PTR _i$89706[ebp], 0
	jmp	SHORT $LN41@soap_insta@14
$LN40@soap_insta@14:
	mov	eax, DWORD PTR _i$89706[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89706[ebp], eax
$LN41@soap_insta@14:
	mov	eax, DWORD PTR _i$89706[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN43@soap_insta@14

; 2666 : 				((xsd__int*)cp->ptr)[i].soap = soap;

	mov	eax, DWORD PTR _i$89706[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [edx+eax+8], ecx
	jmp	SHORT $LN40@soap_insta@14
$LN43@soap_insta@14:

; 2667 : 		}
; 2668 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN38@soap_insta@14
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN37@soap_insta@14
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN37@soap_insta@14:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN38@soap_insta@14
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89715[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$89715[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89715[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN38@soap_insta@14:

; 2669 : 		return (xsd__int*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
	jmp	$LN76@soap_insta@14
$LN47@soap_insta@14:

; 2670 : 	}
; 2671 : 	if (type && !soap_match_tag(soap, type, "xsd:long"))

	cmp	DWORD PTR _type$[ebp], 0
	je	$LN35@soap_insta@14
	push	OFFSET ??_C@_08PNDIDGIB@xsd?3long?$AA@
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN35@soap_insta@14

; 2672 : 	{	cp->type = SOAP_TYPE_xsd__long;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH

; 2673 : 		if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	$LN34@soap_insta@14

; 2674 : 		{	cp->ptr = (void*)new xsd__long;

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101508[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T101508[ebp], 0
	je	SHORT $LN94@soap_insta@14
	mov	ecx, DWORD PTR $T101508[ebp]
	call	??0xsd__long@@QAE@XZ			; xsd__long::xsd__long
	mov	DWORD PTR tv386[ebp], eax
	jmp	SHORT $LN95@soap_insta@14
$LN94@soap_insta@14:
	mov	DWORD PTR tv386[ebp], 0
$LN95@soap_insta@14:
	mov	eax, DWORD PTR tv386[ebp]
	mov	DWORD PTR $T101507[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101507[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2675 : 			if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN33@soap_insta@14

; 2676 : 			{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 2677 : 				return NULL;

	xor	eax, eax
	jmp	$LN76@soap_insta@14
$LN33@soap_insta@14:

; 2678 : 			}
; 2679 : 			if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN32@soap_insta@14

; 2680 : 				*size = sizeof(xsd__long);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 24			; 00000018H
$LN32@soap_insta@14:

; 2681 : 			((xsd__long*)cp->ptr)->soap = soap;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 2682 : 		}
; 2683 : 		else

	jmp	$LN31@soap_insta@14
$LN34@soap_insta@14:

; 2684 : 		{	cp->ptr = (void*)new xsd__long[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T101511[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T101511[ebp]
	mov	edx, 24					; 00000018H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101513[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	cmp	DWORD PTR $T101513[ebp], 0
	je	SHORT $LN96@soap_insta@14
	mov	ecx, DWORD PTR $T101513[ebp]
	mov	edx, DWORD PTR $T101511[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1xsd__long@@UAE@XZ		; xsd__long::~xsd__long
	push	OFFSET ??0xsd__long@@QAE@XZ		; xsd__long::xsd__long
	mov	eax, DWORD PTR $T101511[ebp]
	push	eax
	push	24					; 00000018H
	mov	ecx, DWORD PTR $T101513[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T101513[ebp]
	add	edx, 4
	mov	DWORD PTR tv451[ebp], edx
	jmp	SHORT $LN97@soap_insta@14
$LN96@soap_insta@14:
	mov	DWORD PTR tv451[ebp], 0
$LN97@soap_insta@14:
	mov	eax, DWORD PTR tv451[ebp]
	mov	DWORD PTR $T101512[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101512[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2685 : 			if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN30@soap_insta@14

; 2686 : 				*size = n * sizeof(xsd__long);

	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN30@soap_insta@14:

; 2687 : 			for (int i = 0; i < n; i++)

	mov	DWORD PTR _i$89739[ebp], 0
	jmp	SHORT $LN29@soap_insta@14
$LN28@soap_insta@14:
	mov	eax, DWORD PTR _i$89739[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89739[ebp], eax
$LN29@soap_insta@14:
	mov	eax, DWORD PTR _i$89739[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN31@soap_insta@14

; 2688 : 				((xsd__long*)cp->ptr)[i].soap = soap;

	mov	eax, DWORD PTR _i$89739[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [edx+eax+8], ecx
	jmp	SHORT $LN28@soap_insta@14
$LN31@soap_insta@14:

; 2689 : 		}
; 2690 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN26@soap_insta@14
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN25@soap_insta@14
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN25@soap_insta@14:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN26@soap_insta@14
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89748[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$89748[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89748[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN26@soap_insta@14:

; 2691 : 		return (xsd__long*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
	jmp	$LN76@soap_insta@14
$LN35@soap_insta@14:

; 2692 : 	}
; 2693 : 	if (type && !soap_match_tag(soap, type, "xsd:string"))

	cmp	DWORD PTR _type$[ebp], 0
	je	$LN23@soap_insta@14
	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_match_tag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN23@soap_insta@14

; 2694 : 	{	cp->type = SOAP_TYPE_xsd__string;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	DWORD PTR [eax+8], 17			; 00000011H

; 2695 : 		if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	$LN22@soap_insta@14

; 2696 : 		{	cp->ptr = (void*)new xsd__string;

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101517[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 8
	cmp	DWORD PTR $T101517[ebp], 0
	je	SHORT $LN98@soap_insta@14
	mov	ecx, DWORD PTR $T101517[ebp]
	call	??0xsd__string@@QAE@XZ			; xsd__string::xsd__string
	mov	DWORD PTR tv500[ebp], eax
	jmp	SHORT $LN99@soap_insta@14
$LN98@soap_insta@14:
	mov	DWORD PTR tv500[ebp], 0
$LN99@soap_insta@14:
	mov	eax, DWORD PTR tv500[ebp]
	mov	DWORD PTR $T101516[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101516[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2697 : 			if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN21@soap_insta@14

; 2698 : 			{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 2699 : 				return NULL;

	xor	eax, eax
	jmp	$LN76@soap_insta@14
$LN21@soap_insta@14:

; 2700 : 			}
; 2701 : 			if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN20@soap_insta@14

; 2702 : 				*size = sizeof(xsd__string);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 44			; 0000002cH
$LN20@soap_insta@14:

; 2703 : 			((xsd__string*)cp->ptr)->soap = soap;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 2704 : 		}
; 2705 : 		else

	jmp	$LN19@soap_insta@14
$LN22@soap_insta@14:

; 2706 : 		{	cp->ptr = (void*)new xsd__string[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T101520[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T101520[ebp]
	mov	edx, 44					; 0000002cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101522[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 9
	cmp	DWORD PTR $T101522[ebp], 0
	je	SHORT $LN100@soap_insta@14
	mov	ecx, DWORD PTR $T101522[ebp]
	mov	edx, DWORD PTR $T101520[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1xsd__string@@UAE@XZ		; xsd__string::~xsd__string
	push	OFFSET ??0xsd__string@@QAE@XZ		; xsd__string::xsd__string
	mov	eax, DWORD PTR $T101520[ebp]
	push	eax
	push	44					; 0000002cH
	mov	ecx, DWORD PTR $T101522[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T101522[ebp]
	add	edx, 4
	mov	DWORD PTR tv533[ebp], edx
	jmp	SHORT $LN101@soap_insta@14
$LN100@soap_insta@14:
	mov	DWORD PTR tv533[ebp], 0
$LN101@soap_insta@14:
	mov	eax, DWORD PTR tv533[ebp]
	mov	DWORD PTR $T101521[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101521[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2707 : 			if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN18@soap_insta@14

; 2708 : 				*size = n * sizeof(xsd__string);

	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN18@soap_insta@14:

; 2709 : 			for (int i = 0; i < n; i++)

	mov	DWORD PTR _i$89772[ebp], 0
	jmp	SHORT $LN17@soap_insta@14
$LN16@soap_insta@14:
	mov	eax, DWORD PTR _i$89772[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89772[ebp], eax
$LN17@soap_insta@14:
	mov	eax, DWORD PTR _i$89772[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN19@soap_insta@14

; 2710 : 				((xsd__string*)cp->ptr)[i].soap = soap;

	mov	eax, DWORD PTR _i$89772[ebp]
	imul	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [edx+eax+8], ecx
	jmp	SHORT $LN16@soap_insta@14
$LN19@soap_insta@14:

; 2711 : 		}
; 2712 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN14@soap_insta@14
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN13@soap_insta@14
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN13@soap_insta@14:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN14@soap_insta@14
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89781[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$89781[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89781[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@soap_insta@14:

; 2713 : 		return (xsd__string*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
	jmp	$LN76@soap_insta@14
$LN23@soap_insta@14:

; 2714 : 	}
; 2715 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN11@soap_insta@14

; 2716 : 	{	cp->ptr = (void*)new xsd__anyType;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101526[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 10		; 0000000aH
	cmp	DWORD PTR $T101526[ebp], 0
	je	SHORT $LN102@soap_insta@14
	mov	ecx, DWORD PTR $T101526[ebp]
	call	??0xsd__anyType@@QAE@XZ			; xsd__anyType::xsd__anyType
	mov	DWORD PTR tv575[ebp], eax
	jmp	SHORT $LN103@soap_insta@14
$LN102@soap_insta@14:
	mov	DWORD PTR tv575[ebp], 0
$LN103@soap_insta@14:
	mov	eax, DWORD PTR tv575[ebp]
	mov	DWORD PTR $T101525[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101525[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2717 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN10@soap_insta@14

; 2718 : 			*size = sizeof(xsd__anyType);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN10@soap_insta@14:

; 2719 : 		((xsd__anyType*)cp->ptr)->soap = soap;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 2720 : 	}
; 2721 : 	else

	jmp	$LN9@soap_insta@14
$LN11@soap_insta@14:

; 2722 : 	{	cp->ptr = (void*)new xsd__anyType[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T101529[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T101529[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101531[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 11		; 0000000bH
	cmp	DWORD PTR $T101531[ebp], 0
	je	SHORT $LN104@soap_insta@14
	mov	ecx, DWORD PTR $T101531[ebp]
	mov	edx, DWORD PTR $T101529[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1xsd__anyType@@UAE@XZ		; xsd__anyType::~xsd__anyType
	push	OFFSET ??0xsd__anyType@@QAE@XZ		; xsd__anyType::xsd__anyType
	mov	eax, DWORD PTR $T101529[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T101531[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T101531[ebp]
	add	edx, 4
	mov	DWORD PTR tv601[ebp], edx
	jmp	SHORT $LN105@soap_insta@14
$LN104@soap_insta@14:
	mov	DWORD PTR tv601[ebp], 0
$LN105@soap_insta@14:
	mov	eax, DWORD PTR tv601[ebp]
	mov	DWORD PTR $T101530[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101530[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2723 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@soap_insta@14

; 2724 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 2725 : 			return NULL;

	xor	eax, eax
	jmp	$LN76@soap_insta@14
$LN8@soap_insta@14:

; 2726 : 		}
; 2727 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@14

; 2728 : 			*size = n * sizeof(xsd__anyType);

	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN7@soap_insta@14:

; 2729 : 		for (int i = 0; i < n; i++)

	mov	DWORD PTR _i$89804[ebp], 0
	jmp	SHORT $LN6@soap_insta@14
$LN5@soap_insta@14:
	mov	eax, DWORD PTR _i$89804[ebp]
	add	eax, 1
	mov	DWORD PTR _i$89804[ebp], eax
$LN6@soap_insta@14:
	mov	eax, DWORD PTR _i$89804[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN9@soap_insta@14

; 2730 : 			((xsd__anyType*)cp->ptr)[i].soap = soap;

	mov	eax, DWORD PTR _i$89804[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [edx+eax+8], ecx
	jmp	SHORT $LN5@soap_insta@14
$LN9@soap_insta@14:

; 2731 : 	}
; 2732 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@14
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@14
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@14:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@14
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89813[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$89813[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89813[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@14:

; 2733 : 	return (xsd__anyType*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN76@soap_insta@14:

; 2734 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 740				; 000002e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$0:
	mov	eax, DWORD PTR $T101481[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$1:
	mov	eax, DWORD PTR $T101486[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$2:
	mov	eax, DWORD PTR $T101490[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$3:
	mov	eax, DWORD PTR $T101495[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$4:
	mov	eax, DWORD PTR $T101499[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$5:
	mov	eax, DWORD PTR $T101504[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$6:
	mov	eax, DWORD PTR $T101508[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$7:
	mov	eax, DWORD PTR $T101513[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$8:
	mov	eax, DWORD PTR $T101517[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$9:
	mov	eax, DWORD PTR $T101522[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$10:
	mov	eax, DWORD PTR $T101526[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z$11:
	mov	eax, DWORD PTR $T101531[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-744]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?soap_instantiate_xsd__anyType@@YAPAVxsd__anyType@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate_xsd__anyType
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??_Exsd__anyType@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Exsd__anyType@@UAEPAXI@Z PROC			; xsd__anyType::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@15
	push	OFFSET ??1xsd__anyType@@UAE@XZ		; xsd__anyType::~xsd__anyType
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@15
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@15:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@15
$LN3@vector@15:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1xsd__anyType@@UAE@XZ			; xsd__anyType::~xsd__anyType
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@15
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@15:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@15:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Exsd__anyType@@UAEPAXI@Z ENDP			; xsd__anyType::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0BP@BBDIBKNE@Copying?5xsd__anyType?5?$CFp?5?9?$DO?5?$CFp?6?$AA@ ; `string'
PUBLIC	?soap_copy_xsd__anyType@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy_xsd__anyType
;	COMDAT ??_C@_0BP@BBDIBKNE@Copying?5xsd__anyType?5?$CFp?5?9?$DO?5?$CFp?6?$AA@
CONST	SEGMENT
??_C@_0BP@BBDIBKNE@Copying?5xsd__anyType?5?$CFp?5?9?$DO?5?$CFp?6?$AA@ DB 'C'
	DB	'opying xsd__anyType %p -> %p', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy_xsd__anyType@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$89835 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy_xsd__anyType@@YAXPAUsoap@@HHPAXIPBXI@Z PROC	; soap_copy_xsd__anyType, COMDAT

; 2736 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2737 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyType %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@13
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@13
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@13:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@13
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89835[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BP@BBDIBKNE@Copying?5xsd__anyType?5?$CFp?5?9?$DO?5?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$89835[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89835[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@13:

; 2738 : 	*(xsd__anyType*)p = *(xsd__anyType*)q;

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	??4xsd__anyType@@QAEAAV0@ABV0@@Z

; 2739 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy_xsd__anyType@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP	; soap_copy_xsd__anyType
_TEXT	ENDS
PUBLIC	?soap_default_string@@YAXPAUsoap@@PAPAD@Z	; soap_default_string
PUBLIC	?soap_default__QName@@YAXPAUsoap@@PAPAD@Z	; soap_default__QName
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default_SOAP_ENV__Fault@@YAXPAUsoap@@PAUSOAP_ENV__Fault@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_default_SOAP_ENV__Fault@@YAXPAUsoap@@PAUSOAP_ENV__Fault@@@Z PROC ; soap_default_SOAP_ENV__Fault, COMDAT

; 2744 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2745 : 	(void)soap; (void)a; /* appease -Wall -Werror */
; 2746 : 	soap_default__QName(soap, &a->faultcode);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default__QName@@YAXPAUsoap@@PAPAD@Z ; soap_default__QName
	add	esp, 8

; 2747 : 	soap_default_string(soap, &a->faultstring);

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_string@@YAXPAUsoap@@PAPAD@Z ; soap_default_string
	add	esp, 8

; 2748 : 	soap_default_string(soap, &a->faultactor);

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_string@@YAXPAUsoap@@PAPAD@Z ; soap_default_string
	add	esp, 8

; 2749 : 	a->detail = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+12], 0

; 2750 : 	a->SOAP_ENV__Code = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+16], 0

; 2751 : 	a->SOAP_ENV__Reason = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+20], 0

; 2752 : 	soap_default_string(soap, &a->SOAP_ENV__Node);

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_string@@YAXPAUsoap@@PAPAD@Z ; soap_default_string
	add	esp, 8

; 2753 : 	soap_default_string(soap, &a->SOAP_ENV__Role);

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_string@@YAXPAUsoap@@PAPAD@Z ; soap_default_string
	add	esp, 8

; 2754 : 	a->SOAP_ENV__Detail = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+32], 0

; 2755 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_default_SOAP_ENV__Fault@@YAXPAUsoap@@PAUSOAP_ENV__Fault@@@Z ENDP ; soap_default_SOAP_ENV__Fault
_TEXT	ENDS
PUBLIC	?soap_serialize_PointerToSOAP_ENV__Reason@@YAXPAUsoap@@PBQAUSOAP_ENV__Reason@@@Z ; soap_serialize_PointerToSOAP_ENV__Reason
PUBLIC	?soap_serialize_PointerToSOAP_ENV__Code@@YAXPAUsoap@@PBQAUSOAP_ENV__Code@@@Z ; soap_serialize_PointerToSOAP_ENV__Code
PUBLIC	?soap_serialize_PointerToSOAP_ENV__Detail@@YAXPAUsoap@@PBQAUSOAP_ENV__Detail@@@Z ; soap_serialize_PointerToSOAP_ENV__Detail
PUBLIC	?soap_serialize__QName@@YAXPAUsoap@@PBQAD@Z	; soap_serialize__QName
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_serialize_SOAP_ENV__Fault@@YAXPAUsoap@@PBUSOAP_ENV__Fault@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize_SOAP_ENV__Fault@@YAXPAUsoap@@PBUSOAP_ENV__Fault@@@Z PROC ; soap_serialize_SOAP_ENV__Fault, COMDAT

; 2758 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2759 : 	(void)soap; (void)a; /* appease -Wall -Werror */
; 2760 : 	soap_serialize__QName(soap, &a->faultcode);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize__QName@@YAXPAUsoap@@PBQAD@Z ; soap_serialize__QName
	add	esp, 8

; 2761 : 	soap_serialize_string(soap, &a->faultstring);

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_string@@YAXPAUsoap@@PBQAD@Z ; soap_serialize_string
	add	esp, 8

; 2762 : 	soap_serialize_string(soap, &a->faultactor);

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_string@@YAXPAUsoap@@PBQAD@Z ; soap_serialize_string
	add	esp, 8

; 2763 : 	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_PointerToSOAP_ENV__Detail@@YAXPAUsoap@@PBQAUSOAP_ENV__Detail@@@Z ; soap_serialize_PointerToSOAP_ENV__Detail
	add	esp, 8

; 2764 : 	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_PointerToSOAP_ENV__Code@@YAXPAUsoap@@PBQAUSOAP_ENV__Code@@@Z ; soap_serialize_PointerToSOAP_ENV__Code
	add	esp, 8

; 2765 : 	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_PointerToSOAP_ENV__Reason@@YAXPAUsoap@@PBQAUSOAP_ENV__Reason@@@Z ; soap_serialize_PointerToSOAP_ENV__Reason
	add	esp, 8

; 2766 : 	soap_serialize_string(soap, &a->SOAP_ENV__Node);

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_string@@YAXPAUsoap@@PBQAD@Z ; soap_serialize_string
	add	esp, 8

; 2767 : 	soap_serialize_string(soap, &a->SOAP_ENV__Role);

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_string@@YAXPAUsoap@@PBQAD@Z ; soap_serialize_string
	add	esp, 8

; 2768 : 	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_PointerToSOAP_ENV__Detail@@YAXPAUsoap@@PBQAUSOAP_ENV__Detail@@@Z ; soap_serialize_PointerToSOAP_ENV__Detail
	add	esp, 8

; 2769 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize_SOAP_ENV__Fault@@YAXPAUsoap@@PBUSOAP_ENV__Fault@@@Z ENDP ; soap_serialize_SOAP_ENV__Fault
_TEXT	ENDS
PUBLIC	?soap_out_SOAP_ENV__Fault@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Fault@@1@Z ; soap_out_SOAP_ENV__Fault
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_SOAP_ENV__Fault@@YAHPAUsoap@@PBUSOAP_ENV__Fault@@PBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_SOAP_ENV__Fault@@YAHPAUsoap@@PBUSOAP_ENV__Fault@@PBD2@Z PROC ; soap_put_SOAP_ENV__Fault, COMDAT

; 2772 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2773 : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);

	push	47					; 0000002fH
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 2774 : 	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_SOAP_ENV__Fault@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Fault@@1@Z ; soap_out_SOAP_ENV__Fault
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_S

; 2775 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_S
$LN1@soap_put_S:

; 2776 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_S:

; 2777 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_SOAP_ENV__Fault@@YAHPAUsoap@@PBUSOAP_ENV__Fault@@PBD2@Z ENDP ; soap_put_SOAP_ENV__Fault
_TEXT	ENDS
PUBLIC	??_C@_0BA@OENGLDCF@SOAP?9ENV?3Detail?$AA@	; `string'
PUBLIC	??_C@_0O@LDCPDKLC@SOAP?9ENV?3Role?$AA@		; `string'
PUBLIC	??_C@_0O@BICMBBIJ@SOAP?9ENV?3Node?$AA@		; `string'
PUBLIC	?soap_out_PointerToSOAP_ENV__Reason@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Reason@@1@Z ; soap_out_PointerToSOAP_ENV__Reason
PUBLIC	??_C@_0BA@IEHDIDAH@SOAP?9ENV?3Reason?$AA@	; `string'
PUBLIC	?soap_out_PointerToSOAP_ENV__Code@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Code@@1@Z ; soap_out_PointerToSOAP_ENV__Code
PUBLIC	??_C@_0O@OALMNFDI@SOAP?9ENV?3Code?$AA@		; `string'
PUBLIC	?soap_out_PointerToSOAP_ENV__Detail@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Detail@@1@Z ; soap_out_PointerToSOAP_ENV__Detail
PUBLIC	??_C@_06EENFNEPD@detail?$AA@			; `string'
PUBLIC	??_C@_0L@JAIOMLLA@faultactor?$AA@		; `string'
PUBLIC	??_C@_0M@LAMIIPIL@faultstring?$AA@		; `string'
PUBLIC	?soap_out__QName@@YAHPAUsoap@@PBDHPBQAD1@Z	; soap_out__QName
PUBLIC	??_C@_09FJACJGDN@faultcode?$AA@			; `string'
EXTRN	_soap_QName2s:PROC
;	COMDAT ??_C@_0BA@OENGLDCF@SOAP?9ENV?3Detail?$AA@
CONST	SEGMENT
??_C@_0BA@OENGLDCF@SOAP?9ENV?3Detail?$AA@ DB 'SOAP-ENV:Detail', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LDCPDKLC@SOAP?9ENV?3Role?$AA@
CONST	SEGMENT
??_C@_0O@LDCPDKLC@SOAP?9ENV?3Role?$AA@ DB 'SOAP-ENV:Role', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BICMBBIJ@SOAP?9ENV?3Node?$AA@
CONST	SEGMENT
??_C@_0O@BICMBBIJ@SOAP?9ENV?3Node?$AA@ DB 'SOAP-ENV:Node', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IEHDIDAH@SOAP?9ENV?3Reason?$AA@
CONST	SEGMENT
??_C@_0BA@IEHDIDAH@SOAP?9ENV?3Reason?$AA@ DB 'SOAP-ENV:Reason', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OALMNFDI@SOAP?9ENV?3Code?$AA@
CONST	SEGMENT
??_C@_0O@OALMNFDI@SOAP?9ENV?3Code?$AA@ DB 'SOAP-ENV:Code', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EENFNEPD@detail?$AA@
CONST	SEGMENT
??_C@_06EENFNEPD@detail?$AA@ DB 'detail', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JAIOMLLA@faultactor?$AA@
CONST	SEGMENT
??_C@_0L@JAIOMLLA@faultactor?$AA@ DB 'faultactor', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LAMIIPIL@faultstring?$AA@
CONST	SEGMENT
??_C@_0M@LAMIIPIL@faultstring?$AA@ DB 'faultstring', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FJACJGDN@faultcode?$AA@
CONST	SEGMENT
??_C@_09FJACJGDN@faultcode?$AA@ DB 'faultcode', 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_out_SOAP_ENV__Fault@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Fault@@1@Z
_TEXT	SEGMENT
_soap_tmp_faultcode$ = -8				; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_SOAP_ENV__Fault@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Fault@@1@Z PROC ; soap_out_SOAP_ENV__Fault, COMDAT

; 2780 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2781 : 	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_QName2s
	add	esp, 8
	mov	DWORD PTR _soap_tmp_faultcode$[ebp], eax

; 2782 : 	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	47					; 0000002fH
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_embedded_id
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_begin_out
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN10@soap_out_S

; 2783 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	$LN11@soap_out_S
$LN10@soap_out_S:

; 2784 : 	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	eax, DWORD PTR _soap_tmp_faultcode$[ebp]
	push	eax
	push	-1
	push	OFFSET ??_C@_09FJACJGDN@faultcode?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out__QName@@YAHPAUsoap@@PBDHPBQAD1@Z ; soap_out__QName
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN9@soap_out_S

; 2785 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	$LN11@soap_out_S
$LN9@soap_out_S:

; 2786 : 	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 4
	push	eax
	push	-1
	push	OFFSET ??_C@_0M@LAMIIPIL@faultstring?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_string@@YAHPAUsoap@@PBDHPBQAD1@Z ; soap_out_string
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN8@soap_out_S

; 2787 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	$LN11@soap_out_S
$LN8@soap_out_S:

; 2788 : 	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 8
	push	eax
	push	-1
	push	OFFSET ??_C@_0L@JAIOMLLA@faultactor?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_string@@YAHPAUsoap@@PBDHPBQAD1@Z ; soap_out_string
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN7@soap_out_S

; 2789 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	$LN11@soap_out_S
$LN7@soap_out_S:

; 2790 : 	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	-1
	push	OFFSET ??_C@_06EENFNEPD@detail?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerToSOAP_ENV__Detail@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Detail@@1@Z ; soap_out_PointerToSOAP_ENV__Detail
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN6@soap_out_S

; 2791 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	$LN11@soap_out_S
$LN6@soap_out_S:

; 2792 : 	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	push	-1
	push	OFFSET ??_C@_0O@OALMNFDI@SOAP?9ENV?3Code?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerToSOAP_ENV__Code@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Code@@1@Z ; soap_out_PointerToSOAP_ENV__Code
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN5@soap_out_S

; 2793 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	$LN11@soap_out_S
$LN5@soap_out_S:

; 2794 : 	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	push	-1
	push	OFFSET ??_C@_0BA@IEHDIDAH@SOAP?9ENV?3Reason?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerToSOAP_ENV__Reason@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Reason@@1@Z ; soap_out_PointerToSOAP_ENV__Reason
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN4@soap_out_S

; 2795 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	$LN11@soap_out_S
$LN4@soap_out_S:

; 2796 : 	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	push	-1
	push	OFFSET ??_C@_0O@BICMBBIJ@SOAP?9ENV?3Node?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_string@@YAHPAUsoap@@PBDHPBQAD1@Z ; soap_out_string
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN3@soap_out_S

; 2797 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN11@soap_out_S
$LN3@soap_out_S:

; 2798 : 	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	push	-1
	push	OFFSET ??_C@_0O@LDCPDKLC@SOAP?9ENV?3Role?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_string@@YAHPAUsoap@@PBDHPBQAD1@Z ; soap_out_string
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN2@soap_out_S

; 2799 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN11@soap_out_S
$LN2@soap_out_S:

; 2800 : 	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	push	-1
	push	OFFSET ??_C@_0BA@OENGLDCF@SOAP?9ENV?3Detail?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerToSOAP_ENV__Detail@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Detail@@1@Z ; soap_out_PointerToSOAP_ENV__Detail
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_out_S

; 2801 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN11@soap_out_S
$LN1@soap_out_S:

; 2802 : 	return soap_element_end_out(soap, tag);

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_out
	add	esp, 8
$LN11@soap_out_S:

; 2803 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@soap_out_S
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN15@soap_out_S:
	DD	1
	DD	$LN14@soap_out_S
$LN14@soap_out_S:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN13@soap_out_S
$LN13@soap_out_S:
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
?soap_out_SOAP_ENV__Fault@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Fault@@1@Z ENDP ; soap_out_SOAP_ENV__Fault
_TEXT	ENDS
PUBLIC	?soap_in_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@PBDPAU1@1@Z ; soap_in_SOAP_ENV__Fault
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@PAU1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@PAU1@PBD2@Z PROC ; soap_get_SOAP_ENV__Fault, COMDAT

; 2806 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2807 : 	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@PBDPAU1@1@Z ; soap_in_SOAP_ENV__Fault
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_S@7

; 2808 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_S@7

; 2809 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_S@7
$LN2@soap_get_S@7:

; 2810 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_S@7:

; 2811 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@PAU1@PBD2@Z ENDP ; soap_get_SOAP_ENV__Fault
_TEXT	ENDS
PUBLIC	?soap_in_PointerToSOAP_ENV__Reason@@YAPAPAUSOAP_ENV__Reason@@PAUsoap@@PBDPAPAU1@1@Z ; soap_in_PointerToSOAP_ENV__Reason
PUBLIC	?soap_in_PointerToSOAP_ENV__Code@@YAPAPAUSOAP_ENV__Code@@PAUsoap@@PBDPAPAU1@1@Z ; soap_in_PointerToSOAP_ENV__Code
PUBLIC	?soap_in_PointerToSOAP_ENV__Detail@@YAPAPAUSOAP_ENV__Detail@@PAUsoap@@PBDPAPAU1@1@Z ; soap_in_PointerToSOAP_ENV__Detail
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@PBDPAU1@1@Z
_TEXT	SEGMENT
_soap_flag_SOAP_ENV__Detail$ = -104			; size = 4
_soap_flag_SOAP_ENV__Role$ = -92			; size = 4
_soap_flag_SOAP_ENV__Node$ = -80			; size = 4
_soap_flag_SOAP_ENV__Reason$ = -68			; size = 4
_soap_flag_SOAP_ENV__Code$ = -56			; size = 4
_soap_flag_detail$ = -44				; size = 4
_soap_flag_faultactor$ = -32				; size = 4
_soap_flag_faultstring$ = -20				; size = 4
_soap_flag_faultcode$ = -8				; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@PBDPAU1@1@Z PROC ; soap_in_SOAP_ENV__Fault, COMDAT

; 2814 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2815 : 	size_t soap_flag_faultcode = 1;

	mov	DWORD PTR _soap_flag_faultcode$[ebp], 1

; 2816 : 	size_t soap_flag_faultstring = 1;

	mov	DWORD PTR _soap_flag_faultstring$[ebp], 1

; 2817 : 	size_t soap_flag_faultactor = 1;

	mov	DWORD PTR _soap_flag_faultactor$[ebp], 1

; 2818 : 	size_t soap_flag_detail = 1;

	mov	DWORD PTR _soap_flag_detail$[ebp], 1

; 2819 : 	size_t soap_flag_SOAP_ENV__Code = 1;

	mov	DWORD PTR _soap_flag_SOAP_ENV__Code$[ebp], 1

; 2820 : 	size_t soap_flag_SOAP_ENV__Reason = 1;

	mov	DWORD PTR _soap_flag_SOAP_ENV__Reason$[ebp], 1

; 2821 : 	size_t soap_flag_SOAP_ENV__Node = 1;

	mov	DWORD PTR _soap_flag_SOAP_ENV__Node$[ebp], 1

; 2822 : 	size_t soap_flag_SOAP_ENV__Role = 1;

	mov	DWORD PTR _soap_flag_SOAP_ENV__Role$[ebp], 1

; 2823 : 	size_t soap_flag_SOAP_ENV__Detail = 1;

	mov	DWORD PTR _soap_flag_SOAP_ENV__Detail$[ebp], 1

; 2824 : 	if (soap_element_begin_in(soap, tag, 0, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN34@soap_in_SO

; 2825 : 		return NULL;

	xor	eax, eax
	jmp	$LN35@soap_in_SO
$LN34@soap_in_SO:

; 2826 : 	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	push	0
	push	36					; 00000024H
	push	47					; 0000002fH
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 81076				; 00013cb4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_enter
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 2827 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN33@soap_in_SO

; 2828 : 		return NULL;

	xor	eax, eax
	jmp	$LN35@soap_in_SO
$LN33@soap_in_SO:

; 2829 : 	soap_default_SOAP_ENV__Fault(soap, a);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_SOAP_ENV__Fault@@YAXPAUsoap@@PAUSOAP_ENV__Fault@@@Z ; soap_default_SOAP_ENV__Fault
	add	esp, 8

; 2830 : 	if (soap->body && !*soap->href)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	$LN32@soap_in_SO
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	test	ecx, ecx
	jne	$LN32@soap_in_SO
$LN31@soap_in_SO:

; 2831 : 	{
; 2832 : 		for (;;)
; 2833 : 		{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 2834 : 			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))

	cmp	DWORD PTR _soap_flag_faultcode$[ebp], 0
	je	SHORT $LN29@soap_in_SO
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	je	SHORT $LN28@soap_in_SO
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN29@soap_in_SO
$LN28@soap_in_SO:

; 2835 : 				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	push	OFFSET ??_C@_09FJACJGDN@faultcode?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in__QName@@YAPAPADPAUsoap@@PBDPAPAD1@Z ; soap_in__QName
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN29@soap_in_SO

; 2836 : 				{	soap_flag_faultcode--;

	mov	eax, DWORD PTR _soap_flag_faultcode$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_faultcode$[ebp], eax

; 2837 : 					continue;

	jmp	SHORT $LN31@soap_in_SO
$LN29@soap_in_SO:

; 2838 : 				}
; 2839 : 			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))

	cmp	DWORD PTR _soap_flag_faultstring$[ebp], 0
	je	SHORT $LN26@soap_in_SO
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	je	SHORT $LN25@soap_in_SO
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN26@soap_in_SO
$LN25@soap_in_SO:

; 2840 : 				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_0M@LAMIIPIL@faultstring?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_string@@YAPAPADPAUsoap@@PBDPAPAD1@Z ; soap_in_string
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN26@soap_in_SO

; 2841 : 				{	soap_flag_faultstring--;

	mov	eax, DWORD PTR _soap_flag_faultstring$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_faultstring$[ebp], eax

; 2842 : 					continue;

	jmp	$LN31@soap_in_SO
$LN26@soap_in_SO:

; 2843 : 				}
; 2844 : 			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))

	cmp	DWORD PTR _soap_flag_faultactor$[ebp], 0
	je	SHORT $LN23@soap_in_SO
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	je	SHORT $LN22@soap_in_SO
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN23@soap_in_SO
$LN22@soap_in_SO:

; 2845 : 				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_0L@JAIOMLLA@faultactor?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_string@@YAPAPADPAUsoap@@PBDPAPAD1@Z ; soap_in_string
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN23@soap_in_SO

; 2846 : 				{	soap_flag_faultactor--;

	mov	eax, DWORD PTR _soap_flag_faultactor$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_faultactor$[ebp], eax

; 2847 : 					continue;

	jmp	$LN31@soap_in_SO
$LN23@soap_in_SO:

; 2848 : 				}
; 2849 : 			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)

	cmp	DWORD PTR _soap_flag_detail$[ebp], 0
	je	SHORT $LN20@soap_in_SO
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN20@soap_in_SO

; 2850 : 				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_06EENFNEPD@detail?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_PointerToSOAP_ENV__Detail@@YAPAPAUSOAP_ENV__Detail@@PAUsoap@@PBDPAPAU1@1@Z ; soap_in_PointerToSOAP_ENV__Detail
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN20@soap_in_SO

; 2851 : 				{	soap_flag_detail--;

	mov	eax, DWORD PTR _soap_flag_detail$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_detail$[ebp], eax

; 2852 : 					continue;

	jmp	$LN31@soap_in_SO
$LN20@soap_in_SO:

; 2853 : 				}
; 2854 : 			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)

	cmp	DWORD PTR _soap_flag_SOAP_ENV__Code$[ebp], 0
	je	SHORT $LN18@soap_in_SO
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN18@soap_in_SO

; 2855 : 				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_0O@OALMNFDI@SOAP?9ENV?3Code?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_PointerToSOAP_ENV__Code@@YAPAPAUSOAP_ENV__Code@@PAUsoap@@PBDPAPAU1@1@Z ; soap_in_PointerToSOAP_ENV__Code
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN18@soap_in_SO

; 2856 : 				{	soap_flag_SOAP_ENV__Code--;

	mov	eax, DWORD PTR _soap_flag_SOAP_ENV__Code$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_SOAP_ENV__Code$[ebp], eax

; 2857 : 					continue;

	jmp	$LN31@soap_in_SO
$LN18@soap_in_SO:

; 2858 : 				}
; 2859 : 			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)

	cmp	DWORD PTR _soap_flag_SOAP_ENV__Reason$[ebp], 0
	je	SHORT $LN16@soap_in_SO
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN16@soap_in_SO

; 2860 : 				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	push	OFFSET ??_C@_0BA@IEHDIDAH@SOAP?9ENV?3Reason?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_PointerToSOAP_ENV__Reason@@YAPAPAUSOAP_ENV__Reason@@PAUsoap@@PBDPAPAU1@1@Z ; soap_in_PointerToSOAP_ENV__Reason
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN16@soap_in_SO

; 2861 : 				{	soap_flag_SOAP_ENV__Reason--;

	mov	eax, DWORD PTR _soap_flag_SOAP_ENV__Reason$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_SOAP_ENV__Reason$[ebp], eax

; 2862 : 					continue;

	jmp	$LN31@soap_in_SO
$LN16@soap_in_SO:

; 2863 : 				}
; 2864 : 			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))

	cmp	DWORD PTR _soap_flag_SOAP_ENV__Node$[ebp], 0
	je	SHORT $LN14@soap_in_SO
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	je	SHORT $LN13@soap_in_SO
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN14@soap_in_SO
$LN13@soap_in_SO:

; 2865 : 				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	push	OFFSET ??_C@_0O@BICMBBIJ@SOAP?9ENV?3Node?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_string@@YAPAPADPAUsoap@@PBDPAPAD1@Z ; soap_in_string
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN14@soap_in_SO

; 2866 : 				{	soap_flag_SOAP_ENV__Node--;

	mov	eax, DWORD PTR _soap_flag_SOAP_ENV__Node$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_SOAP_ENV__Node$[ebp], eax

; 2867 : 					continue;

	jmp	$LN31@soap_in_SO
$LN14@soap_in_SO:

; 2868 : 				}
; 2869 : 			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))

	cmp	DWORD PTR _soap_flag_SOAP_ENV__Role$[ebp], 0
	je	SHORT $LN11@soap_in_SO
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	je	SHORT $LN10@soap_in_SO
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN11@soap_in_SO
$LN10@soap_in_SO:

; 2870 : 				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	push	OFFSET ??_C@_0O@LDCPDKLC@SOAP?9ENV?3Role?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_string@@YAPAPADPAUsoap@@PBDPAPAD1@Z ; soap_in_string
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN11@soap_in_SO

; 2871 : 				{	soap_flag_SOAP_ENV__Role--;

	mov	eax, DWORD PTR _soap_flag_SOAP_ENV__Role$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_SOAP_ENV__Role$[ebp], eax

; 2872 : 					continue;

	jmp	$LN31@soap_in_SO
$LN11@soap_in_SO:

; 2873 : 				}
; 2874 : 			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)

	cmp	DWORD PTR _soap_flag_SOAP_ENV__Detail$[ebp], 0
	je	SHORT $LN8@soap_in_SO
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN8@soap_in_SO

; 2875 : 				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	push	OFFSET ??_C@_0BA@OENGLDCF@SOAP?9ENV?3Detail?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_PointerToSOAP_ENV__Detail@@YAPAPAUSOAP_ENV__Detail@@PAUsoap@@PBDPAPAU1@1@Z ; soap_in_PointerToSOAP_ENV__Detail
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN8@soap_in_SO

; 2876 : 				{	soap_flag_SOAP_ENV__Detail--;

	mov	eax, DWORD PTR _soap_flag_SOAP_ENV__Detail$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_SOAP_ENV__Detail$[ebp], eax

; 2877 : 					continue;

	jmp	$LN31@soap_in_SO
$LN8@soap_in_SO:

; 2878 : 				}
; 2879 : 			if (soap->error == SOAP_TAG_MISMATCH)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN6@soap_in_SO

; 2880 : 				soap->error = soap_ignore_element(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_ignore_element@@YAHPAUsoap@@@Z	; soap_ignore_element
	add	esp, 4
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+90460], eax
$LN6@soap_in_SO:

; 2881 : 			if (soap->error == SOAP_NO_TAG)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN5@soap_in_SO

; 2882 : 				break;

	jmp	SHORT $LN30@soap_in_SO
$LN5@soap_in_SO:

; 2883 : 			if (soap->error)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 0
	je	SHORT $LN4@soap_in_SO

; 2884 : 				return NULL;

	xor	eax, eax
	jmp	SHORT $LN35@soap_in_SO
$LN4@soap_in_SO:

; 2885 : 		}

	jmp	$LN31@soap_in_SO
$LN30@soap_in_SO:

; 2886 : 		if (soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@soap_in_SO

; 2887 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN35@soap_in_SO
$LN3@soap_in_SO:

; 2888 : 	}
; 2889 : 	else

	jmp	SHORT $LN2@soap_in_SO
$LN32@soap_in_SO:

; 2890 : 	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);

	push	0
	push	0
	push	36					; 00000024H
	push	0
	push	47					; 0000002fH
	push	0
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_forward
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 2891 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN2@soap_in_SO
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_in_SO

; 2892 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN35@soap_in_SO
$LN2@soap_in_SO:

; 2893 : 	}
; 2894 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN35@soap_in_SO:

; 2895 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@PBDPAU1@1@Z ENDP ; soap_in_SOAP_ENV__Fault
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_new_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@H@Z PROC ; soap_new_SOAP_ENV__Fault, COMDAT

; 2898 : {	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_SOAP_ENV__Fault
	add	esp, 20					; 00000014H

; 2899 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@H@Z ENDP ; soap_new_SOAP_ENV__Fault
_TEXT	ENDS
PUBLIC	?soap_delete_SOAP_ENV__Fault@@YAXPAUsoap@@PAUSOAP_ENV__Fault@@@Z ; soap_delete_SOAP_ENV__Fault
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete_SOAP_ENV__Fault@@YAXPAUsoap@@PAUSOAP_ENV__Fault@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete_SOAP_ENV__Fault@@YAXPAUsoap@@PAUSOAP_ENV__Fault@@@Z PROC ; soap_delete_SOAP_ENV__Fault, COMDAT

; 2902 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 2903 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete_SOAP_ENV__Fault@@YAXPAUsoap@@PAUSOAP_ENV__Fault@@@Z ENDP ; soap_delete_SOAP_ENV__Fault
_TEXT	ENDS
PUBLIC	??_C@_0CO@PBBFPBFI@soap_instantiate_SOAP_ENV__Fault@ ; `string'
;	COMDAT ??_C@_0CO@PBBFPBFI@soap_instantiate_SOAP_ENV__Fault@
CONST	SEGMENT
??_C@_0CO@PBBFPBFI@soap_instantiate_SOAP_ENV__Fault@ DB 'soap_instantiate'
	DB	'_SOAP_ENV__Fault(%d, %s, %s)', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_instantiate_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -260						; size = 4
tv77 = -256						; size = 4
$T101590 = -248						; size = 4
$T101591 = -236						; size = 4
_fdebug$89991 = -32					; size = 4
_cp$ = -20						; size = 4
_fdebug$89970 = -8					; size = 4
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate_SOAP_ENV__Fault, COMDAT

; 2906 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2907 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN12@soap_insta@15
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN11@soap_insta@15
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN11@soap_insta@15:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN12@soap_insta@15
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89970[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN15@soap_insta@15
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN16@soap_insta@15
$LN15@soap_insta@15:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN16@soap_insta@15:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN17@soap_insta@15
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN18@soap_insta@15
$LN17@soap_insta@15:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN18@soap_insta@15:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CO@PBBFPBFI@soap_instantiate_SOAP_ENV__Fault@
	mov	edx, DWORD PTR _fdebug$89970[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89970[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@soap_insta@15:

; 2908 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	47					; 0000002fH
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 2909 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN9@soap_insta@15

; 2910 : 		return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@15
$LN9@soap_insta@15:

; 2911 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN8@soap_insta@15

; 2912 : 	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101590[ebp], eax
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR $T101590[ebp]
	mov	DWORD PTR [eax+4], ecx

; 2913 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@15

; 2914 : 			*size = sizeof(struct SOAP_ENV__Fault);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 36			; 00000024H
$LN7@soap_insta@15:

; 2915 : 	}
; 2916 : 	else

	jmp	SHORT $LN6@soap_insta@15
$LN8@soap_insta@15:

; 2917 : 	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];

	xor	ecx, ecx
	mov	eax, DWORD PTR _n$[ebp]
	mov	edx, 36					; 00000024H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101591[ebp], eax
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR $T101591[ebp]
	mov	DWORD PTR [eax+4], ecx

; 2918 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@soap_insta@15

; 2919 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 2920 : 			return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@15
$LN5@soap_insta@15:

; 2921 : 		}
; 2922 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN6@soap_insta@15

; 2923 : 			*size = n * sizeof(struct SOAP_ENV__Fault);

	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN6@soap_insta@15:

; 2924 : 	}
; 2925 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@15
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@15
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@15:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@15
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$89991[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$89991[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$89991[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@15:

; 2926 : 	return (struct SOAP_ENV__Fault*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN13@soap_insta@15:

; 2927 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_instantiate_SOAP_ENV__Fault@@YAPAUSOAP_ENV__Fault@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate_SOAP_ENV__Fault
_TEXT	ENDS
PUBLIC	??_C@_0CJ@IMBCGMHP@Copying?5struct?5SOAP_ENV__Fault?5?$CF@ ; `string'
PUBLIC	?soap_copy_SOAP_ENV__Fault@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy_SOAP_ENV__Fault
;	COMDAT ??_C@_0CJ@IMBCGMHP@Copying?5struct?5SOAP_ENV__Fault?5?$CF@
CONST	SEGMENT
??_C@_0CJ@IMBCGMHP@Copying?5struct?5SOAP_ENV__Fault?5?$CF@ DB 'Copying st'
	DB	'ruct SOAP_ENV__Fault %p -> %p', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy_SOAP_ENV__Fault@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$90006 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy_SOAP_ENV__Fault@@YAXPAUsoap@@HHPAXIPBXI@Z PROC ; soap_copy_SOAP_ENV__Fault, COMDAT

; 2929 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2930 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@14
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@14
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@14:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@14
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90006[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CJ@IMBCGMHP@Copying?5struct?5SOAP_ENV__Fault?5?$CF@
	mov	edx, DWORD PTR _fdebug$90006[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90006[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@14:

; 2931 : 	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;

	mov	esi, DWORD PTR _q$[ebp]
	mov	ecx, 9
	mov	edi, DWORD PTR _p$[ebp]
	rep movsd

; 2932 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy_SOAP_ENV__Fault@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP ; soap_copy_SOAP_ENV__Fault
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_default_SOAP_ENV__Reason@@YAXPAUsoap@@PAUSOAP_ENV__Reason@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_default_SOAP_ENV__Reason@@YAXPAUsoap@@PAUSOAP_ENV__Reason@@@Z PROC ; soap_default_SOAP_ENV__Reason, COMDAT

; 2939 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2940 : 	(void)soap; (void)a; /* appease -Wall -Werror */
; 2941 : 	soap_default_string(soap, &a->SOAP_ENV__Text);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_string@@YAXPAUsoap@@PAPAD@Z ; soap_default_string
	add	esp, 8

; 2942 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_default_SOAP_ENV__Reason@@YAXPAUsoap@@PAUSOAP_ENV__Reason@@@Z ENDP ; soap_default_SOAP_ENV__Reason
_TEXT	ENDS
PUBLIC	?soap_serialize_SOAP_ENV__Reason@@YAXPAUsoap@@PBUSOAP_ENV__Reason@@@Z ; soap_serialize_SOAP_ENV__Reason
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_serialize_SOAP_ENV__Reason@@YAXPAUsoap@@PBUSOAP_ENV__Reason@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize_SOAP_ENV__Reason@@YAXPAUsoap@@PBUSOAP_ENV__Reason@@@Z PROC ; soap_serialize_SOAP_ENV__Reason, COMDAT

; 2945 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2946 : 	(void)soap; (void)a; /* appease -Wall -Werror */
; 2947 : 	soap_serialize_string(soap, &a->SOAP_ENV__Text);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_string@@YAXPAUsoap@@PBQAD@Z ; soap_serialize_string
	add	esp, 8

; 2948 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize_SOAP_ENV__Reason@@YAXPAUsoap@@PBUSOAP_ENV__Reason@@@Z ENDP ; soap_serialize_SOAP_ENV__Reason
_TEXT	ENDS
PUBLIC	?soap_out_SOAP_ENV__Reason@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Reason@@1@Z ; soap_out_SOAP_ENV__Reason
PUBLIC	?soap_put_SOAP_ENV__Reason@@YAHPAUsoap@@PBUSOAP_ENV__Reason@@PBD2@Z ; soap_put_SOAP_ENV__Reason
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_SOAP_ENV__Reason@@YAHPAUsoap@@PBUSOAP_ENV__Reason@@PBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_SOAP_ENV__Reason@@YAHPAUsoap@@PBUSOAP_ENV__Reason@@PBD2@Z PROC ; soap_put_SOAP_ENV__Reason, COMDAT

; 2951 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2952 : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);

	push	46					; 0000002eH
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 2953 : 	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_SOAP_ENV__Reason@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Reason@@1@Z ; soap_out_SOAP_ENV__Reason
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_S@2

; 2954 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_S@2
$LN1@soap_put_S@2:

; 2955 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_S@2:

; 2956 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_SOAP_ENV__Reason@@YAHPAUsoap@@PBUSOAP_ENV__Reason@@PBD2@Z ENDP ; soap_put_SOAP_ENV__Reason
_TEXT	ENDS
PUBLIC	??_C@_0O@BLCEAHMK@SOAP?9ENV?3Text?$AA@		; `string'
;	COMDAT ??_C@_0O@BLCEAHMK@SOAP?9ENV?3Text?$AA@
CONST	SEGMENT
??_C@_0O@BLCEAHMK@SOAP?9ENV?3Text?$AA@ DB 'SOAP-ENV:Text', 00H ; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_out_SOAP_ENV__Reason@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Reason@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_SOAP_ENV__Reason@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Reason@@1@Z PROC ; soap_out_SOAP_ENV__Reason, COMDAT

; 2959 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2960 : 	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	46					; 0000002eH
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_embedded_id
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_begin_out
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN2@soap_out_S@2

; 2961 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN3@soap_out_S@2
$LN2@soap_out_S@2:

; 2962 : 	/*
; 2963 : 	if (soap->lang)
; 2964 : 		soap_set_attr(soap, "xml:lang", soap->lang);*/
; 2965 : 	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	push	-1
	push	OFFSET ??_C@_0O@BLCEAHMK@SOAP?9ENV?3Text?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_string@@YAHPAUsoap@@PBDHPBQAD1@Z ; soap_out_string
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_out_S@2

; 2966 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN3@soap_out_S@2
$LN1@soap_out_S@2:

; 2967 : 	return soap_element_end_out(soap, tag);

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_out
	add	esp, 8
$LN3@soap_out_S@2:

; 2968 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_SOAP_ENV__Reason@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Reason@@1@Z ENDP ; soap_out_SOAP_ENV__Reason
_TEXT	ENDS
PUBLIC	?soap_in_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@PBDPAU1@1@Z ; soap_in_SOAP_ENV__Reason
PUBLIC	?soap_get_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@PAU1@PBD2@Z ; soap_get_SOAP_ENV__Reason
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@PAU1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@PAU1@PBD2@Z PROC ; soap_get_SOAP_ENV__Reason, COMDAT

; 2971 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2972 : 	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@PBDPAU1@1@Z ; soap_in_SOAP_ENV__Reason
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_S@8

; 2973 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_S@8

; 2974 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_S@8
$LN2@soap_get_S@8:

; 2975 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_S@8:

; 2976 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@PAU1@PBD2@Z ENDP ; soap_get_SOAP_ENV__Reason
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@PBDPAU1@1@Z
_TEXT	SEGMENT
_soap_flag_SOAP_ENV__Text$ = -8				; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@PBDPAU1@1@Z PROC ; soap_in_SOAP_ENV__Reason, COMDAT

; 2979 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2980 : 	size_t soap_flag_SOAP_ENV__Text = 1;

	mov	DWORD PTR _soap_flag_SOAP_ENV__Text$[ebp], 1

; 2981 : 	if (soap_element_begin_in(soap, tag, 0, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN14@soap_in_SO@2

; 2982 : 		return NULL;

	xor	eax, eax
	jmp	$LN15@soap_in_SO@2
$LN14@soap_in_SO@2:

; 2983 : 	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	push	0
	push	4
	push	46					; 0000002eH
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 81076				; 00013cb4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_enter
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 2984 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN13@soap_in_SO@2

; 2985 : 		return NULL;

	xor	eax, eax
	jmp	$LN15@soap_in_SO@2
$LN13@soap_in_SO@2:

; 2986 : 	soap_default_SOAP_ENV__Reason(soap, a);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_SOAP_ENV__Reason@@YAXPAUsoap@@PAUSOAP_ENV__Reason@@@Z ; soap_default_SOAP_ENV__Reason
	add	esp, 8

; 2987 : 	if (soap->body && !*soap->href)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	$LN12@soap_in_SO@2
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	test	ecx, ecx
	jne	$LN12@soap_in_SO@2
$LN11@soap_in_SO@2:

; 2988 : 	{
; 2989 : 		for (;;)
; 2990 : 		{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 2991 : 			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))

	cmp	DWORD PTR _soap_flag_SOAP_ENV__Text$[ebp], 0
	je	SHORT $LN9@soap_in_SO@2
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	je	SHORT $LN8@soap_in_SO@2
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN9@soap_in_SO@2
$LN8@soap_in_SO@2:

; 2992 : 				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))

	push	OFFSET ??_C@_0L@DIJPMJCO@xsd?3string?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	push	OFFSET ??_C@_0O@BLCEAHMK@SOAP?9ENV?3Text?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_string@@YAPAPADPAUsoap@@PBDPAPAD1@Z ; soap_in_string
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN9@soap_in_SO@2

; 2993 : 				{	soap_flag_SOAP_ENV__Text--;

	mov	eax, DWORD PTR _soap_flag_SOAP_ENV__Text$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_SOAP_ENV__Text$[ebp], eax

; 2994 : 					continue;

	jmp	SHORT $LN11@soap_in_SO@2
$LN9@soap_in_SO@2:

; 2995 : 				}
; 2996 : 			if (soap->error == SOAP_TAG_MISMATCH)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN6@soap_in_SO@2

; 2997 : 				soap->error = soap_ignore_element(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_ignore_element@@YAHPAUsoap@@@Z	; soap_ignore_element
	add	esp, 4
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+90460], eax
$LN6@soap_in_SO@2:

; 2998 : 			if (soap->error == SOAP_NO_TAG)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN5@soap_in_SO@2

; 2999 : 				break;

	jmp	SHORT $LN10@soap_in_SO@2
$LN5@soap_in_SO@2:

; 3000 : 			if (soap->error)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 0
	je	SHORT $LN4@soap_in_SO@2

; 3001 : 				return NULL;

	xor	eax, eax
	jmp	SHORT $LN15@soap_in_SO@2
$LN4@soap_in_SO@2:

; 3002 : 		}

	jmp	$LN11@soap_in_SO@2
$LN10@soap_in_SO@2:

; 3003 : 		if (soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@soap_in_SO@2

; 3004 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN15@soap_in_SO@2
$LN3@soap_in_SO@2:

; 3005 : 	}
; 3006 : 	else

	jmp	SHORT $LN2@soap_in_SO@2
$LN12@soap_in_SO@2:

; 3007 : 	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);

	push	0
	push	0
	push	4
	push	0
	push	46					; 0000002eH
	push	0
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_forward
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 3008 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN2@soap_in_SO@2
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_in_SO@2

; 3009 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN15@soap_in_SO@2
$LN2@soap_in_SO@2:

; 3010 : 	}
; 3011 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN15@soap_in_SO@2:

; 3012 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@PBDPAU1@1@Z ENDP ; soap_in_SOAP_ENV__Reason
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_new_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@H@Z PROC ; soap_new_SOAP_ENV__Reason, COMDAT

; 3015 : {	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_SOAP_ENV__Reason
	add	esp, 20					; 00000014H

; 3016 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@H@Z ENDP ; soap_new_SOAP_ENV__Reason
_TEXT	ENDS
PUBLIC	?soap_delete_SOAP_ENV__Reason@@YAXPAUsoap@@PAUSOAP_ENV__Reason@@@Z ; soap_delete_SOAP_ENV__Reason
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete_SOAP_ENV__Reason@@YAXPAUsoap@@PAUSOAP_ENV__Reason@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete_SOAP_ENV__Reason@@YAXPAUsoap@@PAUSOAP_ENV__Reason@@@Z PROC ; soap_delete_SOAP_ENV__Reason, COMDAT

; 3019 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 3020 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete_SOAP_ENV__Reason@@YAXPAUsoap@@PAUSOAP_ENV__Reason@@@Z ENDP ; soap_delete_SOAP_ENV__Reason
_TEXT	ENDS
PUBLIC	??_C@_0CP@EGLOFNIE@soap_instantiate_SOAP_ENV__Reaso@ ; `string'
;	COMDAT ??_C@_0CP@EGLOFNIE@soap_instantiate_SOAP_ENV__Reaso@
CONST	SEGMENT
??_C@_0CP@EGLOFNIE@soap_instantiate_SOAP_ENV__Reaso@ DB 'soap_instantiate'
	DB	'_SOAP_ENV__Reason(%d, %s, %s)', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_instantiate_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -260						; size = 4
tv77 = -256						; size = 4
$T101617 = -248						; size = 4
$T101618 = -236						; size = 4
_fdebug$90116 = -32					; size = 4
_cp$ = -20						; size = 4
_fdebug$90095 = -8					; size = 4
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate_SOAP_ENV__Reason, COMDAT

; 3023 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3024 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN12@soap_insta@16
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN11@soap_insta@16
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN11@soap_insta@16:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN12@soap_insta@16
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90095[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN15@soap_insta@16
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN16@soap_insta@16
$LN15@soap_insta@16:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN16@soap_insta@16:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN17@soap_insta@16
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN18@soap_insta@16
$LN17@soap_insta@16:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN18@soap_insta@16:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CP@EGLOFNIE@soap_instantiate_SOAP_ENV__Reaso@
	mov	edx, DWORD PTR _fdebug$90095[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90095[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@soap_insta@16:

; 3025 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	46					; 0000002eH
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 3026 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN9@soap_insta@16

; 3027 : 		return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@16
$LN9@soap_insta@16:

; 3028 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN8@soap_insta@16

; 3029 : 	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;

	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101617[ebp], eax
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR $T101617[ebp]
	mov	DWORD PTR [eax+4], ecx

; 3030 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@16

; 3031 : 			*size = sizeof(struct SOAP_ENV__Reason);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 4
$LN7@soap_insta@16:

; 3032 : 	}
; 3033 : 	else

	jmp	SHORT $LN6@soap_insta@16
$LN8@soap_insta@16:

; 3034 : 	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];

	xor	ecx, ecx
	mov	eax, DWORD PTR _n$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101618[ebp], eax
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR $T101618[ebp]
	mov	DWORD PTR [eax+4], ecx

; 3035 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@soap_insta@16

; 3036 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 3037 : 			return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@16
$LN5@soap_insta@16:

; 3038 : 		}
; 3039 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN6@soap_insta@16

; 3040 : 			*size = n * sizeof(struct SOAP_ENV__Reason);

	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN6@soap_insta@16:

; 3041 : 	}
; 3042 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@16
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@16
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@16:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@16
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90116[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$90116[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90116[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@16:

; 3043 : 	return (struct SOAP_ENV__Reason*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN13@soap_insta@16:

; 3044 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_instantiate_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate_SOAP_ENV__Reason
_TEXT	ENDS
PUBLIC	??_C@_0CK@DLJHKGGI@Copying?5struct?5SOAP_ENV__Reason?5@ ; `string'
PUBLIC	?soap_copy_SOAP_ENV__Reason@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy_SOAP_ENV__Reason
;	COMDAT ??_C@_0CK@DLJHKGGI@Copying?5struct?5SOAP_ENV__Reason?5@
CONST	SEGMENT
??_C@_0CK@DLJHKGGI@Copying?5struct?5SOAP_ENV__Reason?5@ DB 'Copying struc'
	DB	't SOAP_ENV__Reason %p -> %p', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy_SOAP_ENV__Reason@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$90131 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy_SOAP_ENV__Reason@@YAXPAUsoap@@HHPAXIPBXI@Z PROC ; soap_copy_SOAP_ENV__Reason, COMDAT

; 3046 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3047 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@15
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@15
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@15:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@15
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90131[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CK@DLJHKGGI@Copying?5struct?5SOAP_ENV__Reason?5@
	mov	edx, DWORD PTR _fdebug$90131[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90131[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@15:

; 3048 : 	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx

; 3049 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy_SOAP_ENV__Reason@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP ; soap_copy_SOAP_ENV__Reason
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_default_SOAP_ENV__Detail@@YAXPAUsoap@@PAUSOAP_ENV__Detail@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_default_SOAP_ENV__Detail@@YAXPAUsoap@@PAUSOAP_ENV__Detail@@@Z PROC ; soap_default_SOAP_ENV__Detail, COMDAT

; 3056 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3057 : 	(void)soap; (void)a; /* appease -Wall -Werror */
; 3058 : 	a->__type = 0;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], 0

; 3059 : 	a->fault = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+4], 0

; 3060 : 	a->__any = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+8], 0

; 3061 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_default_SOAP_ENV__Detail@@YAXPAUsoap@@PAUSOAP_ENV__Detail@@@Z ENDP ; soap_default_SOAP_ENV__Detail
_TEXT	ENDS
PUBLIC	?soap_serialize_SOAP_ENV__Detail@@YAXPAUsoap@@PBUSOAP_ENV__Detail@@@Z ; soap_serialize_SOAP_ENV__Detail
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_serialize_SOAP_ENV__Detail@@YAXPAUsoap@@PBUSOAP_ENV__Detail@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize_SOAP_ENV__Detail@@YAXPAUsoap@@PBUSOAP_ENV__Detail@@@Z PROC ; soap_serialize_SOAP_ENV__Detail, COMDAT

; 3064 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3065 : 	(void)soap; (void)a; /* appease -Wall -Werror */
; 3066 : 	soap_markelement(soap, a->fault, a->__type);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_markelement
	add	esp, 12					; 0000000cH

; 3067 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize_SOAP_ENV__Detail@@YAXPAUsoap@@PBUSOAP_ENV__Detail@@@Z ENDP ; soap_serialize_SOAP_ENV__Detail
_TEXT	ENDS
PUBLIC	?soap_out_SOAP_ENV__Detail@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Detail@@1@Z ; soap_out_SOAP_ENV__Detail
PUBLIC	?soap_put_SOAP_ENV__Detail@@YAHPAUsoap@@PBUSOAP_ENV__Detail@@PBD2@Z ; soap_put_SOAP_ENV__Detail
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_SOAP_ENV__Detail@@YAHPAUsoap@@PBUSOAP_ENV__Detail@@PBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_SOAP_ENV__Detail@@YAHPAUsoap@@PBUSOAP_ENV__Detail@@PBD2@Z PROC ; soap_put_SOAP_ENV__Detail, COMDAT

; 3070 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3071 : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);

	push	43					; 0000002bH
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 3072 : 	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_SOAP_ENV__Detail@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Detail@@1@Z ; soap_out_SOAP_ENV__Detail
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_S@3

; 3073 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_S@3
$LN1@soap_put_S@3:

; 3074 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_S@3:

; 3075 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_SOAP_ENV__Detail@@YAHPAUsoap@@PBUSOAP_ENV__Detail@@PBD2@Z ENDP ; soap_put_SOAP_ENV__Detail
_TEXT	ENDS
PUBLIC	??_C@_04DPKCFHKE@?9any?$AA@			; `string'
PUBLIC	??_C@_05GCLNDCPO@fault?$AA@			; `string'
;	COMDAT ??_C@_04DPKCFHKE@?9any?$AA@
CONST	SEGMENT
??_C@_04DPKCFHKE@?9any?$AA@ DB '-any', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GCLNDCPO@fault?$AA@
CONST	SEGMENT
??_C@_05GCLNDCPO@fault?$AA@ DB 'fault', 00H		; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_out_SOAP_ENV__Detail@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Detail@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_SOAP_ENV__Detail@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Detail@@1@Z PROC ; soap_out_SOAP_ENV__Detail, COMDAT

; 3078 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3079 : 	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	43					; 0000002bH
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_embedded_id
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_begin_out
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN2@soap_out_S@3

; 3080 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN3@soap_out_S@3
$LN2@soap_out_S@3:

; 3081 : 	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	-1
	push	OFFSET ??_C@_05GCLNDCPO@fault?$AA@
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_putelement
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_out_S@3

; 3082 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN3@soap_out_S@3
$LN1@soap_out_S@3:

; 3083 : 	soap_outliteral(soap, "-any", &a->__any, NULL);

	push	0
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_04DPKCFHKE@?9any?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_outliteral
	add	esp, 16					; 00000010H

; 3084 : 	return soap_element_end_out(soap, tag);

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_out
	add	esp, 8
$LN3@soap_out_S@3:

; 3085 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_SOAP_ENV__Detail@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Detail@@1@Z ENDP ; soap_out_SOAP_ENV__Detail
_TEXT	ENDS
PUBLIC	?soap_in_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@PBDPAU1@1@Z ; soap_in_SOAP_ENV__Detail
PUBLIC	?soap_get_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@PAU1@PBD2@Z ; soap_get_SOAP_ENV__Detail
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@PAU1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@PAU1@PBD2@Z PROC ; soap_get_SOAP_ENV__Detail, COMDAT

; 3088 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3089 : 	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@PBDPAU1@1@Z ; soap_in_SOAP_ENV__Detail
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_S@9

; 3090 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_S@9

; 3091 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_S@9
$LN2@soap_get_S@9:

; 3092 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_S@9:

; 3093 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@PAU1@PBD2@Z ENDP ; soap_get_SOAP_ENV__Detail
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@PBDPAU1@1@Z
_TEXT	SEGMENT
_soap_flag___any$ = -20					; size = 4
_soap_flag_fault$ = -8					; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@PBDPAU1@1@Z PROC ; soap_in_SOAP_ENV__Detail, COMDAT

; 3096 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3097 : 	size_t soap_flag_fault = 1;

	mov	DWORD PTR _soap_flag_fault$[ebp], 1

; 3098 : 	size_t soap_flag___any = 1;

	mov	DWORD PTR _soap_flag___any$[ebp], 1

; 3099 : 	if (soap_element_begin_in(soap, tag, 0, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN16@soap_in_SO@3

; 3100 : 		return NULL;

	xor	eax, eax
	jmp	$LN17@soap_in_SO@3
$LN16@soap_in_SO@3:

; 3101 : 	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	push	0
	push	12					; 0000000cH
	push	43					; 0000002bH
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 81076				; 00013cb4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_enter
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 3102 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN15@soap_in_SO@3

; 3103 : 		return NULL;

	xor	eax, eax
	jmp	$LN17@soap_in_SO@3
$LN15@soap_in_SO@3:

; 3104 : 	soap_default_SOAP_ENV__Detail(soap, a);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_SOAP_ENV__Detail@@YAXPAUsoap@@PAUSOAP_ENV__Detail@@@Z ; soap_default_SOAP_ENV__Detail
	add	esp, 8

; 3105 : 	if (soap->body && !*soap->href)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	$LN14@soap_in_SO@3
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	test	ecx, ecx
	jne	$LN14@soap_in_SO@3
$LN13@soap_in_SO@3:

; 3106 : 	{
; 3107 : 		for (;;)
; 3108 : 		{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 3109 : 			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)

	cmp	DWORD PTR _soap_flag_fault$[ebp], 0
	je	SHORT $LN11@soap_in_SO@3
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN11@soap_in_SO@3

; 3110 : 				if ((a->fault = soap_getelement(soap, &a->__type)))

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_getelement
	add	esp, 8
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN11@soap_in_SO@3

; 3111 : 				{	soap_flag_fault = 0;

	mov	DWORD PTR _soap_flag_fault$[ebp], 0

; 3112 : 					continue;

	jmp	SHORT $LN13@soap_in_SO@3
$LN11@soap_in_SO@3:

; 3113 : 				}
; 3114 : 			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))

	cmp	DWORD PTR _soap_flag___any$[ebp], 0
	je	SHORT $LN9@soap_in_SO@3
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	je	SHORT $LN8@soap_in_SO@3
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN9@soap_in_SO@3
$LN8@soap_in_SO@3:

; 3115 : 				if (soap_inliteral(soap, "-any", &a->__any))

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_04DPKCFHKE@?9any?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_inliteral
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN9@soap_in_SO@3

; 3116 : 				{	soap_flag___any--;

	mov	eax, DWORD PTR _soap_flag___any$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag___any$[ebp], eax

; 3117 : 					continue;

	jmp	$LN13@soap_in_SO@3
$LN9@soap_in_SO@3:

; 3118 : 				}
; 3119 : 			if (soap->error == SOAP_TAG_MISMATCH)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN6@soap_in_SO@3

; 3120 : 				soap->error = soap_ignore_element(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_ignore_element@@YAHPAUsoap@@@Z	; soap_ignore_element
	add	esp, 4
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+90460], eax
$LN6@soap_in_SO@3:

; 3121 : 			if (soap->error == SOAP_NO_TAG)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN5@soap_in_SO@3

; 3122 : 				break;

	jmp	SHORT $LN12@soap_in_SO@3
$LN5@soap_in_SO@3:

; 3123 : 			if (soap->error)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 0
	je	SHORT $LN4@soap_in_SO@3

; 3124 : 				return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in_SO@3
$LN4@soap_in_SO@3:

; 3125 : 		}

	jmp	$LN13@soap_in_SO@3
$LN12@soap_in_SO@3:

; 3126 : 		if (soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@soap_in_SO@3

; 3127 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in_SO@3
$LN3@soap_in_SO@3:

; 3128 : 	}
; 3129 : 	else

	jmp	SHORT $LN2@soap_in_SO@3
$LN14@soap_in_SO@3:

; 3130 : 	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);

	push	0
	push	0
	push	12					; 0000000cH
	push	0
	push	43					; 0000002bH
	push	0
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_forward
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 3131 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN2@soap_in_SO@3
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_in_SO@3

; 3132 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in_SO@3
$LN2@soap_in_SO@3:

; 3133 : 	}
; 3134 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN17@soap_in_SO@3:

; 3135 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@PBDPAU1@1@Z ENDP ; soap_in_SOAP_ENV__Detail
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_new_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@H@Z PROC ; soap_new_SOAP_ENV__Detail, COMDAT

; 3138 : {	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_SOAP_ENV__Detail
	add	esp, 20					; 00000014H

; 3139 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@H@Z ENDP ; soap_new_SOAP_ENV__Detail
_TEXT	ENDS
PUBLIC	?soap_delete_SOAP_ENV__Detail@@YAXPAUsoap@@PAUSOAP_ENV__Detail@@@Z ; soap_delete_SOAP_ENV__Detail
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete_SOAP_ENV__Detail@@YAXPAUsoap@@PAUSOAP_ENV__Detail@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete_SOAP_ENV__Detail@@YAXPAUsoap@@PAUSOAP_ENV__Detail@@@Z PROC ; soap_delete_SOAP_ENV__Detail, COMDAT

; 3142 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 3143 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete_SOAP_ENV__Detail@@YAXPAUsoap@@PAUSOAP_ENV__Detail@@@Z ENDP ; soap_delete_SOAP_ENV__Detail
_TEXT	ENDS
PUBLIC	??_C@_0CP@NAHIIHEE@soap_instantiate_SOAP_ENV__Detai@ ; `string'
;	COMDAT ??_C@_0CP@NAHIIHEE@soap_instantiate_SOAP_ENV__Detai@
CONST	SEGMENT
??_C@_0CP@NAHIIHEE@soap_instantiate_SOAP_ENV__Detai@ DB 'soap_instantiate'
	DB	'_SOAP_ENV__Detail(%d, %s, %s)', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_instantiate_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -260						; size = 4
tv77 = -256						; size = 4
$T101645 = -248						; size = 4
$T101646 = -236						; size = 4
_fdebug$90245 = -32					; size = 4
_cp$ = -20						; size = 4
_fdebug$90224 = -8					; size = 4
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate_SOAP_ENV__Detail, COMDAT

; 3146 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3147 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN12@soap_insta@17
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN11@soap_insta@17
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN11@soap_insta@17:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN12@soap_insta@17
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90224[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN15@soap_insta@17
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN16@soap_insta@17
$LN15@soap_insta@17:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN16@soap_insta@17:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN17@soap_insta@17
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN18@soap_insta@17
$LN17@soap_insta@17:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN18@soap_insta@17:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CP@NAHIIHEE@soap_instantiate_SOAP_ENV__Detai@
	mov	edx, DWORD PTR _fdebug$90224[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90224[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@soap_insta@17:

; 3148 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	43					; 0000002bH
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 3149 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN9@soap_insta@17

; 3150 : 		return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@17
$LN9@soap_insta@17:

; 3151 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN8@soap_insta@17

; 3152 : 	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101645[ebp], eax
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR $T101645[ebp]
	mov	DWORD PTR [eax+4], ecx

; 3153 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@17

; 3154 : 			*size = sizeof(struct SOAP_ENV__Detail);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 12			; 0000000cH
$LN7@soap_insta@17:

; 3155 : 	}
; 3156 : 	else

	jmp	SHORT $LN6@soap_insta@17
$LN8@soap_insta@17:

; 3157 : 	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];

	xor	ecx, ecx
	mov	eax, DWORD PTR _n$[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101646[ebp], eax
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR $T101646[ebp]
	mov	DWORD PTR [eax+4], ecx

; 3158 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@soap_insta@17

; 3159 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 3160 : 			return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@17
$LN5@soap_insta@17:

; 3161 : 		}
; 3162 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN6@soap_insta@17

; 3163 : 			*size = n * sizeof(struct SOAP_ENV__Detail);

	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN6@soap_insta@17:

; 3164 : 	}
; 3165 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@17
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@17
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@17:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@17
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90245[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$90245[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90245[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@17:

; 3166 : 	return (struct SOAP_ENV__Detail*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN13@soap_insta@17:

; 3167 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_instantiate_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate_SOAP_ENV__Detail
_TEXT	ENDS
PUBLIC	??_C@_0CK@DHBFBAFK@Copying?5struct?5SOAP_ENV__Detail?5@ ; `string'
PUBLIC	?soap_copy_SOAP_ENV__Detail@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy_SOAP_ENV__Detail
;	COMDAT ??_C@_0CK@DHBFBAFK@Copying?5struct?5SOAP_ENV__Detail?5@
CONST	SEGMENT
??_C@_0CK@DHBFBAFK@Copying?5struct?5SOAP_ENV__Detail?5@ DB 'Copying struc'
	DB	't SOAP_ENV__Detail %p -> %p', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy_SOAP_ENV__Detail@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$90260 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy_SOAP_ENV__Detail@@YAXPAUsoap@@HHPAXIPBXI@Z PROC ; soap_copy_SOAP_ENV__Detail, COMDAT

; 3169 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3170 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@16
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@16
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@16:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@16
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90260[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CK@DHBFBAFK@Copying?5struct?5SOAP_ENV__Detail?5@
	mov	edx, DWORD PTR _fdebug$90260[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90260[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@16:

; 3171 : 	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 3172 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy_SOAP_ENV__Detail@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP ; soap_copy_SOAP_ENV__Detail
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_default_SOAP_ENV__Code@@YAXPAUsoap@@PAUSOAP_ENV__Code@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_default_SOAP_ENV__Code@@YAXPAUsoap@@PAUSOAP_ENV__Code@@@Z PROC ; soap_default_SOAP_ENV__Code, COMDAT

; 3179 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3180 : 	(void)soap; (void)a; /* appease -Wall -Werror */
; 3181 : 	soap_default__QName(soap, &a->SOAP_ENV__Value);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default__QName@@YAXPAUsoap@@PAPAD@Z ; soap_default__QName
	add	esp, 8

; 3182 : 	a->SOAP_ENV__Subcode = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+4], 0

; 3183 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_default_SOAP_ENV__Code@@YAXPAUsoap@@PAUSOAP_ENV__Code@@@Z ENDP ; soap_default_SOAP_ENV__Code
_TEXT	ENDS
PUBLIC	?soap_serialize_SOAP_ENV__Code@@YAXPAUsoap@@PBUSOAP_ENV__Code@@@Z ; soap_serialize_SOAP_ENV__Code
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_serialize_SOAP_ENV__Code@@YAXPAUsoap@@PBUSOAP_ENV__Code@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize_SOAP_ENV__Code@@YAXPAUsoap@@PBUSOAP_ENV__Code@@@Z PROC ; soap_serialize_SOAP_ENV__Code, COMDAT

; 3186 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3187 : 	(void)soap; (void)a; /* appease -Wall -Werror */
; 3188 : 	soap_serialize__QName(soap, &a->SOAP_ENV__Value);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize__QName@@YAXPAUsoap@@PBQAD@Z ; soap_serialize__QName
	add	esp, 8

; 3189 : 	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_PointerToSOAP_ENV__Code@@YAXPAUsoap@@PBQAUSOAP_ENV__Code@@@Z ; soap_serialize_PointerToSOAP_ENV__Code
	add	esp, 8

; 3190 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize_SOAP_ENV__Code@@YAXPAUsoap@@PBUSOAP_ENV__Code@@@Z ENDP ; soap_serialize_SOAP_ENV__Code
_TEXT	ENDS
PUBLIC	?soap_out_SOAP_ENV__Code@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Code@@1@Z ; soap_out_SOAP_ENV__Code
PUBLIC	?soap_put_SOAP_ENV__Code@@YAHPAUsoap@@PBUSOAP_ENV__Code@@PBD2@Z ; soap_put_SOAP_ENV__Code
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_SOAP_ENV__Code@@YAHPAUsoap@@PBUSOAP_ENV__Code@@PBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_SOAP_ENV__Code@@YAHPAUsoap@@PBUSOAP_ENV__Code@@PBD2@Z PROC ; soap_put_SOAP_ENV__Code, COMDAT

; 3193 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3194 : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);

	push	41					; 00000029H
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 3195 : 	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_SOAP_ENV__Code@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Code@@1@Z ; soap_out_SOAP_ENV__Code
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_S@4

; 3196 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_S@4
$LN1@soap_put_S@4:

; 3197 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_S@4:

; 3198 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_SOAP_ENV__Code@@YAHPAUsoap@@PBUSOAP_ENV__Code@@PBD2@Z ENDP ; soap_put_SOAP_ENV__Code
_TEXT	ENDS
PUBLIC	??_C@_0BB@MGPNIFGI@SOAP?9ENV?3Subcode?$AA@	; `string'
PUBLIC	??_C@_0P@FNBDNHP@SOAP?9ENV?3Value?$AA@		; `string'
;	COMDAT ??_C@_0BB@MGPNIFGI@SOAP?9ENV?3Subcode?$AA@
CONST	SEGMENT
??_C@_0BB@MGPNIFGI@SOAP?9ENV?3Subcode?$AA@ DB 'SOAP-ENV:Subcode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FNBDNHP@SOAP?9ENV?3Value?$AA@
CONST	SEGMENT
??_C@_0P@FNBDNHP@SOAP?9ENV?3Value?$AA@ DB 'SOAP-ENV:Value', 00H ; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_out_SOAP_ENV__Code@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Code@@1@Z
_TEXT	SEGMENT
_soap_tmp_SOAP_ENV__Value$ = -8				; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_SOAP_ENV__Code@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Code@@1@Z PROC ; soap_out_SOAP_ENV__Code, COMDAT

; 3201 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3202 : 	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_QName2s
	add	esp, 8
	mov	DWORD PTR _soap_tmp_SOAP_ENV__Value$[ebp], eax

; 3203 : 	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	41					; 00000029H
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_embedded_id
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_begin_out
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN3@soap_out_S@4

; 3204 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN4@soap_out_S@4
$LN3@soap_out_S@4:

; 3205 : 	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	eax, DWORD PTR _soap_tmp_SOAP_ENV__Value$[ebp]
	push	eax
	push	-1
	push	OFFSET ??_C@_0P@FNBDNHP@SOAP?9ENV?3Value?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out__QName@@YAHPAUsoap@@PBDHPBQAD1@Z ; soap_out__QName
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN2@soap_out_S@4

; 3206 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN4@soap_out_S@4
$LN2@soap_out_S@4:

; 3207 : 	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 4
	push	eax
	push	-1
	push	OFFSET ??_C@_0BB@MGPNIFGI@SOAP?9ENV?3Subcode?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerToSOAP_ENV__Code@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Code@@1@Z ; soap_out_PointerToSOAP_ENV__Code
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_out_S@4

; 3208 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN4@soap_out_S@4
$LN1@soap_out_S@4:

; 3209 : 	return soap_element_end_out(soap, tag);

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_out
	add	esp, 8
$LN4@soap_out_S@4:

; 3210 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@soap_out_S@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@soap_out_S@4:
	DD	1
	DD	$LN7@soap_out_S@4
$LN7@soap_out_S@4:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@soap_out_S@4
$LN6@soap_out_S@4:
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	83					; 00000053H
	DB	79					; 0000004fH
	DB	65					; 00000041H
	DB	80					; 00000050H
	DB	95					; 0000005fH
	DB	69					; 00000045H
	DB	78					; 0000004eH
	DB	86					; 00000056H
	DB	95					; 0000005fH
	DB	95					; 0000005fH
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
?soap_out_SOAP_ENV__Code@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Code@@1@Z ENDP ; soap_out_SOAP_ENV__Code
_TEXT	ENDS
PUBLIC	?soap_in_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@PBDPAU1@1@Z ; soap_in_SOAP_ENV__Code
PUBLIC	?soap_get_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@PAU1@PBD2@Z ; soap_get_SOAP_ENV__Code
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@PAU1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@PAU1@PBD2@Z PROC ; soap_get_SOAP_ENV__Code, COMDAT

; 3213 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3214 : 	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@PBDPAU1@1@Z ; soap_in_SOAP_ENV__Code
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_S@10

; 3215 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_S@10

; 3216 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_S@10
$LN2@soap_get_S@10:

; 3217 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_S@10:

; 3218 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@PAU1@PBD2@Z ENDP ; soap_get_SOAP_ENV__Code
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@PBDPAU1@1@Z
_TEXT	SEGMENT
_soap_flag_SOAP_ENV__Subcode$ = -20			; size = 4
_soap_flag_SOAP_ENV__Value$ = -8			; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@PBDPAU1@1@Z PROC ; soap_in_SOAP_ENV__Code, COMDAT

; 3221 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3222 : 	size_t soap_flag_SOAP_ENV__Value = 1;

	mov	DWORD PTR _soap_flag_SOAP_ENV__Value$[ebp], 1

; 3223 : 	size_t soap_flag_SOAP_ENV__Subcode = 1;

	mov	DWORD PTR _soap_flag_SOAP_ENV__Subcode$[ebp], 1

; 3224 : 	if (soap_element_begin_in(soap, tag, 0, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN16@soap_in_SO@4

; 3225 : 		return NULL;

	xor	eax, eax
	jmp	$LN17@soap_in_SO@4
$LN16@soap_in_SO@4:

; 3226 : 	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	push	0
	push	8
	push	41					; 00000029H
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 81076				; 00013cb4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_enter
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 3227 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN15@soap_in_SO@4

; 3228 : 		return NULL;

	xor	eax, eax
	jmp	$LN17@soap_in_SO@4
$LN15@soap_in_SO@4:

; 3229 : 	soap_default_SOAP_ENV__Code(soap, a);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_SOAP_ENV__Code@@YAXPAUsoap@@PAUSOAP_ENV__Code@@@Z ; soap_default_SOAP_ENV__Code
	add	esp, 8

; 3230 : 	if (soap->body && !*soap->href)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	$LN14@soap_in_SO@4
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	test	ecx, ecx
	jne	$LN14@soap_in_SO@4
$LN13@soap_in_SO@4:

; 3231 : 	{
; 3232 : 		for (;;)
; 3233 : 		{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 3234 : 			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))

	cmp	DWORD PTR _soap_flag_SOAP_ENV__Value$[ebp], 0
	je	SHORT $LN11@soap_in_SO@4
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	je	SHORT $LN10@soap_in_SO@4
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN11@soap_in_SO@4
$LN10@soap_in_SO@4:

; 3235 : 				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	push	OFFSET ??_C@_0P@FNBDNHP@SOAP?9ENV?3Value?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in__QName@@YAPAPADPAUsoap@@PBDPAPAD1@Z ; soap_in__QName
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN11@soap_in_SO@4

; 3236 : 				{	soap_flag_SOAP_ENV__Value--;

	mov	eax, DWORD PTR _soap_flag_SOAP_ENV__Value$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_SOAP_ENV__Value$[ebp], eax

; 3237 : 					continue;

	jmp	SHORT $LN13@soap_in_SO@4
$LN11@soap_in_SO@4:

; 3238 : 				}
; 3239 : 			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)

	cmp	DWORD PTR _soap_flag_SOAP_ENV__Subcode$[ebp], 0
	je	SHORT $LN8@soap_in_SO@4
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN8@soap_in_SO@4

; 3240 : 				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_0BB@MGPNIFGI@SOAP?9ENV?3Subcode?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_PointerToSOAP_ENV__Code@@YAPAPAUSOAP_ENV__Code@@PAUsoap@@PBDPAPAU1@1@Z ; soap_in_PointerToSOAP_ENV__Code
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN8@soap_in_SO@4

; 3241 : 				{	soap_flag_SOAP_ENV__Subcode--;

	mov	eax, DWORD PTR _soap_flag_SOAP_ENV__Subcode$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_SOAP_ENV__Subcode$[ebp], eax

; 3242 : 					continue;

	jmp	$LN13@soap_in_SO@4
$LN8@soap_in_SO@4:

; 3243 : 				}
; 3244 : 			if (soap->error == SOAP_TAG_MISMATCH)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN6@soap_in_SO@4

; 3245 : 				soap->error = soap_ignore_element(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_ignore_element@@YAHPAUsoap@@@Z	; soap_ignore_element
	add	esp, 4
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+90460], eax
$LN6@soap_in_SO@4:

; 3246 : 			if (soap->error == SOAP_NO_TAG)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN5@soap_in_SO@4

; 3247 : 				break;

	jmp	SHORT $LN12@soap_in_SO@4
$LN5@soap_in_SO@4:

; 3248 : 			if (soap->error)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 0
	je	SHORT $LN4@soap_in_SO@4

; 3249 : 				return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in_SO@4
$LN4@soap_in_SO@4:

; 3250 : 		}

	jmp	$LN13@soap_in_SO@4
$LN12@soap_in_SO@4:

; 3251 : 		if (soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@soap_in_SO@4

; 3252 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in_SO@4
$LN3@soap_in_SO@4:

; 3253 : 	}
; 3254 : 	else

	jmp	SHORT $LN2@soap_in_SO@4
$LN14@soap_in_SO@4:

; 3255 : 	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);

	push	0
	push	0
	push	8
	push	0
	push	41					; 00000029H
	push	0
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_forward
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 3256 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN2@soap_in_SO@4
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_in_SO@4

; 3257 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN17@soap_in_SO@4
$LN2@soap_in_SO@4:

; 3258 : 	}
; 3259 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN17@soap_in_SO@4:

; 3260 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@PBDPAU1@1@Z ENDP ; soap_in_SOAP_ENV__Code
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_new_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@H@Z PROC ; soap_new_SOAP_ENV__Code, COMDAT

; 3263 : {	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_SOAP_ENV__Code
	add	esp, 20					; 00000014H

; 3264 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@H@Z ENDP ; soap_new_SOAP_ENV__Code
_TEXT	ENDS
PUBLIC	?soap_delete_SOAP_ENV__Code@@YAXPAUsoap@@PAUSOAP_ENV__Code@@@Z ; soap_delete_SOAP_ENV__Code
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete_SOAP_ENV__Code@@YAXPAUsoap@@PAUSOAP_ENV__Code@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete_SOAP_ENV__Code@@YAXPAUsoap@@PAUSOAP_ENV__Code@@@Z PROC ; soap_delete_SOAP_ENV__Code, COMDAT

; 3267 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 3268 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete_SOAP_ENV__Code@@YAXPAUsoap@@PAUSOAP_ENV__Code@@@Z ENDP ; soap_delete_SOAP_ENV__Code
_TEXT	ENDS
PUBLIC	??_C@_0CN@KPADOOIJ@soap_instantiate_SOAP_ENV__Code?$CI@ ; `string'
;	COMDAT ??_C@_0CN@KPADOOIJ@soap_instantiate_SOAP_ENV__Code?$CI@
CONST	SEGMENT
??_C@_0CN@KPADOOIJ@soap_instantiate_SOAP_ENV__Code?$CI@ DB 'soap_instanti'
	DB	'ate_SOAP_ENV__Code(%d, %s, %s)', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_instantiate_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -260						; size = 4
tv77 = -256						; size = 4
$T101676 = -248						; size = 4
$T101677 = -236						; size = 4
_fdebug$90377 = -32					; size = 4
_cp$ = -20						; size = 4
_fdebug$90356 = -8					; size = 4
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate_SOAP_ENV__Code, COMDAT

; 3271 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3272 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN12@soap_insta@18
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN11@soap_insta@18
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN11@soap_insta@18:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN12@soap_insta@18
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90356[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN15@soap_insta@18
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN16@soap_insta@18
$LN15@soap_insta@18:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN16@soap_insta@18:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN17@soap_insta@18
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN18@soap_insta@18
$LN17@soap_insta@18:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN18@soap_insta@18:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CN@KPADOOIJ@soap_instantiate_SOAP_ENV__Code?$CI@
	mov	edx, DWORD PTR _fdebug$90356[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90356[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@soap_insta@18:

; 3273 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	41					; 00000029H
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 3274 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN9@soap_insta@18

; 3275 : 		return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@18
$LN9@soap_insta@18:

; 3276 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN8@soap_insta@18

; 3277 : 	{	cp->ptr = (void*)new struct SOAP_ENV__Code;

	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101676[ebp], eax
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR $T101676[ebp]
	mov	DWORD PTR [eax+4], ecx

; 3278 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@18

; 3279 : 			*size = sizeof(struct SOAP_ENV__Code);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 8
$LN7@soap_insta@18:

; 3280 : 	}
; 3281 : 	else

	jmp	SHORT $LN6@soap_insta@18
$LN8@soap_insta@18:

; 3282 : 	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];

	xor	ecx, ecx
	mov	eax, DWORD PTR _n$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101677[ebp], eax
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR $T101677[ebp]
	mov	DWORD PTR [eax+4], ecx

; 3283 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@soap_insta@18

; 3284 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 3285 : 			return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@18
$LN5@soap_insta@18:

; 3286 : 		}
; 3287 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN6@soap_insta@18

; 3288 : 			*size = n * sizeof(struct SOAP_ENV__Code);

	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN6@soap_insta@18:

; 3289 : 	}
; 3290 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@18
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@18
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@18:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@18
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90377[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$90377[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90377[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@18:

; 3291 : 	return (struct SOAP_ENV__Code*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN13@soap_insta@18:

; 3292 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_instantiate_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate_SOAP_ENV__Code
_TEXT	ENDS
PUBLIC	??_C@_0CI@NNHAOMJL@Copying?5struct?5SOAP_ENV__Code?5?$CFp@ ; `string'
PUBLIC	?soap_copy_SOAP_ENV__Code@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy_SOAP_ENV__Code
;	COMDAT ??_C@_0CI@NNHAOMJL@Copying?5struct?5SOAP_ENV__Code?5?$CFp@
CONST	SEGMENT
??_C@_0CI@NNHAOMJL@Copying?5struct?5SOAP_ENV__Code?5?$CFp@ DB 'Copying st'
	DB	'ruct SOAP_ENV__Code %p -> %p', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy_SOAP_ENV__Code@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$90392 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy_SOAP_ENV__Code@@YAXPAUsoap@@HHPAXIPBXI@Z PROC ; soap_copy_SOAP_ENV__Code, COMDAT

; 3294 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3295 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@17
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@17
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@17:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@17
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90392[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CI@NNHAOMJL@Copying?5struct?5SOAP_ENV__Code?5?$CFp@
	mov	edx, DWORD PTR _fdebug$90392[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90392[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@17:

; 3296 : 	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 3297 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy_SOAP_ENV__Code@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP ; soap_copy_SOAP_ENV__Code
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_default_SOAP_ENV__Header@@YAXPAUsoap@@PAUSOAP_ENV__Header@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_default_SOAP_ENV__Header@@YAXPAUsoap@@PAUSOAP_ENV__Header@@@Z PROC ; soap_default_SOAP_ENV__Header, COMDAT

; 3304 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3305 : 	(void)soap; (void)a; /* appease -Wall -Werror */
; 3306 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_default_SOAP_ENV__Header@@YAXPAUsoap@@PAUSOAP_ENV__Header@@@Z ENDP ; soap_default_SOAP_ENV__Header
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_serialize_SOAP_ENV__Header@@YAXPAUsoap@@PBUSOAP_ENV__Header@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize_SOAP_ENV__Header@@YAXPAUsoap@@PBUSOAP_ENV__Header@@@Z PROC ; soap_serialize_SOAP_ENV__Header, COMDAT

; 3309 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3310 : 	(void)soap; (void)a; /* appease -Wall -Werror */
; 3311 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize_SOAP_ENV__Header@@YAXPAUsoap@@PBUSOAP_ENV__Header@@@Z ENDP ; soap_serialize_SOAP_ENV__Header
_TEXT	ENDS
PUBLIC	?soap_put_SOAP_ENV__Header@@YAHPAUsoap@@PBUSOAP_ENV__Header@@PBD2@Z ; soap_put_SOAP_ENV__Header
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_SOAP_ENV__Header@@YAHPAUsoap@@PBUSOAP_ENV__Header@@PBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_SOAP_ENV__Header@@YAHPAUsoap@@PBUSOAP_ENV__Header@@PBD2@Z PROC ; soap_put_SOAP_ENV__Header, COMDAT

; 3314 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3315 : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);

	push	40					; 00000028H
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 3316 : 	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_SOAP_ENV__Header@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Header@@1@Z ; soap_out_SOAP_ENV__Header
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_S@5

; 3317 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_S@5
$LN1@soap_put_S@5:

; 3318 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_S@5:

; 3319 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_SOAP_ENV__Header@@YAHPAUsoap@@PBUSOAP_ENV__Header@@PBD2@Z ENDP ; soap_put_SOAP_ENV__Header
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out_SOAP_ENV__Header@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Header@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_SOAP_ENV__Header@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Header@@1@Z PROC ; soap_out_SOAP_ENV__Header, COMDAT

; 3322 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3323 : 	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	40					; 00000028H
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_embedded_id
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_begin_out
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN1@soap_out_S@5

; 3324 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_out_S@5
$LN1@soap_out_S@5:

; 3325 : 	return soap_element_end_out(soap, tag);

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_out
	add	esp, 8
$LN2@soap_out_S@5:

; 3326 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_SOAP_ENV__Header@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Header@@1@Z ENDP ; soap_out_SOAP_ENV__Header
_TEXT	ENDS
PUBLIC	?soap_get_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@PAU1@PBD2@Z ; soap_get_SOAP_ENV__Header
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@PAU1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@PAU1@PBD2@Z PROC ; soap_get_SOAP_ENV__Header, COMDAT

; 3329 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3330 : 	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@PBDPAU1@1@Z ; soap_in_SOAP_ENV__Header
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_S@11

; 3331 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_S@11

; 3332 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_S@11
$LN2@soap_get_S@11:

; 3333 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_S@11:

; 3334 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@PAU1@PBD2@Z ENDP ; soap_get_SOAP_ENV__Header
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@PBDPAU1@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@PBDPAU1@1@Z PROC ; soap_in_SOAP_ENV__Header, COMDAT

; 3337 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3338 : 	if (soap_element_begin_in(soap, tag, 0, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN11@soap_in_SO@5

; 3339 : 		return NULL;

	xor	eax, eax
	jmp	$LN12@soap_in_SO@5
$LN11@soap_in_SO@5:

; 3340 : 	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	push	0
	push	1
	push	40					; 00000028H
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 81076				; 00013cb4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_enter
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 3341 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN10@soap_in_SO@5

; 3342 : 		return NULL;

	xor	eax, eax
	jmp	$LN12@soap_in_SO@5
$LN10@soap_in_SO@5:

; 3343 : 	soap_default_SOAP_ENV__Header(soap, a);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_SOAP_ENV__Header@@YAXPAUsoap@@PAUSOAP_ENV__Header@@@Z ; soap_default_SOAP_ENV__Header
	add	esp, 8

; 3344 : 	if (soap->body && !*soap->href)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN9@soap_in_SO@5
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	test	ecx, ecx
	jne	SHORT $LN9@soap_in_SO@5
$LN8@soap_in_SO@5:

; 3345 : 	{
; 3346 : 		for (;;)
; 3347 : 		{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 3348 : 			if (soap->error == SOAP_TAG_MISMATCH)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN6@soap_in_SO@5

; 3349 : 				soap->error = soap_ignore_element(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_ignore_element@@YAHPAUsoap@@@Z	; soap_ignore_element
	add	esp, 4
	mov	ecx, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [ecx+90460], eax
$LN6@soap_in_SO@5:

; 3350 : 			if (soap->error == SOAP_NO_TAG)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN5@soap_in_SO@5

; 3351 : 				break;

	jmp	SHORT $LN7@soap_in_SO@5
$LN5@soap_in_SO@5:

; 3352 : 			if (soap->error)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 0
	je	SHORT $LN4@soap_in_SO@5

; 3353 : 				return NULL;

	xor	eax, eax
	jmp	SHORT $LN12@soap_in_SO@5
$LN4@soap_in_SO@5:

; 3354 : 		}

	jmp	SHORT $LN8@soap_in_SO@5
$LN7@soap_in_SO@5:

; 3355 : 		if (soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@soap_in_SO@5

; 3356 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN12@soap_in_SO@5
$LN3@soap_in_SO@5:

; 3357 : 	}
; 3358 : 	else

	jmp	SHORT $LN2@soap_in_SO@5
$LN9@soap_in_SO@5:

; 3359 : 	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);

	push	0
	push	0
	push	1
	push	0
	push	40					; 00000028H
	push	0
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_forward
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 3360 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN2@soap_in_SO@5
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_in_SO@5

; 3361 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN12@soap_in_SO@5
$LN2@soap_in_SO@5:

; 3362 : 	}
; 3363 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN12@soap_in_SO@5:

; 3364 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@PBDPAU1@1@Z ENDP ; soap_in_SOAP_ENV__Header
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_new_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@H@Z PROC ; soap_new_SOAP_ENV__Header, COMDAT

; 3367 : {	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_SOAP_ENV__Header
	add	esp, 20					; 00000014H

; 3368 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@H@Z ENDP ; soap_new_SOAP_ENV__Header
_TEXT	ENDS
PUBLIC	?soap_delete_SOAP_ENV__Header@@YAXPAUsoap@@PAUSOAP_ENV__Header@@@Z ; soap_delete_SOAP_ENV__Header
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete_SOAP_ENV__Header@@YAXPAUsoap@@PAUSOAP_ENV__Header@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete_SOAP_ENV__Header@@YAXPAUsoap@@PAUSOAP_ENV__Header@@@Z PROC ; soap_delete_SOAP_ENV__Header, COMDAT

; 3371 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 3372 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete_SOAP_ENV__Header@@YAXPAUsoap@@PAUSOAP_ENV__Header@@@Z ENDP ; soap_delete_SOAP_ENV__Header
_TEXT	ENDS
PUBLIC	??_C@_0CP@DDIKDPCO@soap_instantiate_SOAP_ENV__Heade@ ; `string'
;	COMDAT ??_C@_0CP@DDIKDPCO@soap_instantiate_SOAP_ENV__Heade@
CONST	SEGMENT
??_C@_0CP@DDIKDPCO@soap_instantiate_SOAP_ENV__Heade@ DB 'soap_instantiate'
	DB	'_SOAP_ENV__Header(%d, %s, %s)', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_instantiate_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -260						; size = 4
tv77 = -256						; size = 4
$T101702 = -248						; size = 4
$T101703 = -236						; size = 4
_fdebug$90496 = -32					; size = 4
_cp$ = -20						; size = 4
_fdebug$90475 = -8					; size = 4
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate_SOAP_ENV__Header, COMDAT

; 3375 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3376 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN12@soap_insta@19
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN11@soap_insta@19
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN11@soap_insta@19:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN12@soap_insta@19
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90475[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN15@soap_insta@19
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN16@soap_insta@19
$LN15@soap_insta@19:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN16@soap_insta@19:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN17@soap_insta@19
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN18@soap_insta@19
$LN17@soap_insta@19:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN18@soap_insta@19:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CP@DDIKDPCO@soap_instantiate_SOAP_ENV__Heade@
	mov	edx, DWORD PTR _fdebug$90475[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90475[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@soap_insta@19:

; 3377 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	40					; 00000028H
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 3378 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN9@soap_insta@19

; 3379 : 		return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@19
$LN9@soap_insta@19:

; 3380 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN8@soap_insta@19

; 3381 : 	{	cp->ptr = (void*)new struct SOAP_ENV__Header;

	push	1
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101702[ebp], eax
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR $T101702[ebp]
	mov	DWORD PTR [eax+4], ecx

; 3382 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@19

; 3383 : 			*size = sizeof(struct SOAP_ENV__Header);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 1
$LN7@soap_insta@19:

; 3384 : 	}
; 3385 : 	else

	jmp	SHORT $LN6@soap_insta@19
$LN8@soap_insta@19:

; 3386 : 	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101703[ebp], eax
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101703[ebp]
	mov	DWORD PTR [ecx+4], edx

; 3387 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@soap_insta@19

; 3388 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 3389 : 			return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@19
$LN5@soap_insta@19:

; 3390 : 		}
; 3391 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN6@soap_insta@19

; 3392 : 			*size = n * sizeof(struct SOAP_ENV__Header);

	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax], ecx
$LN6@soap_insta@19:

; 3393 : 	}
; 3394 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@19
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@19
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@19:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@19
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90496[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$90496[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90496[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@19:

; 3395 : 	return (struct SOAP_ENV__Header*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN13@soap_insta@19:

; 3396 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_instantiate_SOAP_ENV__Header@@YAPAUSOAP_ENV__Header@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate_SOAP_ENV__Header
_TEXT	ENDS
PUBLIC	??_C@_0CK@CONILALL@Copying?5struct?5SOAP_ENV__Header?5@ ; `string'
PUBLIC	?soap_copy_SOAP_ENV__Header@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy_SOAP_ENV__Header
;	COMDAT ??_C@_0CK@CONILALL@Copying?5struct?5SOAP_ENV__Header?5@
CONST	SEGMENT
??_C@_0CK@CONILALL@Copying?5struct?5SOAP_ENV__Header?5@ DB 'Copying struc'
	DB	't SOAP_ENV__Header %p -> %p', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy_SOAP_ENV__Header@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$90511 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy_SOAP_ENV__Header@@YAXPAUsoap@@HHPAXIPBXI@Z PROC ; soap_copy_SOAP_ENV__Header, COMDAT

; 3398 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3399 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@18
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@18
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@18:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@18
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90511[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CK@CONILALL@Copying?5struct?5SOAP_ENV__Header?5@
	mov	edx, DWORD PTR _fdebug$90511[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90511[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@18:

; 3400 : 	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;

	mov	eax, DWORD PTR _q$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx], cl

; 3401 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy_SOAP_ENV__Header@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP ; soap_copy_SOAP_ENV__Header
_TEXT	ENDS
PUBLIC	?soap_default___ns1__submitEpochResult@@YAXPAUsoap@@PAU__ns1__submitEpochResult@@@Z ; soap_default___ns1__submitEpochResult
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default___ns1__submitEpochResult@@YAXPAUsoap@@PAU__ns1__submitEpochResult@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_default___ns1__submitEpochResult@@YAXPAUsoap@@PAU__ns1__submitEpochResult@@@Z PROC ; soap_default___ns1__submitEpochResult, COMDAT

; 3406 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3407 : 	(void)soap; (void)a; /* appease -Wall -Werror */
; 3408 : 	a->ns2__submitEpochResultElement = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], 0

; 3409 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_default___ns1__submitEpochResult@@YAXPAUsoap@@PAU__ns1__submitEpochResult@@@Z ENDP ; soap_default___ns1__submitEpochResult
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_serialize___ns1__submitEpochResult@@YAXPAUsoap@@PBU__ns1__submitEpochResult@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize___ns1__submitEpochResult@@YAXPAUsoap@@PBU__ns1__submitEpochResult@@@Z PROC ; soap_serialize___ns1__submitEpochResult, COMDAT

; 3412 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3413 : 	(void)soap; (void)a; /* appease -Wall -Werror */
; 3414 : 	soap_serialize_PointerTo_ns2__submitEpochResultElement(soap, &a->ns2__submitEpochResultElement);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_PointerTo_ns2__submitEpochResultElement@@YAXPAUsoap@@PBQAV_ns2__submitEpochResultElement@@@Z ; soap_serialize_PointerTo_ns2__submitEpochResultElement
	add	esp, 8

; 3415 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize___ns1__submitEpochResult@@YAXPAUsoap@@PBU__ns1__submitEpochResult@@@Z ENDP ; soap_serialize___ns1__submitEpochResult
_TEXT	ENDS
PUBLIC	?soap_out___ns1__submitEpochResult@@YAHPAUsoap@@PBDHPBU__ns1__submitEpochResult@@1@Z ; soap_out___ns1__submitEpochResult
PUBLIC	?soap_put___ns1__submitEpochResult@@YAHPAUsoap@@PBU__ns1__submitEpochResult@@PBD2@Z ; soap_put___ns1__submitEpochResult
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put___ns1__submitEpochResult@@YAHPAUsoap@@PBU__ns1__submitEpochResult@@PBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put___ns1__submitEpochResult@@YAHPAUsoap@@PBU__ns1__submitEpochResult@@PBD2@Z PROC ; soap_put___ns1__submitEpochResult, COMDAT

; 3418 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3419 : 	register int id = 0;

	mov	DWORD PTR _id$[ebp], 0

; 3420 : 	if (soap_out___ns1__submitEpochResult(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out___ns1__submitEpochResult@@YAHPAUsoap@@PBDHPBU__ns1__submitEpochResult@@1@Z ; soap_out___ns1__submitEpochResult
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put__

; 3421 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put__
$LN1@soap_put__:

; 3422 : 	return SOAP_OK;

	xor	eax, eax
$LN2@soap_put__:

; 3423 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put___ns1__submitEpochResult@@YAHPAUsoap@@PBU__ns1__submitEpochResult@@PBD2@Z ENDP ; soap_put___ns1__submitEpochResult
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out___ns1__submitEpochResult@@YAHPAUsoap@@PBDHPBU__ns1__submitEpochResult@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out___ns1__submitEpochResult@@YAHPAUsoap@@PBDHPBU__ns1__submitEpochResult@@1@Z PROC ; soap_out___ns1__submitEpochResult, COMDAT

; 3426 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3427 : 	if (soap_out_PointerTo_ns2__submitEpochResultElement(soap, "ns2:submitEpochResultElement", -1, &a->ns2__submitEpochResultElement, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	push	-1
	push	OFFSET ??_C@_0BN@LEHNEPKC@ns2?3submitEpochResultElement?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerTo_ns2__submitEpochResultElement@@YAHPAUsoap@@PBDHPBQAV_ns2__submitEpochResultElement@@1@Z ; soap_out_PointerTo_ns2__submitEpochResultElement
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_out__@12

; 3428 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_out__@12
$LN1@soap_out__@12:

; 3429 : 	return SOAP_OK;

	xor	eax, eax
$LN2@soap_out__@12:

; 3430 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out___ns1__submitEpochResult@@YAHPAUsoap@@PBDHPBU__ns1__submitEpochResult@@1@Z ENDP ; soap_out___ns1__submitEpochResult
_TEXT	ENDS
PUBLIC	?soap_in___ns1__submitEpochResult@@YAPAU__ns1__submitEpochResult@@PAUsoap@@PBDPAU1@1@Z ; soap_in___ns1__submitEpochResult
PUBLIC	?soap_get___ns1__submitEpochResult@@YAPAU__ns1__submitEpochResult@@PAUsoap@@PAU1@PBD2@Z ; soap_get___ns1__submitEpochResult
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get___ns1__submitEpochResult@@YAPAU__ns1__submitEpochResult@@PAUsoap@@PAU1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get___ns1__submitEpochResult@@YAPAU__ns1__submitEpochResult@@PAUsoap@@PAU1@PBD2@Z PROC ; soap_get___ns1__submitEpochResult, COMDAT

; 3433 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3434 : 	if ((p = soap_in___ns1__submitEpochResult(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in___ns1__submitEpochResult@@YAPAU__ns1__submitEpochResult@@PAUsoap@@PBDPAU1@1@Z ; soap_in___ns1__submitEpochResult
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get__@7

; 3435 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get__@7

; 3436 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get__@7
$LN2@soap_get__@7:

; 3437 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get__@7:

; 3438 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get___ns1__submitEpochResult@@YAPAU__ns1__submitEpochResult@@PAUsoap@@PAU1@PBD2@Z ENDP ; soap_get___ns1__submitEpochResult
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in___ns1__submitEpochResult@@YAPAU__ns1__submitEpochResult@@PAUsoap@@PBDPAU1@1@Z
_TEXT	SEGMENT
_soap_flag$ = -20					; size = 2
_soap_flag_ns2__submitEpochResultElement$ = -8		; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in___ns1__submitEpochResult@@YAPAU__ns1__submitEpochResult@@PAUsoap@@PBDPAU1@1@Z PROC ; soap_in___ns1__submitEpochResult, COMDAT

; 3441 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3442 : 	size_t soap_flag_ns2__submitEpochResultElement = 1;

	mov	DWORD PTR _soap_flag_ns2__submitEpochResultElement$[ebp], 1

; 3443 : 	short soap_flag;
; 3444 : 	a = (struct __ns1__submitEpochResult *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__submitEpochResult, sizeof(struct __ns1__submitEpochResult), 0, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	push	0
	push	4
	push	39					; 00000027H
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_id_enter
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 3445 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN10@soap_in___

; 3446 : 		return NULL;

	xor	eax, eax
	jmp	$LN11@soap_in___
$LN10@soap_in___:

; 3447 : 	soap_default___ns1__submitEpochResult(soap, a);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default___ns1__submitEpochResult@@YAXPAUsoap@@PAU__ns1__submitEpochResult@@@Z ; soap_default___ns1__submitEpochResult
	add	esp, 8

; 3448 : 		for (soap_flag = 0;; soap_flag = 1)

	xor	eax, eax
	mov	WORD PTR _soap_flag$[ebp], ax
	jmp	SHORT $LN9@soap_in___
$LN8@soap_in___:
	mov	eax, 1
	mov	WORD PTR _soap_flag$[ebp], ax
$LN9@soap_in___:

; 3449 : 		{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 3450 : 			if (soap_flag_ns2__submitEpochResultElement && soap->error == SOAP_TAG_MISMATCH)

	cmp	DWORD PTR _soap_flag_ns2__submitEpochResultElement$[ebp], 0
	je	SHORT $LN6@soap_in___
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN6@soap_in___

; 3451 : 				if (soap_in_PointerTo_ns2__submitEpochResultElement(soap, "ns2:submitEpochResultElement", &a->ns2__submitEpochResultElement, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	push	OFFSET ??_C@_0BN@LEHNEPKC@ns2?3submitEpochResultElement?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_PointerTo_ns2__submitEpochResultElement@@YAPAPAV_ns2__submitEpochResultElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__submitEpochResultElement
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN6@soap_in___

; 3452 : 				{	soap_flag_ns2__submitEpochResultElement--;

	mov	eax, DWORD PTR _soap_flag_ns2__submitEpochResultElement$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_ns2__submitEpochResultElement$[ebp], eax

; 3453 : 					continue;

	jmp	SHORT $LN8@soap_in___
$LN6@soap_in___:

; 3454 : 				}
; 3455 : 			if (soap->error == SOAP_TAG_MISMATCH)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN4@soap_in___

; 3456 : 				if (soap_flag)

	movsx	eax, WORD PTR _soap_flag$[ebp]
	test	eax, eax
	je	SHORT $LN4@soap_in___

; 3457 : 				{	soap->error = SOAP_OK;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 0

; 3458 : 					break;

	jmp	SHORT $LN7@soap_in___
$LN4@soap_in___:

; 3459 : 				}
; 3460 : 			if (soap->error == SOAP_NO_TAG)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN2@soap_in___

; 3461 : 				break;

	jmp	SHORT $LN7@soap_in___
$LN2@soap_in___:

; 3462 : 			if (soap->error)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 0
	je	SHORT $LN1@soap_in___

; 3463 : 				return NULL;

	xor	eax, eax
	jmp	SHORT $LN11@soap_in___
$LN1@soap_in___:

; 3464 : 		}

	jmp	$LN8@soap_in___
$LN7@soap_in___:

; 3465 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN11@soap_in___:

; 3466 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in___ns1__submitEpochResult@@YAPAU__ns1__submitEpochResult@@PAUsoap@@PBDPAU1@1@Z ENDP ; soap_in___ns1__submitEpochResult
_TEXT	ENDS
PUBLIC	?soap_new___ns1__submitEpochResult@@YAPAU__ns1__submitEpochResult@@PAUsoap@@H@Z ; soap_new___ns1__submitEpochResult
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_new___ns1__submitEpochResult@@YAPAU__ns1__submitEpochResult@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new___ns1__submitEpochResult@@YAPAU__ns1__submitEpochResult@@PAUsoap@@H@Z PROC ; soap_new___ns1__submitEpochResult, COMDAT

; 3469 : {	return soap_instantiate___ns1__submitEpochResult(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate___ns1__submitEpochResult@@YAPAU__ns1__submitEpochResult@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate___ns1__submitEpochResult
	add	esp, 20					; 00000014H

; 3470 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new___ns1__submitEpochResult@@YAPAU__ns1__submitEpochResult@@PAUsoap@@H@Z ENDP ; soap_new___ns1__submitEpochResult
_TEXT	ENDS
PUBLIC	?soap_delete___ns1__submitEpochResult@@YAXPAUsoap@@PAU__ns1__submitEpochResult@@@Z ; soap_delete___ns1__submitEpochResult
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete___ns1__submitEpochResult@@YAXPAUsoap@@PAU__ns1__submitEpochResult@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete___ns1__submitEpochResult@@YAXPAUsoap@@PAU__ns1__submitEpochResult@@@Z PROC ; soap_delete___ns1__submitEpochResult, COMDAT

; 3473 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 3474 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete___ns1__submitEpochResult@@YAXPAUsoap@@PAU__ns1__submitEpochResult@@@Z ENDP ; soap_delete___ns1__submitEpochResult
_TEXT	ENDS
PUBLIC	??_C@_0DH@OBFILBEH@soap_instantiate___ns1__submitEp@ ; `string'
;	COMDAT ??_C@_0DH@OBFILBEH@soap_instantiate___ns1__submitEp@
CONST	SEGMENT
??_C@_0DH@OBFILBEH@soap_instantiate___ns1__submitEp@ DB 'soap_instantiate'
	DB	'___ns1__submitEpochResult(%d, %s, %s)', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_instantiate___ns1__submitEpochResult@@YAPAU__ns1__submitEpochResult@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -260						; size = 4
tv77 = -256						; size = 4
$T101728 = -248						; size = 4
$T101729 = -236						; size = 4
_fdebug$90611 = -32					; size = 4
_cp$ = -20						; size = 4
_fdebug$90590 = -8					; size = 4
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate___ns1__submitEpochResult@@YAPAU__ns1__submitEpochResult@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate___ns1__submitEpochResult, COMDAT

; 3477 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3478 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__submitEpochResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN12@soap_insta@20
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN11@soap_insta@20
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN11@soap_insta@20:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN12@soap_insta@20
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90590[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN15@soap_insta@20
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN16@soap_insta@20
$LN15@soap_insta@20:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN16@soap_insta@20:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN17@soap_insta@20
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN18@soap_insta@20
$LN17@soap_insta@20:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN18@soap_insta@20:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DH@OBFILBEH@soap_instantiate___ns1__submitEp@
	mov	edx, DWORD PTR _fdebug$90590[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90590[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@soap_insta@20:

; 3479 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__submitEpochResult, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	39					; 00000027H
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 3480 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN9@soap_insta@20

; 3481 : 		return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@20
$LN9@soap_insta@20:

; 3482 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN8@soap_insta@20

; 3483 : 	{	cp->ptr = (void*)new struct __ns1__submitEpochResult;

	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101728[ebp], eax
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR $T101728[ebp]
	mov	DWORD PTR [eax+4], ecx

; 3484 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@20

; 3485 : 			*size = sizeof(struct __ns1__submitEpochResult);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 4
$LN7@soap_insta@20:

; 3486 : 	}
; 3487 : 	else

	jmp	SHORT $LN6@soap_insta@20
$LN8@soap_insta@20:

; 3488 : 	{	cp->ptr = (void*)new struct __ns1__submitEpochResult[n];

	xor	ecx, ecx
	mov	eax, DWORD PTR _n$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101729[ebp], eax
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR $T101729[ebp]
	mov	DWORD PTR [eax+4], ecx

; 3489 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@soap_insta@20

; 3490 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 3491 : 			return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@20
$LN5@soap_insta@20:

; 3492 : 		}
; 3493 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN6@soap_insta@20

; 3494 : 			*size = n * sizeof(struct __ns1__submitEpochResult);

	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN6@soap_insta@20:

; 3495 : 	}
; 3496 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@20
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@20
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@20:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@20
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90611[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$90611[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90611[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@20:

; 3497 : 	return (struct __ns1__submitEpochResult*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN13@soap_insta@20:

; 3498 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_instantiate___ns1__submitEpochResult@@YAPAU__ns1__submitEpochResult@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate___ns1__submitEpochResult
_TEXT	ENDS
PUBLIC	??_C@_0DC@BLHHABAJ@Copying?5struct?5__ns1__submitEpoc@ ; `string'
PUBLIC	?soap_copy___ns1__submitEpochResult@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy___ns1__submitEpochResult
;	COMDAT ??_C@_0DC@BLHHABAJ@Copying?5struct?5__ns1__submitEpoc@
CONST	SEGMENT
??_C@_0DC@BLHHABAJ@Copying?5struct?5__ns1__submitEpoc@ DB 'Copying struct'
	DB	' __ns1__submitEpochResult %p -> %p', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy___ns1__submitEpochResult@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$90626 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy___ns1__submitEpochResult@@YAXPAUsoap@@HHPAXIPBXI@Z PROC ; soap_copy___ns1__submitEpochResult, COMDAT

; 3500 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3501 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__submitEpochResult %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@19
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@19
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@19:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@19
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90626[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DC@BLHHABAJ@Copying?5struct?5__ns1__submitEpoc@
	mov	edx, DWORD PTR _fdebug$90626[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90626[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@19:

; 3502 : 	*(struct __ns1__submitEpochResult*)p = *(struct __ns1__submitEpochResult*)q;

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx

; 3503 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy___ns1__submitEpochResult@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP ; soap_copy___ns1__submitEpochResult
_TEXT	ENDS
PUBLIC	?soap_default___ns1__getSettingsFile@@YAXPAUsoap@@PAU__ns1__getSettingsFile@@@Z ; soap_default___ns1__getSettingsFile
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default___ns1__getSettingsFile@@YAXPAUsoap@@PAU__ns1__getSettingsFile@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_default___ns1__getSettingsFile@@YAXPAUsoap@@PAU__ns1__getSettingsFile@@@Z PROC ; soap_default___ns1__getSettingsFile, COMDAT

; 3506 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3507 : 	(void)soap; (void)a; /* appease -Wall -Werror */
; 3508 : 	a->ns2__getSettingsFileElement = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], 0

; 3509 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_default___ns1__getSettingsFile@@YAXPAUsoap@@PAU__ns1__getSettingsFile@@@Z ENDP ; soap_default___ns1__getSettingsFile
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_serialize___ns1__getSettingsFile@@YAXPAUsoap@@PBU__ns1__getSettingsFile@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize___ns1__getSettingsFile@@YAXPAUsoap@@PBU__ns1__getSettingsFile@@@Z PROC ; soap_serialize___ns1__getSettingsFile, COMDAT

; 3512 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3513 : 	(void)soap; (void)a; /* appease -Wall -Werror */
; 3514 : 	soap_serialize_PointerTo_ns2__getSettingsFileElement(soap, &a->ns2__getSettingsFileElement);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_PointerTo_ns2__getSettingsFileElement@@YAXPAUsoap@@PBQAV_ns2__getSettingsFileElement@@@Z ; soap_serialize_PointerTo_ns2__getSettingsFileElement
	add	esp, 8

; 3515 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize___ns1__getSettingsFile@@YAXPAUsoap@@PBU__ns1__getSettingsFile@@@Z ENDP ; soap_serialize___ns1__getSettingsFile
_TEXT	ENDS
PUBLIC	?soap_out___ns1__getSettingsFile@@YAHPAUsoap@@PBDHPBU__ns1__getSettingsFile@@1@Z ; soap_out___ns1__getSettingsFile
PUBLIC	?soap_put___ns1__getSettingsFile@@YAHPAUsoap@@PBU__ns1__getSettingsFile@@PBD2@Z ; soap_put___ns1__getSettingsFile
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put___ns1__getSettingsFile@@YAHPAUsoap@@PBU__ns1__getSettingsFile@@PBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put___ns1__getSettingsFile@@YAHPAUsoap@@PBU__ns1__getSettingsFile@@PBD2@Z PROC ; soap_put___ns1__getSettingsFile, COMDAT

; 3518 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3519 : 	register int id = 0;

	mov	DWORD PTR _id$[ebp], 0

; 3520 : 	if (soap_out___ns1__getSettingsFile(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out___ns1__getSettingsFile@@YAHPAUsoap@@PBDHPBU__ns1__getSettingsFile@@1@Z ; soap_out___ns1__getSettingsFile
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put__@2

; 3521 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put__@2
$LN1@soap_put__@2:

; 3522 : 	return SOAP_OK;

	xor	eax, eax
$LN2@soap_put__@2:

; 3523 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put___ns1__getSettingsFile@@YAHPAUsoap@@PBU__ns1__getSettingsFile@@PBD2@Z ENDP ; soap_put___ns1__getSettingsFile
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out___ns1__getSettingsFile@@YAHPAUsoap@@PBDHPBU__ns1__getSettingsFile@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out___ns1__getSettingsFile@@YAHPAUsoap@@PBDHPBU__ns1__getSettingsFile@@1@Z PROC ; soap_out___ns1__getSettingsFile, COMDAT

; 3526 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3527 : 	if (soap_out_PointerTo_ns2__getSettingsFileElement(soap, "ns2:getSettingsFileElement", -1, &a->ns2__getSettingsFileElement, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	push	-1
	push	OFFSET ??_C@_0BL@EBHOCBLE@ns2?3getSettingsFileElement?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerTo_ns2__getSettingsFileElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSettingsFileElement@@1@Z ; soap_out_PointerTo_ns2__getSettingsFileElement
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_out__@13

; 3528 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_out__@13
$LN1@soap_out__@13:

; 3529 : 	return SOAP_OK;

	xor	eax, eax
$LN2@soap_out__@13:

; 3530 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out___ns1__getSettingsFile@@YAHPAUsoap@@PBDHPBU__ns1__getSettingsFile@@1@Z ENDP ; soap_out___ns1__getSettingsFile
_TEXT	ENDS
PUBLIC	?soap_in___ns1__getSettingsFile@@YAPAU__ns1__getSettingsFile@@PAUsoap@@PBDPAU1@1@Z ; soap_in___ns1__getSettingsFile
PUBLIC	?soap_get___ns1__getSettingsFile@@YAPAU__ns1__getSettingsFile@@PAUsoap@@PAU1@PBD2@Z ; soap_get___ns1__getSettingsFile
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get___ns1__getSettingsFile@@YAPAU__ns1__getSettingsFile@@PAUsoap@@PAU1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get___ns1__getSettingsFile@@YAPAU__ns1__getSettingsFile@@PAUsoap@@PAU1@PBD2@Z PROC ; soap_get___ns1__getSettingsFile, COMDAT

; 3533 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3534 : 	if ((p = soap_in___ns1__getSettingsFile(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in___ns1__getSettingsFile@@YAPAU__ns1__getSettingsFile@@PAUsoap@@PBDPAU1@1@Z ; soap_in___ns1__getSettingsFile
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get__@8

; 3535 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get__@8

; 3536 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get__@8
$LN2@soap_get__@8:

; 3537 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get__@8:

; 3538 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get___ns1__getSettingsFile@@YAPAU__ns1__getSettingsFile@@PAUsoap@@PAU1@PBD2@Z ENDP ; soap_get___ns1__getSettingsFile
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in___ns1__getSettingsFile@@YAPAU__ns1__getSettingsFile@@PAUsoap@@PBDPAU1@1@Z
_TEXT	SEGMENT
_soap_flag$ = -20					; size = 2
_soap_flag_ns2__getSettingsFileElement$ = -8		; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in___ns1__getSettingsFile@@YAPAU__ns1__getSettingsFile@@PAUsoap@@PBDPAU1@1@Z PROC ; soap_in___ns1__getSettingsFile, COMDAT

; 3541 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3542 : 	size_t soap_flag_ns2__getSettingsFileElement = 1;

	mov	DWORD PTR _soap_flag_ns2__getSettingsFileElement$[ebp], 1

; 3543 : 	short soap_flag;
; 3544 : 	a = (struct __ns1__getSettingsFile *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getSettingsFile, sizeof(struct __ns1__getSettingsFile), 0, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	push	0
	push	4
	push	35					; 00000023H
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_id_enter
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 3545 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN10@soap_in___@2

; 3546 : 		return NULL;

	xor	eax, eax
	jmp	$LN11@soap_in___@2
$LN10@soap_in___@2:

; 3547 : 	soap_default___ns1__getSettingsFile(soap, a);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default___ns1__getSettingsFile@@YAXPAUsoap@@PAU__ns1__getSettingsFile@@@Z ; soap_default___ns1__getSettingsFile
	add	esp, 8

; 3548 : 		for (soap_flag = 0;; soap_flag = 1)

	xor	eax, eax
	mov	WORD PTR _soap_flag$[ebp], ax
	jmp	SHORT $LN9@soap_in___@2
$LN8@soap_in___@2:
	mov	eax, 1
	mov	WORD PTR _soap_flag$[ebp], ax
$LN9@soap_in___@2:

; 3549 : 		{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 3550 : 			if (soap_flag_ns2__getSettingsFileElement && soap->error == SOAP_TAG_MISMATCH)

	cmp	DWORD PTR _soap_flag_ns2__getSettingsFileElement$[ebp], 0
	je	SHORT $LN6@soap_in___@2
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN6@soap_in___@2

; 3551 : 				if (soap_in_PointerTo_ns2__getSettingsFileElement(soap, "ns2:getSettingsFileElement", &a->ns2__getSettingsFileElement, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	push	OFFSET ??_C@_0BL@EBHOCBLE@ns2?3getSettingsFileElement?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_PointerTo_ns2__getSettingsFileElement@@YAPAPAV_ns2__getSettingsFileElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__getSettingsFileElement
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN6@soap_in___@2

; 3552 : 				{	soap_flag_ns2__getSettingsFileElement--;

	mov	eax, DWORD PTR _soap_flag_ns2__getSettingsFileElement$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_ns2__getSettingsFileElement$[ebp], eax

; 3553 : 					continue;

	jmp	SHORT $LN8@soap_in___@2
$LN6@soap_in___@2:

; 3554 : 				}
; 3555 : 			if (soap->error == SOAP_TAG_MISMATCH)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN4@soap_in___@2

; 3556 : 				if (soap_flag)

	movsx	eax, WORD PTR _soap_flag$[ebp]
	test	eax, eax
	je	SHORT $LN4@soap_in___@2

; 3557 : 				{	soap->error = SOAP_OK;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 0

; 3558 : 					break;

	jmp	SHORT $LN7@soap_in___@2
$LN4@soap_in___@2:

; 3559 : 				}
; 3560 : 			if (soap->error == SOAP_NO_TAG)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN2@soap_in___@2

; 3561 : 				break;

	jmp	SHORT $LN7@soap_in___@2
$LN2@soap_in___@2:

; 3562 : 			if (soap->error)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 0
	je	SHORT $LN1@soap_in___@2

; 3563 : 				return NULL;

	xor	eax, eax
	jmp	SHORT $LN11@soap_in___@2
$LN1@soap_in___@2:

; 3564 : 		}

	jmp	$LN8@soap_in___@2
$LN7@soap_in___@2:

; 3565 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN11@soap_in___@2:

; 3566 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in___ns1__getSettingsFile@@YAPAU__ns1__getSettingsFile@@PAUsoap@@PBDPAU1@1@Z ENDP ; soap_in___ns1__getSettingsFile
_TEXT	ENDS
PUBLIC	?soap_new___ns1__getSettingsFile@@YAPAU__ns1__getSettingsFile@@PAUsoap@@H@Z ; soap_new___ns1__getSettingsFile
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_new___ns1__getSettingsFile@@YAPAU__ns1__getSettingsFile@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new___ns1__getSettingsFile@@YAPAU__ns1__getSettingsFile@@PAUsoap@@H@Z PROC ; soap_new___ns1__getSettingsFile, COMDAT

; 3569 : {	return soap_instantiate___ns1__getSettingsFile(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate___ns1__getSettingsFile@@YAPAU__ns1__getSettingsFile@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate___ns1__getSettingsFile
	add	esp, 20					; 00000014H

; 3570 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new___ns1__getSettingsFile@@YAPAU__ns1__getSettingsFile@@PAUsoap@@H@Z ENDP ; soap_new___ns1__getSettingsFile
_TEXT	ENDS
PUBLIC	?soap_delete___ns1__getSettingsFile@@YAXPAUsoap@@PAU__ns1__getSettingsFile@@@Z ; soap_delete___ns1__getSettingsFile
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete___ns1__getSettingsFile@@YAXPAUsoap@@PAU__ns1__getSettingsFile@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete___ns1__getSettingsFile@@YAXPAUsoap@@PAU__ns1__getSettingsFile@@@Z PROC ; soap_delete___ns1__getSettingsFile, COMDAT

; 3573 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 3574 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete___ns1__getSettingsFile@@YAXPAUsoap@@PAU__ns1__getSettingsFile@@@Z ENDP ; soap_delete___ns1__getSettingsFile
_TEXT	ENDS
PUBLIC	??_C@_0DF@BNMGAOKL@soap_instantiate___ns1__getSetti@ ; `string'
;	COMDAT ??_C@_0DF@BNMGAOKL@soap_instantiate___ns1__getSetti@
CONST	SEGMENT
??_C@_0DF@BNMGAOKL@soap_instantiate___ns1__getSetti@ DB 'soap_instantiate'
	DB	'___ns1__getSettingsFile(%d, %s, %s)', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_instantiate___ns1__getSettingsFile@@YAPAU__ns1__getSettingsFile@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -260						; size = 4
tv77 = -256						; size = 4
$T101754 = -248						; size = 4
$T101755 = -236						; size = 4
_fdebug$90726 = -32					; size = 4
_cp$ = -20						; size = 4
_fdebug$90705 = -8					; size = 4
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate___ns1__getSettingsFile@@YAPAU__ns1__getSettingsFile@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate___ns1__getSettingsFile, COMDAT

; 3577 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3578 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getSettingsFile(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN12@soap_insta@21
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN11@soap_insta@21
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN11@soap_insta@21:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN12@soap_insta@21
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90705[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN15@soap_insta@21
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN16@soap_insta@21
$LN15@soap_insta@21:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN16@soap_insta@21:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN17@soap_insta@21
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN18@soap_insta@21
$LN17@soap_insta@21:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN18@soap_insta@21:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DF@BNMGAOKL@soap_instantiate___ns1__getSetti@
	mov	edx, DWORD PTR _fdebug$90705[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90705[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@soap_insta@21:

; 3579 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getSettingsFile, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	35					; 00000023H
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 3580 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN9@soap_insta@21

; 3581 : 		return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@21
$LN9@soap_insta@21:

; 3582 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN8@soap_insta@21

; 3583 : 	{	cp->ptr = (void*)new struct __ns1__getSettingsFile;

	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101754[ebp], eax
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR $T101754[ebp]
	mov	DWORD PTR [eax+4], ecx

; 3584 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@21

; 3585 : 			*size = sizeof(struct __ns1__getSettingsFile);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 4
$LN7@soap_insta@21:

; 3586 : 	}
; 3587 : 	else

	jmp	SHORT $LN6@soap_insta@21
$LN8@soap_insta@21:

; 3588 : 	{	cp->ptr = (void*)new struct __ns1__getSettingsFile[n];

	xor	ecx, ecx
	mov	eax, DWORD PTR _n$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101755[ebp], eax
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR $T101755[ebp]
	mov	DWORD PTR [eax+4], ecx

; 3589 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@soap_insta@21

; 3590 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 3591 : 			return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@21
$LN5@soap_insta@21:

; 3592 : 		}
; 3593 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN6@soap_insta@21

; 3594 : 			*size = n * sizeof(struct __ns1__getSettingsFile);

	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN6@soap_insta@21:

; 3595 : 	}
; 3596 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@21
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@21
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@21:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@21
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90726[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$90726[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90726[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@21:

; 3597 : 	return (struct __ns1__getSettingsFile*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN13@soap_insta@21:

; 3598 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_instantiate___ns1__getSettingsFile@@YAPAU__ns1__getSettingsFile@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate___ns1__getSettingsFile
_TEXT	ENDS
PUBLIC	??_C@_0DA@PHAJKKNJ@Copying?5struct?5__ns1__getSetting@ ; `string'
PUBLIC	?soap_copy___ns1__getSettingsFile@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy___ns1__getSettingsFile
;	COMDAT ??_C@_0DA@PHAJKKNJ@Copying?5struct?5__ns1__getSetting@
CONST	SEGMENT
??_C@_0DA@PHAJKKNJ@Copying?5struct?5__ns1__getSetting@ DB 'Copying struct'
	DB	' __ns1__getSettingsFile %p -> %p', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy___ns1__getSettingsFile@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$90741 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy___ns1__getSettingsFile@@YAXPAUsoap@@HHPAXIPBXI@Z PROC ; soap_copy___ns1__getSettingsFile, COMDAT

; 3600 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3601 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getSettingsFile %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@20
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@20
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@20:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@20
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90741[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DA@PHAJKKNJ@Copying?5struct?5__ns1__getSetting@
	mov	edx, DWORD PTR _fdebug$90741[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90741[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@20:

; 3602 : 	*(struct __ns1__getSettingsFile*)p = *(struct __ns1__getSettingsFile*)q;

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx

; 3603 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy___ns1__getSettingsFile@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP ; soap_copy___ns1__getSettingsFile
_TEXT	ENDS
PUBLIC	?soap_default___ns1__getSessionID@@YAXPAUsoap@@PAU__ns1__getSessionID@@@Z ; soap_default___ns1__getSessionID
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default___ns1__getSessionID@@YAXPAUsoap@@PAU__ns1__getSessionID@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_default___ns1__getSessionID@@YAXPAUsoap@@PAU__ns1__getSessionID@@@Z PROC ; soap_default___ns1__getSessionID, COMDAT

; 3606 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3607 : 	(void)soap; (void)a; /* appease -Wall -Werror */
; 3608 : 	a->ns2__getSessionIDElement = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], 0

; 3609 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_default___ns1__getSessionID@@YAXPAUsoap@@PAU__ns1__getSessionID@@@Z ENDP ; soap_default___ns1__getSessionID
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_serialize___ns1__getSessionID@@YAXPAUsoap@@PBU__ns1__getSessionID@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize___ns1__getSessionID@@YAXPAUsoap@@PBU__ns1__getSessionID@@@Z PROC ; soap_serialize___ns1__getSessionID, COMDAT

; 3612 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3613 : 	(void)soap; (void)a; /* appease -Wall -Werror */
; 3614 : 	soap_serialize_PointerTo_ns2__getSessionIDElement(soap, &a->ns2__getSessionIDElement);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_PointerTo_ns2__getSessionIDElement@@YAXPAUsoap@@PBQAV_ns2__getSessionIDElement@@@Z ; soap_serialize_PointerTo_ns2__getSessionIDElement
	add	esp, 8

; 3615 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize___ns1__getSessionID@@YAXPAUsoap@@PBU__ns1__getSessionID@@@Z ENDP ; soap_serialize___ns1__getSessionID
_TEXT	ENDS
PUBLIC	?soap_out___ns1__getSessionID@@YAHPAUsoap@@PBDHPBU__ns1__getSessionID@@1@Z ; soap_out___ns1__getSessionID
PUBLIC	?soap_put___ns1__getSessionID@@YAHPAUsoap@@PBU__ns1__getSessionID@@PBD2@Z ; soap_put___ns1__getSessionID
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put___ns1__getSessionID@@YAHPAUsoap@@PBU__ns1__getSessionID@@PBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put___ns1__getSessionID@@YAHPAUsoap@@PBU__ns1__getSessionID@@PBD2@Z PROC ; soap_put___ns1__getSessionID, COMDAT

; 3618 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3619 : 	register int id = 0;

	mov	DWORD PTR _id$[ebp], 0

; 3620 : 	if (soap_out___ns1__getSessionID(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out___ns1__getSessionID@@YAHPAUsoap@@PBDHPBU__ns1__getSessionID@@1@Z ; soap_out___ns1__getSessionID
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put__@3

; 3621 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put__@3
$LN1@soap_put__@3:

; 3622 : 	return SOAP_OK;

	xor	eax, eax
$LN2@soap_put__@3:

; 3623 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put___ns1__getSessionID@@YAHPAUsoap@@PBU__ns1__getSessionID@@PBD2@Z ENDP ; soap_put___ns1__getSessionID
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out___ns1__getSessionID@@YAHPAUsoap@@PBDHPBU__ns1__getSessionID@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out___ns1__getSessionID@@YAHPAUsoap@@PBDHPBU__ns1__getSessionID@@1@Z PROC ; soap_out___ns1__getSessionID, COMDAT

; 3626 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3627 : 	if (soap_out_PointerTo_ns2__getSessionIDElement(soap, "ns2:getSessionIDElement", -1, &a->ns2__getSessionIDElement, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	push	-1
	push	OFFSET ??_C@_0BI@CHGDHCPP@ns2?3getSessionIDElement?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerTo_ns2__getSessionIDElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSessionIDElement@@1@Z ; soap_out_PointerTo_ns2__getSessionIDElement
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_out__@14

; 3628 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_out__@14
$LN1@soap_out__@14:

; 3629 : 	return SOAP_OK;

	xor	eax, eax
$LN2@soap_out__@14:

; 3630 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out___ns1__getSessionID@@YAHPAUsoap@@PBDHPBU__ns1__getSessionID@@1@Z ENDP ; soap_out___ns1__getSessionID
_TEXT	ENDS
PUBLIC	?soap_in___ns1__getSessionID@@YAPAU__ns1__getSessionID@@PAUsoap@@PBDPAU1@1@Z ; soap_in___ns1__getSessionID
PUBLIC	?soap_get___ns1__getSessionID@@YAPAU__ns1__getSessionID@@PAUsoap@@PAU1@PBD2@Z ; soap_get___ns1__getSessionID
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get___ns1__getSessionID@@YAPAU__ns1__getSessionID@@PAUsoap@@PAU1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get___ns1__getSessionID@@YAPAU__ns1__getSessionID@@PAUsoap@@PAU1@PBD2@Z PROC ; soap_get___ns1__getSessionID, COMDAT

; 3633 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3634 : 	if ((p = soap_in___ns1__getSessionID(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in___ns1__getSessionID@@YAPAU__ns1__getSessionID@@PAUsoap@@PBDPAU1@1@Z ; soap_in___ns1__getSessionID
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get__@9

; 3635 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get__@9

; 3636 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get__@9
$LN2@soap_get__@9:

; 3637 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get__@9:

; 3638 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get___ns1__getSessionID@@YAPAU__ns1__getSessionID@@PAUsoap@@PAU1@PBD2@Z ENDP ; soap_get___ns1__getSessionID
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in___ns1__getSessionID@@YAPAU__ns1__getSessionID@@PAUsoap@@PBDPAU1@1@Z
_TEXT	SEGMENT
_soap_flag$ = -20					; size = 2
_soap_flag_ns2__getSessionIDElement$ = -8		; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in___ns1__getSessionID@@YAPAU__ns1__getSessionID@@PAUsoap@@PBDPAU1@1@Z PROC ; soap_in___ns1__getSessionID, COMDAT

; 3641 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3642 : 	size_t soap_flag_ns2__getSessionIDElement = 1;

	mov	DWORD PTR _soap_flag_ns2__getSessionIDElement$[ebp], 1

; 3643 : 	short soap_flag;
; 3644 : 	a = (struct __ns1__getSessionID *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getSessionID, sizeof(struct __ns1__getSessionID), 0, NULL, NULL, NULL);

	push	0
	push	0
	push	0
	push	0
	push	4
	push	31					; 0000001fH
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_id_enter
	add	esp, 36					; 00000024H
	mov	DWORD PTR _a$[ebp], eax

; 3645 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN10@soap_in___@3

; 3646 : 		return NULL;

	xor	eax, eax
	jmp	$LN11@soap_in___@3
$LN10@soap_in___@3:

; 3647 : 	soap_default___ns1__getSessionID(soap, a);

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default___ns1__getSessionID@@YAXPAUsoap@@PAU__ns1__getSessionID@@@Z ; soap_default___ns1__getSessionID
	add	esp, 8

; 3648 : 		for (soap_flag = 0;; soap_flag = 1)

	xor	eax, eax
	mov	WORD PTR _soap_flag$[ebp], ax
	jmp	SHORT $LN9@soap_in___@3
$LN8@soap_in___@3:
	mov	eax, 1
	mov	WORD PTR _soap_flag$[ebp], ax
$LN9@soap_in___@3:

; 3649 : 		{	soap->error = SOAP_TAG_MISMATCH;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 3

; 3650 : 			if (soap_flag_ns2__getSessionIDElement && soap->error == SOAP_TAG_MISMATCH)

	cmp	DWORD PTR _soap_flag_ns2__getSessionIDElement$[ebp], 0
	je	SHORT $LN6@soap_in___@3
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN6@soap_in___@3

; 3651 : 				if (soap_in_PointerTo_ns2__getSessionIDElement(soap, "ns2:getSessionIDElement", &a->ns2__getSessionIDElement, ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	push	OFFSET ??_C@_0BI@CHGDHCPP@ns2?3getSessionIDElement?$AA@
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_PointerTo_ns2__getSessionIDElement@@YAPAPAV_ns2__getSessionIDElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__getSessionIDElement
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN6@soap_in___@3

; 3652 : 				{	soap_flag_ns2__getSessionIDElement--;

	mov	eax, DWORD PTR _soap_flag_ns2__getSessionIDElement$[ebp]
	sub	eax, 1
	mov	DWORD PTR _soap_flag_ns2__getSessionIDElement$[ebp], eax

; 3653 : 					continue;

	jmp	SHORT $LN8@soap_in___@3
$LN6@soap_in___@3:

; 3654 : 				}
; 3655 : 			if (soap->error == SOAP_TAG_MISMATCH)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	jne	SHORT $LN4@soap_in___@3

; 3656 : 				if (soap_flag)

	movsx	eax, WORD PTR _soap_flag$[ebp]
	test	eax, eax
	je	SHORT $LN4@soap_in___@3

; 3657 : 				{	soap->error = SOAP_OK;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 0

; 3658 : 					break;

	jmp	SHORT $LN7@soap_in___@3
$LN4@soap_in___@3:

; 3659 : 				}
; 3660 : 			if (soap->error == SOAP_NO_TAG)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN2@soap_in___@3

; 3661 : 				break;

	jmp	SHORT $LN7@soap_in___@3
$LN2@soap_in___@3:

; 3662 : 			if (soap->error)

	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 0
	je	SHORT $LN1@soap_in___@3

; 3663 : 				return NULL;

	xor	eax, eax
	jmp	SHORT $LN11@soap_in___@3
$LN1@soap_in___@3:

; 3664 : 		}

	jmp	$LN8@soap_in___@3
$LN7@soap_in___@3:

; 3665 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN11@soap_in___@3:

; 3666 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in___ns1__getSessionID@@YAPAU__ns1__getSessionID@@PAUsoap@@PBDPAU1@1@Z ENDP ; soap_in___ns1__getSessionID
_TEXT	ENDS
PUBLIC	?soap_new___ns1__getSessionID@@YAPAU__ns1__getSessionID@@PAUsoap@@H@Z ; soap_new___ns1__getSessionID
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_new___ns1__getSessionID@@YAPAU__ns1__getSessionID@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new___ns1__getSessionID@@YAPAU__ns1__getSessionID@@PAUsoap@@H@Z PROC ; soap_new___ns1__getSessionID, COMDAT

; 3669 : {	return soap_instantiate___ns1__getSessionID(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate___ns1__getSessionID@@YAPAU__ns1__getSessionID@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate___ns1__getSessionID
	add	esp, 20					; 00000014H

; 3670 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new___ns1__getSessionID@@YAPAU__ns1__getSessionID@@PAUsoap@@H@Z ENDP ; soap_new___ns1__getSessionID
_TEXT	ENDS
PUBLIC	?soap_delete___ns1__getSessionID@@YAXPAUsoap@@PAU__ns1__getSessionID@@@Z ; soap_delete___ns1__getSessionID
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete___ns1__getSessionID@@YAXPAUsoap@@PAU__ns1__getSessionID@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete___ns1__getSessionID@@YAXPAUsoap@@PAU__ns1__getSessionID@@@Z PROC ; soap_delete___ns1__getSessionID, COMDAT

; 3673 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 3674 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete___ns1__getSessionID@@YAXPAUsoap@@PAU__ns1__getSessionID@@@Z ENDP ; soap_delete___ns1__getSessionID
_TEXT	ENDS
PUBLIC	??_C@_0DC@OCGNCMFG@soap_instantiate___ns1__getSessi@ ; `string'
;	COMDAT ??_C@_0DC@OCGNCMFG@soap_instantiate___ns1__getSessi@
CONST	SEGMENT
??_C@_0DC@OCGNCMFG@soap_instantiate___ns1__getSessi@ DB 'soap_instantiate'
	DB	'___ns1__getSessionID(%d, %s, %s)', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_instantiate___ns1__getSessionID@@YAPAU__ns1__getSessionID@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -260						; size = 4
tv77 = -256						; size = 4
$T101780 = -248						; size = 4
$T101781 = -236						; size = 4
_fdebug$90841 = -32					; size = 4
_cp$ = -20						; size = 4
_fdebug$90820 = -8					; size = 4
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate___ns1__getSessionID@@YAPAU__ns1__getSessionID@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate___ns1__getSessionID, COMDAT

; 3677 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3678 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getSessionID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN12@soap_insta@22
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN11@soap_insta@22
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN11@soap_insta@22:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN12@soap_insta@22
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90820[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN15@soap_insta@22
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN16@soap_insta@22
$LN15@soap_insta@22:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN16@soap_insta@22:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN17@soap_insta@22
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN18@soap_insta@22
$LN17@soap_insta@22:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN18@soap_insta@22:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DC@OCGNCMFG@soap_instantiate___ns1__getSessi@
	mov	edx, DWORD PTR _fdebug$90820[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90820[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@soap_insta@22:

; 3679 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getSessionID, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	31					; 0000001fH
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 3680 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN9@soap_insta@22

; 3681 : 		return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@22
$LN9@soap_insta@22:

; 3682 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN8@soap_insta@22

; 3683 : 	{	cp->ptr = (void*)new struct __ns1__getSessionID;

	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101780[ebp], eax
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR $T101780[ebp]
	mov	DWORD PTR [eax+4], ecx

; 3684 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@22

; 3685 : 			*size = sizeof(struct __ns1__getSessionID);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 4
$LN7@soap_insta@22:

; 3686 : 	}
; 3687 : 	else

	jmp	SHORT $LN6@soap_insta@22
$LN8@soap_insta@22:

; 3688 : 	{	cp->ptr = (void*)new struct __ns1__getSessionID[n];

	xor	ecx, ecx
	mov	eax, DWORD PTR _n$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101781[ebp], eax
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR $T101781[ebp]
	mov	DWORD PTR [eax+4], ecx

; 3689 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@soap_insta@22

; 3690 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 3691 : 			return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@22
$LN5@soap_insta@22:

; 3692 : 		}
; 3693 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN6@soap_insta@22

; 3694 : 			*size = n * sizeof(struct __ns1__getSessionID);

	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN6@soap_insta@22:

; 3695 : 	}
; 3696 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@22
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@22
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@22:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@22
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90841[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$90841[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90841[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@22:

; 3697 : 	return (struct __ns1__getSessionID*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN13@soap_insta@22:

; 3698 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_instantiate___ns1__getSessionID@@YAPAU__ns1__getSessionID@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate___ns1__getSessionID
_TEXT	ENDS
PUBLIC	??_C@_0CN@GPFLCKCE@Copying?5struct?5__ns1__getSession@ ; `string'
PUBLIC	?soap_copy___ns1__getSessionID@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy___ns1__getSessionID
;	COMDAT ??_C@_0CN@GPFLCKCE@Copying?5struct?5__ns1__getSession@
CONST	SEGMENT
??_C@_0CN@GPFLCKCE@Copying?5struct?5__ns1__getSession@ DB 'Copying struct'
	DB	' __ns1__getSessionID %p -> %p', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy___ns1__getSessionID@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$90856 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy___ns1__getSessionID@@YAXPAUsoap@@HHPAXIPBXI@Z PROC ; soap_copy___ns1__getSessionID, COMDAT

; 3700 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3701 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getSessionID %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@21
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@21
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@21:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@21
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$90856[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CN@GPFLCKCE@Copying?5struct?5__ns1__getSession@
	mov	edx, DWORD PTR _fdebug$90856[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$90856[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@21:

; 3702 : 	*(struct __ns1__getSessionID*)p = *(struct __ns1__getSessionID*)q;

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx

; 3703 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy___ns1__getSessionID@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP ; soap_copy___ns1__getSessionID
_TEXT	ENDS
EXTRN	_soap_reference:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_serialize_PointerToSOAP_ENV__Reason@@YAXPAUsoap@@PBQAUSOAP_ENV__Reason@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize_PointerToSOAP_ENV__Reason@@YAXPAUsoap@@PBQAUSOAP_ENV__Reason@@@Z PROC ; soap_serialize_PointerToSOAP_ENV__Reason, COMDAT

; 3708 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3709 : 	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))

	push	46					; 0000002eH
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_reference
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@soap_seria@3

; 3710 : 		soap_serialize_SOAP_ENV__Reason(soap, *a);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_serialize_SOAP_ENV__Reason@@YAXPAUsoap@@PBUSOAP_ENV__Reason@@@Z ; soap_serialize_SOAP_ENV__Reason
	add	esp, 8
$LN2@soap_seria@3:

; 3711 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize_PointerToSOAP_ENV__Reason@@YAXPAUsoap@@PBQAUSOAP_ENV__Reason@@@Z ENDP ; soap_serialize_PointerToSOAP_ENV__Reason
_TEXT	ENDS
PUBLIC	?soap_put_PointerToSOAP_ENV__Reason@@YAHPAUsoap@@PBQAUSOAP_ENV__Reason@@PBD2@Z ; soap_put_PointerToSOAP_ENV__Reason
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_PointerToSOAP_ENV__Reason@@YAHPAUsoap@@PBQAUSOAP_ENV__Reason@@PBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_PointerToSOAP_ENV__Reason@@YAHPAUsoap@@PBQAUSOAP_ENV__Reason@@PBD2@Z PROC ; soap_put_PointerToSOAP_ENV__Reason, COMDAT

; 3714 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3715 : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);

	push	49					; 00000031H
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 3716 : 	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerToSOAP_ENV__Reason@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Reason@@1@Z ; soap_out_PointerToSOAP_ENV__Reason
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_P

; 3717 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_P
$LN1@soap_put_P:

; 3718 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_P:

; 3719 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_PointerToSOAP_ENV__Reason@@YAHPAUsoap@@PBQAUSOAP_ENV__Reason@@PBD2@Z ENDP ; soap_put_PointerToSOAP_ENV__Reason
_TEXT	ENDS
EXTRN	_soap_element_id:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out_PointerToSOAP_ENV__Reason@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Reason@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_PointerToSOAP_ENV__Reason@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Reason@@1@Z PROC ; soap_out_PointerToSOAP_ENV__Reason, COMDAT

; 3722 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3723 : 	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);

	push	46					; 0000002eH
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_id
	add	esp, 32					; 00000020H
	mov	DWORD PTR _id$[ebp], eax

; 3724 : 	if (id < 0)

	cmp	DWORD PTR _id$[ebp], 0
	jge	SHORT $LN1@soap_out_P

; 3725 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_out_P
$LN1@soap_out_P:

; 3726 : 	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_out_SOAP_ENV__Reason@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Reason@@1@Z ; soap_out_SOAP_ENV__Reason
	add	esp, 20					; 00000014H
$LN2@soap_out_P:

; 3727 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_PointerToSOAP_ENV__Reason@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Reason@@1@Z ENDP ; soap_out_PointerToSOAP_ENV__Reason
_TEXT	ENDS
PUBLIC	?soap_get_PointerToSOAP_ENV__Reason@@YAPAPAUSOAP_ENV__Reason@@PAUsoap@@PAPAU1@PBD2@Z ; soap_get_PointerToSOAP_ENV__Reason
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_PointerToSOAP_ENV__Reason@@YAPAPAUSOAP_ENV__Reason@@PAUsoap@@PAPAU1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_PointerToSOAP_ENV__Reason@@YAPAPAUSOAP_ENV__Reason@@PAUsoap@@PAPAU1@PBD2@Z PROC ; soap_get_PointerToSOAP_ENV__Reason, COMDAT

; 3730 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3731 : 	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_PointerToSOAP_ENV__Reason@@YAPAPAUSOAP_ENV__Reason@@PAUsoap@@PBDPAPAU1@1@Z ; soap_in_PointerToSOAP_ENV__Reason
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_P

; 3732 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_P

; 3733 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_P
$LN2@soap_get_P:

; 3734 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_P:

; 3735 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_PointerToSOAP_ENV__Reason@@YAPAPAUSOAP_ENV__Reason@@PAUsoap@@PAPAU1@PBD2@Z ENDP ; soap_get_PointerToSOAP_ENV__Reason
_TEXT	ENDS
EXTRN	_soap_id_lookup:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in_PointerToSOAP_ENV__Reason@@YAPAPAUSOAP_ENV__Reason@@PAUsoap@@PBDPAPAU1@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_PointerToSOAP_ENV__Reason@@YAPAPAUSOAP_ENV__Reason@@PAUsoap@@PBDPAPAU1@1@Z PROC ; soap_in_PointerToSOAP_ENV__Reason, COMDAT

; 3738 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3739 : 	if (soap_element_begin_in(soap, tag, 1, NULL))

	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN7@soap_in_Po

; 3740 : 		return NULL;

	xor	eax, eax
	jmp	$LN8@soap_in_Po
$LN7@soap_in_Po:

; 3741 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN6@soap_in_Po

; 3742 : 		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))

	push	4
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_malloc
	add	esp, 8
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN6@soap_in_Po

; 3743 : 			return NULL;

	xor	eax, eax
	jmp	$LN8@soap_in_Po
$LN6@soap_in_Po:

; 3744 : 	*a = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], 0

; 3745 : 	if (!soap->null && *soap->href != '#')

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87300]
	test	ecx, ecx
	jne	SHORT $LN4@soap_in_Po
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	cmp	ecx, 35					; 00000023H
	je	SHORT $LN4@soap_in_Po

; 3746 : 	{	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 3747 : 		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_SOAP_ENV__Reason@@YAPAUSOAP_ENV__Reason@@PAUsoap@@PBDPAU1@1@Z ; soap_in_SOAP_ENV__Reason
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@soap_in_Po

; 3748 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN8@soap_in_Po
$LN3@soap_in_Po:

; 3749 : 	}
; 3750 : 	else

	jmp	SHORT $LN2@soap_in_Po
$LN4@soap_in_Po:

; 3751 : 	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);

	push	0
	push	4
	push	46					; 0000002eH
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_lookup
	add	esp, 24					; 00000018H
	mov	DWORD PTR _a$[ebp], eax

; 3752 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN2@soap_in_Po
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_in_Po

; 3753 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN8@soap_in_Po
$LN2@soap_in_Po:

; 3754 : 	}
; 3755 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN8@soap_in_Po:

; 3756 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_PointerToSOAP_ENV__Reason@@YAPAPAUSOAP_ENV__Reason@@PAUsoap@@PBDPAPAU1@1@Z ENDP ; soap_in_PointerToSOAP_ENV__Reason
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_serialize_PointerToSOAP_ENV__Detail@@YAXPAUsoap@@PBQAUSOAP_ENV__Detail@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize_PointerToSOAP_ENV__Detail@@YAXPAUsoap@@PBQAUSOAP_ENV__Detail@@@Z PROC ; soap_serialize_PointerToSOAP_ENV__Detail, COMDAT

; 3763 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3764 : 	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))

	push	43					; 0000002bH
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_reference
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@soap_seria@4

; 3765 : 		soap_serialize_SOAP_ENV__Detail(soap, *a);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_serialize_SOAP_ENV__Detail@@YAXPAUsoap@@PBUSOAP_ENV__Detail@@@Z ; soap_serialize_SOAP_ENV__Detail
	add	esp, 8
$LN2@soap_seria@4:

; 3766 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize_PointerToSOAP_ENV__Detail@@YAXPAUsoap@@PBQAUSOAP_ENV__Detail@@@Z ENDP ; soap_serialize_PointerToSOAP_ENV__Detail
_TEXT	ENDS
PUBLIC	?soap_put_PointerToSOAP_ENV__Detail@@YAHPAUsoap@@PBQAUSOAP_ENV__Detail@@PBD2@Z ; soap_put_PointerToSOAP_ENV__Detail
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_PointerToSOAP_ENV__Detail@@YAHPAUsoap@@PBQAUSOAP_ENV__Detail@@PBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_PointerToSOAP_ENV__Detail@@YAHPAUsoap@@PBQAUSOAP_ENV__Detail@@PBD2@Z PROC ; soap_put_PointerToSOAP_ENV__Detail, COMDAT

; 3769 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3770 : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);

	push	48					; 00000030H
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 3771 : 	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerToSOAP_ENV__Detail@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Detail@@1@Z ; soap_out_PointerToSOAP_ENV__Detail
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_P@2

; 3772 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_P@2
$LN1@soap_put_P@2:

; 3773 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_P@2:

; 3774 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_PointerToSOAP_ENV__Detail@@YAHPAUsoap@@PBQAUSOAP_ENV__Detail@@PBD2@Z ENDP ; soap_put_PointerToSOAP_ENV__Detail
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out_PointerToSOAP_ENV__Detail@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Detail@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_PointerToSOAP_ENV__Detail@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Detail@@1@Z PROC ; soap_out_PointerToSOAP_ENV__Detail, COMDAT

; 3777 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3778 : 	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);

	push	43					; 0000002bH
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_id
	add	esp, 32					; 00000020H
	mov	DWORD PTR _id$[ebp], eax

; 3779 : 	if (id < 0)

	cmp	DWORD PTR _id$[ebp], 0
	jge	SHORT $LN1@soap_out_P@2

; 3780 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_out_P@2
$LN1@soap_out_P@2:

; 3781 : 	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_out_SOAP_ENV__Detail@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Detail@@1@Z ; soap_out_SOAP_ENV__Detail
	add	esp, 20					; 00000014H
$LN2@soap_out_P@2:

; 3782 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_PointerToSOAP_ENV__Detail@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Detail@@1@Z ENDP ; soap_out_PointerToSOAP_ENV__Detail
_TEXT	ENDS
PUBLIC	?soap_get_PointerToSOAP_ENV__Detail@@YAPAPAUSOAP_ENV__Detail@@PAUsoap@@PAPAU1@PBD2@Z ; soap_get_PointerToSOAP_ENV__Detail
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_PointerToSOAP_ENV__Detail@@YAPAPAUSOAP_ENV__Detail@@PAUsoap@@PAPAU1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_PointerToSOAP_ENV__Detail@@YAPAPAUSOAP_ENV__Detail@@PAUsoap@@PAPAU1@PBD2@Z PROC ; soap_get_PointerToSOAP_ENV__Detail, COMDAT

; 3785 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3786 : 	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_PointerToSOAP_ENV__Detail@@YAPAPAUSOAP_ENV__Detail@@PAUsoap@@PBDPAPAU1@1@Z ; soap_in_PointerToSOAP_ENV__Detail
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_P@2

; 3787 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_P@2

; 3788 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_P@2
$LN2@soap_get_P@2:

; 3789 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_P@2:

; 3790 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_PointerToSOAP_ENV__Detail@@YAPAPAUSOAP_ENV__Detail@@PAUsoap@@PAPAU1@PBD2@Z ENDP ; soap_get_PointerToSOAP_ENV__Detail
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in_PointerToSOAP_ENV__Detail@@YAPAPAUSOAP_ENV__Detail@@PAUsoap@@PBDPAPAU1@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_PointerToSOAP_ENV__Detail@@YAPAPAUSOAP_ENV__Detail@@PAUsoap@@PBDPAPAU1@1@Z PROC ; soap_in_PointerToSOAP_ENV__Detail, COMDAT

; 3793 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3794 : 	if (soap_element_begin_in(soap, tag, 1, NULL))

	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN7@soap_in_Po@2

; 3795 : 		return NULL;

	xor	eax, eax
	jmp	$LN8@soap_in_Po@2
$LN7@soap_in_Po@2:

; 3796 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN6@soap_in_Po@2

; 3797 : 		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))

	push	4
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_malloc
	add	esp, 8
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN6@soap_in_Po@2

; 3798 : 			return NULL;

	xor	eax, eax
	jmp	$LN8@soap_in_Po@2
$LN6@soap_in_Po@2:

; 3799 : 	*a = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], 0

; 3800 : 	if (!soap->null && *soap->href != '#')

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87300]
	test	ecx, ecx
	jne	SHORT $LN4@soap_in_Po@2
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	cmp	ecx, 35					; 00000023H
	je	SHORT $LN4@soap_in_Po@2

; 3801 : 	{	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 3802 : 		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_SOAP_ENV__Detail@@YAPAUSOAP_ENV__Detail@@PAUsoap@@PBDPAU1@1@Z ; soap_in_SOAP_ENV__Detail
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@soap_in_Po@2

; 3803 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN8@soap_in_Po@2
$LN3@soap_in_Po@2:

; 3804 : 	}
; 3805 : 	else

	jmp	SHORT $LN2@soap_in_Po@2
$LN4@soap_in_Po@2:

; 3806 : 	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);

	push	0
	push	12					; 0000000cH
	push	43					; 0000002bH
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_lookup
	add	esp, 24					; 00000018H
	mov	DWORD PTR _a$[ebp], eax

; 3807 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN2@soap_in_Po@2
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_in_Po@2

; 3808 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN8@soap_in_Po@2
$LN2@soap_in_Po@2:

; 3809 : 	}
; 3810 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN8@soap_in_Po@2:

; 3811 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_PointerToSOAP_ENV__Detail@@YAPAPAUSOAP_ENV__Detail@@PAUsoap@@PBDPAPAU1@1@Z ENDP ; soap_in_PointerToSOAP_ENV__Detail
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_serialize_PointerToSOAP_ENV__Code@@YAXPAUsoap@@PBQAUSOAP_ENV__Code@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize_PointerToSOAP_ENV__Code@@YAXPAUsoap@@PBQAUSOAP_ENV__Code@@@Z PROC ; soap_serialize_PointerToSOAP_ENV__Code, COMDAT

; 3818 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3819 : 	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))

	push	41					; 00000029H
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_reference
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@soap_seria@5

; 3820 : 		soap_serialize_SOAP_ENV__Code(soap, *a);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_serialize_SOAP_ENV__Code@@YAXPAUsoap@@PBUSOAP_ENV__Code@@@Z ; soap_serialize_SOAP_ENV__Code
	add	esp, 8
$LN2@soap_seria@5:

; 3821 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize_PointerToSOAP_ENV__Code@@YAXPAUsoap@@PBQAUSOAP_ENV__Code@@@Z ENDP ; soap_serialize_PointerToSOAP_ENV__Code
_TEXT	ENDS
PUBLIC	?soap_put_PointerToSOAP_ENV__Code@@YAHPAUsoap@@PBQAUSOAP_ENV__Code@@PBD2@Z ; soap_put_PointerToSOAP_ENV__Code
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_PointerToSOAP_ENV__Code@@YAHPAUsoap@@PBQAUSOAP_ENV__Code@@PBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_PointerToSOAP_ENV__Code@@YAHPAUsoap@@PBQAUSOAP_ENV__Code@@PBD2@Z PROC ; soap_put_PointerToSOAP_ENV__Code, COMDAT

; 3824 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3825 : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);

	push	42					; 0000002aH
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 3826 : 	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerToSOAP_ENV__Code@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Code@@1@Z ; soap_out_PointerToSOAP_ENV__Code
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_P@3

; 3827 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_P@3
$LN1@soap_put_P@3:

; 3828 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_P@3:

; 3829 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_PointerToSOAP_ENV__Code@@YAHPAUsoap@@PBQAUSOAP_ENV__Code@@PBD2@Z ENDP ; soap_put_PointerToSOAP_ENV__Code
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out_PointerToSOAP_ENV__Code@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Code@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_PointerToSOAP_ENV__Code@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Code@@1@Z PROC ; soap_out_PointerToSOAP_ENV__Code, COMDAT

; 3832 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3833 : 	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);

	push	41					; 00000029H
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_id
	add	esp, 32					; 00000020H
	mov	DWORD PTR _id$[ebp], eax

; 3834 : 	if (id < 0)

	cmp	DWORD PTR _id$[ebp], 0
	jge	SHORT $LN1@soap_out_P@3

; 3835 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_out_P@3
$LN1@soap_out_P@3:

; 3836 : 	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_out_SOAP_ENV__Code@@YAHPAUsoap@@PBDHPBUSOAP_ENV__Code@@1@Z ; soap_out_SOAP_ENV__Code
	add	esp, 20					; 00000014H
$LN2@soap_out_P@3:

; 3837 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_PointerToSOAP_ENV__Code@@YAHPAUsoap@@PBDHPBQAUSOAP_ENV__Code@@1@Z ENDP ; soap_out_PointerToSOAP_ENV__Code
_TEXT	ENDS
PUBLIC	?soap_get_PointerToSOAP_ENV__Code@@YAPAPAUSOAP_ENV__Code@@PAUsoap@@PAPAU1@PBD2@Z ; soap_get_PointerToSOAP_ENV__Code
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_PointerToSOAP_ENV__Code@@YAPAPAUSOAP_ENV__Code@@PAUsoap@@PAPAU1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_PointerToSOAP_ENV__Code@@YAPAPAUSOAP_ENV__Code@@PAUsoap@@PAPAU1@PBD2@Z PROC ; soap_get_PointerToSOAP_ENV__Code, COMDAT

; 3840 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3841 : 	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_PointerToSOAP_ENV__Code@@YAPAPAUSOAP_ENV__Code@@PAUsoap@@PBDPAPAU1@1@Z ; soap_in_PointerToSOAP_ENV__Code
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_P@3

; 3842 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_P@3

; 3843 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_P@3
$LN2@soap_get_P@3:

; 3844 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_P@3:

; 3845 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_PointerToSOAP_ENV__Code@@YAPAPAUSOAP_ENV__Code@@PAUsoap@@PAPAU1@PBD2@Z ENDP ; soap_get_PointerToSOAP_ENV__Code
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in_PointerToSOAP_ENV__Code@@YAPAPAUSOAP_ENV__Code@@PAUsoap@@PBDPAPAU1@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_PointerToSOAP_ENV__Code@@YAPAPAUSOAP_ENV__Code@@PAUsoap@@PBDPAPAU1@1@Z PROC ; soap_in_PointerToSOAP_ENV__Code, COMDAT

; 3848 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3849 : 	if (soap_element_begin_in(soap, tag, 1, NULL))

	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN7@soap_in_Po@3

; 3850 : 		return NULL;

	xor	eax, eax
	jmp	$LN8@soap_in_Po@3
$LN7@soap_in_Po@3:

; 3851 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN6@soap_in_Po@3

; 3852 : 		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))

	push	4
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_malloc
	add	esp, 8
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN6@soap_in_Po@3

; 3853 : 			return NULL;

	xor	eax, eax
	jmp	$LN8@soap_in_Po@3
$LN6@soap_in_Po@3:

; 3854 : 	*a = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], 0

; 3855 : 	if (!soap->null && *soap->href != '#')

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87300]
	test	ecx, ecx
	jne	SHORT $LN4@soap_in_Po@3
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	cmp	ecx, 35					; 00000023H
	je	SHORT $LN4@soap_in_Po@3

; 3856 : 	{	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 3857 : 		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_SOAP_ENV__Code@@YAPAUSOAP_ENV__Code@@PAUsoap@@PBDPAU1@1@Z ; soap_in_SOAP_ENV__Code
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@soap_in_Po@3

; 3858 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN8@soap_in_Po@3
$LN3@soap_in_Po@3:

; 3859 : 	}
; 3860 : 	else

	jmp	SHORT $LN2@soap_in_Po@3
$LN4@soap_in_Po@3:

; 3861 : 	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);

	push	0
	push	8
	push	41					; 00000029H
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_lookup
	add	esp, 24					; 00000018H
	mov	DWORD PTR _a$[ebp], eax

; 3862 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN2@soap_in_Po@3
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_in_Po@3

; 3863 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN8@soap_in_Po@3
$LN2@soap_in_Po@3:

; 3864 : 	}
; 3865 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN8@soap_in_Po@3:

; 3866 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_PointerToSOAP_ENV__Code@@YAPAPAUSOAP_ENV__Code@@PAUsoap@@PBDPAPAU1@1@Z ENDP ; soap_in_PointerToSOAP_ENV__Code
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_serialize_PointerTo_ns2__submitEpochResultResponseElement@@YAXPAUsoap@@PBQAV_ns2__submitEpochResultResponseElement@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize_PointerTo_ns2__submitEpochResultResponseElement@@YAXPAUsoap@@PBQAV_ns2__submitEpochResultResponseElement@@@Z PROC ; soap_serialize_PointerTo_ns2__submitEpochResultResponseElement, COMDAT

; 3871 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3872 : 	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__submitEpochResultResponseElement))

	push	24					; 00000018H
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_reference
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@soap_seria@6

; 3873 : 		(*a)->soap_serialize(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@soap_seria@6:

; 3874 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize_PointerTo_ns2__submitEpochResultResponseElement@@YAXPAUsoap@@PBQAV_ns2__submitEpochResultResponseElement@@@Z ENDP ; soap_serialize_PointerTo_ns2__submitEpochResultResponseElement
_TEXT	ENDS
PUBLIC	?soap_put_PointerTo_ns2__submitEpochResultResponseElement@@YAHPAUsoap@@PBQAV_ns2__submitEpochResultResponseElement@@PBD2@Z ; soap_put_PointerTo_ns2__submitEpochResultResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_PointerTo_ns2__submitEpochResultResponseElement@@YAHPAUsoap@@PBQAV_ns2__submitEpochResultResponseElement@@PBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_PointerTo_ns2__submitEpochResultResponseElement@@YAHPAUsoap@@PBQAV_ns2__submitEpochResultResponseElement@@PBD2@Z PROC ; soap_put_PointerTo_ns2__submitEpochResultResponseElement, COMDAT

; 3877 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3878 : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__submitEpochResultResponseElement);

	push	37					; 00000025H
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 3879 : 	if (soap_out_PointerTo_ns2__submitEpochResultResponseElement(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerTo_ns2__submitEpochResultResponseElement@@YAHPAUsoap@@PBDHPBQAV_ns2__submitEpochResultResponseElement@@1@Z ; soap_out_PointerTo_ns2__submitEpochResultResponseElement
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_P@4

; 3880 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_P@4
$LN1@soap_put_P@4:

; 3881 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_P@4:

; 3882 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_PointerTo_ns2__submitEpochResultResponseElement@@YAHPAUsoap@@PBQAV_ns2__submitEpochResultResponseElement@@PBD2@Z ENDP ; soap_put_PointerTo_ns2__submitEpochResultResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out_PointerTo_ns2__submitEpochResultResponseElement@@YAHPAUsoap@@PBDHPBQAV_ns2__submitEpochResultResponseElement@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_PointerTo_ns2__submitEpochResultResponseElement@@YAHPAUsoap@@PBDHPBQAV_ns2__submitEpochResultResponseElement@@1@Z PROC ; soap_out_PointerTo_ns2__submitEpochResultResponseElement, COMDAT

; 3885 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3886 : 	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__submitEpochResultResponseElement);

	push	24					; 00000018H
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_id
	add	esp, 32					; 00000020H
	mov	DWORD PTR _id$[ebp], eax

; 3887 : 	if (id < 0)

	cmp	DWORD PTR _id$[ebp], 0
	jge	SHORT $LN1@soap_out_P@4

; 3888 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_out_P@4
$LN1@soap_out_P@4:

; 3889 : 	return (*a)->soap_out(soap, tag, id, type);

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@soap_out_P@4:

; 3890 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_PointerTo_ns2__submitEpochResultResponseElement@@YAHPAUsoap@@PBDHPBQAV_ns2__submitEpochResultResponseElement@@1@Z ENDP ; soap_out_PointerTo_ns2__submitEpochResultResponseElement
_TEXT	ENDS
PUBLIC	?soap_get_PointerTo_ns2__submitEpochResultResponseElement@@YAPAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PAPAV1@PBD2@Z ; soap_get_PointerTo_ns2__submitEpochResultResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_PointerTo_ns2__submitEpochResultResponseElement@@YAPAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PAPAV1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_PointerTo_ns2__submitEpochResultResponseElement@@YAPAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PAPAV1@PBD2@Z PROC ; soap_get_PointerTo_ns2__submitEpochResultResponseElement, COMDAT

; 3893 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3894 : 	if ((p = soap_in_PointerTo_ns2__submitEpochResultResponseElement(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_PointerTo_ns2__submitEpochResultResponseElement@@YAPAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__submitEpochResultResponseElement
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_P@4

; 3895 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_P@4

; 3896 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_P@4
$LN2@soap_get_P@4:

; 3897 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_P@4:

; 3898 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_PointerTo_ns2__submitEpochResultResponseElement@@YAPAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PAPAV1@PBD2@Z ENDP ; soap_get_PointerTo_ns2__submitEpochResultResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in_PointerTo_ns2__submitEpochResultResponseElement@@YAPAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PBDPAPAV1@1@Z
_TEXT	SEGMENT
_p$91050 = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_PointerTo_ns2__submitEpochResultResponseElement@@YAPAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PBDPAPAV1@1@Z PROC ; soap_in_PointerTo_ns2__submitEpochResultResponseElement, COMDAT

; 3901 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3902 : 	if (soap_element_begin_in(soap, tag, 1, NULL))

	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN8@soap_in_Po@4

; 3903 : 		return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_Po@4
$LN8@soap_in_Po@4:

; 3904 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN7@soap_in_Po@4

; 3905 : 		if (!(a = (_ns2__submitEpochResultResponseElement **)soap_malloc(soap, sizeof(_ns2__submitEpochResultResponseElement *))))

	push	4
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_malloc
	add	esp, 8
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN7@soap_in_Po@4

; 3906 : 			return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_Po@4
$LN7@soap_in_Po@4:

; 3907 : 	*a = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], 0

; 3908 : 	if (!soap->null && *soap->href != '#')

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87300]
	test	ecx, ecx
	jne	$LN5@soap_in_Po@4
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	cmp	ecx, 35					; 00000023H
	je	$LN5@soap_in_Po@4

; 3909 : 	{	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 3910 : 		if (!(*a = (_ns2__submitEpochResultResponseElement *)soap_instantiate__ns2__submitEpochResultResponseElement(soap, -1, soap->type, soap->arrayType, NULL)))

	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	-1
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_instantiate__ns2__submitEpochResultResponseElement@@YAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__submitEpochResultResponseElement
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN4@soap_in_Po@4

; 3911 : 			return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_Po@4
$LN4@soap_in_Po@4:

; 3912 : 		(*a)->soap_default(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3913 : 		if (!(*a)->soap_in(soap, tag, NULL))

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@soap_in_Po@4

; 3914 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN9@soap_in_Po@4
$LN3@soap_in_Po@4:

; 3915 : 	}
; 3916 : 	else

	jmp	SHORT $LN2@soap_in_Po@4
$LN5@soap_in_Po@4:

; 3917 : 	{	_ns2__submitEpochResultResponseElement ** p = (_ns2__submitEpochResultResponseElement **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__submitEpochResultResponseElement, sizeof(_ns2__submitEpochResultResponseElement), 0);

	push	0
	push	12					; 0000000cH
	push	24					; 00000018H
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_lookup
	add	esp, 24					; 00000018H
	mov	DWORD PTR _p$91050[ebp], eax

; 3918 : 		a = p;

	mov	eax, DWORD PTR _p$91050[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 3919 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN2@soap_in_Po@4
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_in_Po@4

; 3920 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN9@soap_in_Po@4
$LN2@soap_in_Po@4:

; 3921 : 	}
; 3922 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN9@soap_in_Po@4:

; 3923 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_PointerTo_ns2__submitEpochResultResponseElement@@YAPAPAV_ns2__submitEpochResultResponseElement@@PAUsoap@@PBDPAPAV1@1@Z ENDP ; soap_in_PointerTo_ns2__submitEpochResultResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_serialize_PointerTo_ns2__submitEpochResultElement@@YAXPAUsoap@@PBQAV_ns2__submitEpochResultElement@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize_PointerTo_ns2__submitEpochResultElement@@YAXPAUsoap@@PBQAV_ns2__submitEpochResultElement@@@Z PROC ; soap_serialize_PointerTo_ns2__submitEpochResultElement, COMDAT

; 3926 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3927 : 	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__submitEpochResultElement))

	push	23					; 00000017H
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_reference
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@soap_seria@7

; 3928 : 		(*a)->soap_serialize(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@soap_seria@7:

; 3929 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize_PointerTo_ns2__submitEpochResultElement@@YAXPAUsoap@@PBQAV_ns2__submitEpochResultElement@@@Z ENDP ; soap_serialize_PointerTo_ns2__submitEpochResultElement
_TEXT	ENDS
PUBLIC	?soap_put_PointerTo_ns2__submitEpochResultElement@@YAHPAUsoap@@PBQAV_ns2__submitEpochResultElement@@PBD2@Z ; soap_put_PointerTo_ns2__submitEpochResultElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_PointerTo_ns2__submitEpochResultElement@@YAHPAUsoap@@PBQAV_ns2__submitEpochResultElement@@PBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_PointerTo_ns2__submitEpochResultElement@@YAHPAUsoap@@PBQAV_ns2__submitEpochResultElement@@PBD2@Z PROC ; soap_put_PointerTo_ns2__submitEpochResultElement, COMDAT

; 3932 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3933 : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__submitEpochResultElement);

	push	36					; 00000024H
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 3934 : 	if (soap_out_PointerTo_ns2__submitEpochResultElement(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerTo_ns2__submitEpochResultElement@@YAHPAUsoap@@PBDHPBQAV_ns2__submitEpochResultElement@@1@Z ; soap_out_PointerTo_ns2__submitEpochResultElement
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_P@5

; 3935 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_P@5
$LN1@soap_put_P@5:

; 3936 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_P@5:

; 3937 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_PointerTo_ns2__submitEpochResultElement@@YAHPAUsoap@@PBQAV_ns2__submitEpochResultElement@@PBD2@Z ENDP ; soap_put_PointerTo_ns2__submitEpochResultElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out_PointerTo_ns2__submitEpochResultElement@@YAHPAUsoap@@PBDHPBQAV_ns2__submitEpochResultElement@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_PointerTo_ns2__submitEpochResultElement@@YAHPAUsoap@@PBDHPBQAV_ns2__submitEpochResultElement@@1@Z PROC ; soap_out_PointerTo_ns2__submitEpochResultElement, COMDAT

; 3940 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3941 : 	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__submitEpochResultElement);

	push	23					; 00000017H
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_id
	add	esp, 32					; 00000020H
	mov	DWORD PTR _id$[ebp], eax

; 3942 : 	if (id < 0)

	cmp	DWORD PTR _id$[ebp], 0
	jge	SHORT $LN1@soap_out_P@5

; 3943 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_out_P@5
$LN1@soap_out_P@5:

; 3944 : 	return (*a)->soap_out(soap, tag, id, type);

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@soap_out_P@5:

; 3945 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_PointerTo_ns2__submitEpochResultElement@@YAHPAUsoap@@PBDHPBQAV_ns2__submitEpochResultElement@@1@Z ENDP ; soap_out_PointerTo_ns2__submitEpochResultElement
_TEXT	ENDS
PUBLIC	?soap_get_PointerTo_ns2__submitEpochResultElement@@YAPAPAV_ns2__submitEpochResultElement@@PAUsoap@@PAPAV1@PBD2@Z ; soap_get_PointerTo_ns2__submitEpochResultElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_PointerTo_ns2__submitEpochResultElement@@YAPAPAV_ns2__submitEpochResultElement@@PAUsoap@@PAPAV1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_PointerTo_ns2__submitEpochResultElement@@YAPAPAV_ns2__submitEpochResultElement@@PAUsoap@@PAPAV1@PBD2@Z PROC ; soap_get_PointerTo_ns2__submitEpochResultElement, COMDAT

; 3948 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3949 : 	if ((p = soap_in_PointerTo_ns2__submitEpochResultElement(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_PointerTo_ns2__submitEpochResultElement@@YAPAPAV_ns2__submitEpochResultElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__submitEpochResultElement
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_P@5

; 3950 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_P@5

; 3951 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_P@5
$LN2@soap_get_P@5:

; 3952 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_P@5:

; 3953 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_PointerTo_ns2__submitEpochResultElement@@YAPAPAV_ns2__submitEpochResultElement@@PAUsoap@@PAPAV1@PBD2@Z ENDP ; soap_get_PointerTo_ns2__submitEpochResultElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in_PointerTo_ns2__submitEpochResultElement@@YAPAPAV_ns2__submitEpochResultElement@@PAUsoap@@PBDPAPAV1@1@Z
_TEXT	SEGMENT
_p$91101 = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_PointerTo_ns2__submitEpochResultElement@@YAPAPAV_ns2__submitEpochResultElement@@PAUsoap@@PBDPAPAV1@1@Z PROC ; soap_in_PointerTo_ns2__submitEpochResultElement, COMDAT

; 3956 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3957 : 	if (soap_element_begin_in(soap, tag, 1, NULL))

	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN8@soap_in_Po@5

; 3958 : 		return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_Po@5
$LN8@soap_in_Po@5:

; 3959 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN7@soap_in_Po@5

; 3960 : 		if (!(a = (_ns2__submitEpochResultElement **)soap_malloc(soap, sizeof(_ns2__submitEpochResultElement *))))

	push	4
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_malloc
	add	esp, 8
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN7@soap_in_Po@5

; 3961 : 			return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_Po@5
$LN7@soap_in_Po@5:

; 3962 : 	*a = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], 0

; 3963 : 	if (!soap->null && *soap->href != '#')

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87300]
	test	ecx, ecx
	jne	$LN5@soap_in_Po@5
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	cmp	ecx, 35					; 00000023H
	je	$LN5@soap_in_Po@5

; 3964 : 	{	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 3965 : 		if (!(*a = (_ns2__submitEpochResultElement *)soap_instantiate__ns2__submitEpochResultElement(soap, -1, soap->type, soap->arrayType, NULL)))

	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	-1
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_instantiate__ns2__submitEpochResultElement@@YAPAV_ns2__submitEpochResultElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__submitEpochResultElement
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN4@soap_in_Po@5

; 3966 : 			return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_Po@5
$LN4@soap_in_Po@5:

; 3967 : 		(*a)->soap_default(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3968 : 		if (!(*a)->soap_in(soap, tag, NULL))

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@soap_in_Po@5

; 3969 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN9@soap_in_Po@5
$LN3@soap_in_Po@5:

; 3970 : 	}
; 3971 : 	else

	jmp	SHORT $LN2@soap_in_Po@5
$LN5@soap_in_Po@5:

; 3972 : 	{	_ns2__submitEpochResultElement ** p = (_ns2__submitEpochResultElement **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__submitEpochResultElement, sizeof(_ns2__submitEpochResultElement), 0);

	push	0
	push	120					; 00000078H
	push	23					; 00000017H
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_lookup
	add	esp, 24					; 00000018H
	mov	DWORD PTR _p$91101[ebp], eax

; 3973 : 		a = p;

	mov	eax, DWORD PTR _p$91101[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 3974 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN2@soap_in_Po@5
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_in_Po@5

; 3975 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN9@soap_in_Po@5
$LN2@soap_in_Po@5:

; 3976 : 	}
; 3977 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN9@soap_in_Po@5:

; 3978 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_PointerTo_ns2__submitEpochResultElement@@YAPAPAV_ns2__submitEpochResultElement@@PAUsoap@@PBDPAPAV1@1@Z ENDP ; soap_in_PointerTo_ns2__submitEpochResultElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_serialize_PointerTo_ns2__getSettingsFileResponseElement@@YAXPAUsoap@@PBQAV_ns2__getSettingsFileResponseElement@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize_PointerTo_ns2__getSettingsFileResponseElement@@YAXPAUsoap@@PBQAV_ns2__getSettingsFileResponseElement@@@Z PROC ; soap_serialize_PointerTo_ns2__getSettingsFileResponseElement, COMDAT

; 3981 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3982 : 	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__getSettingsFileResponseElement))

	push	22					; 00000016H
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_reference
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@soap_seria@8

; 3983 : 		(*a)->soap_serialize(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@soap_seria@8:

; 3984 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize_PointerTo_ns2__getSettingsFileResponseElement@@YAXPAUsoap@@PBQAV_ns2__getSettingsFileResponseElement@@@Z ENDP ; soap_serialize_PointerTo_ns2__getSettingsFileResponseElement
_TEXT	ENDS
PUBLIC	?soap_put_PointerTo_ns2__getSettingsFileResponseElement@@YAHPAUsoap@@PBQAV_ns2__getSettingsFileResponseElement@@PBD2@Z ; soap_put_PointerTo_ns2__getSettingsFileResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_PointerTo_ns2__getSettingsFileResponseElement@@YAHPAUsoap@@PBQAV_ns2__getSettingsFileResponseElement@@PBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_PointerTo_ns2__getSettingsFileResponseElement@@YAHPAUsoap@@PBQAV_ns2__getSettingsFileResponseElement@@PBD2@Z PROC ; soap_put_PointerTo_ns2__getSettingsFileResponseElement, COMDAT

; 3987 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3988 : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__getSettingsFileResponseElement);

	push	33					; 00000021H
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 3989 : 	if (soap_out_PointerTo_ns2__getSettingsFileResponseElement(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerTo_ns2__getSettingsFileResponseElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSettingsFileResponseElement@@1@Z ; soap_out_PointerTo_ns2__getSettingsFileResponseElement
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_P@6

; 3990 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_P@6
$LN1@soap_put_P@6:

; 3991 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_P@6:

; 3992 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_PointerTo_ns2__getSettingsFileResponseElement@@YAHPAUsoap@@PBQAV_ns2__getSettingsFileResponseElement@@PBD2@Z ENDP ; soap_put_PointerTo_ns2__getSettingsFileResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out_PointerTo_ns2__getSettingsFileResponseElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSettingsFileResponseElement@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_PointerTo_ns2__getSettingsFileResponseElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSettingsFileResponseElement@@1@Z PROC ; soap_out_PointerTo_ns2__getSettingsFileResponseElement, COMDAT

; 3995 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3996 : 	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__getSettingsFileResponseElement);

	push	22					; 00000016H
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_id
	add	esp, 32					; 00000020H
	mov	DWORD PTR _id$[ebp], eax

; 3997 : 	if (id < 0)

	cmp	DWORD PTR _id$[ebp], 0
	jge	SHORT $LN1@soap_out_P@6

; 3998 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_out_P@6
$LN1@soap_out_P@6:

; 3999 : 	return (*a)->soap_out(soap, tag, id, type);

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@soap_out_P@6:

; 4000 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_PointerTo_ns2__getSettingsFileResponseElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSettingsFileResponseElement@@1@Z ENDP ; soap_out_PointerTo_ns2__getSettingsFileResponseElement
_TEXT	ENDS
PUBLIC	?soap_get_PointerTo_ns2__getSettingsFileResponseElement@@YAPAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PAPAV1@PBD2@Z ; soap_get_PointerTo_ns2__getSettingsFileResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_PointerTo_ns2__getSettingsFileResponseElement@@YAPAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PAPAV1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_PointerTo_ns2__getSettingsFileResponseElement@@YAPAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PAPAV1@PBD2@Z PROC ; soap_get_PointerTo_ns2__getSettingsFileResponseElement, COMDAT

; 4003 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4004 : 	if ((p = soap_in_PointerTo_ns2__getSettingsFileResponseElement(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_PointerTo_ns2__getSettingsFileResponseElement@@YAPAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__getSettingsFileResponseElement
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_P@6

; 4005 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_P@6

; 4006 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_P@6
$LN2@soap_get_P@6:

; 4007 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_P@6:

; 4008 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_PointerTo_ns2__getSettingsFileResponseElement@@YAPAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PAPAV1@PBD2@Z ENDP ; soap_get_PointerTo_ns2__getSettingsFileResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in_PointerTo_ns2__getSettingsFileResponseElement@@YAPAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PBDPAPAV1@1@Z
_TEXT	SEGMENT
_p$91152 = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_PointerTo_ns2__getSettingsFileResponseElement@@YAPAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PBDPAPAV1@1@Z PROC ; soap_in_PointerTo_ns2__getSettingsFileResponseElement, COMDAT

; 4011 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4012 : 	if (soap_element_begin_in(soap, tag, 1, NULL))

	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN8@soap_in_Po@6

; 4013 : 		return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_Po@6
$LN8@soap_in_Po@6:

; 4014 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN7@soap_in_Po@6

; 4015 : 		if (!(a = (_ns2__getSettingsFileResponseElement **)soap_malloc(soap, sizeof(_ns2__getSettingsFileResponseElement *))))

	push	4
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_malloc
	add	esp, 8
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN7@soap_in_Po@6

; 4016 : 			return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_Po@6
$LN7@soap_in_Po@6:

; 4017 : 	*a = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], 0

; 4018 : 	if (!soap->null && *soap->href != '#')

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87300]
	test	ecx, ecx
	jne	$LN5@soap_in_Po@6
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	cmp	ecx, 35					; 00000023H
	je	$LN5@soap_in_Po@6

; 4019 : 	{	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 4020 : 		if (!(*a = (_ns2__getSettingsFileResponseElement *)soap_instantiate__ns2__getSettingsFileResponseElement(soap, -1, soap->type, soap->arrayType, NULL)))

	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	-1
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_instantiate__ns2__getSettingsFileResponseElement@@YAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__getSettingsFileResponseElement
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN4@soap_in_Po@6

; 4021 : 			return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_Po@6
$LN4@soap_in_Po@6:

; 4022 : 		(*a)->soap_default(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4023 : 		if (!(*a)->soap_in(soap, tag, NULL))

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@soap_in_Po@6

; 4024 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN9@soap_in_Po@6
$LN3@soap_in_Po@6:

; 4025 : 	}
; 4026 : 	else

	jmp	SHORT $LN2@soap_in_Po@6
$LN5@soap_in_Po@6:

; 4027 : 	{	_ns2__getSettingsFileResponseElement ** p = (_ns2__getSettingsFileResponseElement **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__getSettingsFileResponseElement, sizeof(_ns2__getSettingsFileResponseElement), 0);

	push	0
	push	12					; 0000000cH
	push	22					; 00000016H
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_lookup
	add	esp, 24					; 00000018H
	mov	DWORD PTR _p$91152[ebp], eax

; 4028 : 		a = p;

	mov	eax, DWORD PTR _p$91152[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 4029 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN2@soap_in_Po@6
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_in_Po@6

; 4030 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN9@soap_in_Po@6
$LN2@soap_in_Po@6:

; 4031 : 	}
; 4032 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN9@soap_in_Po@6:

; 4033 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_PointerTo_ns2__getSettingsFileResponseElement@@YAPAPAV_ns2__getSettingsFileResponseElement@@PAUsoap@@PBDPAPAV1@1@Z ENDP ; soap_in_PointerTo_ns2__getSettingsFileResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_serialize_PointerTo_ns2__getSettingsFileElement@@YAXPAUsoap@@PBQAV_ns2__getSettingsFileElement@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize_PointerTo_ns2__getSettingsFileElement@@YAXPAUsoap@@PBQAV_ns2__getSettingsFileElement@@@Z PROC ; soap_serialize_PointerTo_ns2__getSettingsFileElement, COMDAT

; 4036 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4037 : 	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__getSettingsFileElement))

	push	21					; 00000015H
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_reference
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@soap_seria@9

; 4038 : 		(*a)->soap_serialize(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@soap_seria@9:

; 4039 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize_PointerTo_ns2__getSettingsFileElement@@YAXPAUsoap@@PBQAV_ns2__getSettingsFileElement@@@Z ENDP ; soap_serialize_PointerTo_ns2__getSettingsFileElement
_TEXT	ENDS
PUBLIC	?soap_put_PointerTo_ns2__getSettingsFileElement@@YAHPAUsoap@@PBQAV_ns2__getSettingsFileElement@@PBD2@Z ; soap_put_PointerTo_ns2__getSettingsFileElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_PointerTo_ns2__getSettingsFileElement@@YAHPAUsoap@@PBQAV_ns2__getSettingsFileElement@@PBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_PointerTo_ns2__getSettingsFileElement@@YAHPAUsoap@@PBQAV_ns2__getSettingsFileElement@@PBD2@Z PROC ; soap_put_PointerTo_ns2__getSettingsFileElement, COMDAT

; 4042 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4043 : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__getSettingsFileElement);

	push	32					; 00000020H
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 4044 : 	if (soap_out_PointerTo_ns2__getSettingsFileElement(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerTo_ns2__getSettingsFileElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSettingsFileElement@@1@Z ; soap_out_PointerTo_ns2__getSettingsFileElement
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_P@7

; 4045 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_P@7
$LN1@soap_put_P@7:

; 4046 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_P@7:

; 4047 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_PointerTo_ns2__getSettingsFileElement@@YAHPAUsoap@@PBQAV_ns2__getSettingsFileElement@@PBD2@Z ENDP ; soap_put_PointerTo_ns2__getSettingsFileElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out_PointerTo_ns2__getSettingsFileElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSettingsFileElement@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_PointerTo_ns2__getSettingsFileElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSettingsFileElement@@1@Z PROC ; soap_out_PointerTo_ns2__getSettingsFileElement, COMDAT

; 4050 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4051 : 	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__getSettingsFileElement);

	push	21					; 00000015H
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_id
	add	esp, 32					; 00000020H
	mov	DWORD PTR _id$[ebp], eax

; 4052 : 	if (id < 0)

	cmp	DWORD PTR _id$[ebp], 0
	jge	SHORT $LN1@soap_out_P@7

; 4053 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_out_P@7
$LN1@soap_out_P@7:

; 4054 : 	return (*a)->soap_out(soap, tag, id, type);

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@soap_out_P@7:

; 4055 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_PointerTo_ns2__getSettingsFileElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSettingsFileElement@@1@Z ENDP ; soap_out_PointerTo_ns2__getSettingsFileElement
_TEXT	ENDS
PUBLIC	?soap_get_PointerTo_ns2__getSettingsFileElement@@YAPAPAV_ns2__getSettingsFileElement@@PAUsoap@@PAPAV1@PBD2@Z ; soap_get_PointerTo_ns2__getSettingsFileElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_PointerTo_ns2__getSettingsFileElement@@YAPAPAV_ns2__getSettingsFileElement@@PAUsoap@@PAPAV1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_PointerTo_ns2__getSettingsFileElement@@YAPAPAV_ns2__getSettingsFileElement@@PAUsoap@@PAPAV1@PBD2@Z PROC ; soap_get_PointerTo_ns2__getSettingsFileElement, COMDAT

; 4058 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4059 : 	if ((p = soap_in_PointerTo_ns2__getSettingsFileElement(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_PointerTo_ns2__getSettingsFileElement@@YAPAPAV_ns2__getSettingsFileElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__getSettingsFileElement
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_P@7

; 4060 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_P@7

; 4061 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_P@7
$LN2@soap_get_P@7:

; 4062 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_P@7:

; 4063 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_PointerTo_ns2__getSettingsFileElement@@YAPAPAV_ns2__getSettingsFileElement@@PAUsoap@@PAPAV1@PBD2@Z ENDP ; soap_get_PointerTo_ns2__getSettingsFileElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in_PointerTo_ns2__getSettingsFileElement@@YAPAPAV_ns2__getSettingsFileElement@@PAUsoap@@PBDPAPAV1@1@Z
_TEXT	SEGMENT
_p$91203 = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_PointerTo_ns2__getSettingsFileElement@@YAPAPAV_ns2__getSettingsFileElement@@PAUsoap@@PBDPAPAV1@1@Z PROC ; soap_in_PointerTo_ns2__getSettingsFileElement, COMDAT

; 4066 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4067 : 	if (soap_element_begin_in(soap, tag, 1, NULL))

	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN8@soap_in_Po@7

; 4068 : 		return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_Po@7
$LN8@soap_in_Po@7:

; 4069 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN7@soap_in_Po@7

; 4070 : 		if (!(a = (_ns2__getSettingsFileElement **)soap_malloc(soap, sizeof(_ns2__getSettingsFileElement *))))

	push	4
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_malloc
	add	esp, 8
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN7@soap_in_Po@7

; 4071 : 			return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_Po@7
$LN7@soap_in_Po@7:

; 4072 : 	*a = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], 0

; 4073 : 	if (!soap->null && *soap->href != '#')

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87300]
	test	ecx, ecx
	jne	$LN5@soap_in_Po@7
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	cmp	ecx, 35					; 00000023H
	je	$LN5@soap_in_Po@7

; 4074 : 	{	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 4075 : 		if (!(*a = (_ns2__getSettingsFileElement *)soap_instantiate__ns2__getSettingsFileElement(soap, -1, soap->type, soap->arrayType, NULL)))

	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	-1
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_instantiate__ns2__getSettingsFileElement@@YAPAV_ns2__getSettingsFileElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__getSettingsFileElement
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN4@soap_in_Po@7

; 4076 : 			return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_Po@7
$LN4@soap_in_Po@7:

; 4077 : 		(*a)->soap_default(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4078 : 		if (!(*a)->soap_in(soap, tag, NULL))

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@soap_in_Po@7

; 4079 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN9@soap_in_Po@7
$LN3@soap_in_Po@7:

; 4080 : 	}
; 4081 : 	else

	jmp	SHORT $LN2@soap_in_Po@7
$LN5@soap_in_Po@7:

; 4082 : 	{	_ns2__getSettingsFileElement ** p = (_ns2__getSettingsFileElement **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__getSettingsFileElement, sizeof(_ns2__getSettingsFileElement), 0);

	push	0
	push	12					; 0000000cH
	push	21					; 00000015H
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_lookup
	add	esp, 24					; 00000018H
	mov	DWORD PTR _p$91203[ebp], eax

; 4083 : 		a = p;

	mov	eax, DWORD PTR _p$91203[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 4084 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN2@soap_in_Po@7
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_in_Po@7

; 4085 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN9@soap_in_Po@7
$LN2@soap_in_Po@7:

; 4086 : 	}
; 4087 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN9@soap_in_Po@7:

; 4088 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_PointerTo_ns2__getSettingsFileElement@@YAPAPAV_ns2__getSettingsFileElement@@PAUsoap@@PBDPAPAV1@1@Z ENDP ; soap_in_PointerTo_ns2__getSettingsFileElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_serialize_PointerTo_ns2__getSessionIDResponseElement@@YAXPAUsoap@@PBQAV_ns2__getSessionIDResponseElement@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize_PointerTo_ns2__getSessionIDResponseElement@@YAXPAUsoap@@PBQAV_ns2__getSessionIDResponseElement@@@Z PROC ; soap_serialize_PointerTo_ns2__getSessionIDResponseElement, COMDAT

; 4091 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4092 : 	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__getSessionIDResponseElement))

	push	20					; 00000014H
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_reference
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@soap_seria@10

; 4093 : 		(*a)->soap_serialize(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@soap_seria@10:

; 4094 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize_PointerTo_ns2__getSessionIDResponseElement@@YAXPAUsoap@@PBQAV_ns2__getSessionIDResponseElement@@@Z ENDP ; soap_serialize_PointerTo_ns2__getSessionIDResponseElement
_TEXT	ENDS
PUBLIC	?soap_put_PointerTo_ns2__getSessionIDResponseElement@@YAHPAUsoap@@PBQAV_ns2__getSessionIDResponseElement@@PBD2@Z ; soap_put_PointerTo_ns2__getSessionIDResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_PointerTo_ns2__getSessionIDResponseElement@@YAHPAUsoap@@PBQAV_ns2__getSessionIDResponseElement@@PBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_PointerTo_ns2__getSessionIDResponseElement@@YAHPAUsoap@@PBQAV_ns2__getSessionIDResponseElement@@PBD2@Z PROC ; soap_put_PointerTo_ns2__getSessionIDResponseElement, COMDAT

; 4097 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4098 : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__getSessionIDResponseElement);

	push	29					; 0000001dH
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 4099 : 	if (soap_out_PointerTo_ns2__getSessionIDResponseElement(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerTo_ns2__getSessionIDResponseElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSessionIDResponseElement@@1@Z ; soap_out_PointerTo_ns2__getSessionIDResponseElement
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_P@8

; 4100 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_P@8
$LN1@soap_put_P@8:

; 4101 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_P@8:

; 4102 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_PointerTo_ns2__getSessionIDResponseElement@@YAHPAUsoap@@PBQAV_ns2__getSessionIDResponseElement@@PBD2@Z ENDP ; soap_put_PointerTo_ns2__getSessionIDResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out_PointerTo_ns2__getSessionIDResponseElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSessionIDResponseElement@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_PointerTo_ns2__getSessionIDResponseElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSessionIDResponseElement@@1@Z PROC ; soap_out_PointerTo_ns2__getSessionIDResponseElement, COMDAT

; 4105 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4106 : 	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__getSessionIDResponseElement);

	push	20					; 00000014H
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_id
	add	esp, 32					; 00000020H
	mov	DWORD PTR _id$[ebp], eax

; 4107 : 	if (id < 0)

	cmp	DWORD PTR _id$[ebp], 0
	jge	SHORT $LN1@soap_out_P@8

; 4108 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_out_P@8
$LN1@soap_out_P@8:

; 4109 : 	return (*a)->soap_out(soap, tag, id, type);

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@soap_out_P@8:

; 4110 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_PointerTo_ns2__getSessionIDResponseElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSessionIDResponseElement@@1@Z ENDP ; soap_out_PointerTo_ns2__getSessionIDResponseElement
_TEXT	ENDS
PUBLIC	?soap_get_PointerTo_ns2__getSessionIDResponseElement@@YAPAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PAPAV1@PBD2@Z ; soap_get_PointerTo_ns2__getSessionIDResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_PointerTo_ns2__getSessionIDResponseElement@@YAPAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PAPAV1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_PointerTo_ns2__getSessionIDResponseElement@@YAPAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PAPAV1@PBD2@Z PROC ; soap_get_PointerTo_ns2__getSessionIDResponseElement, COMDAT

; 4113 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4114 : 	if ((p = soap_in_PointerTo_ns2__getSessionIDResponseElement(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_PointerTo_ns2__getSessionIDResponseElement@@YAPAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__getSessionIDResponseElement
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_P@8

; 4115 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_P@8

; 4116 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_P@8
$LN2@soap_get_P@8:

; 4117 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_P@8:

; 4118 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_PointerTo_ns2__getSessionIDResponseElement@@YAPAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PAPAV1@PBD2@Z ENDP ; soap_get_PointerTo_ns2__getSessionIDResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in_PointerTo_ns2__getSessionIDResponseElement@@YAPAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PBDPAPAV1@1@Z
_TEXT	SEGMENT
_p$91254 = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_PointerTo_ns2__getSessionIDResponseElement@@YAPAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PBDPAPAV1@1@Z PROC ; soap_in_PointerTo_ns2__getSessionIDResponseElement, COMDAT

; 4121 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4122 : 	if (soap_element_begin_in(soap, tag, 1, NULL))

	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN8@soap_in_Po@8

; 4123 : 		return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_Po@8
$LN8@soap_in_Po@8:

; 4124 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN7@soap_in_Po@8

; 4125 : 		if (!(a = (_ns2__getSessionIDResponseElement **)soap_malloc(soap, sizeof(_ns2__getSessionIDResponseElement *))))

	push	4
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_malloc
	add	esp, 8
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN7@soap_in_Po@8

; 4126 : 			return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_Po@8
$LN7@soap_in_Po@8:

; 4127 : 	*a = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], 0

; 4128 : 	if (!soap->null && *soap->href != '#')

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87300]
	test	ecx, ecx
	jne	$LN5@soap_in_Po@8
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	cmp	ecx, 35					; 00000023H
	je	$LN5@soap_in_Po@8

; 4129 : 	{	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 4130 : 		if (!(*a = (_ns2__getSessionIDResponseElement *)soap_instantiate__ns2__getSessionIDResponseElement(soap, -1, soap->type, soap->arrayType, NULL)))

	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	-1
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_instantiate__ns2__getSessionIDResponseElement@@YAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__getSessionIDResponseElement
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN4@soap_in_Po@8

; 4131 : 			return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_Po@8
$LN4@soap_in_Po@8:

; 4132 : 		(*a)->soap_default(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4133 : 		if (!(*a)->soap_in(soap, tag, NULL))

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@soap_in_Po@8

; 4134 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN9@soap_in_Po@8
$LN3@soap_in_Po@8:

; 4135 : 	}
; 4136 : 	else

	jmp	SHORT $LN2@soap_in_Po@8
$LN5@soap_in_Po@8:

; 4137 : 	{	_ns2__getSessionIDResponseElement ** p = (_ns2__getSessionIDResponseElement **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__getSessionIDResponseElement, sizeof(_ns2__getSessionIDResponseElement), 0);

	push	0
	push	12					; 0000000cH
	push	20					; 00000014H
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_lookup
	add	esp, 24					; 00000018H
	mov	DWORD PTR _p$91254[ebp], eax

; 4138 : 		a = p;

	mov	eax, DWORD PTR _p$91254[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 4139 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN2@soap_in_Po@8
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_in_Po@8

; 4140 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN9@soap_in_Po@8
$LN2@soap_in_Po@8:

; 4141 : 	}
; 4142 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN9@soap_in_Po@8:

; 4143 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_PointerTo_ns2__getSessionIDResponseElement@@YAPAPAV_ns2__getSessionIDResponseElement@@PAUsoap@@PBDPAPAV1@1@Z ENDP ; soap_in_PointerTo_ns2__getSessionIDResponseElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_serialize_PointerTo_ns2__getSessionIDElement@@YAXPAUsoap@@PBQAV_ns2__getSessionIDElement@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize_PointerTo_ns2__getSessionIDElement@@YAXPAUsoap@@PBQAV_ns2__getSessionIDElement@@@Z PROC ; soap_serialize_PointerTo_ns2__getSessionIDElement, COMDAT

; 4146 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4147 : 	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__getSessionIDElement))

	push	19					; 00000013H
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_reference
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@soap_seria@11

; 4148 : 		(*a)->soap_serialize(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@soap_seria@11:

; 4149 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize_PointerTo_ns2__getSessionIDElement@@YAXPAUsoap@@PBQAV_ns2__getSessionIDElement@@@Z ENDP ; soap_serialize_PointerTo_ns2__getSessionIDElement
_TEXT	ENDS
PUBLIC	?soap_put_PointerTo_ns2__getSessionIDElement@@YAHPAUsoap@@PBQAV_ns2__getSessionIDElement@@PBD2@Z ; soap_put_PointerTo_ns2__getSessionIDElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_PointerTo_ns2__getSessionIDElement@@YAHPAUsoap@@PBQAV_ns2__getSessionIDElement@@PBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_PointerTo_ns2__getSessionIDElement@@YAHPAUsoap@@PBQAV_ns2__getSessionIDElement@@PBD2@Z PROC ; soap_put_PointerTo_ns2__getSessionIDElement, COMDAT

; 4152 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4153 : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns2__getSessionIDElement);

	push	28					; 0000001cH
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 4154 : 	if (soap_out_PointerTo_ns2__getSessionIDElement(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerTo_ns2__getSessionIDElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSessionIDElement@@1@Z ; soap_out_PointerTo_ns2__getSessionIDElement
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_P@9

; 4155 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_P@9
$LN1@soap_put_P@9:

; 4156 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_P@9:

; 4157 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_PointerTo_ns2__getSessionIDElement@@YAHPAUsoap@@PBQAV_ns2__getSessionIDElement@@PBD2@Z ENDP ; soap_put_PointerTo_ns2__getSessionIDElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out_PointerTo_ns2__getSessionIDElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSessionIDElement@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_PointerTo_ns2__getSessionIDElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSessionIDElement@@1@Z PROC ; soap_out_PointerTo_ns2__getSessionIDElement, COMDAT

; 4160 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4161 : 	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__getSessionIDElement);

	push	19					; 00000013H
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_id
	add	esp, 32					; 00000020H
	mov	DWORD PTR _id$[ebp], eax

; 4162 : 	if (id < 0)

	cmp	DWORD PTR _id$[ebp], 0
	jge	SHORT $LN1@soap_out_P@9

; 4163 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_out_P@9
$LN1@soap_out_P@9:

; 4164 : 	return (*a)->soap_out(soap, tag, id, type);

	mov	esi, esp
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@soap_out_P@9:

; 4165 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_PointerTo_ns2__getSessionIDElement@@YAHPAUsoap@@PBDHPBQAV_ns2__getSessionIDElement@@1@Z ENDP ; soap_out_PointerTo_ns2__getSessionIDElement
_TEXT	ENDS
PUBLIC	?soap_get_PointerTo_ns2__getSessionIDElement@@YAPAPAV_ns2__getSessionIDElement@@PAUsoap@@PAPAV1@PBD2@Z ; soap_get_PointerTo_ns2__getSessionIDElement
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_PointerTo_ns2__getSessionIDElement@@YAPAPAV_ns2__getSessionIDElement@@PAUsoap@@PAPAV1@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_PointerTo_ns2__getSessionIDElement@@YAPAPAV_ns2__getSessionIDElement@@PAUsoap@@PAPAV1@PBD2@Z PROC ; soap_get_PointerTo_ns2__getSessionIDElement, COMDAT

; 4168 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4169 : 	if ((p = soap_in_PointerTo_ns2__getSessionIDElement(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_PointerTo_ns2__getSessionIDElement@@YAPAPAV_ns2__getSessionIDElement@@PAUsoap@@PBDPAPAV1@1@Z ; soap_in_PointerTo_ns2__getSessionIDElement
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_P@9

; 4170 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_P@9

; 4171 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_P@9
$LN2@soap_get_P@9:

; 4172 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_P@9:

; 4173 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_PointerTo_ns2__getSessionIDElement@@YAPAPAV_ns2__getSessionIDElement@@PAUsoap@@PAPAV1@PBD2@Z ENDP ; soap_get_PointerTo_ns2__getSessionIDElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in_PointerTo_ns2__getSessionIDElement@@YAPAPAV_ns2__getSessionIDElement@@PAUsoap@@PBDPAPAV1@1@Z
_TEXT	SEGMENT
_p$91305 = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_PointerTo_ns2__getSessionIDElement@@YAPAPAV_ns2__getSessionIDElement@@PAUsoap@@PBDPAPAV1@1@Z PROC ; soap_in_PointerTo_ns2__getSessionIDElement, COMDAT

; 4176 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4177 : 	if (soap_element_begin_in(soap, tag, 1, NULL))

	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN8@soap_in_Po@9

; 4178 : 		return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_Po@9
$LN8@soap_in_Po@9:

; 4179 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN7@soap_in_Po@9

; 4180 : 		if (!(a = (_ns2__getSessionIDElement **)soap_malloc(soap, sizeof(_ns2__getSessionIDElement *))))

	push	4
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_malloc
	add	esp, 8
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN7@soap_in_Po@9

; 4181 : 			return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_Po@9
$LN7@soap_in_Po@9:

; 4182 : 	*a = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], 0

; 4183 : 	if (!soap->null && *soap->href != '#')

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87300]
	test	ecx, ecx
	jne	$LN5@soap_in_Po@9
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	cmp	ecx, 35					; 00000023H
	je	$LN5@soap_in_Po@9

; 4184 : 	{	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 4185 : 		if (!(*a = (_ns2__getSessionIDElement *)soap_instantiate__ns2__getSessionIDElement(soap, -1, soap->type, soap->arrayType, NULL)))

	push	0
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 84148				; 000148b4H
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 83124				; 000144b4H
	push	ecx
	push	-1
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_instantiate__ns2__getSessionIDElement@@YAPAV_ns2__getSessionIDElement@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate__ns2__getSessionIDElement
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN4@soap_in_Po@9

; 4186 : 			return NULL;

	xor	eax, eax
	jmp	$LN9@soap_in_Po@9
$LN4@soap_in_Po@9:

; 4187 : 		(*a)->soap_default(soap);

	mov	esi, esp
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4188 : 		if (!(*a)->soap_in(soap, tag, NULL))

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@soap_in_Po@9

; 4189 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN9@soap_in_Po@9
$LN3@soap_in_Po@9:

; 4190 : 	}
; 4191 : 	else

	jmp	SHORT $LN2@soap_in_Po@9
$LN5@soap_in_Po@9:

; 4192 : 	{	_ns2__getSessionIDElement ** p = (_ns2__getSessionIDElement **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__getSessionIDElement, sizeof(_ns2__getSessionIDElement), 0);

	push	0
	push	12					; 0000000cH
	push	19					; 00000013H
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_lookup
	add	esp, 24					; 00000018H
	mov	DWORD PTR _p$91305[ebp], eax

; 4193 : 		a = p;

	mov	eax, DWORD PTR _p$91305[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 4194 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN2@soap_in_Po@9
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_in_Po@9

; 4195 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN9@soap_in_Po@9
$LN2@soap_in_Po@9:

; 4196 : 	}
; 4197 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN9@soap_in_Po@9:

; 4198 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_PointerTo_ns2__getSessionIDElement@@YAPAPAV_ns2__getSessionIDElement@@PAUsoap@@PBDPAPAV1@1@Z ENDP ; soap_in_PointerTo_ns2__getSessionIDElement
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_serialize_PointerTostd__string@@YAXPAUsoap@@PBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize_PointerTostd__string@@YAXPAUsoap@@PBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; soap_serialize_PointerTostd__string, COMDAT

; 4201 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4202 : 	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))

	push	18					; 00000012H
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_reference
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@soap_seria@12

; 4203 : 		soap_serialize_std__string(soap, *a);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_serialize_std__string@@YAXPAUsoap@@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; soap_serialize_std__string
	add	esp, 8
$LN2@soap_seria@12:

; 4204 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize_PointerTostd__string@@YAXPAUsoap@@PBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; soap_serialize_PointerTostd__string
_TEXT	ENDS
PUBLIC	?soap_put_PointerTostd__string@@YAHPAUsoap@@PBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD2@Z ; soap_put_PointerTostd__string
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_PointerTostd__string@@YAHPAUsoap@@PBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_PointerTostd__string@@YAHPAUsoap@@PBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD2@Z PROC ; soap_put_PointerTostd__string, COMDAT

; 4207 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4208 : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);

	push	25					; 00000019H
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 4209 : 	if (soap_out_PointerTostd__string(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_PointerTostd__string@@YAHPAUsoap@@PBDHPBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@1@Z ; soap_out_PointerTostd__string
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_P@10

; 4210 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_P@10
$LN1@soap_put_P@10:

; 4211 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_P@10:

; 4212 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_PointerTostd__string@@YAHPAUsoap@@PBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD2@Z ENDP ; soap_put_PointerTostd__string
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out_PointerTostd__string@@YAHPAUsoap@@PBDHPBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_PointerTostd__string@@YAHPAUsoap@@PBDHPBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@1@Z PROC ; soap_out_PointerTostd__string, COMDAT

; 4215 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4216 : 	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);

	push	18					; 00000012H
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_element_id
	add	esp, 32					; 00000020H
	mov	DWORD PTR _id$[ebp], eax

; 4217 : 	if (id < 0)

	cmp	DWORD PTR _id$[ebp], 0
	jge	SHORT $LN1@soap_out_P@10

; 4218 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_out_P@10
$LN1@soap_out_P@10:

; 4219 : 	return soap_out_std__string(soap, tag, id, *a, type);

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_out_std__string@@YAHPAUsoap@@PBDHPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@1@Z ; soap_out_std__string
	add	esp, 20					; 00000014H
$LN2@soap_out_P@10:

; 4220 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_PointerTostd__string@@YAHPAUsoap@@PBDHPBQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@1@Z ENDP ; soap_out_PointerTostd__string
_TEXT	ENDS
PUBLIC	?soap_get_PointerTostd__string@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PAPAV12@PBD2@Z ; soap_get_PointerTostd__string
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_PointerTostd__string@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PAPAV12@PBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_PointerTostd__string@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PAPAV12@PBD2@Z PROC ; soap_get_PointerTostd__string, COMDAT

; 4223 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4224 : 	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_PointerTostd__string@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PBDPAPAV12@1@Z ; soap_in_PointerTostd__string
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_P@10

; 4225 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_P@10

; 4226 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_P@10
$LN2@soap_get_P@10:

; 4227 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_P@10:

; 4228 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_PointerTostd__string@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PAPAV12@PBD2@Z ENDP ; soap_get_PointerTostd__string
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in_PointerTostd__string@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PBDPAPAV12@1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_PointerTostd__string@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PBDPAPAV12@1@Z PROC ; soap_in_PointerTostd__string, COMDAT

; 4231 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4232 : 	if (soap_element_begin_in(soap, tag, 1, NULL))

	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN7@soap_in_Po@10

; 4233 : 		return NULL;

	xor	eax, eax
	jmp	$LN8@soap_in_Po@10
$LN7@soap_in_Po@10:

; 4234 : 	if (!a)

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN6@soap_in_Po@10

; 4235 : 		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))

	push	4
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_malloc
	add	esp, 8
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN6@soap_in_Po@10

; 4236 : 			return NULL;

	xor	eax, eax
	jmp	$LN8@soap_in_Po@10
$LN6@soap_in_Po@10:

; 4237 : 	*a = NULL;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], 0

; 4238 : 	if (!soap->null && *soap->href != '#')

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+87300]
	test	ecx, ecx
	jne	SHORT $LN4@soap_in_Po@10
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	cmp	ecx, 35					; 00000023H
	je	SHORT $LN4@soap_in_Po@10

; 4239 : 	{	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 4240 : 		if (!(*a = soap_in_std__string(soap, tag, *a, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_std__string@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PBDPAV12@1@Z ; soap_in_std__string
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _a$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@soap_in_Po@10

; 4241 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN8@soap_in_Po@10
$LN3@soap_in_Po@10:

; 4242 : 	}
; 4243 : 	else

	jmp	SHORT $LN2@soap_in_Po@10
$LN4@soap_in_Po@10:

; 4244 : 	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);

	push	0
	push	32					; 00000020H
	push	18					; 00000012H
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	add	ecx, 82100				; 000140b4H
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_id_lookup
	add	esp, 24					; 00000018H
	mov	DWORD PTR _a$[ebp], eax

; 4245 : 		if (soap->body && soap_element_end_in(soap, tag))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, WORD PTR [eax+12442]
	test	ecx, ecx
	je	SHORT $LN2@soap_in_Po@10
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_end_in
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@soap_in_Po@10

; 4246 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN8@soap_in_Po@10
$LN2@soap_in_Po@10:

; 4247 : 	}
; 4248 : 	return a;

	mov	eax, DWORD PTR _a$[ebp]
$LN8@soap_in_Po@10:

; 4249 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_PointerTostd__string@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAUsoap@@PBDPAPAV12@1@Z ENDP ; soap_in_PointerTostd__string
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_default__QName@@YAXPAUsoap@@PAPAD@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_default__QName@@YAXPAUsoap@@PAPAD@Z PROC		; soap_default__QName, COMDAT

; 4252 : {	soap_default_string(soap, a);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_string@@YAXPAUsoap@@PAPAD@Z ; soap_default_string
	add	esp, 8

; 4253 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_default__QName@@YAXPAUsoap@@PAPAD@Z ENDP		; soap_default__QName
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_serialize__QName@@YAXPAUsoap@@PBQAD@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize__QName@@YAXPAUsoap@@PBQAD@Z PROC	; soap_serialize__QName, COMDAT

; 4256 : {	soap_serialize_string(soap, a);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_serialize_string@@YAXPAUsoap@@PBQAD@Z ; soap_serialize_string
	add	esp, 8

; 4257 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize__QName@@YAXPAUsoap@@PBQAD@Z ENDP	; soap_serialize__QName
_TEXT	ENDS
PUBLIC	?soap_put__QName@@YAHPAUsoap@@PBQADPBD2@Z	; soap_put__QName
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put__QName@@YAHPAUsoap@@PBQADPBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put__QName@@YAHPAUsoap@@PBQADPBD2@Z PROC		; soap_put__QName, COMDAT

; 4260 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4261 : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);

	push	5
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 4262 : 	if (soap_out__QName(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out__QName@@YAHPAUsoap@@PBDHPBQAD1@Z ; soap_out__QName
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put__@4

; 4263 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put__@4
$LN1@soap_put__@4:

; 4264 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put__@4:

; 4265 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put__QName@@YAHPAUsoap@@PBQADPBD2@Z ENDP		; soap_put__QName
_TEXT	ENDS
EXTRN	_soap_outstring:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_out__QName@@YAHPAUsoap@@PBDHPBQAD1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out__QName@@YAHPAUsoap@@PBDHPBQAD1@Z PROC		; soap_out__QName, COMDAT

; 4268 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4269 : 	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);

	push	5
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_outstring
	add	esp, 24					; 00000018H

; 4270 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out__QName@@YAHPAUsoap@@PBDHPBQAD1@Z ENDP		; soap_out__QName
_TEXT	ENDS
PUBLIC	?soap_get__QName@@YAPAPADPAUsoap@@PAPADPBD2@Z	; soap_get__QName
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get__QName@@YAPAPADPAUsoap@@PAPADPBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get__QName@@YAPAPADPAUsoap@@PAPADPBD2@Z PROC	; soap_get__QName, COMDAT

; 4273 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4274 : 	if ((p = soap_in__QName(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in__QName@@YAPAPADPAUsoap@@PBDPAPAD1@Z ; soap_in__QName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get__@10

; 4275 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get__@10

; 4276 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get__@10
$LN2@soap_get__@10:

; 4277 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get__@10:

; 4278 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get__QName@@YAPAPADPAUsoap@@PAPADPBD2@Z ENDP	; soap_get__QName
_TEXT	ENDS
EXTRN	_soap_instring:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in__QName@@YAPAPADPAUsoap@@PBDPAPAD1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in__QName@@YAPAPADPAUsoap@@PBDPAPAD1@Z PROC	; soap_in__QName, COMDAT

; 4281 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4282 : 	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);

	push	-1
	push	-1
	push	2
	push	5
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_instring
	add	esp, 32					; 00000020H

; 4283 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in__QName@@YAPAPADPAUsoap@@PBDPAPAD1@Z ENDP	; soap_in__QName
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_default_string@@YAXPAUsoap@@PAPAD@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_default_string@@YAXPAUsoap@@PAPAD@Z PROC		; soap_default_string, COMDAT

; 4286 : {	(void)soap; /* appease -Wall -Werror */

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4287 : #ifdef SOAP_DEFAULT_string
; 4288 : 	*a = SOAP_DEFAULT_string;
; 4289 : #else
; 4290 : 	*a = (char *)0;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], 0

; 4291 : #endif
; 4292 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_default_string@@YAXPAUsoap@@PAPAD@Z ENDP		; soap_default_string
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_serialize_string@@YAXPAUsoap@@PBQAD@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize_string@@YAXPAUsoap@@PBQAD@Z PROC	; soap_serialize_string, COMDAT

; 4295 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4296 : 	soap_reference(soap, *a, SOAP_TYPE_string);

	push	4
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_reference
	add	esp, 12					; 0000000cH

; 4297 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize_string@@YAXPAUsoap@@PBQAD@Z ENDP	; soap_serialize_string
_TEXT	ENDS
PUBLIC	?soap_put_string@@YAHPAUsoap@@PBQADPBD2@Z	; soap_put_string
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_put_string@@YAHPAUsoap@@PBQADPBD2@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_put_string@@YAHPAUsoap@@PBQADPBD2@Z PROC		; soap_put_string, COMDAT

; 4300 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4301 : 	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);

	push	4
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	_soap_embed
	add	esp, 24					; 00000018H
	mov	DWORD PTR _id$[ebp], eax

; 4302 : 	if (soap_out_string(soap, tag, id, a, type))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_out_string@@YAHPAUsoap@@PBDHPBQAD1@Z ; soap_out_string
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_put_s@2

; 4303 : 		return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	eax, DWORD PTR [eax+90460]
	jmp	SHORT $LN2@soap_put_s@2
$LN1@soap_put_s@2:

; 4304 : 	return soap_putindependent(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_putindependent@@YAHPAUsoap@@@Z	; soap_putindependent
	add	esp, 4
$LN2@soap_put_s@2:

; 4305 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_put_string@@YAHPAUsoap@@PBQADPBD2@Z ENDP		; soap_put_string
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_out_string@@YAHPAUsoap@@PBDHPBQAD1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_string@@YAHPAUsoap@@PBDHPBQAD1@Z PROC		; soap_out_string, COMDAT

; 4308 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4309 : 	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);

	push	4
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_outstring
	add	esp, 24					; 00000018H

; 4310 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_out_string@@YAHPAUsoap@@PBDHPBQAD1@Z ENDP		; soap_out_string
_TEXT	ENDS
PUBLIC	?soap_get_string@@YAPAPADPAUsoap@@PAPADPBD2@Z	; soap_get_string
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_get_string@@YAPAPADPAUsoap@@PAPADPBD2@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
_tag$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_get_string@@YAPAPADPAUsoap@@PAPADPBD2@Z PROC	; soap_get_string, COMDAT

; 4313 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4314 : 	if ((p = soap_in_string(soap, tag, p, type)))

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_in_string@@YAPAPADPAUsoap@@PBDPAPAD1@Z ; soap_in_string
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@soap_get_s@2

; 4315 : 		if (soap_getindependent(soap))

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_getindependent@@YAHPAUsoap@@@Z	; soap_getindependent
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@soap_get_s@2

; 4316 : 			return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@soap_get_s@2
$LN2@soap_get_s@2:

; 4317 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN3@soap_get_s@2:

; 4318 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_get_string@@YAPAPADPAUsoap@@PAPADPBD2@Z ENDP	; soap_get_string
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_in_string@@YAPAPADPAUsoap@@PBDPAPAD1@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_string@@YAPAPADPAUsoap@@PBDPAPAD1@Z PROC	; soap_in_string, COMDAT

; 4321 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4322 : 	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);

	push	-1
	push	-1
	push	1
	push	4
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_instring
	add	esp, 32					; 00000020H

; 4323 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_in_string@@YAPAPADPAUsoap@@PBDPAPAD1@Z ENDP	; soap_in_string
_TEXT	ENDS
PUBLIC	?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ ; std::vector<float,std::allocator<float> >::clear
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default_std__vectorTemplateOffloat@@YAXPAUsoap@@PAV?$vector@MV?$allocator@M@std@@@std@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_default_std__vectorTemplateOffloat@@YAXPAUsoap@@PAV?$vector@MV?$allocator@M@std@@@std@@@Z PROC ; soap_default_std__vectorTemplateOffloat, COMDAT

; 4326 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4327 : 	p->clear();

	mov	ecx, DWORD PTR _p$[ebp]
	call	?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ ; std::vector<float,std::allocator<float> >::clear

; 4328 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_default_std__vectorTemplateOffloat@@YAXPAUsoap@@PAV?$vector@MV?$allocator@M@std@@@std@@@Z ENDP ; soap_default_std__vectorTemplateOffloat
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_serialize_std__vectorTemplateOffloat@@YAXPAUsoap@@PBV?$vector@MV?$allocator@M@std@@@std@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize_std__vectorTemplateOffloat@@YAXPAUsoap@@PBV?$vector@MV?$allocator@M@std@@@std@@@Z PROC ; soap_serialize_std__vectorTemplateOffloat, COMDAT

; 4331 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4332 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize_std__vectorTemplateOffloat@@YAXPAUsoap@@PBV?$vector@MV?$allocator@M@std@@@std@@@Z ENDP ; soap_serialize_std__vectorTemplateOffloat
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEABMXZ ; std::_Vector_const_iterator<float,std::allocator<float> >::operator*
PUBLIC	??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<float,std::allocator<float> >::~_Vector_const_iterator<float,std::allocator<float> >
PUBLIC	??9?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::operator!=
PUBLIC	?end@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::end
PUBLIC	??E?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<float,std::allocator<float> >::operator++
PUBLIC	?begin@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::begin
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?soap_out_std__vectorTemplateOffloat@@YAHPAUsoap@@PBDHPBV?$vector@MV?$allocator@M@std@@@std@@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_out_std__vectorTemplateOffloat@@YAHPAUsoap@@PBDHPBV?$vector@MV?$allocator@M@std@@@std@@1@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?soap_out_std__vectorTemplateOffloat@@YAHPAUsoap@@PBDHPBV?$vector@MV?$allocator@M@std@@@std@@1@Z$1
__ehfuncinfo$?soap_out_std__vectorTemplateOffloat@@YAHPAUsoap@@PBDHPBV?$vector@MV?$allocator@M@std@@@std@@1@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?soap_out_std__vectorTemplateOffloat@@YAHPAUsoap@@PBDHPBV?$vector@MV?$allocator@M@std@@@std@@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?soap_out_std__vectorTemplateOffloat@@YAHPAUsoap@@PBDHPBV?$vector@MV?$allocator@M@std@@@std@@1@Z
_TEXT	SEGMENT
tv91 = -276						; size = 4
tv65 = -272						; size = 4
$T101914 = -261						; size = 1
$T101915 = -252						; size = 12
$T101916 = -232						; size = 4
_i$91587 = -28						; size = 12
__$EHRec$ = -12						; size = 12
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_std__vectorTemplateOffloat@@YAHPAUsoap@@PBDHPBV?$vector@MV?$allocator@M@std@@@std@@1@Z PROC ; soap_out_std__vectorTemplateOffloat, COMDAT

; 4335 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?soap_out_std__vectorTemplateOffloat@@YAHPAUsoap@@PBDHPBV?$vector@MV?$allocator@M@std@@@std@@1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 4336 : 	for (std::vector<float >::const_iterator i = a->begin(); i != a->end(); ++i)

	lea	eax, DWORD PTR _i$91587[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	call	?begin@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::begin
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	jmp	SHORT $LN4@soap_out_s@2
$LN3@soap_out_s@2:
	lea	ecx, DWORD PTR _i$91587[ebp]
	call	??E?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<float,std::allocator<float> >::operator++
$LN4@soap_out_s@2:
	lea	eax, DWORD PTR $T101915[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	call	?end@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::end
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv91[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv91[ebp]
	push	edx
	lea	ecx, DWORD PTR _i$91587[ebp]
	call	??9?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::operator!=
	mov	BYTE PTR $T101914[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T101915[ebp]
	call	??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T101914[ebp]
	test	eax, eax
	je	SHORT $LN2@soap_out_s@2

; 4337 : 	{
; 4338 : 		if (soap_out_float(soap, tag, id, &(*i), ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	ecx, DWORD PTR _i$91587[ebp]
	call	??D?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEABMXZ ; std::_Vector_const_iterator<float,std::allocator<float> >::operator*
	push	eax
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_out_float@@YAHPAUsoap@@PBDHPBM1@Z	; soap_out_float
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_out_s@2

; 4339 : 			return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90460]
	mov	DWORD PTR $T101916[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _i$91587[ebp]
	call	??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T101916[ebp]
	jmp	SHORT $LN5@soap_out_s@2
$LN1@soap_out_s@2:

; 4340 : 	}

	jmp	$LN3@soap_out_s@2
$LN2@soap_out_s@2:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _i$91587[ebp]
	call	??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ

; 4341 : 	return SOAP_OK;

	xor	eax, eax
$LN5@soap_out_s@2:

; 4342 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@soap_out_s@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@soap_out_s@2:
	DD	1
	DD	$LN11@soap_out_s@2
$LN11@soap_out_s@2:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN9@soap_out_s@2
$LN9@soap_out_s@2:
	DB	105					; 00000069H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?soap_out_std__vectorTemplateOffloat@@YAHPAUsoap@@PBDHPBV?$vector@MV?$allocator@M@std@@@std@@1@Z$0:
	lea	ecx, DWORD PTR _i$91587[ebp]
	jmp	??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
__unwindfunclet$?soap_out_std__vectorTemplateOffloat@@YAHPAUsoap@@PBDHPBV?$vector@MV?$allocator@M@std@@@std@@1@Z$1:
	lea	ecx, DWORD PTR $T101915[ebp]
	jmp	??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
__ehhandler$?soap_out_std__vectorTemplateOffloat@@YAHPAUsoap@@PBDHPBV?$vector@MV?$allocator@M@std@@@std@@1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-280]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?soap_out_std__vectorTemplateOffloat@@YAHPAUsoap@@PBDHPBV?$vector@MV?$allocator@M@std@@@std@@1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?soap_out_std__vectorTemplateOffloat@@YAHPAUsoap@@PBDHPBV?$vector@MV?$allocator@M@std@@@std@@1@Z ENDP ; soap_out_std__vectorTemplateOffloat
PUBLIC	??1?$_Ranit@MHPBMABM@std@@QAE@XZ		; std::_Ranit<float,int,float const *,float const &>::~_Ranit<float,int,float const *,float const &>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<float,std::allocator<float> >::~_Vector_const_iterator<float,std::allocator<float> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Ranit@MHPBMABM@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<float,std::allocator<float> >::~_Vector_const_iterator<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??1?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base>::~_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??1?$_Ranit@MHPBMABM@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Ranit@MHPBMABM@std@@QAE@XZ PROC			; std::_Ranit<float,int,float const *,float const &>::~_Ranit<float,int,float const *,float const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base@2@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Ranit@MHPBMABM@std@@QAE@XZ ENDP			; std::_Ranit<float,int,float const *,float const &>::~_Ranit<float,int,float const *,float const &>
_TEXT	ENDS
PUBLIC	??1_Iterator_base@std@@QAE@XZ			; std::_Iterator_base::~_Iterator_base
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??1?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base>::~_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::~_Iterator_base
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base>::~_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base>
_TEXT	ENDS
PUBLIC	?_Orphan_me@_Iterator_base@std@@QAEXXZ		; std::_Iterator_base::_Orphan_me
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1_Iterator_base@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Iterator_base@std@@QAE@XZ$0
__ehfuncinfo$??1_Iterator_base@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Iterator_base@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??1_Iterator_base@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base@std@@QAE@XZ PROC			; std::_Iterator_base::~_Iterator_base, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy the iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Iterator_base@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 161  : 		_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base@std@@QAEXXZ	; std::_Iterator_base::_Orphan_me

; 162  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Iterator_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Iterator_b:
	DD	1
	DD	$LN6@Iterator_b
$LN6@Iterator_b:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@Iterator_b
$LN4@Iterator_b:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Iterator_base@std@@QAE@XZ$0:
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??1_Iterator_base@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Iterator_base@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base@std@@QAE@XZ ENDP			; std::_Iterator_base::~_Iterator_base
PUBLIC	??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; `string'
PUBLIC	??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ ; `string'
EXTRN	__imp_?_Debug_message@std@@YAXPB_W0I@Z:PROC
;	COMDAT ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ DB 'I'
	DB	00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'O', 00H
	DB	'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, ' '
	DB	00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H, 'P', 00H
	DB	'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
CONST	SEGMENT
??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, '9', 00H, '.', 00H, '0', 00H, '\', 00H, 'v', 00H
	DB	'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u'
	DB	00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H, 't', 00H
	DB	'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?_Orphan_me@_Iterator_base@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$6734 = -20					; size = 4
_this$ = -8						; size = 4
?_Orphan_me@_Iterator_base@std@@QAEXXZ PROC		; std::_Iterator_base::_Orphan_me, COMDAT
; _this$ = ecx

; 180  : 		{	// cut ties with parent

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 		if (_Mycont != 0 && _Mycont->_Myfirstiter != _IGNORE_MYITERLIST)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Orphan_me
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], -3			; fffffffdH
	je	SHORT $LN5@Orphan_me

; 182  : 			{	// adopted, remove self from list
; 183  : 			_Iterator_base **_Pnext =
; 184  : 				(_Iterator_base **)&_Mycont->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnext$6734[ebp], ecx
$LN3@Orphan_me:

; 185  : 			while (*_Pnext != 0 && *_Pnext != this)

	mov	eax, DWORD PTR __Pnext$6734[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Orphan_me
	mov	eax, DWORD PTR __Pnext$6734[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN2@Orphan_me

; 186  : 				_Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$6734[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$6734[ebp], ecx
	jmp	SHORT $LN3@Orphan_me
$LN2@Orphan_me:

; 187  : 
; 188  : 			if (*_Pnext == 0)

	mov	eax, DWORD PTR __Pnext$6734[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@Orphan_me

; 189  : 				_DEBUG_ERROR("ITERATOR LIST CORRUPTED!");

	mov	esi, esp
	push	189					; 000000bdH
	push	OFFSET ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Orphan_me:

; 190  : 			*_Pnext = _Mynextiter;

	mov	eax, DWORD PTR __Pnext$6734[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 191  : 			_Mycont = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@Orphan_me:

; 192  : 			}
; 193  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me@_Iterator_base@std@@QAEXXZ ENDP		; std::_Iterator_base::_Orphan_me
_TEXT	ENDS
PUBLIC	?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z ; std::vector<float,std::allocator<float> >::push_back
PUBLIC	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
PUBLIC	?soap_new_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@H@Z ; soap_new_std__vectorTemplateOffloat
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\reporting\soapc.cpp
;	COMDAT ?soap_in_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@PBDPAV12@1@Z
_TEXT	SEGMENT
tv133 = -220						; size = 4
_soap_flag$ = -20					; size = 2
_n$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@PBDPAV12@1@Z PROC ; soap_in_std__vectorTemplateOffloat, COMDAT

; 4345 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4346 : 	if (soap_element_begin_in(soap, tag, 1, NULL))

	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN14@soap_in_st@2

; 4347 : 		return NULL;

	xor	eax, eax
	jmp	$LN15@soap_in_st@2
$LN14@soap_in_st@2:

; 4348 : 	if (!a && !(a = soap_new_std__vectorTemplateOffloat(soap, -1)))

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN13@soap_in_st@2
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_new_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@H@Z ; soap_new_std__vectorTemplateOffloat
	add	esp, 8
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN13@soap_in_st@2

; 4349 : 		return NULL;

	xor	eax, eax
	jmp	$LN15@soap_in_st@2
$LN13@soap_in_st@2:

; 4350 : 	float n;
; 4351 : 	short soap_flag = 0;

	xor	eax, eax
	mov	WORD PTR _soap_flag$[ebp], ax
$LN12@soap_in_st@2:

; 4352 : 	do
; 4353 : 	{	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 4354 : 		soap_default_float(soap, &n);

	lea	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_float@@YAXPAUsoap@@PAM@Z	; soap_default_float
	add	esp, 8

; 4355 : 		if (*soap->id || *soap->href)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+81076]
	test	ecx, ecx
	jne	SHORT $LN8@soap_in_st@2
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	test	ecx, ecx
	je	SHORT $LN9@soap_in_st@2
$LN8@soap_in_st@2:

; 4356 : 		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_float, SOAP_TYPE_std__vectorTemplateOffloat, sizeof(float), 0))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+81076]
	test	ecx, ecx
	je	SHORT $LN17@soap_in_st@2
	mov	edx, DWORD PTR _soap$[ebp]
	add	edx, 81076				; 00013cb4H
	mov	DWORD PTR tv133[ebp], edx
	jmp	SHORT $LN18@soap_in_st@2
$LN17@soap_in_st@2:
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 82100				; 000140b4H
	mov	DWORD PTR tv133[ebp], eax
$LN18@soap_in_st@2:
	push	0
	push	4
	push	27					; 0000001bH
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _a$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv133[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_container_id_forward@@YAPAXPAUsoap@@PBDPAXIHHII@Z ; soap_container_id_forward
	add	esp, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN7@soap_in_st@2

; 4357 : 				break;

	jmp	$LN10@soap_in_st@2
$LN7@soap_in_st@2:

; 4358 : 			if (!soap_in_float(soap, tag, NULL, "xsd:float"))

	push	OFFSET ??_C@_09ILBLHFBD@xsd?3float?$AA@
	push	0
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_float@@YAPAMPAUsoap@@PBDPAM1@Z	; soap_in_float
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN6@soap_in_st@2

; 4359 : 				break;

	jmp	SHORT $LN10@soap_in_st@2
$LN6@soap_in_st@2:

; 4360 : 		}
; 4361 : 		else

	jmp	SHORT $LN5@soap_in_st@2
$LN9@soap_in_st@2:

; 4362 : 		{
; 4363 : 			if (!soap_in_float(soap, tag, &n, "xsd:float"))

	push	OFFSET ??_C@_09ILBLHFBD@xsd?3float?$AA@
	lea	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_in_float@@YAPAMPAUsoap@@PBDPAM1@Z	; soap_in_float
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN5@soap_in_st@2

; 4364 : 				break;

	jmp	SHORT $LN10@soap_in_st@2
$LN5@soap_in_st@2:

; 4365 : 		}
; 4366 : 		a->push_back(n);

	lea	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	call	?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z ; std::vector<float,std::allocator<float> >::push_back

; 4367 : 		soap_flag = 1;

	mov	eax, 1
	mov	WORD PTR _soap_flag$[ebp], ax

; 4368 : 	}
; 4369 : 	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));

	cmp	DWORD PTR _tag$[ebp], 0
	je	SHORT $LN10@soap_in_st@2
	mov	eax, DWORD PTR _tag$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	je	SHORT $LN10@soap_in_st@2
	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN12@soap_in_st@2
$LN10@soap_in_st@2:

; 4370 : 	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))

	movsx	eax, WORD PTR _soap_flag$[ebp]
	test	eax, eax
	je	SHORT $LN2@soap_in_st@2
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	je	SHORT $LN1@soap_in_st@2
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN2@soap_in_st@2
$LN1@soap_in_st@2:

; 4371 : 	{	soap->error = SOAP_OK;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 0

; 4372 : 		return a;

	mov	eax, DWORD PTR _a$[ebp]
	jmp	SHORT $LN15@soap_in_st@2
$LN2@soap_in_st@2:

; 4373 : 	}
; 4374 : 	return NULL;

	xor	eax, eax
$LN15@soap_in_st@2:

; 4375 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@soap_in_st@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN21@soap_in_st@2:
	DD	1
	DD	$LN20@soap_in_st@2
$LN20@soap_in_st@2:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN19@soap_in_st@2
$LN19@soap_in_st@2:
	DB	110					; 0000006eH
	DB	0
?soap_in_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@PBDPAV12@1@Z ENDP ; soap_in_std__vectorTemplateOffloat
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_new_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@H@Z PROC ; soap_new_std__vectorTemplateOffloat, COMDAT

; 4378 : {	return soap_instantiate_std__vectorTemplateOffloat(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_std__vectorTemplateOffloat
	add	esp, 20					; 00000014H

; 4379 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@H@Z ENDP ; soap_new_std__vectorTemplateOffloat
_TEXT	ENDS
PUBLIC	?soap_delete_std__vectorTemplateOffloat@@YAXPAUsoap@@PAV?$vector@MV?$allocator@M@std@@@std@@@Z ; soap_delete_std__vectorTemplateOffloat
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete_std__vectorTemplateOffloat@@YAXPAUsoap@@PAV?$vector@MV?$allocator@M@std@@@std@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete_std__vectorTemplateOffloat@@YAXPAUsoap@@PAV?$vector@MV?$allocator@M@std@@@std@@@Z PROC ; soap_delete_std__vectorTemplateOffloat, COMDAT

; 4382 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 4383 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete_std__vectorTemplateOffloat@@YAXPAUsoap@@PAV?$vector@MV?$allocator@M@std@@@std@@@Z ENDP ; soap_delete_std__vectorTemplateOffloat
_TEXT	ENDS
PUBLIC	??_C@_0DJ@LNKCIDBO@soap_instantiate_std__vectorTemp@ ; `string'
;	COMDAT ??_C@_0DJ@LNKCIDBO@soap_instantiate_std__vectorTemp@
CONST	SEGMENT
??_C@_0DJ@LNKCIDBO@soap_instantiate_std__vectorTemp@ DB 'soap_instantiate'
	DB	'_std__vectorTemplateOffloat(%d, %s, %s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?soap_instantiate_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@HPBD1PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@HPBD1PAI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@HPBD1PAI@Z$1
__ehfuncinfo$?soap_instantiate_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@HPBD1PAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?soap_instantiate_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@HPBD1PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?soap_instantiate_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -308						; size = 4
tv157 = -304						; size = 4
tv133 = -304						; size = 4
tv77 = -304						; size = 4
$T101968 = -296						; size = 4
$T101969 = -284						; size = 4
$T101972 = -272						; size = 4
$T101973 = -260						; size = 4
$T101974 = -248						; size = 4
_fdebug$91709 = -44					; size = 4
_cp$ = -32						; size = 4
_fdebug$91665 = -20					; size = 4
__$EHRec$ = -12						; size = 12
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate_std__vectorTemplateOffloat, COMDAT

; 4386 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?soap_instantiate_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@HPBD1PAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 4387 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOffloat(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN12@soap_insta@23
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN11@soap_insta@23
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN11@soap_insta@23:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN12@soap_insta@23
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$91665[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN15@soap_insta@23
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN16@soap_insta@23
$LN15@soap_insta@23:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN16@soap_insta@23:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN17@soap_insta@23
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN18@soap_insta@23
$LN17@soap_insta@23:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN18@soap_insta@23:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DJ@LNKCIDBO@soap_instantiate_std__vectorTemp@
	mov	edx, DWORD PTR _fdebug$91665[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$91665[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@soap_insta@23:

; 4388 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOffloat, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	27					; 0000001bH
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 4389 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN9@soap_insta@23

; 4390 : 		return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@23
$LN9@soap_insta@23:

; 4391 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN8@soap_insta@23

; 4392 : 	{	cp->ptr = (void*)new std::vector<float >;

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T101969[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T101969[ebp], 0
	je	SHORT $LN19@soap_insta@23
	mov	ecx, DWORD PTR $T101969[ebp]
	call	??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN20@soap_insta@23
$LN19@soap_insta@23:
	mov	DWORD PTR tv133[ebp], 0
$LN20@soap_insta@23:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T101968[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101968[ebp]
	mov	DWORD PTR [ecx+4], edx

; 4393 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@23

; 4394 : 			*size = sizeof(std::vector<float >);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 20			; 00000014H
$LN7@soap_insta@23:

; 4395 : 	}
; 4396 : 	else

	jmp	$LN6@soap_insta@23
$LN8@soap_insta@23:

; 4397 : 	{	cp->ptr = (void*)new std::vector<float >[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T101972[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T101972[ebp]
	mov	edx, 20					; 00000014H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T101974[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T101974[ebp], 0
	je	SHORT $LN21@soap_insta@23
	mov	ecx, DWORD PTR $T101974[ebp]
	mov	edx, DWORD PTR $T101972[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
	push	OFFSET ??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
	mov	eax, DWORD PTR $T101972[ebp]
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR $T101974[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T101974[ebp]
	add	edx, 4
	mov	DWORD PTR tv157[ebp], edx
	jmp	SHORT $LN22@soap_insta@23
$LN21@soap_insta@23:
	mov	DWORD PTR tv157[ebp], 0
$LN22@soap_insta@23:
	mov	eax, DWORD PTR tv157[ebp]
	mov	DWORD PTR $T101973[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T101973[ebp]
	mov	DWORD PTR [ecx+4], edx

; 4398 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@soap_insta@23

; 4399 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 4400 : 			return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@23
$LN5@soap_insta@23:

; 4401 : 		}
; 4402 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN6@soap_insta@23

; 4403 : 			*size = n * sizeof(std::vector<float >);

	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN6@soap_insta@23:

; 4404 : 	}
; 4405 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@23
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@23
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@23:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@23
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$91709[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$91709[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$91709[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@23:

; 4406 : 	return (std::vector<float >*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN13@soap_insta@23:

; 4407 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?soap_instantiate_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@HPBD1PAI@Z$0:
	mov	eax, DWORD PTR $T101969[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@HPBD1PAI@Z$1:
	mov	eax, DWORD PTR $T101974[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?soap_instantiate_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@HPBD1PAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-312]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?soap_instantiate_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@HPBD1PAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?soap_instantiate_std__vectorTemplateOffloat@@YAPAV?$vector@MV?$allocator@M@std@@@std@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate_std__vectorTemplateOffloat
PUBLIC	??_C@_0CG@HJOMAMDD@Copying?5std?3?3vector?$DMfloat?5?$DO?5?$CFp?5?9@ ; `string'
PUBLIC	?soap_copy_std__vectorTemplateOffloat@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy_std__vectorTemplateOffloat
;	COMDAT ??_C@_0CG@HJOMAMDD@Copying?5std?3?3vector?$DMfloat?5?$DO?5?$CFp?5?9@
CONST	SEGMENT
??_C@_0CG@HJOMAMDD@Copying?5std?3?3vector?$DMfloat?5?$DO?5?$CFp?5?9@ DB 'C'
	DB	'opying std::vector<float > %p -> %p', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy_std__vectorTemplateOffloat@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$91728 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy_std__vectorTemplateOffloat@@YAXPAUsoap@@HHPAXIPBXI@Z PROC ; soap_copy_std__vectorTemplateOffloat, COMDAT

; 4409 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4410 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<float > %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@22
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@22
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@22:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@22
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$91728[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CG@HJOMAMDD@Copying?5std?3?3vector?$DMfloat?5?$DO?5?$CFp?5?9@
	mov	edx, DWORD PTR _fdebug$91728[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$91728[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@22:

; 4411 : 	*(std::vector<float >*)p = *(std::vector<float >*)q;

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	??4?$vector@MV?$allocator@M@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<float,std::allocator<float> >::operator=

; 4412 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy_std__vectorTemplateOffloat@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP ; soap_copy_std__vectorTemplateOffloat
_TEXT	ENDS
PUBLIC	?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ; std::vector<int,std::allocator<int> >::clear
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_default_std__vectorTemplateOfint@@YAXPAUsoap@@PAV?$vector@HV?$allocator@H@std@@@std@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_default_std__vectorTemplateOfint@@YAXPAUsoap@@PAV?$vector@HV?$allocator@H@std@@@std@@@Z PROC ; soap_default_std__vectorTemplateOfint, COMDAT

; 4415 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4416 : 	p->clear();

	mov	ecx, DWORD PTR _p$[ebp]
	call	?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ; std::vector<int,std::allocator<int> >::clear

; 4417 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_default_std__vectorTemplateOfint@@YAXPAUsoap@@PAV?$vector@HV?$allocator@H@std@@@std@@@Z ENDP ; soap_default_std__vectorTemplateOfint
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_serialize_std__vectorTemplateOfint@@YAXPAUsoap@@PBV?$vector@HV?$allocator@H@std@@@std@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_a$ = 12						; size = 4
?soap_serialize_std__vectorTemplateOfint@@YAXPAUsoap@@PBV?$vector@HV?$allocator@H@std@@@std@@@Z PROC ; soap_serialize_std__vectorTemplateOfint, COMDAT

; 4420 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4421 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_serialize_std__vectorTemplateOfint@@YAXPAUsoap@@PBV?$vector@HV?$allocator@H@std@@@std@@@Z ENDP ; soap_serialize_std__vectorTemplateOfint
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEABHXZ ; std::_Vector_const_iterator<int,std::allocator<int> >::operator*
PUBLIC	??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<int,std::allocator<int> >::~_Vector_const_iterator<int,std::allocator<int> >
PUBLIC	??9?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator!=
PUBLIC	?end@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
PUBLIC	??E?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<int,std::allocator<int> >::operator++
PUBLIC	?begin@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?soap_out_std__vectorTemplateOfint@@YAHPAUsoap@@PBDHPBV?$vector@HV?$allocator@H@std@@@std@@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_out_std__vectorTemplateOfint@@YAHPAUsoap@@PBDHPBV?$vector@HV?$allocator@H@std@@@std@@1@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?soap_out_std__vectorTemplateOfint@@YAHPAUsoap@@PBDHPBV?$vector@HV?$allocator@H@std@@@std@@1@Z$1
__ehfuncinfo$?soap_out_std__vectorTemplateOfint@@YAHPAUsoap@@PBDHPBV?$vector@HV?$allocator@H@std@@@std@@1@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?soap_out_std__vectorTemplateOfint@@YAHPAUsoap@@PBDHPBV?$vector@HV?$allocator@H@std@@@std@@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?soap_out_std__vectorTemplateOfint@@YAHPAUsoap@@PBDHPBV?$vector@HV?$allocator@H@std@@@std@@1@Z
_TEXT	SEGMENT
tv91 = -276						; size = 4
tv65 = -272						; size = 4
$T101993 = -261						; size = 1
$T101994 = -252						; size = 12
$T101995 = -232						; size = 4
_i$91891 = -28						; size = 12
__$EHRec$ = -12						; size = 12
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_id$ = 16						; size = 4
_a$ = 20						; size = 4
_type$ = 24						; size = 4
?soap_out_std__vectorTemplateOfint@@YAHPAUsoap@@PBDHPBV?$vector@HV?$allocator@H@std@@@std@@1@Z PROC ; soap_out_std__vectorTemplateOfint, COMDAT

; 4424 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?soap_out_std__vectorTemplateOfint@@YAHPAUsoap@@PBDHPBV?$vector@HV?$allocator@H@std@@@std@@1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 4425 : 	for (std::vector<int >::const_iterator i = a->begin(); i != a->end(); ++i)

	lea	eax, DWORD PTR _i$91891[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	call	?begin@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	jmp	SHORT $LN4@soap_out_s@3
$LN3@soap_out_s@3:
	lea	ecx, DWORD PTR _i$91891[ebp]
	call	??E?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<int,std::allocator<int> >::operator++
$LN4@soap_out_s@3:
	lea	eax, DWORD PTR $T101994[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	call	?end@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv91[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv91[ebp]
	push	edx
	lea	ecx, DWORD PTR _i$91891[ebp]
	call	??9?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator!=
	mov	BYTE PTR $T101993[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T101994[ebp]
	call	??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
	movzx	eax, BYTE PTR $T101993[ebp]
	test	eax, eax
	je	SHORT $LN2@soap_out_s@3

; 4426 : 	{
; 4427 : 		if (soap_out_int(soap, tag, id, &(*i), ""))

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	ecx, DWORD PTR _i$91891[ebp]
	call	??D?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEABHXZ ; std::_Vector_const_iterator<int,std::allocator<int> >::operator*
	push	eax
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_out_int@@YAHPAUsoap@@PBDHPBH1@Z	; soap_out_int
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@soap_out_s@3

; 4428 : 			return soap->error;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90460]
	mov	DWORD PTR $T101995[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _i$91891[ebp]
	call	??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T101995[ebp]
	jmp	SHORT $LN5@soap_out_s@3
$LN1@soap_out_s@3:

; 4429 : 	}

	jmp	$LN3@soap_out_s@3
$LN2@soap_out_s@3:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _i$91891[ebp]
	call	??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ

; 4430 : 	return SOAP_OK;

	xor	eax, eax
$LN5@soap_out_s@3:

; 4431 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@soap_out_s@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@soap_out_s@3:
	DD	1
	DD	$LN11@soap_out_s@3
$LN11@soap_out_s@3:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN9@soap_out_s@3
$LN9@soap_out_s@3:
	DB	105					; 00000069H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?soap_out_std__vectorTemplateOfint@@YAHPAUsoap@@PBDHPBV?$vector@HV?$allocator@H@std@@@std@@1@Z$0:
	lea	ecx, DWORD PTR _i$91891[ebp]
	jmp	??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?soap_out_std__vectorTemplateOfint@@YAHPAUsoap@@PBDHPBV?$vector@HV?$allocator@H@std@@@std@@1@Z$1:
	lea	ecx, DWORD PTR $T101994[ebp]
	jmp	??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$?soap_out_std__vectorTemplateOfint@@YAHPAUsoap@@PBDHPBV?$vector@HV?$allocator@H@std@@@std@@1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-280]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?soap_out_std__vectorTemplateOfint@@YAHPAUsoap@@PBDHPBV?$vector@HV?$allocator@H@std@@@std@@1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?soap_out_std__vectorTemplateOfint@@YAHPAUsoap@@PBDHPBV?$vector@HV?$allocator@H@std@@@std@@1@Z ENDP ; soap_out_std__vectorTemplateOfint
PUBLIC	??1?$_Ranit@HHPBHABH@std@@QAE@XZ		; std::_Ranit<int,int,int const *,int const &>::~_Ranit<int,int,int const *,int const &>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::~_Vector_const_iterator<int,std::allocator<int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Ranit@HHPBHABH@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::~_Vector_const_iterator<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??1?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base>::~_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??1?$_Ranit@HHPBHABH@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Ranit@HHPBHABH@std@@QAE@XZ PROC			; std::_Ranit<int,int,int const *,int const &>::~_Ranit<int,int,int const *,int const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base@2@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Ranit@HHPBHABH@std@@QAE@XZ ENDP			; std::_Ranit<int,int,int const *,int const &>::~_Ranit<int,int,int const *,int const &>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base>::~_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::~_Iterator_base
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base>::~_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base>
_TEXT	ENDS
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
PUBLIC	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
PUBLIC	?soap_new_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@H@Z ; soap_new_std__vectorTemplateOfint
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_in_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@PBDPAV12@1@Z
_TEXT	SEGMENT
tv133 = -220						; size = 4
_soap_flag$ = -20					; size = 2
_n$ = -8						; size = 4
_soap$ = 8						; size = 4
_tag$ = 12						; size = 4
_a$ = 16						; size = 4
_type$ = 20						; size = 4
?soap_in_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@PBDPAV12@1@Z PROC ; soap_in_std__vectorTemplateOfint, COMDAT

; 4434 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4435 : 	if (soap_element_begin_in(soap, tag, 1, NULL))

	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN14@soap_in_st@3

; 4436 : 		return NULL;

	xor	eax, eax
	jmp	$LN15@soap_in_st@3
$LN14@soap_in_st@3:

; 4437 : 	if (!a && !(a = soap_new_std__vectorTemplateOfint(soap, -1)))

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN13@soap_in_st@3
	push	-1
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_new_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@H@Z ; soap_new_std__vectorTemplateOfint
	add	esp, 8
	mov	DWORD PTR _a$[ebp], eax
	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN13@soap_in_st@3

; 4438 : 		return NULL;

	xor	eax, eax
	jmp	$LN15@soap_in_st@3
$LN13@soap_in_st@3:

; 4439 : 	int n;
; 4440 : 	short soap_flag = 0;

	xor	eax, eax
	mov	WORD PTR _soap_flag$[ebp], ax
$LN12@soap_in_st@3:

; 4441 : 	do
; 4442 : 	{	soap_revert(soap);

	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_revert
	add	esp, 4

; 4443 : 		soap_default_int(soap, &n);

	lea	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_default_int@@YAXPAUsoap@@PAH@Z	; soap_default_int
	add	esp, 8

; 4444 : 		if (*soap->id || *soap->href)

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+81076]
	test	ecx, ecx
	jne	SHORT $LN8@soap_in_st@3
	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+82100]
	test	ecx, ecx
	je	SHORT $LN9@soap_in_st@3
$LN8@soap_in_st@3:

; 4445 : 		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_int, SOAP_TYPE_std__vectorTemplateOfint, sizeof(int), 0))

	mov	eax, DWORD PTR _soap$[ebp]
	movsx	ecx, BYTE PTR [eax+81076]
	test	ecx, ecx
	je	SHORT $LN17@soap_in_st@3
	mov	edx, DWORD PTR _soap$[ebp]
	add	edx, 81076				; 00013cb4H
	mov	DWORD PTR tv133[ebp], edx
	jmp	SHORT $LN18@soap_in_st@3
$LN17@soap_in_st@3:
	mov	eax, DWORD PTR _soap$[ebp]
	add	eax, 82100				; 000140b4H
	mov	DWORD PTR tv133[ebp], eax
$LN18@soap_in_st@3:
	push	0
	push	4
	push	26					; 0000001aH
	push	1
	mov	ecx, DWORD PTR _a$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv133[ebp]
	push	edx
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	?soap_container_id_forward@@YAPAXPAUsoap@@PBDPAXIHHII@Z ; soap_container_id_forward
	add	esp, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN7@soap_in_st@3

; 4446 : 				break;

	jmp	$LN10@soap_in_st@3
$LN7@soap_in_st@3:

; 4447 : 			if (!soap_in_int(soap, tag, NULL, "xsd:int"))

	push	OFFSET ??_C@_07PCIGPDP@xsd?3int?$AA@
	push	0
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_in_int@@YAPAHPAUsoap@@PBDPAH1@Z	; soap_in_int
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN6@soap_in_st@3

; 4448 : 				break;

	jmp	SHORT $LN10@soap_in_st@3
$LN6@soap_in_st@3:

; 4449 : 		}
; 4450 : 		else

	jmp	SHORT $LN5@soap_in_st@3
$LN9@soap_in_st@3:

; 4451 : 		{
; 4452 : 			if (!soap_in_int(soap, tag, &n, "xsd:int"))

	push	OFFSET ??_C@_07PCIGPDP@xsd?3int?$AA@
	lea	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _soap$[ebp]
	push	edx
	call	?soap_in_int@@YAPAHPAUsoap@@PBDPAH1@Z	; soap_in_int
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN5@soap_in_st@3

; 4453 : 				break;

	jmp	SHORT $LN10@soap_in_st@3
$LN5@soap_in_st@3:

; 4454 : 		}
; 4455 : 		a->push_back(n);

	lea	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back

; 4456 : 		soap_flag = 1;

	mov	eax, 1
	mov	WORD PTR _soap_flag$[ebp], ax

; 4457 : 	}
; 4458 : 	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));

	cmp	DWORD PTR _tag$[ebp], 0
	je	SHORT $LN10@soap_in_st@3
	mov	eax, DWORD PTR _tag$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	je	SHORT $LN10@soap_in_st@3
	push	0
	push	1
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_element_begin_in
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN12@soap_in_st@3
$LN10@soap_in_st@3:

; 4459 : 	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))

	movsx	eax, WORD PTR _soap_flag$[ebp]
	test	eax, eax
	je	SHORT $LN2@soap_in_st@3
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 3
	je	SHORT $LN1@soap_in_st@3
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90460], 6
	jne	SHORT $LN2@soap_in_st@3
$LN1@soap_in_st@3:

; 4460 : 	{	soap->error = SOAP_OK;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 0

; 4461 : 		return a;

	mov	eax, DWORD PTR _a$[ebp]
	jmp	SHORT $LN15@soap_in_st@3
$LN2@soap_in_st@3:

; 4462 : 	}
; 4463 : 	return NULL;

	xor	eax, eax
$LN15@soap_in_st@3:

; 4464 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@soap_in_st@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN21@soap_in_st@3:
	DD	1
	DD	$LN20@soap_in_st@3
$LN20@soap_in_st@3:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN19@soap_in_st@3
$LN19@soap_in_st@3:
	DB	110					; 0000006eH
	DB	0
?soap_in_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@PBDPAV12@1@Z ENDP ; soap_in_std__vectorTemplateOfint
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?soap_new_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@H@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
?soap_new_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@H@Z PROC ; soap_new_std__vectorTemplateOfint, COMDAT

; 4467 : {	return soap_instantiate_std__vectorTemplateOfint(soap, n, NULL, NULL, NULL);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	?soap_instantiate_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@HPBD1PAI@Z ; soap_instantiate_std__vectorTemplateOfint
	add	esp, 20					; 00000014H

; 4468 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_new_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@H@Z ENDP ; soap_new_std__vectorTemplateOfint
_TEXT	ENDS
PUBLIC	?soap_delete_std__vectorTemplateOfint@@YAXPAUsoap@@PAV?$vector@HV?$allocator@H@std@@@std@@@Z ; soap_delete_std__vectorTemplateOfint
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?soap_delete_std__vectorTemplateOfint@@YAXPAUsoap@@PAV?$vector@HV?$allocator@H@std@@@std@@@Z
_TEXT	SEGMENT
_soap$ = 8						; size = 4
_p$ = 12						; size = 4
?soap_delete_std__vectorTemplateOfint@@YAXPAUsoap@@PAV?$vector@HV?$allocator@H@std@@@std@@@Z PROC ; soap_delete_std__vectorTemplateOfint, COMDAT

; 4471 : {	soap_delete(soap, p);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_delete
	add	esp, 8

; 4472 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_delete_std__vectorTemplateOfint@@YAXPAUsoap@@PAV?$vector@HV?$allocator@H@std@@@std@@@Z ENDP ; soap_delete_std__vectorTemplateOfint
_TEXT	ENDS
PUBLIC	??_C@_0DH@JLMGCIML@soap_instantiate_std__vectorTemp@ ; `string'
;	COMDAT ??_C@_0DH@JLMGCIML@soap_instantiate_std__vectorTemp@
CONST	SEGMENT
??_C@_0DH@JLMGCIML@soap_instantiate_std__vectorTemp@ DB 'soap_instantiate'
	DB	'_std__vectorTemplateOfint(%d, %s, %s)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?soap_instantiate_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@HPBD1PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@HPBD1PAI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?soap_instantiate_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@HPBD1PAI@Z$1
__ehfuncinfo$?soap_instantiate_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@HPBD1PAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?soap_instantiate_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@HPBD1PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?soap_instantiate_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@HPBD1PAI@Z
_TEXT	SEGMENT
tv80 = -308						; size = 4
tv157 = -304						; size = 4
tv133 = -304						; size = 4
tv77 = -304						; size = 4
$T102033 = -296						; size = 4
$T102034 = -284						; size = 4
$T102037 = -272						; size = 4
$T102038 = -260						; size = 4
$T102039 = -248						; size = 4
_fdebug$92013 = -44					; size = 4
_cp$ = -32						; size = 4
_fdebug$91969 = -20					; size = 4
__$EHRec$ = -12						; size = 12
_soap$ = 8						; size = 4
_n$ = 12						; size = 4
_type$ = 16						; size = 4
_arrayType$ = 20					; size = 4
_size$ = 24						; size = 4
?soap_instantiate_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@HPBD1PAI@Z PROC ; soap_instantiate_std__vectorTemplateOfint, COMDAT

; 4475 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?soap_instantiate_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@HPBD1PAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 4476 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));

	cmp	DWORD PTR _soap$[ebp], 0
	je	$LN12@soap_insta@24
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN11@soap_insta@24
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN11@soap_insta@24:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	$LN12@soap_insta@24
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$91969[ebp], ecx
	cmp	DWORD PTR _arrayType$[ebp], 0
	je	SHORT $LN15@soap_insta@24
	mov	eax, DWORD PTR _arrayType$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN16@soap_insta@24
$LN15@soap_insta@24:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN16@soap_insta@24:
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN17@soap_insta@24
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN18@soap_insta@24
$LN17@soap_insta@24:
	mov	DWORD PTR tv80[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN18@soap_insta@24:
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DH@JLMGCIML@soap_instantiate_std__vectorTemp@
	mov	edx, DWORD PTR _fdebug$91969[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$91969[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@soap_insta@24:

; 4477 : 	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfint, n, soap_fdelete);

	push	OFFSET ?soap_fdelete@@YAHPAUsoap_clist@@@Z ; soap_fdelete
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	push	26					; 0000001aH
	push	0
	mov	ecx, DWORD PTR _soap$[ebp]
	push	ecx
	call	_soap_link
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cp$[ebp], eax

; 4478 : 	if (!cp)

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN9@soap_insta@24

; 4479 : 		return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@24
$LN9@soap_insta@24:

; 4480 : 	if (n < 0)

	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN8@soap_insta@24

; 4481 : 	{	cp->ptr = (void*)new std::vector<int >;

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T102034[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T102034[ebp], 0
	je	SHORT $LN19@soap_insta@24
	mov	ecx, DWORD PTR $T102034[ebp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN20@soap_insta@24
$LN19@soap_insta@24:
	mov	DWORD PTR tv133[ebp], 0
$LN20@soap_insta@24:
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T102033[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T102033[ebp]
	mov	DWORD PTR [ecx+4], edx

; 4482 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@soap_insta@24

; 4483 : 			*size = sizeof(std::vector<int >);

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 20			; 00000014H
$LN7@soap_insta@24:

; 4484 : 	}
; 4485 : 	else

	jmp	$LN6@soap_insta@24
$LN8@soap_insta@24:

; 4486 : 	{	cp->ptr = (void*)new std::vector<int >[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR $T102037[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T102037[ebp]
	mov	edx, 20					; 00000014H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T102039[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T102039[ebp], 0
	je	SHORT $LN21@soap_insta@24
	mov	ecx, DWORD PTR $T102039[ebp]
	mov	edx, DWORD PTR $T102037[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	push	OFFSET ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	eax, DWORD PTR $T102037[ebp]
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR $T102039[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T102039[ebp]
	add	edx, 4
	mov	DWORD PTR tv157[ebp], edx
	jmp	SHORT $LN22@soap_insta@24
$LN21@soap_insta@24:
	mov	DWORD PTR tv157[ebp], 0
$LN22@soap_insta@24:
	mov	eax, DWORD PTR tv157[ebp]
	mov	DWORD PTR $T102038[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	edx, DWORD PTR $T102038[ebp]
	mov	DWORD PTR [ecx+4], edx

; 4487 : 		if (!cp->ptr)

	mov	eax, DWORD PTR _cp$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@soap_insta@24

; 4488 : 		{	soap->error = SOAP_EOM;

	mov	eax, DWORD PTR _soap$[ebp]
	mov	DWORD PTR [eax+90460], 20		; 00000014H

; 4489 : 			return NULL;

	xor	eax, eax
	jmp	$LN13@soap_insta@24
$LN5@soap_insta@24:

; 4490 : 		}
; 4491 : 		if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN6@soap_insta@24

; 4492 : 			*size = n * sizeof(std::vector<int >);

	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
$LN6@soap_insta@24:

; 4493 : 	}
; 4494 : 		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_insta@24
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_insta@24
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_insta@24:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_insta@24
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$92013[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BK@GPIACJGA@Instantiated?5location?$DN?$CFp?6?$AA@
	mov	edx, DWORD PTR _fdebug$92013[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$92013[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_insta@24:

; 4495 : 	return (std::vector<int >*)cp->ptr;

	mov	eax, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN13@soap_insta@24:

; 4496 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?soap_instantiate_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@HPBD1PAI@Z$0:
	mov	eax, DWORD PTR $T102034[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?soap_instantiate_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@HPBD1PAI@Z$1:
	mov	eax, DWORD PTR $T102039[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?soap_instantiate_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@HPBD1PAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-312]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?soap_instantiate_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@HPBD1PAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?soap_instantiate_std__vectorTemplateOfint@@YAPAV?$vector@HV?$allocator@H@std@@@std@@PAUsoap@@HPBD1PAI@Z ENDP ; soap_instantiate_std__vectorTemplateOfint
PUBLIC	??_C@_0CE@HLMOILCP@Copying?5std?3?3vector?$DMint?5?$DO?5?$CFp?5?9?$DO?5@ ; `string'
PUBLIC	?soap_copy_std__vectorTemplateOfint@@YAXPAUsoap@@HHPAXIPBXI@Z ; soap_copy_std__vectorTemplateOfint
;	COMDAT ??_C@_0CE@HLMOILCP@Copying?5std?3?3vector?$DMint?5?$DO?5?$CFp?5?9?$DO?5@
CONST	SEGMENT
??_C@_0CE@HLMOILCP@Copying?5std?3?3vector?$DMint?5?$DO?5?$CFp?5?9?$DO?5@ DB 'C'
	DB	'opying std::vector<int > %p -> %p', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?soap_copy_std__vectorTemplateOfint@@YAXPAUsoap@@HHPAXIPBXI@Z
_TEXT	SEGMENT
_fdebug$92032 = -8					; size = 4
_soap$ = 8						; size = 4
_st$ = 12						; size = 4
_tt$ = 16						; size = 4
_p$ = 20						; size = 4
_len$ = 24						; size = 4
_q$ = 28						; size = 4
_n$ = 32						; size = 4
?soap_copy_std__vectorTemplateOfint@@YAXPAUsoap@@HHPAXIPBXI@Z PROC ; soap_copy_std__vectorTemplateOfint, COMDAT

; 4498 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4499 : 	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<int > %p -> %p\n", q, p));

	cmp	DWORD PTR _soap$[ebp], 0
	je	SHORT $LN3@soap_copy_@23
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	jne	SHORT $LN2@soap_copy_@23
	push	2
	mov	eax, DWORD PTR _soap$[ebp]
	push	eax
	call	_soap_open_logfile
	add	esp, 8
$LN2@soap_copy_@23:
	mov	eax, DWORD PTR _soap$[ebp]
	cmp	DWORD PTR [eax+90568], 0
	je	SHORT $LN3@soap_copy_@23
	mov	eax, DWORD PTR _soap$[ebp]
	mov	ecx, DWORD PTR [eax+90568]
	mov	DWORD PTR _fdebug$92032[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CE@HLMOILCP@Copying?5std?3?3vector?$DMint?5?$DO?5?$CFp?5?9?$DO?5@
	mov	edx, DWORD PTR _fdebug$92032[ebp]
	push	edx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _fdebug$92032[ebp]
	push	eax
	call	DWORD PTR __imp__fflush
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@soap_copy_@23:

; 4500 : 	*(std::vector<int >*)p = *(std::vector<int >*)q;

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<int,std::allocator<int> >::operator=

; 4501 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?soap_copy_std__vectorTemplateOfint@@YAXPAUsoap@@HHPAXIPBXI@Z ENDP ; soap_copy_std__vectorTemplateOfint
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xstring
_TEXT	ENDS
;	COMDAT ??0_Has_debug_it@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val$ = 8						; size = 1
??0_Has_debug_it@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Has_debug_it::_Has_debug_it, COMDAT
; _this$ = ecx

; 555  : 		explicit _Has_debug_it(bool _Val): _Value(_Val) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR __Val$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Has_debug_it@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Has_debug_it::_Has_debug_it
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
PUBLIC	?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy
PUBLIC	??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
PUBLIC	??0?$allocator@H@std@@QAE@XZ			; std::allocator<int>::allocator<int>
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T102056 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T102056[ebp], esp
	call	??0?$allocator@H@std@@QAE@XZ		; std::allocator<int>::allocator<int>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	?deallocate@?$allocator@H@std@@QAEXPAHI@Z	; std::allocator<int>::deallocate
PUBLIC	??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Ucopy<int *>
PUBLIC	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
PUBLIC	??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z	; stdext::unchecked_copy<int *,int *>
EXTRN	__imp_?_Orphan_all@_Container_base_secure@std@@QBEXXZ:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Ptr$93509 = -32					; size = 4
__Ptr$93499 = -20					; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<int,std::allocator<int> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base_secure@std@@QBEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	test	eax, eax
	jne	SHORT $LN8@operator

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ; std::vector<int,std::allocator<int> >::clear
	jmp	$LN9@operator
$LN8@operator:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::unchecked_copy<int *,int *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$93499[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$93499[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
	jmp	$LN9@operator
$LN6@operator:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR __Ptr$93509[ebp], eax

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR __Ptr$93509[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::unchecked_copy<int *,int *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Ptr$93509[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Ucopy<int *>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator
$LN4@operator:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@operator

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@H@std@@QAEXPAHI@Z ; std::allocator<int>::deallocate
$LN2@operator:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Ucopy<int *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN9@operator:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<int,std::allocator<int> >::operator=
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?begin@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
$T102078 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T102078[ebp], 0

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >
	mov	eax, DWORD PTR $T102078[ebp]
	or	eax, 1
	mov	DWORD PTR $T102078[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::begin
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
$T102083 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T102083[ebp], 0

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >
	mov	eax, DWORD PTR $T102083[ebp]
	or	eax, 1
	mov	DWORD PTR $T102083[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::end
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+8]
	sar	eax, 2

; 727  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP	; std::vector<int,std::allocator<int> >::size
_TEXT	ENDS
PUBLIC	??_C@_1CK@POGJDOKA@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAo?$AAs?$AA?5?$AA?$DM?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1HC@HBCEAHKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAl?$AAl?$AAo?$AAc@ ; `string'
PUBLIC	??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@ ; `string'
PUBLIC	??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ ; `string'
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReportW:PROC
;	COMDAT ??_C@_1CK@POGJDOKA@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAo?$AAs?$AA?5?$AA?$DM?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@POGJDOKA@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAo?$AAs?$AA?5?$AA?$DM?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@ DB '('
	DB	00H, '"', 00H, '_', 00H, 'P', 00H, 'o', 00H, 's', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '('
	DB	00H, ')', 00H, '"', 00H, ',', 00H, ' ', 00H, '0', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H
	DB	' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1HC@HBCEAHKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAl?$AAl?$AAo?$AAc@
CONST	SEGMENT
??_C@_1HC@HBCEAHKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAl?$AAl?$AAo?$AAc@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H
	DB	'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, '[', 00H, ']', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
CONST	SEGMENT
??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@ DB '('
	DB	00H, '"', 00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H
	DB	'a', 00H, 'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+'
	DB	00H, ' ', 00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H
	DB	'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'O', 00H, 'u'
	DB	00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'R', 00H
	DB	'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, ',', 00H, ' '
	DB	00H, '0', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i'
	DB	00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
CONST	SEGMENT
??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, '9', 00H, '.', 00H, '0', 00H, '\', 00H, 'v', 00H
	DB	'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u'
	DB	00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z PROC	; std::vector<int,std::allocator<int> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN2@operator@2

; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");

	mov	esi, esp
	push	779					; 0000030bH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 780  : 			_SCL_SECURE_OUT_OF_RANGE;

	xor	eax, eax
	jne	SHORT $LN5@operator@2
	mov	esi, esp
	push	OFFSET ??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
	push	0
	push	780					; 0000030cH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@operator@2
	int	3
$LN5@operator@2:
	mov	esi, esp
	push	0
	push	780					; 0000030cH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1HC@HBCEAHKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAl?$AAl?$AAo?$AAc@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@2:

; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@2
	xor	eax, eax
	jne	SHORT $LN6@operator@2
	mov	esi, esp
	push	OFFSET ??_C@_1CK@POGJDOKA@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAo?$AAs?$AA?5?$AA?$DM?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
	push	0
	push	783					; 0000030fH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN6@operator@2
	int	3
$LN6@operator@2:
	mov	esi, esp
	push	0
	push	783					; 0000030fH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1HC@HBCEAHKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAl?$AAl?$AAo?$AAc@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 786  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ENDP	; std::vector<int,std::allocator<int> >::operator[]
_TEXT	ENDS
PUBLIC	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_iterator<int,std::allocator<int> >::~_Vector_iterator<int,std::allocator<int> >
PUBLIC	?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ; std::vector<int,std::allocator<int> >::insert
PUBLIC	??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >
PUBLIC	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
PUBLIC	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill
PUBLIC	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z$0
__ehfuncinfo$?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
_TEXT	SEGMENT
tv146 = -284						; size = 4
tv145 = -280						; size = 4
tv142 = -276						; size = 4
tv148 = -272						; size = 4
$T102093 = -264						; size = 4
$T102094 = -252						; size = 12
$T102095 = -232						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
	cmp	esi, eax
	jae	SHORT $LN2@push_back

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range

; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back
$LN2@push_back:

; 823  : 			insert(end(), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T102094[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
	mov	DWORD PTR tv148[ebp], eax
	mov	edx, DWORD PTR tv148[ebp]
	mov	DWORD PTR tv142[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T102093[ebp], esp
	mov	eax, DWORD PTR tv142[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv145[ebp], eax
	lea	ecx, DWORD PTR $T102095[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ; std::vector<int,std::allocator<int> >::insert
	mov	DWORD PTR tv146[ebp], eax
	lea	ecx, DWORD PTR $T102095[ebp]
	call	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T102094[ebp]
	call	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
$LN3@push_back:

; 824  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z$0:
	lea	ecx, DWORD PTR $T102094[ebp]
	jmp	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-288]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
PUBLIC	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase
PUBLIC	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ$2
__ehfuncinfo$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ
_TEXT	SEGMENT
tv149 = -332						; size = 4
tv154 = -328						; size = 4
tv151 = -324						; size = 4
tv158 = -320						; size = 4
tv148 = -316						; size = 4
tv157 = -312						; size = 4
tv146 = -308						; size = 4
tv156 = -304						; size = 4
$T102107 = -296						; size = 4
$T102108 = -284						; size = 12
$T102109 = -264						; size = 4
$T102110 = -252						; size = 12
$T102111 = -232						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ PROC	; std::vector<int,std::allocator<int> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T102108[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
	mov	DWORD PTR tv156[ebp], eax
	mov	ecx, DWORD PTR tv156[ebp]
	mov	DWORD PTR tv146[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T102107[ebp], esp
	mov	edx, DWORD PTR tv146[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv157[ebp], eax
	mov	eax, DWORD PTR tv157[ebp]
	mov	DWORD PTR tv148[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T102110[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
	mov	DWORD PTR tv158[ebp], eax
	mov	edx, DWORD PTR tv158[ebp]
	mov	DWORD PTR tv151[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T102109[ebp], esp
	mov	eax, DWORD PTR tv151[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv154[ebp], eax
	lea	ecx, DWORD PTR $T102111[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase
	mov	DWORD PTR tv149[ebp], eax
	lea	ecx, DWORD PTR $T102111[ebp]
	call	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T102110[ebp]
	call	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T102108[ebp]
	call	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ

; 1061 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ$0:
	lea	ecx, DWORD PTR $T102108[ebp]
	jmp	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ$1:
	mov	ecx, DWORD PTR $T102107[ebp]
	jmp	??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ$2:
	lea	ecx, DWORD PTR $T102110[ebp]
	jmp	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-336]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ENDP	; std::vector<int,std::allocator<int> >::clear
PUBLIC	??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ ; std::_Vector_val<float,std::allocator<float> >::~_Vector_val<float,std::allocator<float> >
PUBLIC	?_Buy@?$vector@MV?$allocator@M@std@@@std@@IAE_NI@Z ; std::vector<float,std::allocator<float> >::_Buy
PUBLIC	??0?$_Vector_val@MV?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z ; std::_Vector_val<float,std::allocator<float> >::_Vector_val<float,std::allocator<float> >
PUBLIC	??0?$allocator@M@std@@QAE@XZ			; std::allocator<float>::allocator<float>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T102125 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T102125[ebp], esp
	call	??0?$allocator@M@std@@QAE@XZ		; std::allocator<float>::allocator<float>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@MV?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z ; std::_Vector_val<float,std::allocator<float> >::_Vector_val<float,std::allocator<float> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@MV?$allocator@M@std@@@std@@IAE_NI@Z ; std::vector<float,std::allocator<float> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
PUBLIC	?_Tidy@?$vector@MV?$allocator@M@std@@@std@@IAEXXZ ; std::vector<float,std::allocator<float> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@MV?$allocator@M@std@@@std@@IAEXXZ ; std::vector<float,std::allocator<float> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
PUBLIC	?deallocate@?$allocator@M@std@@QAEXPAMI@Z	; std::allocator<float>::deallocate
PUBLIC	??$_Ucopy@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ; std::vector<float,std::allocator<float> >::_Ucopy<float *>
PUBLIC	?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::capacity
PUBLIC	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Destroy
PUBLIC	??$unchecked_copy@PAMPAM@stdext@@YAPAMPAM00@Z	; stdext::unchecked_copy<float *,float *>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??4?$vector@MV?$allocator@M@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Ptr$93631 = -32					; size = 4
__Ptr$93621 = -20					; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??4?$vector@MV?$allocator@M@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<float,std::allocator<float> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@3

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base_secure@std@@QBEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	test	eax, eax
	jne	SHORT $LN8@operator@3

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ ; std::vector<float,std::allocator<float> >::clear
	jmp	$LN9@operator@3
$LN8@operator@3:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	cmp	esi, eax
	ja	SHORT $LN6@operator@3

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	??$unchecked_copy@PAMPAM@stdext@@YAPAMPAM00@Z ; stdext::unchecked_copy<float *,float *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$93621[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$93621[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Destroy

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
	jmp	$LN9@operator@3
$LN6@operator@3:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::capacity
	cmp	esi, eax
	ja	SHORT $LN4@operator@3

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR __Ptr$93631[ebp], eax

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR __Ptr$93631[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	??$unchecked_copy@PAMPAM@stdext@@YAPAMPAM00@Z ; stdext::unchecked_copy<float *,float *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Ptr$93631[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ; std::vector<float,std::allocator<float> >::_Ucopy<float *>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax

; 585  : 				}
; 586  : 			else

	jmp	SHORT $LN9@operator@3
$LN4@operator@3:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@operator@3

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Destroy

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@M@std@@QAEXPAMI@Z ; std::allocator<float>::deallocate
$LN2@operator@3:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@MV?$allocator@M@std@@@std@@IAE_NI@Z ; std::vector<float,std::allocator<float> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@operator@3

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ; std::vector<float,std::allocator<float> >::_Ucopy<float *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN9@operator@3:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@MV?$allocator@M@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<float,std::allocator<float> >::operator=
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::_Vector_const_iterator<float,std::allocator<float> >
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?begin@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ
_TEXT	SEGMENT
$T102147 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ PROC ; std::vector<float,std::allocator<float> >::begin, COMDAT
; _this$ = ecx

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T102147[ebp], 0

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::_Vector_const_iterator<float,std::allocator<float> >
	mov	eax, DWORD PTR $T102147[ebp]
	or	eax, 1
	mov	DWORD PTR $T102147[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 647  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ ENDP ; std::vector<float,std::allocator<float> >::begin
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ
_TEXT	SEGMENT
$T102152 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ PROC ; std::vector<float,std::allocator<float> >::end, COMDAT
; _this$ = ecx

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T102152[ebp], 0

; 656  : 		return (const_iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::_Vector_const_iterator<float,std::allocator<float> >
	mov	eax, DWORD PTR $T102152[ebp]
	or	eax, 1
	mov	DWORD PTR $T102152[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 657  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@XZ ENDP ; std::vector<float,std::allocator<float> >::end
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ PROC	; std::vector<float,std::allocator<float> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+8]
	sar	eax, 2

; 727  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ENDP	; std::vector<float,std::allocator<float> >::size
_TEXT	ENDS
PUBLIC	??_C@_1HK@EJDBECKJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAl?$AAl@ ; `string'
;	COMDAT ??_C@_1HK@EJDBECKJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAl?$AAl@
CONST	SEGMENT
??_C@_1HK@EJDBECKJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAl?$AAl@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'f', 00H, 'l'
	DB	00H, 'o', 00H, 'a', 00H, 't', 00H, ',', 00H, 'c', 00H, 'l', 00H
	DB	'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd'
	DB	00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'f'
	DB	00H, 'l', 00H, 'o', 00H, 'a', 00H, 't', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '[', 00H
	DB	']', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z PROC	; std::vector<float,std::allocator<float> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN2@operator@4

; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");

	mov	esi, esp
	push	779					; 0000030bH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 780  : 			_SCL_SECURE_OUT_OF_RANGE;

	xor	eax, eax
	jne	SHORT $LN5@operator@4
	mov	esi, esp
	push	OFFSET ??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
	push	0
	push	780					; 0000030cH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@operator@4
	int	3
$LN5@operator@4:
	mov	esi, esp
	push	0
	push	780					; 0000030cH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1HK@EJDBECKJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAl?$AAl@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@4:

; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@4
	xor	eax, eax
	jne	SHORT $LN6@operator@4
	mov	esi, esp
	push	OFFSET ??_C@_1CK@POGJDOKA@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAo?$AAs?$AA?5?$AA?$DM?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
	push	0
	push	783					; 0000030fH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN6@operator@4
	int	3
$LN6@operator@4:
	mov	esi, esp
	push	0
	push	783					; 0000030fH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1HK@EJDBECKJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAl?$AAl@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@4:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 786  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z ENDP	; std::vector<float,std::allocator<float> >::operator[]
_TEXT	ENDS
PUBLIC	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ ; std::_Vector_iterator<float,std::allocator<float> >::~_Vector_iterator<float,std::allocator<float> >
PUBLIC	?insert@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@ABM@Z ; std::vector<float,std::allocator<float> >::insert
PUBLIC	??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::_Vector_const_iterator<float,std::allocator<float> >
PUBLIC	?end@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::end
PUBLIC	?_Ufill@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAMIABM@Z ; std::vector<float,std::allocator<float> >::_Ufill
PUBLIC	?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@IBEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Orphan_range
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z$0
__ehfuncinfo$?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z
_TEXT	SEGMENT
tv146 = -284						; size = 4
tv145 = -280						; size = 4
tv142 = -276						; size = 4
tv148 = -272						; size = 4
$T102162 = -264						; size = 4
$T102163 = -252						; size = 12
$T102164 = -232						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Val$ = 8						; size = 4
?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z PROC ; std::vector<float,std::allocator<float> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::capacity
	cmp	esi, eax
	jae	SHORT $LN2@push_back@2

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@IBEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Orphan_range

; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAMIABM@Z ; std::vector<float,std::allocator<float> >::_Ufill
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@2
$LN2@push_back@2:

; 823  : 			insert(end(), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T102163[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::end
	mov	DWORD PTR tv148[ebp], eax
	mov	edx, DWORD PTR tv148[ebp]
	mov	DWORD PTR tv142[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T102162[ebp], esp
	mov	eax, DWORD PTR tv142[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv145[ebp], eax
	lea	ecx, DWORD PTR $T102164[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@ABM@Z ; std::vector<float,std::allocator<float> >::insert
	mov	DWORD PTR tv146[ebp], eax
	lea	ecx, DWORD PTR $T102164[ebp]
	call	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T102163[ebp]
	call	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
$LN3@push_back@2:

; 824  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z$0:
	lea	ecx, DWORD PTR $T102163[ebp]
	jmp	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
__ehhandler$?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-288]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z ENDP ; std::vector<float,std::allocator<float> >::push_back
PUBLIC	?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z ; std::vector<float,std::allocator<float> >::erase
PUBLIC	?begin@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::begin
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ$2
__ehfuncinfo$?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ
_TEXT	SEGMENT
tv149 = -332						; size = 4
tv154 = -328						; size = 4
tv151 = -324						; size = 4
tv158 = -320						; size = 4
tv148 = -316						; size = 4
tv157 = -312						; size = 4
tv146 = -308						; size = 4
tv156 = -304						; size = 4
$T102176 = -296						; size = 4
$T102177 = -284						; size = 12
$T102178 = -264						; size = 4
$T102179 = -252						; size = 12
$T102180 = -232						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ PROC	; std::vector<float,std::allocator<float> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1060 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T102177[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::end
	mov	DWORD PTR tv156[ebp], eax
	mov	ecx, DWORD PTR tv156[ebp]
	mov	DWORD PTR tv146[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T102176[ebp], esp
	mov	edx, DWORD PTR tv146[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv157[ebp], eax
	mov	eax, DWORD PTR tv157[ebp]
	mov	DWORD PTR tv148[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T102179[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::begin
	mov	DWORD PTR tv158[ebp], eax
	mov	edx, DWORD PTR tv158[ebp]
	mov	DWORD PTR tv151[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T102178[ebp], esp
	mov	eax, DWORD PTR tv151[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv154[ebp], eax
	lea	ecx, DWORD PTR $T102180[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z ; std::vector<float,std::allocator<float> >::erase
	mov	DWORD PTR tv149[ebp], eax
	lea	ecx, DWORD PTR $T102180[ebp]
	call	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T102179[ebp]
	call	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T102177[ebp]
	call	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ

; 1061 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ$0:
	lea	ecx, DWORD PTR $T102177[ebp]
	jmp	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
__unwindfunclet$?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ$1:
	mov	ecx, DWORD PTR $T102176[ebp]
	jmp	??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
__unwindfunclet$?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ$2:
	lea	ecx, DWORD PTR $T102179[ebp]
	jmp	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
__ehhandler$?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-336]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?clear@?$vector@MV?$allocator@M@std@@@std@@QAEXXZ ENDP	; std::vector<float,std::allocator<float> >::clear
PUBLIC	??_C@_1JI@LEAMJDLL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@ ; `string'
PUBLIC	??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ ; `string'
;	COMDAT ??_C@_1JI@LEAMJDLL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@
CONST	SEGMENT
??_C@_1JI@LEAMJDLL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 't', 00H
	DB	',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '<', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'a', 00H
	DB	't', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o'
	DB	00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, '*', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
CONST	SEGMENT
??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??D?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEABMXZ PROC ; std::_Vector_const_iterator<float,std::allocator<float> >::operator*, COMDAT
; _this$ = ecx

; 91   : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 92   : 
; 93   :  #if _HAS_ITERATOR_DEBUGGING
; 94   : 		if (this->_Mycont == 0
; 95   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 96   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@operator@5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR [ecx+8]
	jb	SHORT $LN1@operator@5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx+8]
	ja	SHORT $LN2@operator@5
$LN1@operator@5:

; 97   : 			{
; 98   : 			_DEBUG_ERROR("vector iterator not dereferencable");

	mov	esi, esp
	push	98					; 00000062H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 99   : 			_SCL_SECURE_OUT_OF_RANGE;

	xor	eax, eax
	jne	SHORT $LN5@operator@5
	mov	esi, esp
	push	OFFSET ??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
	push	0
	push	99					; 00000063H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@operator@5
	int	3
$LN5@operator@5:
	mov	esi, esp
	push	0
	push	99					; 00000063H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1JI@LEAMJDLL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@5:

; 100  : 			}
; 101  :  #else
; 102  :  		_SCL_SECURE_VALIDATE(this->_Has_container());
; 103  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);
; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 107  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEABMXZ ENDP ; std::_Vector_const_iterator<float,std::allocator<float> >::operator*
_TEXT	ENDS
PUBLIC	??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@ ; `string'
PUBLIC	??_C@_1HE@NMBDDEHP@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAG?$AAe@ ; `string'
PUBLIC	?_Getmycont@_Iterator_base@std@@QBEPBV_Container_base_secure@2@XZ ; std::_Iterator_base::_Getmycont
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1JK@NCFIPKBL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@ ; `string'
PUBLIC	??_C@_1DM@LBMEEJPP@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAH?$AAa?$AAs?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	?_Has_container@_Iterator_base@std@@QBE_NXZ	; std::_Iterator_base::_Has_container
;	COMDAT ??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@
CONST	SEGMENT
??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1HE@NMBDDEHP@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAG?$AAe@
CONST	SEGMENT
??_C@_1HE@NMBDDEHP@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAG?$AAe@ DB '('
	DB	00H, '"', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'p', 00H, 't', 00H
	DB	'r', 00H, ' ', 00H, '<', 00H, ' ', 00H, '(', 00H, '(', 00H, '_'
	DB	00H, 'M', 00H, 'y', 00H, 'v', 00H, 'e', 00H, 'c', 00H, ' ', 00H
	DB	'*', 00H, ')', 00H, '(', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's'
	DB	00H, '-', 00H, '>', 00H, '_', 00H, 'G', 00H, 'e', 00H, 't', 00H
	DB	'm', 00H, 'y', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, '('
	DB	00H, ')', 00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, '_', 00H
	DB	'M', 00H, 'y', 00H, 'l', 00H, 'a', 00H, 's', 00H, 't', 00H, '"'
	DB	00H, ',', 00H, ' ', 00H, '0', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JK@NCFIPKBL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@
CONST	SEGMENT
??_C@_1JK@NCFIPKBL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 't', 00H
	DB	',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '<', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'a', 00H
	DB	't', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o'
	DB	00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, '+', 00H, '+', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@LBMEEJPP@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAH?$AAa?$AAs?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@LBMEEJPP@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAH?$AAa?$AAs?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@ DB '('
	DB	00H, '"', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H
	DB	'>', 00H, '_', 00H, 'H', 00H, 'a', 00H, 's', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, 'r', 00H, '(', 00H, ')', 00H, '"', 00H, ',', 00H, ' '
	DB	00H, '0', 00H, ')', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??E?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??E?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<float,std::allocator<float> >::operator++, COMDAT
; _this$ = ecx

; 115  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 116  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base@std@@QBE_NXZ ; std::_Iterator_base::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@operator@6
	xor	eax, eax
	jne	SHORT $LN7@operator@6
	mov	esi, esp
	push	OFFSET ??_C@_1DM@LBMEEJPP@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAH?$AAa?$AAs?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
	push	0
	push	116					; 00000074H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN7@operator@6
	int	3
$LN7@operator@6:
	mov	esi, esp
	push	0
	push	116					; 00000074H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1JK@NCFIPKBL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@operator@6:

; 117  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base@std@@QBEPBV_Container_base_secure@2@XZ ; std::_Iterator_base::_Getmycont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR [eax+12]
	jb	SHORT $LN3@operator@6
	xor	eax, eax
	jne	SHORT $LN8@operator@6
	mov	esi, esp
	push	OFFSET ??_C@_1HE@NMBDDEHP@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAG?$AAe@
	push	0
	push	117					; 00000075H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN8@operator@6
	int	3
$LN8@operator@6:
	mov	esi, esp
	push	0
	push	117					; 00000075H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1JK@NCFIPKBL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@operator@6:

; 118  : 
; 119  :  #if _HAS_ITERATOR_DEBUGGING
; 120  : 		if (this->_Mycont == 0
; 121  : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@operator@6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx+8]
	ja	SHORT $LN2@operator@6
$LN1@operator@6:

; 122  : 			_DEBUG_ERROR("vector iterator not incrementable");

	mov	esi, esp
	push	122					; 0000007aH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@6:

; 123  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 124  : 
; 125  : 		++_Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 126  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 127  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<float,std::allocator<float> >::operator++
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Getmycont@_Iterator_base@std@@QBEPBV_Container_base_secure@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getmycont@_Iterator_base@std@@QBEPBV_Container_base_secure@2@XZ PROC ; std::_Iterator_base::_Getmycont, COMDAT
; _this$ = ecx

; 196  : 		{	// This member function always exists when we can get a container pointer

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 197  : 		return _Mycont;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 198  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getmycont@_Iterator_base@std@@QBEPBV_Container_base_secure@2@XZ ENDP ; std::_Iterator_base::_Getmycont
_TEXT	ENDS
EXTRN	@_RTC_Check_4_to_1@4:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?_Has_container@_Iterator_base@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Has_container@_Iterator_base@std@@QBE_NXZ PROC	; std::_Iterator_base::_Has_container, COMDAT
; _this$ = ecx

; 206  : 		{	// This member function always exists when we can get a container pointer

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 207  : 		return _Mycont != 0;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	setne	cl
	call	@_RTC_Check_4_to_1@4

; 208  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Has_container@_Iterator_base@std@@QBE_NXZ ENDP	; std::_Iterator_base::_Has_container
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::operator==
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<float,std::allocator<float> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::operator==
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	call	@_RTC_Check_4_to_1@4

; 217  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<float,std::allocator<float> >::operator!=
_TEXT	ENDS
PUBLIC	??_C@_1JA@BAFKEHI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ ; `string'
;	COMDAT ??_C@_1JA@BAFKEHI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
CONST	SEGMENT
??_C@_1JA@BAFKEHI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'i', 00H, 'n', 00H, 't', 00H, ',', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??D?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEABHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEABHXZ PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator*, COMDAT
; _this$ = ecx

; 91   : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 92   : 
; 93   :  #if _HAS_ITERATOR_DEBUGGING
; 94   : 		if (this->_Mycont == 0
; 95   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 96   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@operator@7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR [ecx+8]
	jb	SHORT $LN1@operator@7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx+8]
	ja	SHORT $LN2@operator@7
$LN1@operator@7:

; 97   : 			{
; 98   : 			_DEBUG_ERROR("vector iterator not dereferencable");

	mov	esi, esp
	push	98					; 00000062H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 99   : 			_SCL_SECURE_OUT_OF_RANGE;

	xor	eax, eax
	jne	SHORT $LN5@operator@7
	mov	esi, esp
	push	OFFSET ??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
	push	0
	push	99					; 00000063H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@operator@7
	int	3
$LN5@operator@7:
	mov	esi, esp
	push	0
	push	99					; 00000063H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1JA@BAFKEHI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@7:

; 100  : 			}
; 101  :  #else
; 102  :  		_SCL_SECURE_VALIDATE(this->_Has_container());
; 103  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);
; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 107  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEABHXZ ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator*
_TEXT	ENDS
PUBLIC	??_C@_1JC@IKDCGOJA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ ; `string'
;	COMDAT ??_C@_1JC@IKDCGOJA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
CONST	SEGMENT
??_C@_1JC@IKDCGOJA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'i', 00H, 'n', 00H, 't', 00H, ',', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '+', 00H, '+', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??E?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??E?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator++, COMDAT
; _this$ = ecx

; 115  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 116  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base@std@@QBE_NXZ ; std::_Iterator_base::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@operator@8
	xor	eax, eax
	jne	SHORT $LN7@operator@8
	mov	esi, esp
	push	OFFSET ??_C@_1DM@LBMEEJPP@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAH?$AAa?$AAs?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
	push	0
	push	116					; 00000074H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN7@operator@8
	int	3
$LN7@operator@8:
	mov	esi, esp
	push	0
	push	116					; 00000074H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1JC@IKDCGOJA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@operator@8:

; 117  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base@std@@QBEPBV_Container_base_secure@2@XZ ; std::_Iterator_base::_Getmycont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR [eax+12]
	jb	SHORT $LN3@operator@8
	xor	eax, eax
	jne	SHORT $LN8@operator@8
	mov	esi, esp
	push	OFFSET ??_C@_1HE@NMBDDEHP@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAG?$AAe@
	push	0
	push	117					; 00000075H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN8@operator@8
	int	3
$LN8@operator@8:
	mov	esi, esp
	push	0
	push	117					; 00000075H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1JC@IKDCGOJA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@operator@8:

; 118  : 
; 119  :  #if _HAS_ITERATOR_DEBUGGING
; 120  : 		if (this->_Mycont == 0
; 121  : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@operator@8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx+8]
	ja	SHORT $LN2@operator@8
$LN1@operator@8:

; 122  : 			_DEBUG_ERROR("vector iterator not incrementable");

	mov	esi, esp
	push	122					; 0000007aH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@8:

; 123  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 124  : 
; 125  : 		++_Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 126  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 127  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator++
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator==
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??9?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator==
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	call	@_RTC_Check_4_to_1@4

; 217  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator!=
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_empty@V?$allocator@H@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<int> >::~_Container_base_aux_alloc_empty<std::allocator<int> >
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_empty@V?$allocator@H@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<int> >::~_Container_base_aux_alloc_empty<std::allocator<int> >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<int,std::allocator<int> >::~_Vector_iterator<int,std::allocator<int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<int,std::allocator<int> >::~_Vector_iterator<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@HHPBHABH@std@@QAE@ABU01@@Z		; std::_Ranit<int,int,int const *,int const &>::_Ranit<int,int,int const *,int const &>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@HHPBHABH@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_empty@V?$allocator@M@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<float> >::~_Container_base_aux_alloc_empty<std::allocator<float> >
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::_Vector_val<float,std::allocator<float> >::~_Vector_val<float,std::allocator<float> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_empty@V?$allocator@M@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<float> >::~_Container_base_aux_alloc_empty<std::allocator<float> >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<float,std::allocator<float> >::~_Vector_val<float,std::allocator<float> >
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<float,std::allocator<float> >::~_Vector_iterator<float,std::allocator<float> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<float,std::allocator<float> >::~_Vector_iterator<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??0?$_Ranit@MHPBMABM@std@@QAE@ABU01@@Z		; std::_Ranit<float,int,float const *,float const &>::_Ranit<float,int,float const *,float const &>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<float,std::allocator<float> >::_Vector_const_iterator<float,std::allocator<float> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@MHPBMABM@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<float,std::allocator<float> >::_Vector_const_iterator<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base@2@@std@@QAE@ABU01@@Z ; std::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base>::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0?$_Ranit@HHPBHABH@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Ranit@HHPBHABH@std@@QAE@ABU01@@Z PROC		; std::_Ranit<int,int,int const *,int const &>::_Ranit<int,int,int const *,int const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base@2@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Ranit@HHPBHABH@std@@QAE@ABU01@@Z ENDP		; std::_Ranit<int,int,int const *,int const &>::_Ranit<int,int,int const *,int const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base@2@@std@@QAE@ABU01@@Z ; std::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base>::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0?$_Ranit@MHPBMABM@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Ranit@MHPBMABM@std@@QAE@ABU01@@Z PROC		; std::_Ranit<float,int,float const *,float const &>::_Ranit<float,int,float const *,float const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base@2@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Ranit@MHPBMABM@std@@QAE@ABU01@@Z ENDP		; std::_Ranit<float,int,float const *,float const &>::_Ranit<float,int,float const *,float const &>
_TEXT	ENDS
PUBLIC	??0_Iterator_base@std@@QAE@ABV01@@Z		; std::_Iterator_base::_Iterator_base
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base@2@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base@2@@std@@QAE@ABU01@@Z PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base>::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base@std@@QAE@ABV01@@Z	; std::_Iterator_base::_Iterator_base
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base@2@@std@@QAE@ABU01@@Z ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base>::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base>
_TEXT	ENDS
PUBLIC	??4_Iterator_base@std@@QAEAAV01@ABV01@@Z	; std::_Iterator_base::operator=
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0_Iterator_base@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base@std@@QAE@ABV01@@Z PROC		; std::_Iterator_base::_Iterator_base, COMDAT
; _this$ = ecx

; 143  : 		{	// copy an iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 144  : 		*this = _Right;

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base@std@@QAEAAV01@ABV01@@Z ; std::_Iterator_base::operator=

; 145  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Iterator_base@std@@QAE@ABV01@@Z ENDP		; std::_Iterator_base::_Iterator_base
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z ; std::_Iterator_base::_Adopt
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z$0
__ehfuncinfo$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??4_Iterator_base@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Lock$6719 = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4_Iterator_base@std@@QAEAAV01@ABV01@@Z PROC		; std::_Iterator_base::operator=, COMDAT
; _this$ = ecx

; 148  : 		{	// assign an iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 149  : 		if (_Mycont != _Right._Mycont)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN1@operator@9

; 150  : 			{	// change parentage
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$6719[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 152  : 			_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base@std@@QAEXXZ	; std::_Iterator_base::_Orphan_me

; 153  : 			_Adopt(_Right._Mycont);

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z ; std::_Iterator_base::_Adopt

; 154  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$6719[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@9:

; 155  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 156  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@operator@9
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN8@operator@9:
	DD	1
	DD	$LN7@operator@9
$LN7@operator@9:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@operator@9
$LN5@operator@9:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$6719[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4_Iterator_base@std@@QAEAAV01@ABV01@@Z ENDP		; std::_Iterator_base::operator=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z$0
__ehfuncinfo$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z
_TEXT	SEGMENT
__Lock$6726 = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z PROC ; std::_Iterator_base::_Adopt, COMDAT
; _this$ = ecx

; 165  : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		if (_Mycont != _Parent)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __Parent$[ebp]
	je	SHORT $LN3@Adopt

; 167  : 			{	// change parentage
; 168  : 			_Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$6726[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 169  : 			_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base@std@@QAEXXZ	; std::_Iterator_base::_Orphan_me

; 170  : 			if (_Parent != 0 && _Parent->_Myfirstiter != _IGNORE_MYITERLIST)

	cmp	DWORD PTR __Parent$[ebp], 0
	je	SHORT $LN1@Adopt
	mov	eax, DWORD PTR __Parent$[ebp]
	cmp	DWORD PTR [eax], -3			; fffffffdH
	je	SHORT $LN1@Adopt

; 171  : 				{	// switch to new parent
; 172  : 				_Mynextiter = _Parent->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 173  : 				((_Container_base_secure *)_Parent)->_Myfirstiter = this;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@Adopt:

; 174  : 				}
; 175  : 			_Mycont = _Parent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent$[ebp]
	mov	DWORD PTR [eax], ecx

; 176  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$6726[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Adopt:

; 177  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Adopt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN9@Adopt:
	DD	1
	DD	$LN8@Adopt
$LN8@Adopt:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN6@Adopt
$LN6@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$6726[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z ENDP ; std::_Iterator_base::_Adopt
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base@2@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base@2@@std@@QAE@ABU01@@Z PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base>::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base@std@@QAE@ABV01@@Z	; std::_Iterator_base::_Iterator_base
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base@2@@std@@QAE@ABU01@@Z ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base>::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -208						; size = 4
_this$ = -8						; size = 4
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN3@capacity
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity
$LN3@capacity:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	sub	eax, DWORD PTR [edx+8]
	sar	eax, 2
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
$T102278 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T102278[ebp], 0

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >
	mov	eax, DWORD PTR $T102278[ebp]
	or	eax, 1
	mov	DWORD PTR $T102278[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::begin
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
$T102283 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T102283[ebp], 0

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >
	mov	eax, DWORD PTR $T102283[ebp]
	or	eax, 1
	mov	DWORD PTR $T102283[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::end
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<int,std::allocator<int> >::operator+
PUBLIC	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n
PUBLIC	??G?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator-
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z$3
__ehfuncinfo$?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z
_TEXT	SEGMENT
tv145 = -304						; size = 4
tv159 = -300						; size = 4
tv153 = -300						; size = 4
tv161 = -296						; size = 4
tv151 = -296						; size = 4
tv80 = -296						; size = 4
$T102287 = -288						; size = 12
$T102290 = -268						; size = 4
$T102291 = -256						; size = 12
$T102293 = -236						; size = 4
__Off$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
__Val$ = 24						; size = 4
?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z PROC ; std::vector<int,std::allocator<int> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T102293[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	test	eax, eax
	jne	SHORT $LN3@insert
	mov	DWORD PTR tv80[ebp], 0
	jmp	SHORT $LN4@insert
$LN3@insert:
	lea	eax, DWORD PTR $T102287[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
	mov	DWORD PTR tv159[ebp], eax
	mov	ecx, DWORD PTR tv159[ebp]
	mov	DWORD PTR tv145[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR $T102293[ebp]
	or	edx, 1
	mov	DWORD PTR $T102293[ebp], edx
	mov	eax, DWORD PTR tv145[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??G?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator-
	mov	DWORD PTR tv80[ebp], eax
$LN4@insert:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR __Off$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T102293[ebp]
	and	edx, 1
	je	SHORT $LN8@insert
	and	DWORD PTR $T102293[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T102287[ebp]
	call	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
$LN8@insert:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T102290[ebp], esp
	lea	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv151[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T102291[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
	mov	DWORD PTR tv161[ebp], eax
	mov	eax, DWORD PTR tv161[ebp]
	mov	DWORD PTR tv153[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR tv153[ebp]
	call	??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<int,std::allocator<int> >::operator+
	mov	ecx, DWORD PTR $T102293[ebp]
	or	ecx, 2
	mov	DWORD PTR $T102293[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T102291[ebp]
	call	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z$0:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z$1:
	mov	eax, DWORD PTR $T102293[ebp]
	and	eax, 1
	je	$LN7@insert
	and	DWORD PTR $T102293[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T102287[ebp]
	jmp	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
$LN7@insert:
	ret	0
__unwindfunclet$?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z$3:
	lea	ecx, DWORD PTR $T102291[ebp]
	jmp	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z$4:
	mov	eax, DWORD PTR $T102293[ebp]
	and	eax, 2
	je	$LN12@insert
	and	DWORD PTR $T102293[ebp], -3		; fffffffdH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
$LN12@insert:
	ret	0
__ehhandler$?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-308]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ENDP ; std::vector<int,std::allocator<int> >::insert
PUBLIC	??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@ ; `string'
PUBLIC	??M?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator<
PUBLIC	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter
;	COMDAT ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
CONST	SEGMENT
??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, 's', 00H, 'i'
	DB	00H, 'd', 00H, 'e', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z$5
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z
_TEXT	SEGMENT
tv238 = -312						; size = 4
tv234 = -312						; size = 4
tv237 = -308						; size = 4
tv233 = -308						; size = 4
$T102309 = -300						; size = 4
$T102310 = -288						; size = 4
$T102318 = -276						; size = 4
__Ptr$94857 = -72					; size = 4
__Last$ = -60						; size = 12
__First$ = -40						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 12
__Last_arg$ = 24					; size = 12
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z PROC ; std::vector<int,std::allocator<int> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T102318[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T102309[ebp], esp
	lea	eax, DWORD PTR __First_arg$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv233[ebp], eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter
	mov	DWORD PTR tv234[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T102310[ebp], esp
	lea	eax, DWORD PTR __Last_arg$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv237[ebp], eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter
	mov	DWORD PTR tv238[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@erase

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??M?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator<
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@erase
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN1@erase
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __First$[ebp+8]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN1@erase
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Last$[ebp+8]
	jae	SHORT $LN2@erase
$LN1@erase:

; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");

	mov	esi, esp
	push	1038					; 0000040eH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@erase:

; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp+8]
	push	eax
	call	??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::unchecked_copy<int *,int *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$94857[ebp], eax

; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range

; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));
; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$94857[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$94857[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN3@erase:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >
	mov	edx, DWORD PTR $T102318[ebp]
	or	edx, 1
	mov	DWORD PTR $T102318[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR __First_arg$[ebp]
	call	??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Last_arg$[ebp]
	call	??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1053 : #else
; 1054 : 		return (_First);
; 1055 : #endif
; 1056 : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@erase
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
	npad	3
$LN18@erase:
	DD	2
	DD	$LN17@erase
$LN17@erase:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN14@erase
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN15@erase
$LN15@erase:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN14@erase:
	DB	95					; 0000005fH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z$0:
	lea	ecx, DWORD PTR __Last_arg$[ebp]
	jmp	??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z$1:
	lea	ecx, DWORD PTR __First_arg$[ebp]
	jmp	??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z$3:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z$5:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z$6:
	mov	eax, DWORD PTR $T102318[ebp]
	and	eax, 1
	je	$LN13@erase
	and	DWORD PTR $T102318[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
$LN13@erase:
	ret	0
__ehhandler$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-316]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ENDP ; std::vector<int,std::allocator<int> >::erase
PUBLIC	?allocate@?$allocator@H@std@@QAEPAHI@Z		; std::allocator<int>::allocate
PUBLIC	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
PUBLIC	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z PROC	; std::vector<int,std::allocator<int> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy
$LN2@Buy:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@H@std@@QAEPAHI@Z	; std::allocator<int>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], edx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Capacity$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ENDP	; std::vector<int,std::allocator<int> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base_secure@std@@QBEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@H@std@@QAEXPAHI@Z ; std::allocator<int>::deallocate
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 1135 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAHIHV?$allocator@H@std@@@stdext@@YAXPAHIABHAAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_fill_n<int *,unsigned int,int,std::allocator<int> >
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z PROC ; std::vector<int,std::allocator<int> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAHIHV?$allocator@H@std@@@stdext@@YAXPAHIABHAAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_fill_n<int *,unsigned int,int,std::allocator<int> >
	add	esp, 16					; 00000010H

; 1255 : 		return (_Ptr + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 1256 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ENDP ; std::vector<int,std::allocator<int> >::_Ufill
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
_TEXT	SEGMENT
__Pnext$ = -32						; size = 4
__Lock$ = -20						; size = 4
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1275 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1276 : 		_Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1277 : 		const_iterator **_Pnext = (const_iterator **)&this->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __Pnext$[ebp], eax
$LN5@Orphan_ran:

; 1278 : 		while (*_Pnext != 0)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@Orphan_ran

; 1279 : 			if ((*_Pnext)->_Myptr < _First || _Last < (*_Pnext)->_Myptr)

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Last$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN3@Orphan_ran
$LN2@Orphan_ran:

; 1280 : 				_Pnext = (const_iterator **)&(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx

; 1281 : 			else

	jmp	SHORT $LN1@Orphan_ran
$LN3@Orphan_ran:

; 1282 : 				{	// orphan the iterator
; 1283 : 				(*_Pnext)->_Mycont = 0;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], 0

; 1284 : 				*_Pnext = (const_iterator *)(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN1@Orphan_ran:

; 1285 : 				}

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 1286 : 		}

	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN11@Orphan_ran:
	DD	1
	DD	$LN10@Orphan_ran
$LN10@Orphan_ran:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@Orphan_ran
$LN9@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_empty@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ; std::_Container_base_aux_alloc_empty<std::allocator<int> >::_Container_base_aux_alloc_empty<std::allocator<int> >
PUBLIC	??0?$allocator@H@std@@QAE@ABV01@@Z		; std::allocator<int>::allocator<int>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
_TEXT	SEGMENT
$T102346 = -212						; size = 4
_this$ = -8						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z PROC ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T102346[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@H@std@@QAE@ABV01@@Z	; std::allocator<int>::allocator<int>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_empty@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ; std::_Container_base_aux_alloc_empty<std::allocator<int> >::_Container_base_aux_alloc_empty<std::allocator<int> >
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$allocator@H@std@@QAE@ABV01@@Z	; std::allocator<int>::allocator<int>

; 426  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ENDP ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
_TEXT	ENDS
EXTRN	__imp_??1_Container_base_secure@std@@QAE@XZ:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_empty@V?$allocator@H@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Container_base_aux_alloc_empty@V?$allocator@H@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_empty<std::allocator<int> >::~_Container_base_aux_alloc_empty<std::allocator<int> >, COMDAT
; _this$ = ecx

; 627  : 	~_Container_base_aux_alloc_empty() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base_secure@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Container_base_aux_alloc_empty@V?$allocator@H@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<int> >::~_Container_base_aux_alloc_empty<std::allocator<int> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@H@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@H@std@@QAE@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@H@std@@QAE@XZ ENDP			; std::allocator<int>::allocator<int>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -208						; size = 4
_this$ = -8						; size = 4
?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ PROC ; std::vector<float,std::allocator<float> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN3@capacity@2
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity@2
$LN3@capacity@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	sub	eax, DWORD PTR [edx+8]
	sar	eax, 2
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity@2:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ENDP ; std::vector<float,std::allocator<float> >::capacity
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z ; std::_Vector_iterator<float,std::allocator<float> >::_Vector_iterator<float,std::allocator<float> >
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?begin@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ
_TEXT	SEGMENT
$T102362 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ PROC ; std::vector<float,std::allocator<float> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T102362[ebp], 0

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z ; std::_Vector_iterator<float,std::allocator<float> >::_Vector_iterator<float,std::allocator<float> >
	mov	eax, DWORD PTR $T102362[ebp]
	or	eax, 1
	mov	DWORD PTR $T102362[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ ENDP ; std::vector<float,std::allocator<float> >::begin
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ
_TEXT	SEGMENT
$T102367 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ PROC ; std::vector<float,std::allocator<float> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T102367[ebp], 0

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z ; std::_Vector_iterator<float,std::allocator<float> >::_Vector_iterator<float,std::allocator<float> >
	mov	eax, DWORD PTR $T102367[ebp]
	or	eax, 1
	mov	DWORD PTR $T102367[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ ENDP ; std::vector<float,std::allocator<float> >::end
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<float,std::allocator<float> >::operator+
PUBLIC	?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z ; std::vector<float,std::allocator<float> >::_Insert_n
PUBLIC	??G?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::operator-
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?insert@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@ABM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?insert@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@ABM@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?insert@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@ABM@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?insert@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@ABM@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?insert@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@ABM@Z$3
__ehfuncinfo$?insert@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@ABM@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?insert@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@ABM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?insert@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@ABM@Z
_TEXT	SEGMENT
tv145 = -304						; size = 4
tv159 = -300						; size = 4
tv153 = -300						; size = 4
tv161 = -296						; size = 4
tv151 = -296						; size = 4
tv80 = -296						; size = 4
$T102371 = -288						; size = 12
$T102374 = -268						; size = 4
$T102375 = -256						; size = 12
$T102377 = -236						; size = 4
__Off$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
__Val$ = 24						; size = 4
?insert@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@ABM@Z PROC ; std::vector<float,std::allocator<float> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?insert@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@ABM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T102377[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	test	eax, eax
	jne	SHORT $LN3@insert@2
	mov	DWORD PTR tv80[ebp], 0
	jmp	SHORT $LN4@insert@2
$LN3@insert@2:
	lea	eax, DWORD PTR $T102371[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::begin
	mov	DWORD PTR tv159[ebp], eax
	mov	ecx, DWORD PTR tv159[ebp]
	mov	DWORD PTR tv145[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR $T102377[ebp]
	or	edx, 1
	mov	DWORD PTR $T102377[ebp], edx
	mov	eax, DWORD PTR tv145[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??G?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::operator-
	mov	DWORD PTR tv80[ebp], eax
$LN4@insert@2:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR __Off$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T102377[ebp]
	and	edx, 1
	je	SHORT $LN8@insert@2
	and	DWORD PTR $T102377[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T102371[ebp]
	call	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
$LN8@insert@2:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T102374[ebp], esp
	lea	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv151[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z ; std::vector<float,std::allocator<float> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T102375[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@XZ ; std::vector<float,std::allocator<float> >::begin
	mov	DWORD PTR tv161[ebp], eax
	mov	eax, DWORD PTR tv161[ebp]
	mov	DWORD PTR tv153[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR tv153[ebp]
	call	??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<float,std::allocator<float> >::operator+
	mov	ecx, DWORD PTR $T102377[ebp]
	or	ecx, 2
	mov	DWORD PTR $T102377[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T102375[ebp]
	call	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?insert@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@ABM@Z$0:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
__unwindfunclet$?insert@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@ABM@Z$1:
	mov	eax, DWORD PTR $T102377[ebp]
	and	eax, 1
	je	$LN7@insert@2
	and	DWORD PTR $T102377[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T102371[ebp]
	jmp	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
$LN7@insert@2:
	ret	0
__unwindfunclet$?insert@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@ABM@Z$3:
	lea	ecx, DWORD PTR $T102375[ebp]
	jmp	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
__unwindfunclet$?insert@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@ABM@Z$4:
	mov	eax, DWORD PTR $T102377[ebp]
	and	eax, 2
	je	$LN12@insert@2
	and	DWORD PTR $T102377[ebp], -3		; fffffffdH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
$LN12@insert@2:
	ret	0
__ehhandler$?insert@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@ABM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-308]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?insert@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@ABM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?insert@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@ABM@Z ENDP ; std::vector<float,std::allocator<float> >::insert
PUBLIC	??M?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::operator<
PUBLIC	?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z ; std::vector<float,std::allocator<float> >::_Make_iter
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z$5
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z
_TEXT	SEGMENT
tv238 = -312						; size = 4
tv234 = -312						; size = 4
tv237 = -308						; size = 4
tv233 = -308						; size = 4
$T102402 = -300						; size = 4
$T102393 = -288						; size = 4
$T102394 = -276						; size = 4
__Ptr$94942 = -72					; size = 4
__Last$ = -60						; size = 12
__First$ = -40						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 12
__Last_arg$ = 24					; size = 12
?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z PROC ; std::vector<float,std::allocator<float> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T102402[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T102393[ebp], esp
	lea	eax, DWORD PTR __First_arg$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv233[ebp], eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z ; std::vector<float,std::allocator<float> >::_Make_iter
	mov	DWORD PTR tv234[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T102394[ebp], esp
	lea	eax, DWORD PTR __Last_arg$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv237[ebp], eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z ; std::vector<float,std::allocator<float> >::_Make_iter
	mov	DWORD PTR tv238[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@erase@2

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??M?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::operator<
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@erase@2
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN1@erase@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __First$[ebp+8]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN1@erase@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Last$[ebp+8]
	jae	SHORT $LN2@erase@2
$LN1@erase@2:

; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");

	mov	esi, esp
	push	1038					; 0000040eH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@erase@2:

; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp+8]
	push	eax
	call	??$unchecked_copy@PAMPAM@stdext@@YAPAMPAM00@Z ; stdext::unchecked_copy<float *,float *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$94942[ebp], eax

; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@IBEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Orphan_range

; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));
; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$94942[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$94942[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN3@erase@2:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z ; std::_Vector_iterator<float,std::allocator<float> >::_Vector_iterator<float,std::allocator<float> >
	mov	edx, DWORD PTR $T102402[ebp]
	or	edx, 1
	mov	DWORD PTR $T102402[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR __First_arg$[ebp]
	call	??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Last_arg$[ebp]
	call	??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1053 : #else
; 1054 : 		return (_First);
; 1055 : #endif
; 1056 : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@erase@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
	npad	3
$LN18@erase@2:
	DD	2
	DD	$LN17@erase@2
$LN17@erase@2:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN14@erase@2
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN15@erase@2
$LN15@erase@2:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN14@erase@2:
	DB	95					; 0000005fH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z$0:
	lea	ecx, DWORD PTR __Last_arg$[ebp]
	jmp	??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z$1:
	lea	ecx, DWORD PTR __First_arg$[ebp]
	jmp	??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z$3:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z$5:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z$6:
	mov	eax, DWORD PTR $T102402[ebp]
	and	eax, 1
	je	$LN13@erase@2
	and	DWORD PTR $T102402[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
$LN13@erase@2:
	ret	0
__ehhandler$?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-316]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$vector@MV?$allocator@M@std@@@std@@QAE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@0@Z ENDP ; std::vector<float,std::allocator<float> >::erase
PUBLIC	?allocate@?$allocator@M@std@@QAEPAMI@Z		; std::allocator<float>::allocate
PUBLIC	?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ ; std::vector<float,std::allocator<float> >::_Xlen
PUBLIC	?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::max_size
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?_Buy@?$vector@MV?$allocator@M@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@MV?$allocator@M@std@@@std@@IAE_NI@Z PROC	; std::vector<float,std::allocator<float> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@2

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@2
	jmp	SHORT $LN3@Buy@2
$LN4@Buy@2:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy@2

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ ; std::vector<float,std::allocator<float> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@2
$LN2@Buy@2:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@M@std@@QAEPAMI@Z	; std::allocator<float>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], edx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Capacity$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN3@Buy@2:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@2:

; 1115 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@MV?$allocator@M@std@@@std@@IAE_NI@Z ENDP	; std::vector<float,std::allocator<float> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@@Z ; std::_Destroy_range<std::allocator<float> >
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z PROC ; std::vector<float,std::allocator<float> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@@Z ; std::_Destroy_range<std::allocator<float> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ENDP ; std::vector<float,std::allocator<float> >::_Destroy
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@MV?$allocator@M@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Tidy@?$vector@MV?$allocator@M@std@@@std@@IAEXXZ PROC	; std::vector<float,std::allocator<float> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@Tidy@2

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base_secure@std@@QBEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@M@std@@QAEXPAMI@Z ; std::allocator<float>::deallocate
$LN1@Tidy@2:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 1135 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@MV?$allocator@M@std@@@std@@IAEXXZ ENDP	; std::vector<float,std::allocator<float> >::_Tidy
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAMIMV?$allocator@M@std@@@stdext@@YAXPAMIABMAAV?$allocator@M@std@@@Z ; stdext::unchecked_uninitialized_fill_n<float *,unsigned int,float,std::allocator<float> >
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?_Ufill@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAMIABM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAMIABM@Z PROC ; std::vector<float,std::allocator<float> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAMIMV?$allocator@M@std@@@stdext@@YAXPAMIABMAAV?$allocator@M@std@@@Z ; stdext::unchecked_uninitialized_fill_n<float *,unsigned int,float,std::allocator<float> >
	add	esp, 16					; 00000010H

; 1255 : 		return (_Ptr + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 1256 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAMIABM@Z ENDP ; std::vector<float,std::allocator<float> >::_Ufill
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@IBEXPAM0@Z
_TEXT	SEGMENT
__Pnext$ = -32						; size = 4
__Lock$ = -20						; size = 4
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@IBEXPAM0@Z PROC ; std::vector<float,std::allocator<float> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1275 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1276 : 		_Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1277 : 		const_iterator **_Pnext = (const_iterator **)&this->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __Pnext$[ebp], eax
$LN5@Orphan_ran@2:

; 1278 : 		while (*_Pnext != 0)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@Orphan_ran@2

; 1279 : 			if ((*_Pnext)->_Myptr < _First || _Last < (*_Pnext)->_Myptr)

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran@2
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Last$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN3@Orphan_ran@2
$LN2@Orphan_ran@2:

; 1280 : 				_Pnext = (const_iterator **)&(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx

; 1281 : 			else

	jmp	SHORT $LN1@Orphan_ran@2
$LN3@Orphan_ran@2:

; 1282 : 				{	// orphan the iterator
; 1283 : 				(*_Pnext)->_Mycont = 0;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], 0

; 1284 : 				*_Pnext = (const_iterator *)(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN1@Orphan_ran@2:

; 1285 : 				}

	jmp	SHORT $LN5@Orphan_ran@2
$LN4@Orphan_ran@2:

; 1286 : 		}

	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@Orphan_ran@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN11@Orphan_ran@2:
	DD	1
	DD	$LN10@Orphan_ran@2
$LN10@Orphan_ran@2:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@Orphan_ran@2
$LN9@Orphan_ran@2:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@IBEXPAM0@Z ENDP ; std::vector<float,std::allocator<float> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_empty@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z ; std::_Container_base_aux_alloc_empty<std::allocator<float> >::_Container_base_aux_alloc_empty<std::allocator<float> >
PUBLIC	??0?$allocator@M@std@@QAE@ABV01@@Z		; std::allocator<float>::allocator<float>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0?$_Vector_val@MV?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z
_TEXT	SEGMENT
$T102430 = -212						; size = 4
_this$ = -8						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@MV?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z PROC ; std::_Vector_val<float,std::allocator<float> >::_Vector_val<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T102430[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@M@std@@QAE@ABV01@@Z	; std::allocator<float>::allocator<float>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_empty@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z ; std::_Container_base_aux_alloc_empty<std::allocator<float> >::_Container_base_aux_alloc_empty<std::allocator<float> >
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$allocator@M@std@@QAE@ABV01@@Z	; std::allocator<float>::allocator<float>

; 426  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_val@MV?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z ENDP ; std::_Vector_val<float,std::allocator<float> >::_Vector_val<float,std::allocator<float> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_empty@V?$allocator@M@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Container_base_aux_alloc_empty@V?$allocator@M@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_empty<std::allocator<float> >::~_Container_base_aux_alloc_empty<std::allocator<float> >, COMDAT
; _this$ = ecx

; 627  : 	~_Container_base_aux_alloc_empty() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base_secure@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Container_base_aux_alloc_empty@V?$allocator@M@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<float> >::~_Container_base_aux_alloc_empty<std::allocator<float> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@M@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@M@std@@QAE@XZ PROC			; std::allocator<float>::allocator<float>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@M@std@@QAE@XZ ENDP			; std::allocator<float>::allocator<float>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@M@std@@QAEXPAMI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@M@std@@QAEXPAMI@Z PROC		; std::allocator<float>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@M@std@@QAEXPAMI@Z ENDP		; std::allocator<float>::deallocate
_TEXT	ENDS
PUBLIC	??_C@_1LA@GMACPMB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@ ; `string'
PUBLIC	??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@ ; `string'
PUBLIC	??0?$_Ranit@MHPBMABM@std@@QAE@XZ		; std::_Ranit<float,int,float const *,float const &>::_Ranit<float,int,float const *,float const &>
;	COMDAT ??_C@_1LA@GMACPMB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
CONST	SEGMENT
??_C@_1LA@GMACPMB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 't', 00H
	DB	',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '<', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'a', 00H
	DB	't', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_'
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@
CONST	SEGMENT
??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@ DB '('
	DB	00H, '"', 00H, '_', 00H, 'P', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, '(', 00H, '(', 00H, '(', 00H, '_', 00H, 'M'
	DB	00H, 'y', 00H, 'v', 00H, 'e', 00H, 'c', 00H, ' ', 00H, '*', 00H
	DB	')', 00H, '_', 00H, 'P', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ')', 00H, '-', 00H, '>', 00H, '_', 00H
	DB	'M', 00H, 'y', 00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H
	DB	't', 00H, 'r', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '_'
	DB	00H, 'P', 00H, 't', 00H, 'r', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, '(', 00H, '(', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'v'
	DB	00H, 'e', 00H, 'c', 00H, ' ', 00H, '*', 00H, ')', 00H, '_', 00H
	DB	'P', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, ')', 00H, '-', 00H, '>', 00H, '_', 00H, 'M', 00H, 'y', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 't', 00H, ')', 00H, '"', 00H, ','
	DB	00H, ' ', 00H, '0', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z PROC ; std::_Vector_const_iterator<float,std::allocator<float> >::_Vector_const_iterator<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 68   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@MHPBMABM@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 69   : 		{	// construct with pointer _Ptr
; 70   : 		_SCL_SECURE_VALIDATE(_Pvector == NULL || (((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast));

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN2@Vector_con
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jbe	SHORT $LN2@Vector_con
$LN1@Vector_con:
	xor	eax, eax
	jne	SHORT $LN5@Vector_con
	mov	esi, esp
	push	OFFSET ??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@
	push	0
	push	70					; 00000046H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@Vector_con
	int	3
$LN5@Vector_con:
	mov	esi, esp
	push	0
	push	70					; 00000046H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1LA@GMACPMB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Vector_con:

; 71   : 		this->_Adopt(_Pvector);

	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z ; std::_Iterator_base::_Adopt

; 72   : 		_Myptr = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 73   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Ranit@MHPBMABM@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z ENDP ; std::_Vector_const_iterator<float,std::allocator<float> >::_Vector_const_iterator<float,std::allocator<float> >
PUBLIC	?_Compat@?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::_Compat
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??8?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<float,std::allocator<float> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::_Compat

; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+8]
	sete	al
	mov	ecx, eax
	call	@_RTC_Check_4_to_1@4

; 212  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<float,std::allocator<float> >::operator==
_TEXT	ENDS
PUBLIC	??_C@_1KI@INECPEDO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ ; `string'
PUBLIC	??0?$_Ranit@HHPBHABH@std@@QAE@XZ		; std::_Ranit<int,int,int const *,int const &>::_Ranit<int,int,int const *,int const &>
;	COMDAT ??_C@_1KI@INECPEDO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
CONST	SEGMENT
??_C@_1KI@INECPEDO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'i', 00H, 'n', 00H, 't', 00H, ',', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, '_', 00H, 'V', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n', 00H
	DB	's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 68   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@HHPBHABH@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 69   : 		{	// construct with pointer _Ptr
; 70   : 		_SCL_SECURE_VALIDATE(_Pvector == NULL || (((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast));

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN2@Vector_con@2
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@2
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jbe	SHORT $LN2@Vector_con@2
$LN1@Vector_con@2:
	xor	eax, eax
	jne	SHORT $LN5@Vector_con@2
	mov	esi, esp
	push	OFFSET ??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@
	push	0
	push	70					; 00000046H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@Vector_con@2
	int	3
$LN5@Vector_con@2:
	mov	esi, esp
	push	0
	push	70					; 00000046H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1KI@INECPEDO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Vector_con@2:

; 71   : 		this->_Adopt(_Pvector);

	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z ; std::_Iterator_base::_Adopt

; 72   : 		_Myptr = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 73   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Ranit@HHPBHABH@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >
PUBLIC	?_Compat@?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::_Compat
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??8?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::_Compat

; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+8]
	sete	al
	mov	ecx, eax
	call	@_RTC_Check_4_to_1@4

; 212  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator==
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base>::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0?$_Ranit@MHPBMABM@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_Ranit@MHPBMABM@std@@QAE@XZ PROC			; std::_Ranit<float,int,float const *,float const &>::_Ranit<float,int,float const *,float const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@MHPBMABM@std@@QAE@XZ ENDP			; std::_Ranit<float,int,float const *,float const &>::_Ranit<float,int,float const *,float const &>
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base>::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0?$_Ranit@HHPBHABH@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_Ranit@HHPBHABH@std@@QAE@XZ PROC			; std::_Ranit<int,int,int const *,int const &>::_Ranit<int,int,int const *,int const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@HHPBHABH@std@@QAE@XZ ENDP			; std::_Ranit<int,int,int const *,int const &>::_Ranit<int,int,int const *,int const &>
_TEXT	ENDS
PUBLIC	??0_Iterator_base@std@@QAE@XZ			; std::_Iterator_base::_Iterator_base
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base>::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::_Iterator_base
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@MHPBMABMV_Iterator_base@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base>::_Iterator_with_base<std::random_access_iterator_tag,float,int,float const *,float const &,std::_Iterator_base>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Iterator_base@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Iterator_base@std@@QAE@XZ PROC			; std::_Iterator_base::_Iterator_base, COMDAT
; _this$ = ecx

; 138  : 		{	// construct orphaned iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 139  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base@std@@QAE@XZ ENDP			; std::_Iterator_base::_Iterator_base
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base>::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::_Iterator_base
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base>::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base>
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z$0
__ehfuncinfo$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z
_TEXT	SEGMENT
$T102481 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z PROC ; std::vector<int,std::allocator<int> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T102481[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >
	mov	edx, DWORD PTR $T102481[ebp]
	or	edx, 1
	mov	DWORD PTR $T102481[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z$0:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z$1:
	mov	eax, DWORD PTR $T102481[ebp]
	and	eax, 1
	je	$LN5@Make_iter
	and	DWORD PTR $T102481[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
$LN5@Make_iter:
	ret	0
__ehhandler$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z ENDP ; std::vector<int,std::allocator<int> >::_Make_iter
PUBLIC	?max_size@?$allocator@H@std@@QBEIXZ		; std::allocator<int>::max_size
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?max_size@?$allocator@H@std@@QBEIXZ	; std::allocator<int>::max_size

; 732  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::_Unchecked_move_backward<int *,int *>
PUBLIC	??$fill@PAHH@std@@YAXPAH0ABH@Z			; std::fill<int *,int>
PUBLIC	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
PUBLIC	??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@ ; `string'
EXTRN	__CxxThrowException@8:PROC
;	COMDAT ??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@
CONST	SEGMENT
??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 's', 00H, 'e', 00H, 'r', 00H, 't', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, 's'
	DB	00H, 'i', 00H, 'd', 00H, 'e', 00H, ' ', 00H, 'r', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$2
__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$0
__ehfuncinfo$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$5
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$6
__unwindtable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$4
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
_TEXT	SEGMENT
tv134 = -308						; size = 4
__Oldend$95307 = -108					; size = 4
__Tmp$95306 = -96					; size = 4
__Tmp$95296 = -84					; size = 4
__Ncopied$95283 = -72					; size = 4
__Whereoff$95282 = -60					; size = 4
__Newvec$95281 = -48					; size = 4
__Capacity$ = -36					; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 12
__Count$ = 20						; size = 4
__Val$ = 24						; size = 4
?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z PROC ; std::vector<int,std::allocator<int> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)

	mov	eax, DWORD PTR __Where$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN15@Insert_n
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+8]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN15@Insert_n
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Where$[ebp+8]
	jae	SHORT $LN16@Insert_n
$LN15@Insert_n:

; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");

	mov	esi, esp
	push	1158					; 00000486H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@Insert_n:

; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n
	jmp	$LN13@Insert_n
$LN14@Insert_n:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
	sub	eax, esi
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN12@Insert_n

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
	jmp	$LN13@Insert_n
$LN12@Insert_n:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	esi, DWORD PTR __Capacity$[ebp]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
	sub	eax, esi
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN19@Insert_n
	mov	DWORD PTR tv134[ebp], 0
	jmp	SHORT $LN20@Insert_n
$LN19@Insert_n:
	mov	eax, DWORD PTR __Capacity$[ebp]
	shr	eax, 1
	add	eax, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv134[ebp], eax
$LN20@Insert_n:
	mov	ecx, DWORD PTR tv134[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN9@Insert_n

; 1172 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN9@Insert_n:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@H@std@@QAEPAHI@Z	; std::allocator<int>::allocate
	mov	DWORD PTR __Newvec$95281[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+8]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 2
	mov	DWORD PTR __Whereoff$95282[ebp], ecx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$95283[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Whereoff$95282[ebp]
	mov	eax, DWORD PTR __Newvec$95281[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$95283[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$95283[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	eax, DWORD PTR __Newvec$95281[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$95283[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$95283[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR __Whereoff$95282[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$95281[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
	jmp	SHORT $LN21@Insert_n
__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$95283[ebp], 1
	jle	SHORT $LN7@Insert_n

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$95282[ebp]
	mov	ecx, DWORD PTR __Newvec$95281[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR __Newvec$95281[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
$LN7@Insert_n:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$95283[ebp], 0
	jle	SHORT $LN6@Insert_n

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	eax, DWORD PTR __Whereoff$95282[ebp]
	mov	ecx, DWORD PTR __Newvec$95281[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR __Whereoff$95282[ebp]
	mov	eax, DWORD PTR __Newvec$95281[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
$LN6@Insert_n:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$95281[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@H@std@@QAEXPAHI@Z ; std::allocator<int>::deallocate

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, __tryend$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$1
	ret	0
$LN21@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
__tryend$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$1:

; 1193 : 
; 1194 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN5@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@H@std@@QAEXPAHI@Z ; std::allocator<int>::deallocate
$LN5@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base_secure@std@@QBEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$95281[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$95281[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$95281[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	$LN13@Insert_n
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR __Where$[ebp+8]
	sar	ecx, 2
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$95296[ebp], ecx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+8]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 3

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$95296[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, DWORD PTR __Where$[ebp+8]
	sar	edx, 2
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill
	jmp	SHORT $LN23@Insert_n
__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+8]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, __tryend$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$3
	ret	0
$LN23@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
__tryend$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range

; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	eax, DWORD PTR __Tmp$95296[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, ecx
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	call	??$fill@PAHH@std@@YAXPAH0ABH@Z		; std::fill<int *,int>
	add	esp, 12					; 0000000cH

; 1232 : 			}
; 1233 : 		else

	jmp	SHORT $LN13@Insert_n
$LN3@Insert_n:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$95306[ebp], ecx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR __Oldend$95307[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Oldend$95307[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Oldend$95307[ebp]
	sub	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range

; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$95307[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Oldend$95307[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+8]
	push	eax
	call	??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::_Unchecked_move_backward<int *,int *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$95306[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+8]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	call	??$fill@PAHH@std@@YAXPAH0ABH@Z		; std::fill<int *,int>
	add	esp, 12					; 0000000cH
$LN13@Insert_n:

; 1249 : 			}
; 1250 : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
$LN18@Insert_n:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@Insert_n
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN36@Insert_n:
	DD	2
	DD	$LN35@Insert_n
$LN35@Insert_n:
	DD	-84					; ffffffacH
	DD	4
	DD	$LN32@Insert_n
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN33@Insert_n
$LN33@Insert_n:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN32@Insert_n:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$4:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-312]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ENDP ; std::vector<int,std::allocator<int> >::_Insert_n
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z44
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z44
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z44
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z44 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	02cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z44
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z44 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	02cH
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z44
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z44
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T102522 = -292						; size = 44
$T102523 = -240						; size = 32
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	mov	esi, esp
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T102523[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T102523[ebp]
	push	eax
	lea	ecx, DWORD PTR $T102522[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T102522[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR $T102523[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$0:
	mov	esi, esp
	lea	ecx, DWORD PTR $T102523[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-300]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R2exception@std@@8
; File c:\program files\microsoft visual studio 9.0\vc\include\stdexcept
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	esi, esp
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 27   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	esi, esp
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 36   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
_TEXT	ENDS
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@

; 31   : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	esi, esp
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 110  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1length_error@std@@UAE@XZ		; std::length_error::~length_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
EXTRN	__imp_??0_Container_base_secure@std@@QAE@XZ:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_empty@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
??0?$_Container_base_aux_alloc_empty@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z PROC ; std::_Container_base_aux_alloc_empty<std::allocator<int> >::_Container_base_aux_alloc_empty<std::allocator<int> >, COMDAT
; _this$ = ecx

; 618  : 	explicit _Container_base_aux_alloc_empty(_Alloc) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_Container_base_secure@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Container_base_aux_alloc_empty@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<int> >::_Container_base_aux_alloc_empty<std::allocator<int> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@H@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@H@std@@QAE@ABV01@@Z PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@H@std@@QAE@ABV01@@Z ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
PUBLIC	??$_Allocate@H@std@@YAPAHIPAH@Z			; std::_Allocate<int>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?allocate@?$allocator@H@std@@QAEPAHI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@H@std@@QAEPAHI@Z PROC		; std::allocator<int>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@H@std@@YAPAHIPAH@Z		; std::_Allocate<int>
	add	esp, 8

; 146  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@H@std@@QAEPAHI@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z$0
__ehfuncinfo$?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z
_TEXT	SEGMENT
$T102575 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z PROC ; std::vector<float,std::allocator<float> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T102575[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z ; std::_Vector_iterator<float,std::allocator<float> >::_Vector_iterator<float,std::allocator<float> >
	mov	edx, DWORD PTR $T102575[ebp]
	or	edx, 1
	mov	DWORD PTR $T102575[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z$0:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
__unwindfunclet$?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z$1:
	mov	eax, DWORD PTR $T102575[ebp]
	and	eax, 1
	je	$LN5@Make_iter@2
	and	DWORD PTR $T102575[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
$LN5@Make_iter@2:
	ret	0
__ehhandler$?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Make_iter@?$vector@MV?$allocator@M@std@@@std@@QBE?AV?$_Vector_iterator@MV?$allocator@M@std@@@2@V?$_Vector_const_iterator@MV?$allocator@M@std@@@2@@Z ENDP ; std::vector<float,std::allocator<float> >::_Make_iter
PUBLIC	?max_size@?$allocator@M@std@@QBEIXZ		; std::allocator<float>::max_size
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ PROC ; std::vector<float,std::allocator<float> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?max_size@?$allocator@M@std@@QBEIXZ	; std::allocator<float>::max_size

; 732  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ENDP ; std::vector<float,std::allocator<float> >::max_size
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAMPAM@stdext@@YAPAMPAM00@Z ; stdext::_Unchecked_move_backward<float *,float *>
PUBLIC	??$fill@PAMM@std@@YAXPAM0ABM@Z			; std::fill<float *,float>
PUBLIC	??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ; std::vector<float,std::allocator<float> >::_Umove<float *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z$2
__catchsym$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z$0
__ehfuncinfo$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z$5
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z$6
__unwindtable$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z$4
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z
_TEXT	SEGMENT
tv134 = -308						; size = 4
__Oldend$95379 = -108					; size = 4
__Tmp$95378 = -96					; size = 4
__Tmp$95368 = -84					; size = 4
__Ncopied$95355 = -72					; size = 4
__Whereoff$95354 = -60					; size = 4
__Newvec$95353 = -48					; size = 4
__Capacity$ = -36					; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 12
__Count$ = 20						; size = 4
__Val$ = 24						; size = 4
?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z PROC ; std::vector<float,std::allocator<float> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)

	mov	eax, DWORD PTR __Where$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN15@Insert_n@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+8]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN15@Insert_n@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Where$[ebp+8]
	jae	SHORT $LN16@Insert_n@2
$LN15@Insert_n@2:

; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");

	mov	esi, esp
	push	1158					; 00000486H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@Insert_n@2:

; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@2
	jmp	$LN1@Insert_n@2
$LN14@Insert_n@2:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::max_size
	sub	eax, esi
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN12@Insert_n@2

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ ; std::vector<float,std::allocator<float> >::_Xlen
	jmp	$LN1@Insert_n@2
$LN12@Insert_n@2:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@2

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	esi, DWORD PTR __Capacity$[ebp]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::max_size
	sub	eax, esi
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN19@Insert_n@2
	mov	DWORD PTR tv134[ebp], 0
	jmp	SHORT $LN20@Insert_n@2
$LN19@Insert_n@2:
	mov	eax, DWORD PTR __Capacity$[ebp]
	shr	eax, 1
	add	eax, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv134[ebp], eax
$LN20@Insert_n@2:
	mov	ecx, DWORD PTR tv134[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN9@Insert_n@2

; 1172 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN9@Insert_n@2:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@M@std@@QAEPAMI@Z	; std::allocator<float>::allocate
	mov	DWORD PTR __Newvec$95353[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+8]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 2
	mov	DWORD PTR __Whereoff$95354[ebp], ecx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$95355[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Whereoff$95354[ebp]
	mov	eax, DWORD PTR __Newvec$95353[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAMIABM@Z ; std::vector<float,std::allocator<float> >::_Ufill

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$95355[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$95355[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	eax, DWORD PTR __Newvec$95353[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ; std::vector<float,std::allocator<float> >::_Umove<float *>

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$95355[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$95355[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR __Whereoff$95354[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$95353[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ; std::vector<float,std::allocator<float> >::_Umove<float *>
	jmp	SHORT $LN21@Insert_n@2
__catch$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$95355[ebp], 1
	jle	SHORT $LN7@Insert_n@2

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$95354[ebp]
	mov	ecx, DWORD PTR __Newvec$95353[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR __Newvec$95353[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Destroy
$LN7@Insert_n@2:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$95355[ebp], 0
	jle	SHORT $LN6@Insert_n@2

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	eax, DWORD PTR __Whereoff$95354[ebp]
	mov	ecx, DWORD PTR __Newvec$95353[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR __Whereoff$95354[ebp]
	mov	eax, DWORD PTR __Newvec$95353[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Destroy
$LN6@Insert_n@2:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$95353[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@M@std@@QAEXPAMI@Z ; std::allocator<float>::deallocate

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN27@Insert_n@2
	ret	0
$LN21@Insert_n@2:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN27@Insert_n@2:

; 1193 : 
; 1194 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN5@Insert_n@2

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@M@std@@QAEXPAMI@Z ; std::allocator<float>::deallocate
$LN5@Insert_n@2:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base_secure@std@@QBEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$95353[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$95353[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$95353[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	$LN1@Insert_n@2
$LN10@Insert_n@2:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR __Where$[ebp+8]
	sar	ecx, 2
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@2

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR __Tmp$95368[ebp]

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+8]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ; std::vector<float,std::allocator<float> >::_Umove<float *>

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 3

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$95368[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, DWORD PTR __Where$[ebp+8]
	sar	edx, 2
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAMIABM@Z ; std::vector<float,std::allocator<float> >::_Ufill
	jmp	SHORT $LN23@Insert_n@2
__catch$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+8]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN29@Insert_n@2
	ret	0
$LN23@Insert_n@2:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN29@Insert_n@2:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@IBEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Orphan_range

; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	eax, DWORD PTR __Tmp$95368[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, ecx
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	call	??$fill@PAMM@std@@YAXPAM0ABM@Z		; std::fill<float *,float>
	add	esp, 12					; 0000000cH

; 1232 : 			}
; 1233 : 		else

	jmp	SHORT $LN1@Insert_n@2
$LN3@Insert_n@2:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR __Tmp$95378[ebp]

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR __Oldend$95379[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Oldend$95379[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Oldend$95379[ebp]
	sub	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ; std::vector<float,std::allocator<float> >::_Umove<float *>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@IBEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Orphan_range

; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$95379[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Oldend$95379[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+8]
	push	eax
	call	??$_Unchecked_move_backward@PAMPAM@stdext@@YAPAMPAM00@Z ; stdext::_Unchecked_move_backward<float *,float *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$95378[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+8]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	call	??$fill@PAMM@std@@YAXPAM0ABM@Z		; std::fill<float *,float>
	add	esp, 12					; 0000000cH
$LN1@Insert_n@2:

; 1249 : 			}
; 1250 : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
$LN17@Insert_n@2:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@Insert_n@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN36@Insert_n@2:
	DD	2
	DD	$LN35@Insert_n@2
$LN35@Insert_n@2:
	DD	-84					; ffffffacH
	DD	4
	DD	$LN32@Insert_n@2
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN33@Insert_n@2
$LN33@Insert_n@2:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN32@Insert_n@2:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z$4:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
__ehhandler$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-312]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@MV?$allocator@M@std@@@std@@IAEXV?$_Vector_const_iterator@MV?$allocator@M@std@@@2@IABM@Z ENDP ; std::vector<float,std::allocator<float> >::_Insert_n
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T102615 = -292						; size = 44
$T102616 = -240						; size = 32
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ PROC	; std::vector<float,std::allocator<float> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	mov	esi, esp
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T102616[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T102616[ebp]
	push	eax
	lea	ecx, DWORD PTR $T102615[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T102615[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR $T102616[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Xlen@2:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ$0:
	mov	esi, esp
	lea	ecx, DWORD PTR $T102616[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-300]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@MV?$allocator@M@std@@@std@@KAXXZ ENDP	; std::vector<float,std::allocator<float> >::_Xlen
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_empty@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
??0?$_Container_base_aux_alloc_empty@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z PROC ; std::_Container_base_aux_alloc_empty<std::allocator<float> >::_Container_base_aux_alloc_empty<std::allocator<float> >, COMDAT
; _this$ = ecx

; 618  : 	explicit _Container_base_aux_alloc_empty(_Alloc) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_Container_base_secure@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Container_base_aux_alloc_empty@V?$allocator@M@std@@@std@@IAE@V?$allocator@M@1@@Z ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<float> >::_Container_base_aux_alloc_empty<std::allocator<float> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@M@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@M@std@@QAE@ABV01@@Z PROC			; std::allocator<float>::allocator<float>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@M@std@@QAE@ABV01@@Z ENDP			; std::allocator<float>::allocator<float>
_TEXT	ENDS
PUBLIC	??$_Allocate@M@std@@YAPAMIPAM@Z			; std::_Allocate<float>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?allocate@?$allocator@M@std@@QAEPAMI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@M@std@@QAEPAMI@Z PROC		; std::allocator<float>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@M@std@@YAPAMIPAM@Z		; std::_Allocate<float>
	add	esp, 8

; 146  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@M@std@@QAEPAMI@Z ENDP		; std::allocator<float>::allocate
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??G?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<float,std::allocator<float> >::operator-, COMDAT
; _this$ = ecx

; 186  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::_Compat

; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+8]
	sar	eax, 2

; 195  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<float,std::allocator<float> >::operator-
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??M?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??M?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<float,std::allocator<float> >::operator<, COMDAT
; _this$ = ecx

; 220  : 		{	// test if this < _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 221  : 
; 222  :  #if _HAS_ITERATOR_DEBUGGING
; 223  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::_Compat

; 224  :  #else
; 225  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 226  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 227  : 
; 228  : 		return (_Myptr < _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	sbb	ecx, ecx
	neg	ecx
	call	@_RTC_Check_4_to_1@4

; 229  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??M?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<float,std::allocator<float> >::operator<
_TEXT	ENDS
PUBLIC	??_C@_1JC@FIHDFEOI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@ ; `string'
PUBLIC	??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@ ; `string'
PUBLIC	??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1JC@FIHDFEOI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@
CONST	SEGMENT
??_C@_1JC@FIHDFEOI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 't', 00H
	DB	',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '<', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'a', 00H
	DB	't', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@
CONST	SEGMENT
??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@ DB '('
	DB	00H, '"', 00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H
	DB	'a', 00H, 'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+'
	DB	00H, ' ', 00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H
	DB	'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H
	DB	'A', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, '"', 00H, ',', 00H, ' ', 00H, '0', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<float,std::allocator<float> >::_Compat, COMDAT
; _this$ = ecx

; 248  : 		{	// test for compatible iterator pair

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 249  : 		if (this->_Mycont == 0 || this->_Mycont != _Right._Mycont)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Compat
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN3@Compat
$LN1@Compat:

; 250  : 			{
; 251  : 			_DEBUG_ERROR("vector iterators incompatible");

	mov	esi, esp
	push	251					; 000000fbH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 252  : 			_SCL_SECURE_INVALID_ARGUMENT;

	xor	eax, eax
	jne	SHORT $LN5@Compat
	mov	esi, esp
	push	OFFSET ??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@
	push	0
	push	252					; 000000fcH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@Compat
	int	3
$LN5@Compat:
	mov	esi, esp
	push	0
	push	252					; 000000fcH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1JC@FIHDFEOI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Compat:

; 253  : 			}
; 254  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<float,std::allocator<float> >::_Compat
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??G?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator-, COMDAT
; _this$ = ecx

; 186  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::_Compat

; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+8]
	sar	eax, 2

; 195  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator-
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??M?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??M?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator<, COMDAT
; _this$ = ecx

; 220  : 		{	// test if this < _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 221  : 
; 222  :  #if _HAS_ITERATOR_DEBUGGING
; 223  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::_Compat

; 224  :  #else
; 225  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 226  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 227  : 
; 228  : 		return (_Myptr < _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	sbb	ecx, ecx
	neg	ecx
	call	@_RTC_Check_4_to_1@4

; 229  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??M?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator<
_TEXT	ENDS
PUBLIC	??_C@_1IK@PBGOHPOE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ ; `string'
;	COMDAT ??_C@_1IK@PBGOHPOE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
CONST	SEGMENT
??_C@_1IK@PBGOHPOE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'i', 00H, 'n', 00H, 't', 00H, ',', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, '_', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'p'
	DB	00H, 'a', 00H, 't', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::_Compat, COMDAT
; _this$ = ecx

; 248  : 		{	// test for compatible iterator pair

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 249  : 		if (this->_Mycont == 0 || this->_Mycont != _Right._Mycont)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Compat@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN3@Compat@2
$LN1@Compat@2:

; 250  : 			{
; 251  : 			_DEBUG_ERROR("vector iterators incompatible");

	mov	esi, esp
	push	251					; 000000fbH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 252  : 			_SCL_SECURE_INVALID_ARGUMENT;

	xor	eax, eax
	jne	SHORT $LN5@Compat@2
	mov	esi, esp
	push	OFFSET ??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@
	push	0
	push	252					; 000000fcH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@Compat@2
	int	3
$LN5@Compat@2:
	mov	esi, esp
	push	0
	push	252					; 000000fcH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1IK@PBGOHPOE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Compat@2:

; 253  : 			}
; 254  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::_Compat
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z PROC ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 321  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >

; 322  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_secure@1@@Z ENDP ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<int,std::allocator<int> >::operator+=
PUBLIC	??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z$0
__ehfuncinfo$??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
$T102652 = -244						; size = 4
__Tmp$ = -40						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<int,std::allocator<int> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T102652[ebp], 0

; 381  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<int,std::allocator<int> >::operator+=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T102652[ebp]
	or	ecx, 1
	mov	DWORD PTR $T102652[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@operator@10
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN9@operator@10:
	DD	1
	DD	$LN8@operator@10
$LN8@operator@10:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN6@operator@10
$LN6@operator@10:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z$0:
	lea	ecx, DWORD PTR __Tmp$[ebp]
	jmp	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z$1:
	mov	eax, DWORD PTR $T102652[ebp]
	and	eax, 1
	je	$LN5@operator@10
	and	DWORD PTR $T102652[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@XZ
$LN5@operator@10:
	ret	0
__ehhandler$??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-252]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<int,std::allocator<int> >::operator+
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z PROC ; std::_Vector_iterator<float,std::allocator<float> >::_Vector_iterator<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 321  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::_Vector_const_iterator<float,std::allocator<float> >

; 322  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@PAMPBV_Container_base_secure@1@@Z ENDP ; std::_Vector_iterator<float,std::allocator<float> >::_Vector_iterator<float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<float,std::allocator<float> >::operator+=
PUBLIC	??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<float,std::allocator<float> >::_Vector_iterator<float,std::allocator<float> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z$0
__ehfuncinfo$??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
$T102670 = -244						; size = 4
__Tmp$ = -40						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<float,std::allocator<float> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T102670[ebp], 0

; 381  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<float,std::allocator<float> >::operator+=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T102670[ebp]
	or	ecx, 1
	mov	DWORD PTR $T102670[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@operator@11
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN9@operator@11:
	DD	1
	DD	$LN8@operator@11
$LN8@operator@11:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN6@operator@11
$LN6@operator@11:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z$0:
	lea	ecx, DWORD PTR __Tmp$[ebp]
	jmp	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
__unwindfunclet$??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z$1:
	mov	eax, DWORD PTR $T102670[ebp]
	and	eax, 1
	je	$LN5@operator@11
	and	DWORD PTR $T102670[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@XZ
$LN5@operator@11:
	ret	0
__ehhandler$??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-252]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??H?$_Vector_iterator@MV?$allocator@M@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<float,std::allocator<float> >::operator+
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_iterator<float,std::allocator<float> >::_Vector_iterator<float,std::allocator<float> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_iterator<float,std::allocator<float> >::_Vector_iterator<float,std::allocator<float> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@H@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -220						; size = 4
__Count$ = -20						; size = 4
_this$ = -8						; size = 4
?max_size@?$allocator@H@std@@QBEIXZ PROC		; std::allocator<int>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@H@std@@QBEIXZ ENDP		; std::allocator<int>::max_size
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@M@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -220						; size = 4
__Count$ = -20						; size = 4
_this$ = -8						; size = 4
?max_size@?$allocator@M@std@@QBEIXZ PROC		; std::allocator<float>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@2
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@2
$LN3@max_size@2:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@M@std@@QBEIXZ ENDP		; std::allocator<float>::max_size
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator+=
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??Y?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<int,std::allocator<int> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator+=

; 376  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 377  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<int,std::allocator<int> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::operator+=
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??Y?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<float,std::allocator<float> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<float,std::allocator<float> >::operator+=

; 376  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 377  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<float,std::allocator<float> >::operator+=
_TEXT	ENDS
PUBLIC	??_C@_1BAC@KBDNDJPK@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$CL?$AA?5?$AA_?$AAO?$AAf?$AAf?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt@ ; `string'
PUBLIC	??_C@_1JK@KHCKPCFI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@ ; `string'
;	COMDAT ??_C@_1BAC@KBDNDJPK@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$CL?$AA?5?$AA_?$AAO?$AAf?$AAf?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt@
CONST	SEGMENT
??_C@_1BAC@KBDNDJPK@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$CL?$AA?5?$AA_?$AAO?$AAf?$AAf?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt@ DB '('
	DB	00H, '"', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'p', 00H, 't', 00H
	DB	'r', 00H, ' ', 00H, '+', 00H, ' ', 00H, '_', 00H, 'O', 00H, 'f'
	DB	00H, 'f', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '(', 00H
	DB	'(', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, ' ', 00H, '*', 00H, ')', 00H, '(', 00H, 't', 00H, 'h', 00H
	DB	'i', 00H, 's', 00H, '-', 00H, '>', 00H, '_', 00H, 'G', 00H, 'e'
	DB	00H, 't', 00H, 'm', 00H, 'y', 00H, 'c', 00H, 'o', 00H, 'n', 00H
	DB	't', 00H, '(', 00H, ')', 00H, ')', 00H, ')', 00H, '-', 00H, '>'
	DB	00H, '_', 00H, 'M', 00H, 'y', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	't', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '_', 00H, 'M'
	DB	00H, 'y', 00H, 'p', 00H, 't', 00H, 'r', 00H, ' ', 00H, '+', 00H
	DB	' ', 00H, '_', 00H, 'O', 00H, 'f', 00H, 'f', 00H, ' ', 00H, '>'
	DB	00H, '=', 00H, ' ', 00H, '(', 00H, '(', 00H, '_', 00H, 'M', 00H
	DB	'y', 00H, 'v', 00H, 'e', 00H, 'c', 00H, ' ', 00H, '*', 00H, ')'
	DB	00H, '(', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H
	DB	'>', 00H, '_', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'm', 00H, 'y'
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, '(', 00H, ')', 00H
	DB	')', 00H, ')', 00H, '-', 00H, '>', 00H, '_', 00H, 'M', 00H, 'y'
	DB	00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't', 00H, '"', 00H
	DB	',', 00H, ' ', 00H, '0', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JK@KHCKPCFI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@
CONST	SEGMENT
??_C@_1JK@KHCKPCFI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 't', 00H
	DB	',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '<', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'a', 00H
	DB	't', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o'
	DB	00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, '+', 00H, '=', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<float,std::allocator<float> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base@std@@QBE_NXZ ; std::_Iterator_base::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@12
	xor	eax, eax
	jne	SHORT $LN6@operator@12
	mov	esi, esp
	push	OFFSET ??_C@_1DM@LBMEEJPP@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAH?$AAa?$AAs?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
	push	0
	push	160					; 000000a0H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN6@operator@12
	int	3
$LN6@operator@12:
	mov	esi, esp
	push	0
	push	160					; 000000a0H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1JK@KHCKPCFI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@operator@12:

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base@std@@QBEPBV_Container_base_secure@2@XZ ; std::_Iterator_base::_Getmycont
	cmp	esi, DWORD PTR [eax+12]
	ja	SHORT $LN1@operator@12
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base@std@@QBEPBV_Container_base_secure@2@XZ ; std::_Iterator_base::_Getmycont
	cmp	esi, DWORD PTR [eax+8]
	jae	SHORT $LN2@operator@12
$LN1@operator@12:
	xor	eax, eax
	jne	SHORT $LN7@operator@12
	mov	esi, esp
	push	OFFSET ??_C@_1BAC@KBDNDJPK@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$CL?$AA?5?$AA_?$AAO?$AAf?$AAf?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt@
	push	0
	push	163					; 000000a3H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN7@operator@12
	int	3
$LN7@operator@12:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	mov	esi, esp
	push	0
	push	163					; 000000a3H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1JK@KHCKPCFI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAf?$AAl?$AAo?$AAa@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@12:

; 164  : 		_Myptr += _Off;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@MV?$allocator@M@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<float,std::allocator<float> >::operator+=
_TEXT	ENDS
PUBLIC	??_C@_1JC@PPEAGGND@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ ; `string'
;	COMDAT ??_C@_1JC@PPEAGGND@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
CONST	SEGMENT
??_C@_1JC@PPEAGGND@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'i', 00H, 'n', 00H, 't', 00H, ',', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '+', 00H, '=', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base@std@@QBE_NXZ ; std::_Iterator_base::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@13
	xor	eax, eax
	jne	SHORT $LN6@operator@13
	mov	esi, esp
	push	OFFSET ??_C@_1DM@LBMEEJPP@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAH?$AAa?$AAs?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
	push	0
	push	160					; 000000a0H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN6@operator@13
	int	3
$LN6@operator@13:
	mov	esi, esp
	push	0
	push	160					; 000000a0H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1JC@PPEAGGND@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@operator@13:

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base@std@@QBEPBV_Container_base_secure@2@XZ ; std::_Iterator_base::_Getmycont
	cmp	esi, DWORD PTR [eax+12]
	ja	SHORT $LN1@operator@13
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base@std@@QBEPBV_Container_base_secure@2@XZ ; std::_Iterator_base::_Getmycont
	cmp	esi, DWORD PTR [eax+8]
	jae	SHORT $LN2@operator@13
$LN1@operator@13:
	xor	eax, eax
	jne	SHORT $LN7@operator@13
	mov	esi, esp
	push	OFFSET ??_C@_1BAC@KBDNDJPK@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$CL?$AA?5?$AA_?$AAO?$AAf?$AAf?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt@
	push	0
	push	163					; 000000a3H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN7@operator@13
	int	3
$LN7@operator@13:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	mov	esi, esp
	push	0
	push	163					; 000000a3H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1JC@PPEAGGND@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@13:

; 164  : 		_Myptr += _Off;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator+=
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<int *,int *,std::random_access_iterator_tag>
PUBLIC	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z		; std::_Checked_base<int *>
PUBLIC	??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z ; std::_Iter_random<int *,int *>
PUBLIC	??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ; std::_Ptr_cat<int *,int *>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z
_TEXT	SEGMENT
$T102712 = -221						; size = 1
$T102713 = -209						; size = 1
$T102714 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z PROC	; stdext::unchecked_copy<int *,int *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T102712[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ; std::_Ptr_cat<int *,int *>
	add	esp, 8
	mov	BYTE PTR $T102713[ebp], al
	movzx	eax, BYTE PTR $T102712[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T102713[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T102714[ebp]
	push	ecx
	call	??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z ; std::_Iter_random<int *,int *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<int *,int *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 3607 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z ENDP	; stdext::unchecked_copy<int *,int *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Ucopy<int *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Ucopy<int *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<float *,float *,std::random_access_iterator_tag>
PUBLIC	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z		; std::_Checked_base<float *>
PUBLIC	??$_Iter_random@PAMPAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM0@Z ; std::_Iter_random<float *,float *>
PUBLIC	??$_Ptr_cat@PAMPAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAM0@Z ; std::_Ptr_cat<float *,float *>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAMPAM@stdext@@YAPAMPAM00@Z
_TEXT	SEGMENT
$T102719 = -221						; size = 1
$T102720 = -209						; size = 1
$T102721 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAMPAM@stdext@@YAPAMPAM00@Z PROC	; stdext::unchecked_copy<float *,float *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T102719[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAMPAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAM0@Z ; std::_Ptr_cat<float *,float *>
	add	esp, 8
	mov	BYTE PTR $T102720[ebp], al
	movzx	eax, BYTE PTR $T102719[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T102720[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T102721[ebp]
	push	ecx
	call	??$_Iter_random@PAMPAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM0@Z ; std::_Iter_random<float *,float *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<float *,float *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 3607 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAMPAM@stdext@@YAPAMPAM00@Z ENDP	; stdext::unchecked_copy<float *,float *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z ; stdext::unchecked_uninitialized_copy<float *,float *,std::allocator<float> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Ucopy@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z PROC ; std::vector<float,std::allocator<float> >::_Ucopy<float *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z ; stdext::unchecked_uninitialized_copy<float *,float *,std::allocator<float> >
	add	esp, 16					; 00000010H

; 1142 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ENDP ; std::vector<float,std::allocator<float> >::_Ucopy<float *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
$T102726 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ; std::_Ptr_cat<int *,int *>
	add	esp, 8
	mov	BYTE PTR $T102726[ebp], al
	movzx	edx, BYTE PTR $T102726[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<int> >
	add	esp, 16					; 00000010H

; 226  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAHIHV?$allocator@H@std@@@std@@YAXPAHIABHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<int *,unsigned int,int,std::allocator<int> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAHIHV?$allocator@H@std@@@stdext@@YAXPAHIABHAAV?$allocator@H@std@@@Z
_TEXT	SEGMENT
$T102729 = -209						; size = 1
$T102730 = -197						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAHIHV?$allocator@H@std@@@stdext@@YAXPAHIABHAAV?$allocator@H@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<int *,unsigned int,int,std::allocator<int> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T102729[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ; std::_Ptr_cat<int *,int *>
	add	esp, 8
	mov	BYTE PTR $T102730[ebp], al
	movzx	eax, BYTE PTR $T102729[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T102730[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAHIHV?$allocator@H@std@@@std@@YAXPAHIABHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<int *,unsigned int,int,std::allocator<int> >
	add	esp, 24					; 00000018H

; 943  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAHIHV?$allocator@H@std@@@stdext@@YAXPAHIABHAAV?$allocator@H@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<int *,unsigned int,int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<float> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@@Z
_TEXT	SEGMENT
$T102733 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@@Z PROC ; std::_Destroy_range<std::allocator<float> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAMPAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAM0@Z ; std::_Ptr_cat<float *,float *>
	add	esp, 8
	mov	BYTE PTR $T102733[ebp], al
	movzx	edx, BYTE PTR $T102733[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<float> >
	add	esp, 16					; 00000010H

; 226  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@@Z ENDP ; std::_Destroy_range<std::allocator<float> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAMIMV?$allocator@M@std@@@std@@YAXPAMIABMAAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<float *,unsigned int,float,std::allocator<float> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAMIMV?$allocator@M@std@@@stdext@@YAXPAMIABMAAV?$allocator@M@std@@@Z
_TEXT	SEGMENT
$T102736 = -209						; size = 1
$T102737 = -197						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAMIMV?$allocator@M@std@@@stdext@@YAXPAMIABMAAV?$allocator@M@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<float *,unsigned int,float,std::allocator<float> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T102736[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAMPAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAM0@Z ; std::_Ptr_cat<float *,float *>
	add	esp, 8
	mov	BYTE PTR $T102737[ebp], al
	movzx	eax, BYTE PTR $T102736[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T102737[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAMIMV?$allocator@M@std@@@std@@YAXPAMIABMAAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<float *,unsigned int,float,std::allocator<float> >
	add	esp, 24					; 00000018H

; 943  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAMIMV?$allocator@M@std@@@stdext@@YAXPAMIABMAAV?$allocator@M@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<float *,unsigned int,float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::_Unchecked_uninitialized_move<int *,int *,std::allocator<int> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Umove<int *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::_Unchecked_uninitialized_move<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H

; 1149 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Umove<int *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAHH@std@@YAXPAH0ABH@Z			; std::_Fill<int *,int>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAHH@std@@YAXPAH0ABH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAHH@std@@YAXPAH0ABH@Z PROC			; std::fill<int *,int>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAHH@std@@YAXPAH0ABH@Z		; std::_Fill<int *,int>
	add	esp, 12					; 0000000cH

; 3188 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$fill@PAHH@std@@YAXPAH0ABH@Z ENDP			; std::fill<int *,int>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<int *,int *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z ; std::_Move_cat<int *>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z
_TEXT	SEGMENT
$T102744 = -221						; size = 1
$T102745 = -209						; size = 1
$T102746 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z PROC ; stdext::_Unchecked_move_backward<int *,int *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T102744[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z ; std::_Move_cat<int *>
	add	esp, 4
	mov	BYTE PTR $T102745[ebp], al
	movzx	edx, BYTE PTR $T102744[ebp]
	push	edx
	movzx	eax, BYTE PTR $T102745[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T102746[ebp]
	push	eax
	call	??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z ; std::_Iter_random<int *,int *>
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<int *,int *,std::random_access_iterator_tag,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 3697 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ENDP ; stdext::_Unchecked_move_backward<int *,int *>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
;	COMDAT ??_R0?AVbad_alloc@std@@@8
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Allocate@H@std@@YAPAHIPAH@Z
_TEXT	SEGMENT
$T102749 = -208						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@H@std@@YAPAHIPAH@Z PROC			; std::_Allocate<int>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T102749[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T102749[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@H@std@@YAPAHIPAH@Z ENDP			; std::_Allocate<int>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
; File c:\program files\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ		; std::bad_alloc::~bad_alloc
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z ; stdext::_Unchecked_uninitialized_move<float *,float *,std::allocator<float> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z PROC ; std::vector<float,std::allocator<float> >::_Umove<float *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z ; stdext::_Unchecked_uninitialized_move<float *,float *,std::allocator<float> >
	add	esp, 16					; 00000010H

; 1149 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAM@?$vector@MV?$allocator@M@std@@@std@@IAEPAMPAM00@Z ENDP ; std::vector<float,std::allocator<float> >::_Umove<float *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAMM@std@@YAXPAM0ABM@Z			; std::_Fill<float *,float>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAMM@std@@YAXPAM0ABM@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAMM@std@@YAXPAM0ABM@Z PROC			; std::fill<float *,float>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAMM@std@@YAXPAM0ABM@Z		; std::_Fill<float *,float>
	add	esp, 12					; 0000000cH

; 3188 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$fill@PAMM@std@@YAXPAM0ABM@Z ENDP			; std::fill<float *,float>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<float *,float *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Move_cat@PAM@std@@YA?AU_Undefined_move_tag@0@ABQAM@Z ; std::_Move_cat<float *>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$_Unchecked_move_backward@PAMPAM@stdext@@YAPAMPAM00@Z
_TEXT	SEGMENT
$T102765 = -221						; size = 1
$T102766 = -209						; size = 1
$T102767 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAMPAM@stdext@@YAPAMPAM00@Z PROC ; stdext::_Unchecked_move_backward<float *,float *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T102765[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAM@std@@YA?AU_Undefined_move_tag@0@ABQAM@Z ; std::_Move_cat<float *>
	add	esp, 4
	mov	BYTE PTR $T102766[ebp], al
	movzx	edx, BYTE PTR $T102765[ebp]
	push	edx
	movzx	eax, BYTE PTR $T102766[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T102767[ebp]
	push	eax
	call	??$_Iter_random@PAMPAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM0@Z ; std::_Iter_random<float *,float *>
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<float *,float *,std::random_access_iterator_tag,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 3697 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAMPAM@stdext@@YAPAMPAM00@Z ENDP ; stdext::_Unchecked_move_backward<float *,float *>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@M@std@@YAPAMIPAM@Z
_TEXT	SEGMENT
$T102770 = -208						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@M@std@@YAPAMIPAM@Z PROC			; std::_Allocate<float>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@2
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T102770[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T102770[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@2:

; 44   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@M@std@@YAPAMIPAM@Z ENDP			; std::_Allocate<float>
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAH@std@@YAPAHAAPAHU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<int *>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAH@std@@YAPAHAAPAH@Z
_TEXT	SEGMENT
__Base_tag$ = -5					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAH@std@@YAPAHAAPAH@Z PROC		; std::_Checked_base<int *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAHU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<int *>
	add	esp, 8

; 1166 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Checked_ba
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Checked_ba:
	DD	1
	DD	$LN4@Checked_ba
$LN4@Checked_ba:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Checked_ba
$LN3@Checked_ba:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	0
??$_Checked_base@PAH@std@@YAPAHAAPAH@Z ENDP		; std::_Checked_base<int *>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z PROC ; std::_Iter_random<int *,int *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_rando
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Iter_rando:
	DD	1
	DD	$LN4@Iter_rando
$LN4@Iter_rando:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_rando
$LN3@Iter_rando:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z ENDP ; std::_Iter_random<int *,int *>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z PROC ; std::_Ptr_cat<int *,int *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Ptr_cat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Ptr_cat:
	DD	1
	DD	$LN4@Ptr_cat
$LN4@Ptr_cat:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Ptr_cat
$LN3@Ptr_cat:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ENDP ; std::_Ptr_cat<int *,int *>
_TEXT	ENDS
PUBLIC	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z		; std::_Debug_pointer<int>
PUBLIC	??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z		; std::_Debug_range<int *>
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$_Copy_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -20						; size = 4
__Off$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<int *,int *,std::random_access_iterator_tag>, COMDAT

; 2494 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);

	push	2497					; 000009c1H
	push	OFFSET ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z	; std::_Debug_range<int *>
	add	esp, 16					; 00000010H

; 2498 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN2@Copy_opt

; 2499 : 		_DEBUG_POINTER(_Dest);

	push	2499					; 000009c3H
	push	OFFSET ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z	; std::_Debug_pointer<int>
	add	esp, 12					; 0000000cH
$LN2@Copy_opt:

; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Result$[ebp], edx

; 2505 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_opt

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Off$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Copy_opt:

; 2507 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2508 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<int *,int *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<int *,int *,std::allocator<int> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z
_TEXT	SEGMENT
$T102790 = -209						; size = 1
$T102791 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T102790[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ; std::_Ptr_cat<int *,int *>
	add	esp, 8
	mov	BYTE PTR $T102791[ebp], al
	movzx	eax, BYTE PTR $T102790[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T102791[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<int *,int *,std::allocator<int> >
	add	esp, 24					; 00000018H

; 823  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAM@std@@YAPAMAAPAMU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<float *>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAM@std@@YAPAMAAPAM@Z
_TEXT	SEGMENT
__Base_tag$ = -5					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAM@std@@YAPAMAAPAM@Z PROC		; std::_Checked_base<float *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAMU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<float *>
	add	esp, 8

; 1166 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Checked_ba@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Checked_ba@2:
	DD	1
	DD	$LN4@Checked_ba@2
$LN4@Checked_ba@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Checked_ba@2
$LN3@Checked_ba@2:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	0
??$_Checked_base@PAM@std@@YAPAMAAPAM@Z ENDP		; std::_Checked_base<float *>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAMPAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAMPAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM0@Z PROC ; std::_Iter_random<float *,float *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_rando@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Iter_rando@2:
	DD	1
	DD	$LN4@Iter_rando@2
$LN4@Iter_rando@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_rando@2
$LN3@Iter_rando@2:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_random@PAMPAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM0@Z ENDP ; std::_Iter_random<float *,float *>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAMPAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAM0@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAMPAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAM0@Z PROC ; std::_Ptr_cat<float *,float *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Ptr_cat@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Ptr_cat@2:
	DD	1
	DD	$LN4@Ptr_cat@2
$LN4@Ptr_cat@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Ptr_cat@2
$LN3@Ptr_cat@2:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Ptr_cat@PAMPAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAM0@Z ENDP ; std::_Ptr_cat<float *,float *>
_TEXT	ENDS
PUBLIC	??$_Debug_pointer@M@std@@YAXPAMPB_WI@Z		; std::_Debug_pointer<float>
PUBLIC	??$_Debug_range@PAM@std@@YAXPAM0PB_WI@Z		; std::_Debug_range<float *>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$_Copy_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -20						; size = 4
__Off$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<float *,float *,std::random_access_iterator_tag>, COMDAT

; 2494 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);

	push	2497					; 000009c1H
	push	OFFSET ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAM@std@@YAXPAM0PB_WI@Z	; std::_Debug_range<float *>
	add	esp, 16					; 00000010H

; 2498 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN2@Copy_opt@2

; 2499 : 		_DEBUG_POINTER(_Dest);

	push	2499					; 000009c3H
	push	OFFSET ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Debug_pointer@M@std@@YAXPAMPB_WI@Z	; std::_Debug_pointer<float>
	add	esp, 12					; 0000000cH
$LN2@Copy_opt@2:

; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Result$[ebp], edx

; 2505 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_opt@2

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Off$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Copy_opt@2:

; 2507 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2508 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<float *,float *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAMPAMV?$allocator@M@std@@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<float *,float *,std::allocator<float> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z
_TEXT	SEGMENT
$T102811 = -209						; size = 1
$T102812 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<float *,float *,std::allocator<float> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T102811[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAMPAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAM0@Z ; std::_Ptr_cat<float *,float *>
	add	esp, 8
	mov	BYTE PTR $T102812[ebp], al
	movzx	eax, BYTE PTR $T102811[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T102812[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAMPAMV?$allocator@M@std@@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<float *,float *,std::allocator<float> >
	add	esp, 24					; 00000018H

; 823  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<float *,float *,std::allocator<float> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 242  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z	; stdext::unchecked_fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_fill_n@PAHIHV?$allocator@H@std@@@std@@YAXPAHIABHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAHIHV?$allocator@H@std@@@std@@YAXPAHIABHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<int *,unsigned int,int,std::allocator<int> >, COMDAT

; 418  : 	{	// copy _Count *_Val to raw _First, using _Al, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 419  : 		_STDEXT unchecked_fill_n(_First, _Count, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ; stdext::unchecked_fill_n<int *,unsigned int,int>
	add	esp, 12					; 0000000cH

; 420  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_fill_n@PAHIHV?$allocator@H@std@@@std@@YAXPAHIABHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<int *,unsigned int,int,std::allocator<int> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<float> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 242  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAM0AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<float> >
_TEXT	ENDS
PUBLIC	??$unchecked_fill_n@PAMIM@stdext@@YAXPAMIABM@Z	; stdext::unchecked_fill_n<float *,unsigned int,float>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_fill_n@PAMIMV?$allocator@M@std@@@std@@YAXPAMIABMAAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAMIMV?$allocator@M@std@@@std@@YAXPAMIABMAAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<float *,unsigned int,float,std::allocator<float> >, COMDAT

; 418  : 	{	// copy _Count *_Val to raw _First, using _Al, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 419  : 		_STDEXT unchecked_fill_n(_First, _Count, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_fill_n@PAMIM@stdext@@YAXPAMIABM@Z ; stdext::unchecked_fill_n<float *,unsigned int,float>
	add	esp, 12					; 0000000cH

; 420  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_fill_n@PAMIMV?$allocator@M@std@@@std@@YAXPAMIABMAAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<float *,unsigned int,float,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAHPAHV?$allocator@H@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<int *,int *,std::allocator<int>,std::_Undefined_move_tag>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$_Unchecked_uninitialized_move@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z
_TEXT	SEGMENT
$T102823 = -209						; size = 1
$T102824 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<int *,int *,std::allocator<int> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T102823[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z ; std::_Move_cat<int *>
	add	esp, 4
	mov	BYTE PTR $T102824[ebp], al
	movzx	edx, BYTE PTR $T102823[ebp]
	push	edx
	movzx	eax, BYTE PTR $T102824[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAHPAHV?$allocator@H@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<int *,int *,std::allocator<int>,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 865  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<int *,int *,std::allocator<int> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill@PAHH@std@@YAXPAH0ABH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAHH@std@@YAXPAH0ABH@Z PROC			; std::_Fill<int *,int>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3157 : 	_DEBUG_RANGE(_First, _Last);

	push	3157					; 00000c55H
	push	OFFSET ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z	; std::_Debug_range<int *>
	add	esp, 16					; 00000010H
	jmp	SHORT $LN3@Fill
$LN2@Fill:

; 3158 : 	for (; _First != _Last; ++_First)

	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 4
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Fill

; 3159 : 		*_First = _Val;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN2@Fill
$LN4@Fill:

; 3160 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill@PAHH@std@@YAXPAH0ABH@Z ENDP			; std::_Fill<int *,int>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z PROC ; std::_Move_cat<int *>, COMDAT

; 1200 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1203 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Move_cat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Move_cat:
	DD	1
	DD	$LN4@Move_cat
$LN4@Move_cat:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Move_cat
$LN3@Move_cat:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z ENDP ; std::_Move_cat<int *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<int *,int *,std::random_access_iterator_tag>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$_Move_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T102834 = -209						; size = 1
$T102835 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<int *,int *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T102834[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ; std::_Ptr_cat<int *,int *>
	add	esp, 8
	mov	BYTE PTR $T102835[ebp], al
	movzx	eax, BYTE PTR $T102834[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T102835[ebp]
	push	ecx
	movzx	edx, BYTE PTR __First_dest_cat$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<int *,int *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 2755 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<int *,int *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAMPAMV?$allocator@M@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<float *,float *,std::allocator<float>,std::_Undefined_move_tag>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z
_TEXT	SEGMENT
$T102838 = -209						; size = 1
$T102839 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<float *,float *,std::allocator<float> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T102838[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAM@std@@YA?AU_Undefined_move_tag@0@ABQAM@Z ; std::_Move_cat<float *>
	add	esp, 4
	mov	BYTE PTR $T102839[ebp], al
	movzx	edx, BYTE PTR $T102838[ebp]
	push	edx
	movzx	eax, BYTE PTR $T102839[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAMPAMV?$allocator@M@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<float *,float *,std::allocator<float>,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 865  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<float *,float *,std::allocator<float> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill@PAMM@std@@YAXPAM0ABM@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAMM@std@@YAXPAM0ABM@Z PROC			; std::_Fill<float *,float>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3157 : 	_DEBUG_RANGE(_First, _Last);

	push	3157					; 00000c55H
	push	OFFSET ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAM@std@@YAXPAM0PB_WI@Z	; std::_Debug_range<float *>
	add	esp, 16					; 00000010H
	jmp	SHORT $LN3@Fill@2
$LN2@Fill@2:

; 3158 : 	for (; _First != _Last; ++_First)

	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 4
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill@2:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Fill@2

; 3159 : 		*_First = _Val;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	jmp	SHORT $LN2@Fill@2
$LN1@Fill@2:

; 3160 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill@PAMM@std@@YAXPAM0ABM@Z ENDP			; std::_Fill<float *,float>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAM@std@@YA?AU_Undefined_move_tag@0@ABQAM@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAM@std@@YA?AU_Undefined_move_tag@0@ABQAM@Z PROC ; std::_Move_cat<float *>, COMDAT

; 1200 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1203 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Move_cat@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Move_cat@2:
	DD	1
	DD	$LN4@Move_cat@2
$LN4@Move_cat@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Move_cat@2
$LN3@Move_cat@2:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Move_cat@PAM@std@@YA?AU_Undefined_move_tag@0@ABQAM@Z ENDP ; std::_Move_cat<float *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<float *,float *,std::random_access_iterator_tag>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$_Move_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T102849 = -209						; size = 1
$T102850 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<float *,float *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T102849[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAMPAM@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAM0@Z ; std::_Ptr_cat<float *,float *>
	add	esp, 8
	mov	BYTE PTR $T102850[ebp], al
	movzx	eax, BYTE PTR $T102849[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T102850[ebp]
	push	ecx
	movzx	edx, BYTE PTR __First_dest_cat$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<float *,float *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 2755 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<float *,float *,std::random_access_iterator_tag,std::_Undefined_move_tag>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAH@std@@YAPAHAAPAHU_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAH@std@@YAPAHAAPAHU_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<int *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAH@std@@YAPAHAAPAHU_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<int *>
_TEXT	ENDS
PUBLIC	??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<int *>
PUBLIC	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z
_TEXT	SEGMENT
$T102855 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z PROC		; std::_Debug_range<int *>, COMDAT

; 1597 : 	{	// test iterator pair for valid range

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1598 : 	_Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T102855[ebp]
	push	ecx
	call	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
	add	esp, 8
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<int *>
	add	esp, 20					; 00000014H

; 1599 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z ENDP		; std::_Debug_range<int *>
_TEXT	ENDS
PUBLIC	??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z PROC		; std::_Debug_pointer<int>, COMDAT

; 1570 : 	{	// test iterator for non-singularity, pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1571 : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin

; 1572 : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Debug_poin:

; 1573 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z ENDP		; std::_Debug_pointer<int>
_TEXT	ENDS
PUBLIC	??_C@_1HO@FAAIACEF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ ; `string'
;	COMDAT ??_C@_1HO@FAAIACEF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
CONST	SEGMENT
??_C@_1HO@FAAIACEF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, '9', 00H, '.', 00H, '0', 00H, '\', 00H, 'v', 00H
	DB	'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u'
	DB	00H, 'd', 00H, 'e', 00H, '\', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -20						; size = 4
__Count$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<int *,int *,std::allocator<int> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 146  : 	_DEBUG_RANGE(_First, _Last);

	push	146					; 00000092H
	push	OFFSET ??_C@_1HO@FAAIACEF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z	; std::_Debug_range<int *>
	add	esp, 16					; 00000010H

; 147  : 	_DEBUG_POINTER(_Dest);

	push	147					; 00000093H
	push	OFFSET ??_C@_1HO@FAAIACEF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z	; std::_Debug_pointer<int>
	add	esp, 12					; 0000000cH

; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Result$[ebp], edx

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Uninit_cop:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<int *,int *,std::allocator<int> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAM@std@@YAPAMAAPAMU_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAM@std@@YAPAMAAPAMU_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<float *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAM@std@@YAPAMAAPAMU_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<float *>
_TEXT	ENDS
PUBLIC	??$_Debug_range2@PAM@std@@YAXPAM0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<float *>
PUBLIC	??$_Iter_cat@PAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM@Z ; std::_Iter_cat<float *>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$_Debug_range@PAM@std@@YAXPAM0PB_WI@Z
_TEXT	SEGMENT
$T102864 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAM@std@@YAXPAM0PB_WI@Z PROC		; std::_Debug_range<float *>, COMDAT

; 1597 : 	{	// test iterator pair for valid range

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1598 : 	_Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T102864[ebp]
	push	ecx
	call	??$_Iter_cat@PAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM@Z ; std::_Iter_cat<float *>
	add	esp, 8
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_range2@PAM@std@@YAXPAM0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<float *>
	add	esp, 20					; 00000014H

; 1599 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAM@std@@YAXPAM0PB_WI@Z ENDP		; std::_Debug_range<float *>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Debug_pointer@M@std@@YAXPAMPB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@M@std@@YAXPAMPB_WI@Z PROC		; std::_Debug_pointer<float>, COMDAT

; 1570 : 	{	// test iterator for non-singularity, pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1571 : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin@2

; 1572 : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Debug_poin@2:

; 1573 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@M@std@@YAXPAMPB_WI@Z ENDP		; std::_Debug_pointer<float>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAMPAMV?$allocator@M@std@@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -20						; size = 4
__Count$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAMPAMV?$allocator@M@std@@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<float *,float *,std::allocator<float> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 146  : 	_DEBUG_RANGE(_First, _Last);

	push	146					; 00000092H
	push	OFFSET ??_C@_1HO@FAAIACEF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAM@std@@YAXPAM0PB_WI@Z	; std::_Debug_range<float *>
	add	esp, 16					; 00000010H

; 147  : 	_DEBUG_POINTER(_Dest);

	push	147					; 00000093H
	push	OFFSET ??_C@_1HO@FAAIACEF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Debug_pointer@M@std@@YAXPAMPB_WI@Z	; std::_Debug_pointer<float>
	add	esp, 12					; 0000000cH

; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Result$[ebp], edx

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@2

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Uninit_cop@2:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAMPAMV?$allocator@M@std@@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<float *,float *,std::allocator<float> >
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAHIH@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z
_TEXT	SEGMENT
$T102871 = -209						; size = 1
$T102872 = -197						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z PROC	; stdext::unchecked_fill_n<int *,unsigned int,int>, COMDAT

; 3720 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T102871[ebp], al
	movzx	ecx, BYTE PTR $T102871[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T102872[ebp]
	push	eax
	call	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
	add	esp, 8
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Fill_n@PAHIH@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<int *,unsigned int,int>
	add	esp, 20					; 00000014H

; 3722 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ENDP	; stdext::unchecked_fill_n<int *,unsigned int,int>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAMIM@std@@YAXPAMIABMUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<float *,unsigned int,float>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$unchecked_fill_n@PAMIM@stdext@@YAXPAMIABM@Z
_TEXT	SEGMENT
$T102875 = -209						; size = 1
$T102876 = -197						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAMIM@stdext@@YAXPAMIABM@Z PROC	; stdext::unchecked_fill_n<float *,unsigned int,float>, COMDAT

; 3720 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T102875[ebp], al
	movzx	ecx, BYTE PTR $T102875[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T102876[ebp]
	push	eax
	call	??$_Iter_cat@PAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM@Z ; std::_Iter_cat<float *>
	add	esp, 8
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Fill_n@PAMIM@std@@YAXPAMIABMUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<float *,unsigned int,float>
	add	esp, 20					; 00000014H

; 3722 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_fill_n@PAMIM@stdext@@YAXPAMIABM@Z ENDP	; stdext::unchecked_fill_n<float *,unsigned int,float>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_move@PAHPAHV?$allocator@H@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAHPAHV?$allocator@H@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<int *,int *,std::allocator<int>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H

; 208  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAHPAHV?$allocator@H@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<int *,int *,std::allocator<int>,std::_Undefined_move_tag>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -20						; size = 4
__Off$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<int *,int *,std::random_access_iterator_tag>, COMDAT

; 2698 : 	{	// copy [_First, _Last) backwards to [..., _Dest), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2699 : 
; 2700 :  #if _HAS_ITERATOR_DEBUGGING
; 2701 : 	_DEBUG_RANGE(_First, _Last);

	push	2701					; 00000a8dH
	push	OFFSET ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z	; std::_Debug_range<int *>
	add	esp, 16					; 00000010H

; 2702 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN2@Copy_backw

; 2703 : 		_DEBUG_POINTER(_Dest);

	push	2703					; 00000a8fH
	push	OFFSET ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z	; std::_Debug_pointer<int>
	add	esp, 12					; 0000000cH
$LN2@Copy_backw:

; 2704 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2705 : 
; 2706 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2707 : 	/* if _OutIt is range checked, this will make sure there is enough space for 
; 2708 : 	 * the memmove
; 2709 : 	 */
; 2710 : 	_OutIt _Result = _Dest - _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$[ebp], ecx

; 2711 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_backw

; 2712 : 		_CRT_SECURE_MEMMOVE(&*_Result, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Off$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR __Result$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Copy_backw:

; 2713 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2714 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<int *,int *,std::random_access_iterator_tag>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_move@PAMPAMV?$allocator@M@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAMPAMV?$allocator@M@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<float *,float *,std::allocator<float>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAMPAMV?$allocator@M@std@@@stdext@@YAPAMPAM00AAV?$allocator@M@std@@@Z ; stdext::unchecked_uninitialized_copy<float *,float *,std::allocator<float> >
	add	esp, 16					; 00000010H

; 208  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAMPAMV?$allocator@M@std@@U_Undefined_move_tag@2@@std@@YAPAMPAM00AAV?$allocator@M@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<float *,float *,std::allocator<float>,std::_Undefined_move_tag>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -20						; size = 4
__Off$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<float *,float *,std::random_access_iterator_tag>, COMDAT

; 2698 : 	{	// copy [_First, _Last) backwards to [..., _Dest), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2699 : 
; 2700 :  #if _HAS_ITERATOR_DEBUGGING
; 2701 : 	_DEBUG_RANGE(_First, _Last);

	push	2701					; 00000a8dH
	push	OFFSET ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAM@std@@YAXPAM0PB_WI@Z	; std::_Debug_range<float *>
	add	esp, 16					; 00000010H

; 2702 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN2@Copy_backw@2

; 2703 : 		_DEBUG_POINTER(_Dest);

	push	2703					; 00000a8fH
	push	OFFSET ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Debug_pointer@M@std@@YAXPAMPB_WI@Z	; std::_Debug_pointer<float>
	add	esp, 12					; 0000000cH
$LN2@Copy_backw@2:

; 2704 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2705 : 
; 2706 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2707 : 	/* if _OutIt is range checked, this will make sure there is enough space for 
; 2708 : 	 * the memmove
; 2709 : 	 */
; 2710 : 	_OutIt _Result = _Dest - _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$[ebp], ecx

; 2711 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_backw@2

; 2712 : 		_CRT_SECURE_MEMMOVE(&*_Result, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Off$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR __Result$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Copy_backw@2:

; 2713 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2714 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAMPAMUrandom_access_iterator_tag@std@@@std@@YAPAMPAM00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<float *,float *,std::random_access_iterator_tag>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z PROC ; std::_Iter_cat<int *>, COMDAT

; 952  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 955  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_cat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Iter_cat:
	DD	1
	DD	$LN4@Iter_cat
$LN4@Iter_cat:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_cat
$LN3@Iter_cat:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ENDP ; std::_Iter_cat<int *>
_TEXT	ENDS
PUBLIC	??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<int *>, COMDAT

; 1585 : 	{	// test iterator pair for valid range, random-access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1586 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang

; 1587 : 		{	// check for non-null pointers, valid range
; 1588 : 		_DEBUG_POINTER2(_First, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z	; std::_Debug_pointer<int>
	add	esp, 12					; 0000000cH

; 1589 : 		_DEBUG_POINTER2(_Last, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z	; std::_Debug_pointer<int>
	add	esp, 12					; 0000000cH

; 1590 : 		if (_Last < _First)

	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang

; 1591 : 			_DEBUG_ERROR2("invalid iterator range", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Debug_rang:

; 1592 : 		}
; 1593 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<int *>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM@Z PROC ; std::_Iter_cat<float *>, COMDAT

; 952  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 955  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_cat@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Iter_cat@2:
	DD	1
	DD	$LN4@Iter_cat@2
$LN4@Iter_cat@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_cat@2
$LN3@Iter_cat@2:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_cat@PAM@std@@YA?AUrandom_access_iterator_tag@0@ABQAM@Z ENDP ; std::_Iter_cat<float *>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Debug_range2@PAM@std@@YAXPAM0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAM@std@@YAXPAM0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<float *>, COMDAT

; 1585 : 	{	// test iterator pair for valid range, random-access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1586 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang@2

; 1587 : 		{	// check for non-null pointers, valid range
; 1588 : 		_DEBUG_POINTER2(_First, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Debug_pointer@M@std@@YAXPAMPB_WI@Z	; std::_Debug_pointer<float>
	add	esp, 12					; 0000000cH

; 1589 : 		_DEBUG_POINTER2(_Last, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Debug_pointer@M@std@@YAXPAMPB_WI@Z	; std::_Debug_pointer<float>
	add	esp, 12					; 0000000cH

; 1590 : 		if (_Last < _First)

	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang@2

; 1591 : 			_DEBUG_ERROR2("invalid iterator range", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Debug_rang@2:

; 1592 : 		}
; 1593 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range2@PAM@std@@YAXPAM0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<float *>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$_Fill_n@PAHIH@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T102901 = -209						; size = 1
__Last$ = -8						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Fill_n@PAHIH@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<int *,unsigned int,int>, COMDAT

; 3250 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3251 : 		// if _OutIt is checked, this will ensure we have enough space
; 3252 : 		_OutIt _Last = _First + _Count; (_Last);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Last$[ebp], edx

; 3253 : 		_Fill_n(_CHECKED_BASE(_First), _Count, _Val,
; 3254 : 			_Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T102901[ebp], al
	movzx	ecx, BYTE PTR $T102901[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z	; std::_Checked_base<int *>
	add	esp, 4
	push	eax
	call	??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<int *,unsigned int,int>
	add	esp, 16					; 00000010H

; 3255 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill_n@PAHIH@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<int *,unsigned int,int>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAMIM@std@@YAXPAMIABMU_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<float *,unsigned int,float>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$_Fill_n@PAMIM@std@@YAXPAMIABMUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T102904 = -209						; size = 1
__Last$ = -8						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Fill_n@PAMIM@std@@YAXPAMIABMUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<float *,unsigned int,float>, COMDAT

; 3250 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3251 : 		// if _OutIt is checked, this will ensure we have enough space
; 3252 : 		_OutIt _Last = _First + _Count; (_Last);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Last$[ebp], edx

; 3253 : 		_Fill_n(_CHECKED_BASE(_First), _Count, _Val,
; 3254 : 			_Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T102904[ebp], al
	movzx	ecx, BYTE PTR $T102904[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAM@std@@YAPAMAAPAM@Z	; std::_Checked_base<float *>
	add	esp, 4
	push	eax
	call	??$_Fill_n@PAMIM@std@@YAXPAMIABMU_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<float *,unsigned int,float>
	add	esp, 16					; 00000010H

; 3255 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill_n@PAMIM@std@@YAXPAMIABMUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<float *,unsigned int,float>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<int *,unsigned int,int>, COMDAT

; 3196 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3197 : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN3@Fill_n
$LN2@Fill_n:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 4
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Fill_n:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Fill_n

; 3198 : 		*_First = _Val;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN2@Fill_n
$LN4@Fill_n:

; 3199 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Fill_n@PAMIM@std@@YAXPAMIABMU_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_n@PAMIM@std@@YAXPAMIABMU_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<float *,unsigned int,float>, COMDAT

; 3196 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3197 : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN3@Fill_n@2
$LN2@Fill_n@2:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 4
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Fill_n@2:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Fill_n@2

; 3198 : 		*_First = _Val;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	jmp	SHORT $LN2@Fill_n@2
$LN1@Fill_n@2:

; 3199 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill_n@PAMIM@std@@YAXPAMIABMU_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<float *,unsigned int,float>
_TEXT	ENDS
END
