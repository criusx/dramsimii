; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\CriuS\Documents\Visual Studio 2008\Projects\DRAMsimIIhg\src\Bank.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
PUBLIC	?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
PUBLIC	?value@integral_c_tag@mpl@boost@@2HB		; boost::mpl::integral_c_tag::value
PUBLIC	?value@?$bool_@$00@mpl@boost@@2_NB		; boost::mpl::bool_<1>::value
PUBLIC	?value@?$bool_@$0A@@mpl@boost@@2_NB		; boost::mpl::bool_<0>::value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_integral@?$integer_traits_base@_N$0A@$00@detail@boost@@2_NB ; boost::detail::integer_traits_base<bool,0,1>::is_integral
PUBLIC	?const_min@?$integer_traits_base@_N$0A@$00@detail@boost@@2_NB ; boost::detail::integer_traits_base<bool,0,1>::const_min
PUBLIC	?const_max@?$integer_traits_base@_N$0A@$00@detail@boost@@2_NB ; boost::detail::integer_traits_base<bool,0,1>::const_max
PUBLIC	?is_integral@?$integer_traits_base@D$0?IA@$0HP@@detail@boost@@2_NB ; boost::detail::integer_traits_base<char,-128,127>::is_integral
PUBLIC	?const_min@?$integer_traits_base@D$0?IA@$0HP@@detail@boost@@2DB ; boost::detail::integer_traits_base<char,-128,127>::const_min
PUBLIC	?const_max@?$integer_traits_base@D$0?IA@$0HP@@detail@boost@@2DB ; boost::detail::integer_traits_base<char,-128,127>::const_max
PUBLIC	?is_integral@?$integer_traits_base@C$0?IA@$0HP@@detail@boost@@2_NB ; boost::detail::integer_traits_base<signed char,-128,127>::is_integral
PUBLIC	?const_min@?$integer_traits_base@C$0?IA@$0HP@@detail@boost@@2CB ; boost::detail::integer_traits_base<signed char,-128,127>::const_min
PUBLIC	?const_max@?$integer_traits_base@C$0?IA@$0HP@@detail@boost@@2CB ; boost::detail::integer_traits_base<signed char,-128,127>::const_max
PUBLIC	?is_integral@?$integer_traits_base@E$0A@$0PP@@detail@boost@@2_NB ; boost::detail::integer_traits_base<unsigned char,0,255>::is_integral
PUBLIC	?const_min@?$integer_traits_base@E$0A@$0PP@@detail@boost@@2EB ; boost::detail::integer_traits_base<unsigned char,0,255>::const_min
PUBLIC	?const_max@?$integer_traits_base@E$0A@$0PP@@detail@boost@@2EB ; boost::detail::integer_traits_base<unsigned char,0,255>::const_max
PUBLIC	?is_integral@?$integer_traits_base@_W$0A@$0PPPP@@detail@boost@@2_NB ; boost::detail::integer_traits_base<wchar_t,0,65535>::is_integral
PUBLIC	?const_min@?$integer_traits_base@_W$0A@$0PPPP@@detail@boost@@2_WB ; boost::detail::integer_traits_base<wchar_t,0,65535>::const_min
PUBLIC	?const_max@?$integer_traits_base@_W$0A@$0PPPP@@detail@boost@@2_WB ; boost::detail::integer_traits_base<wchar_t,0,65535>::const_max
PUBLIC	?is_integral@?$integer_traits_base@F$0?IAAA@$0HPPP@@detail@boost@@2_NB ; boost::detail::integer_traits_base<short,-32768,32767>::is_integral
PUBLIC	?const_min@?$integer_traits_base@F$0?IAAA@$0HPPP@@detail@boost@@2FB ; boost::detail::integer_traits_base<short,-32768,32767>::const_min
PUBLIC	?const_max@?$integer_traits_base@F$0?IAAA@$0HPPP@@detail@boost@@2FB ; boost::detail::integer_traits_base<short,-32768,32767>::const_max
PUBLIC	?is_integral@?$integer_traits_base@G$0A@$0PPPP@@detail@boost@@2_NB ; boost::detail::integer_traits_base<unsigned short,0,65535>::is_integral
PUBLIC	?const_min@?$integer_traits_base@G$0A@$0PPPP@@detail@boost@@2GB ; boost::detail::integer_traits_base<unsigned short,0,65535>::const_min
PUBLIC	?const_max@?$integer_traits_base@G$0A@$0PPPP@@detail@boost@@2GB ; boost::detail::integer_traits_base<unsigned short,0,65535>::const_max
PUBLIC	?is_integral@?$integer_traits_base@H$0?IAAAAAAA@$0HPPPPPPP@@detail@boost@@2_NB ; boost::detail::integer_traits_base<int,-2147483648,2147483647>::is_integral
PUBLIC	?const_min@?$integer_traits_base@H$0?IAAAAAAA@$0HPPPPPPP@@detail@boost@@2HB ; boost::detail::integer_traits_base<int,-2147483648,2147483647>::const_min
PUBLIC	?const_max@?$integer_traits_base@H$0?IAAAAAAA@$0HPPPPPPP@@detail@boost@@2HB ; boost::detail::integer_traits_base<int,-2147483648,2147483647>::const_max
PUBLIC	?is_integral@?$integer_traits_base@I$0A@$0PPPPPPPP@@detail@boost@@2_NB ; boost::detail::integer_traits_base<unsigned int,0,4294967295>::is_integral
PUBLIC	?const_min@?$integer_traits_base@I$0A@$0PPPPPPPP@@detail@boost@@2IB ; boost::detail::integer_traits_base<unsigned int,0,4294967295>::const_min
PUBLIC	?const_max@?$integer_traits_base@I$0A@$0PPPPPPPP@@detail@boost@@2IB ; boost::detail::integer_traits_base<unsigned int,0,4294967295>::const_max
PUBLIC	?is_integral@?$integer_traits_base@J$0?IAAAAAAA@$0HPPPPPPP@@detail@boost@@2_NB ; boost::detail::integer_traits_base<long,-2147483648,2147483647>::is_integral
PUBLIC	?const_min@?$integer_traits_base@J$0?IAAAAAAA@$0HPPPPPPP@@detail@boost@@2JB ; boost::detail::integer_traits_base<long,-2147483648,2147483647>::const_min
PUBLIC	?const_max@?$integer_traits_base@J$0?IAAAAAAA@$0HPPPPPPP@@detail@boost@@2JB ; boost::detail::integer_traits_base<long,-2147483648,2147483647>::const_max
PUBLIC	?is_integral@?$integer_traits_base@K$0A@$0PPPPPPPP@@detail@boost@@2_NB ; boost::detail::integer_traits_base<unsigned long,0,4294967295>::is_integral
PUBLIC	?const_min@?$integer_traits_base@K$0A@$0PPPPPPPP@@detail@boost@@2KB ; boost::detail::integer_traits_base<unsigned long,0,4294967295>::const_min
PUBLIC	?const_max@?$integer_traits_base@K$0A@$0PPPPPPPP@@detail@boost@@2KB ; boost::detail::integer_traits_base<unsigned long,0,4294967295>::const_max
PUBLIC	?is_integral@?$integer_traits_base@_J$0?IAAAAAAAAAAAAAAA@$0HPPPPPPPPPPPPPPP@@detail@boost@@2_NB ; boost::detail::integer_traits_base<__int64,-9223372036854775808,9223372036854775807>::is_integral
PUBLIC	?const_min@?$integer_traits_base@_J$0?IAAAAAAAAAAAAAAA@$0HPPPPPPPPPPPPPPP@@detail@boost@@2_JB ; boost::detail::integer_traits_base<__int64,-9223372036854775808,9223372036854775807>::const_min
PUBLIC	?const_max@?$integer_traits_base@_J$0?IAAAAAAAAAAAAAAA@$0HPPPPPPPPPPPPPPP@@detail@boost@@2_JB ; boost::detail::integer_traits_base<__int64,-9223372036854775808,9223372036854775807>::const_max
PUBLIC	?is_integral@?$integer_traits_base@_K$0A@$0?0@detail@boost@@2_NB ; boost::detail::integer_traits_base<unsigned __int64,0,-1>::is_integral
PUBLIC	?const_min@?$integer_traits_base@_K$0A@$0?0@detail@boost@@2_KB ; boost::detail::integer_traits_base<unsigned __int64,0,-1>::const_min
PUBLIC	?const_max@?$integer_traits_base@_K$0A@$0?0@detail@boost@@2_KB ; boost::detail::integer_traits_base<unsigned __int64,0,-1>::const_max
PUBLIC	?value@?$ice_or@$0A@$0A@$0A@$0A@$0A@$0A@$0A@@type_traits@boost@@2_NB ; boost::type_traits::ice_or<0,0,0,0,0,0,0>::value
PUBLIC	?value@?$ice_and@$00$00$00$00$00$00$00@type_traits@boost@@2_NB ; boost::type_traits::ice_and<1,1,1,1,1,1,1>::value
PUBLIC	?value@?$ice_not@$00@type_traits@boost@@2_NB	; boost::type_traits::ice_not<1>::value
PUBLIC	?value@?$is_convertible_impl@XX@detail@boost@@2_NB ; boost::detail::is_convertible_impl<void,void>::value
PUBLIC	?value@?$is_convertible_impl@X$$CBX@detail@boost@@2_NB ; boost::detail::is_convertible_impl<void,void const >::value
PUBLIC	?value@?$is_convertible_impl@X$$CCX@detail@boost@@2_NB ; boost::detail::is_convertible_impl<void,void volatile >::value
PUBLIC	?value@?$is_convertible_impl@X$$CDX@detail@boost@@2_NB ; boost::detail::is_convertible_impl<void,void const volatile >::value
PUBLIC	?value@?$is_convertible_impl@$$CBXX@detail@boost@@2_NB ; boost::detail::is_convertible_impl<void const ,void>::value
PUBLIC	?value@?$is_convertible_impl@$$CBX$$CBX@detail@boost@@2_NB ; boost::detail::is_convertible_impl<void const ,void const >::value
PUBLIC	?value@?$is_convertible_impl@$$CBX$$CCX@detail@boost@@2_NB ; boost::detail::is_convertible_impl<void const ,void volatile >::value
PUBLIC	?value@?$is_convertible_impl@$$CBX$$CDX@detail@boost@@2_NB ; boost::detail::is_convertible_impl<void const ,void const volatile >::value
PUBLIC	?value@?$is_convertible_impl@$$CCXX@detail@boost@@2_NB ; boost::detail::is_convertible_impl<void volatile ,void>::value
PUBLIC	?value@?$is_convertible_impl@$$CCX$$CBX@detail@boost@@2_NB ; boost::detail::is_convertible_impl<void volatile ,void const >::value
PUBLIC	?value@?$is_convertible_impl@$$CCX$$CCX@detail@boost@@2_NB ; boost::detail::is_convertible_impl<void volatile ,void volatile >::value
PUBLIC	?value@?$is_convertible_impl@$$CCX$$CDX@detail@boost@@2_NB ; boost::detail::is_convertible_impl<void volatile ,void const volatile >::value
PUBLIC	?value@?$is_convertible_impl@$$CDXX@detail@boost@@2_NB ; boost::detail::is_convertible_impl<void const volatile ,void>::value
PUBLIC	?value@?$is_convertible_impl@$$CDX$$CBX@detail@boost@@2_NB ; boost::detail::is_convertible_impl<void const volatile ,void const >::value
PUBLIC	?value@?$is_convertible_impl@$$CDX$$CCX@detail@boost@@2_NB ; boost::detail::is_convertible_impl<void const volatile ,void volatile >::value
PUBLIC	?value@?$is_convertible_impl@$$CDX$$CDX@detail@boost@@2_NB ; boost::detail::is_convertible_impl<void const volatile ,void const volatile >::value
PUBLIC	?value@type@?$select_by_size@$00@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<1>::type::value
PUBLIC	?value@?$select_by_size@$00@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<1>::value
PUBLIC	?value@type@?$select_by_size@$01@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<2>::type::value
PUBLIC	?value@?$select_by_size@$01@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<2>::value
PUBLIC	?value@type@?$select_by_size@$02@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<3>::type::value
PUBLIC	?value@?$select_by_size@$02@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<3>::value
PUBLIC	?value@type@?$select_by_size@$03@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<4>::type::value
PUBLIC	?value@?$select_by_size@$03@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<4>::value
PUBLIC	?value@type@?$select_by_size@$04@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<5>::type::value
PUBLIC	?value@?$select_by_size@$04@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<5>::value
PUBLIC	?value@type@?$select_by_size@$05@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<6>::type::value
PUBLIC	?value@?$select_by_size@$05@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<6>::value
PUBLIC	?value@type@?$select_by_size@$06@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<7>::type::value
PUBLIC	?value@?$select_by_size@$06@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<7>::value
PUBLIC	?value@type@?$select_by_size@$07@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<8>::type::value
PUBLIC	?value@?$select_by_size@$07@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<8>::value
PUBLIC	?value@type@?$select_by_size@$08@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<9>::type::value
PUBLIC	?value@?$select_by_size@$08@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<9>::value
PUBLIC	?value@type@?$select_by_size@$09@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<10>::type::value
PUBLIC	?value@?$select_by_size@$09@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<10>::value
PUBLIC	?value@type@?$select_by_size@$0L@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<11>::type::value
PUBLIC	?value@?$select_by_size@$0L@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<11>::value
PUBLIC	?value@type@?$select_by_size@$0M@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<12>::type::value
PUBLIC	?value@?$select_by_size@$0M@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<12>::value
PUBLIC	?value@type@?$select_by_size@$0N@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<13>::type::value
PUBLIC	?value@?$select_by_size@$0N@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<13>::value
PUBLIC	?value@type@?$select_by_size@$0O@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<14>::type::value
PUBLIC	?value@?$select_by_size@$0O@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<14>::value
PUBLIC	?value@type@?$select_by_size@$0P@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<15>::type::value
PUBLIC	?value@?$select_by_size@$0P@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<15>::value
PUBLIC	?value@type@?$select_by_size@$0BA@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<16>::type::value
PUBLIC	?value@?$select_by_size@$0BA@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<16>::value
PUBLIC	?value@type@?$select_by_size@$0BB@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<17>::type::value
PUBLIC	?value@?$select_by_size@$0BB@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<17>::value
PUBLIC	?value@type@?$select_by_size@$0BC@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<18>::type::value
PUBLIC	?value@?$select_by_size@$0BC@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<18>::value
PUBLIC	?value@type@?$select_by_size@$0BD@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<19>::type::value
PUBLIC	?value@?$select_by_size@$0BD@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<19>::value
PUBLIC	?value@type@?$select_by_size@$0BE@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<20>::type::value
PUBLIC	?value@?$select_by_size@$0BE@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<20>::value
PUBLIC	?value@type@?$select_by_size@$0BF@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<21>::type::value
PUBLIC	?value@?$select_by_size@$0BF@@detail@iostreams@boost@@2HB ; boost::iostreams::detail::select_by_size<21>::value
PUBLIC	?value@?$int_@$00@mpl@boost@@2HB		; boost::mpl::int_<1>::value
PUBLIC	?value@?$int_@$01@mpl@boost@@2HB		; boost::mpl::int_<2>::value
PUBLIC	?value@?$int_@$02@mpl@boost@@2HB		; boost::mpl::int_<3>::value
PUBLIC	?value@?$int_@$03@mpl@boost@@2HB		; boost::mpl::int_<4>::value
PUBLIC	?value@?$int_@$04@mpl@boost@@2HB		; boost::mpl::int_<5>::value
PUBLIC	?value@?$int_@$05@mpl@boost@@2HB		; boost::mpl::int_<6>::value
PUBLIC	?value@?$int_@$06@mpl@boost@@2HB		; boost::mpl::int_<7>::value
PUBLIC	?value@?$int_@$07@mpl@boost@@2HB		; boost::mpl::int_<8>::value
PUBLIC	?value@?$int_@$08@mpl@boost@@2HB		; boost::mpl::int_<9>::value
PUBLIC	?value@?$int_@$09@mpl@boost@@2HB		; boost::mpl::int_<10>::value
PUBLIC	?value@?$int_@$0L@@mpl@boost@@2HB		; boost::mpl::int_<11>::value
PUBLIC	?value@?$int_@$0M@@mpl@boost@@2HB		; boost::mpl::int_<12>::value
PUBLIC	?value@?$arg@$0?0@mpl@boost@@2HB		; boost::mpl::arg<-1>::value
PUBLIC	?value@?$arg@$00@mpl@boost@@2HB			; boost::mpl::arg<1>::value
PUBLIC	?value@?$arg@$01@mpl@boost@@2HB			; boost::mpl::arg<2>::value
PUBLIC	?value@?$arg@$02@mpl@boost@@2HB			; boost::mpl::arg<3>::value
PUBLIC	?value@?$arg@$03@mpl@boost@@2HB			; boost::mpl::arg<4>::value
PUBLIC	?value@?$arg@$04@mpl@boost@@2HB			; boost::mpl::arg<5>::value
PUBLIC	?value@?$is_member_function_pointer_impl@X@detail@boost@@2_NB ; boost::detail::is_member_function_pointer_impl<void>::value
PUBLIC	?value@?$is_member_function_pointer_impl@$$CBX@detail@boost@@2_NB ; boost::detail::is_member_function_pointer_impl<void const >::value
PUBLIC	?value@?$is_member_function_pointer_impl@$$CCX@detail@boost@@2_NB ; boost::detail::is_member_function_pointer_impl<void volatile >::value
PUBLIC	?value@?$is_member_function_pointer_impl@$$CDX@detail@boost@@2_NB ; boost::detail::is_member_function_pointer_impl<void const volatile >::value
PUBLIC	?value@?$is_scalar_impl@X@detail@boost@@2_NB	; boost::detail::is_scalar_impl<void>::value
PUBLIC	?value@?$is_scalar_impl@$$CBX@detail@boost@@2_NB ; boost::detail::is_scalar_impl<void const >::value
PUBLIC	?value@?$is_scalar_impl@$$CCX@detail@boost@@2_NB ; boost::detail::is_scalar_impl<void volatile >::value
PUBLIC	?value@?$is_scalar_impl@$$CDX@detail@boost@@2_NB ; boost::detail::is_scalar_impl<void const volatile >::value
PUBLIC	?value@?$is_pod_impl@X@detail@boost@@2_NB	; boost::detail::is_pod_impl<void>::value
PUBLIC	?value@?$is_pod_impl@$$CBX@detail@boost@@2_NB	; boost::detail::is_pod_impl<void const >::value
PUBLIC	?value@?$is_pod_impl@$$CCX@detail@boost@@2_NB	; boost::detail::is_pod_impl<void volatile >::value
PUBLIC	?value@?$is_pod_impl@$$CDX@detail@boost@@2_NB	; boost::detail::is_pod_impl<void const volatile >::value
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_c@I$0A@@mpl@boost@@2IB	; boost::mpl::integral_c<unsigned int,0>::value
PUBLIC	?value@?$alignment_logic@$07$07@detail@boost@@2IB ; boost::detail::alignment_logic<8,8>::value
PUBLIC	?value@?$alignment_of_impl@Tmax_align@detail@boost@@@detail@boost@@2IB ; boost::detail::alignment_of_impl<boost::detail::max_align>::value
PUBLIC	?value@?$integral_c@I$07@mpl@boost@@2IB		; boost::mpl::integral_c<unsigned int,8>::value
PUBLIC	?value@?$alignment_logic@$00$00@detail@boost@@2IB ; boost::detail::alignment_logic<1,1>::value
PUBLIC	?value@?$alignment_of_impl@D@detail@boost@@2IB	; boost::detail::alignment_of_impl<char>::value
PUBLIC	?value@?$integral_c@I$00@mpl@boost@@2IB		; boost::mpl::integral_c<unsigned int,1>::value
PUBLIC	?value@?$alignment_logic@$01$01@detail@boost@@2IB ; boost::detail::alignment_logic<2,2>::value
PUBLIC	?value@?$alignment_of_impl@F@detail@boost@@2IB	; boost::detail::alignment_of_impl<short>::value
PUBLIC	?value@?$integral_c@I$01@mpl@boost@@2IB		; boost::mpl::integral_c<unsigned int,2>::value
PUBLIC	?value@?$alignment_logic@$03$03@detail@boost@@2IB ; boost::detail::alignment_logic<4,4>::value
PUBLIC	?value@?$alignment_of_impl@H@detail@boost@@2IB	; boost::detail::alignment_of_impl<int>::value
PUBLIC	?value@?$integral_c@I$03@mpl@boost@@2IB		; boost::mpl::integral_c<unsigned int,4>::value
PUBLIC	?value@?$alignment_of_impl@J@detail@boost@@2IB	; boost::detail::alignment_of_impl<long>::value
PUBLIC	?value@?$alignment_of_impl@_J@detail@boost@@2IB	; boost::detail::alignment_of_impl<__int64>::value
PUBLIC	?value@?$alignment_of_impl@T?$lower_alignment@$07@detail@boost@@@detail@boost@@2IB ; boost::detail::alignment_of_impl<boost::detail::lower_alignment<8> >::value
PUBLIC	?value@?$is_aligned@$07$07@detail@boost@@2_NB	; boost::detail::is_aligned<8,8>::value
PUBLIC	?found@?$type_with_alignment_imp@$07@detail@boost@@0IB ; boost::detail::type_with_alignment_imp<8>::found
PUBLIC	?value@?$is_pod_impl@Ua8@align@boost@@@detail@boost@@2_NB ; boost::detail::is_pod_impl<boost::align::a8>::value
PUBLIC	?value@?$is_pod_impl@Ua16@align@boost@@@detail@boost@@2_NB ; boost::detail::is_pod_impl<boost::align::a16>::value
PUBLIC	?value@?$is_pod_impl@Ua32@align@boost@@@detail@boost@@2_NB ; boost::detail::is_pod_impl<boost::align::a32>::value
PUBLIC	?value@?$is_pod_impl@Ua64@align@boost@@@detail@boost@@2_NB ; boost::detail::is_pod_impl<boost::align::a64>::value
PUBLIC	?value@?$is_pod_impl@Ua128@align@boost@@@detail@boost@@2_NB ; boost::detail::is_pod_impl<boost::align::a128>::value
PUBLIC	?value@?$implementation_level@Ucollection_size_type@serialization@boost@@@serialization@boost@@2HB ; boost::serialization::implementation_level<boost::serialization::collection_size_type>::value
PUBLIC	?value@?$implementation_level@V?$vector@_NV?$allocator@_N@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::vector<bool,std::allocator<bool> > >::value
PUBLIC	?value@?$implementation_level@V?$vector@DV?$allocator@D@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::vector<char,std::allocator<char> > >::value
PUBLIC	?value@?$implementation_level@V?$vector@CV?$allocator@C@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::vector<signed char,std::allocator<signed char> > >::value
PUBLIC	?value@?$implementation_level@V?$vector@EV?$allocator@E@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::vector<unsigned char,std::allocator<unsigned char> > >::value
PUBLIC	?value@?$implementation_level@V?$vector@HV?$allocator@H@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::vector<int,std::allocator<int> > >::value
PUBLIC	?value@?$implementation_level@V?$vector@IV?$allocator@I@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::vector<unsigned int,std::allocator<unsigned int> > >::value
PUBLIC	?value@?$implementation_level@V?$vector@JV?$allocator@J@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::vector<long,std::allocator<long> > >::value
PUBLIC	?value@?$implementation_level@V?$vector@KV?$allocator@K@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::vector<unsigned long,std::allocator<unsigned long> > >::value
PUBLIC	?value@?$implementation_level@V?$vector@MV?$allocator@M@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::vector<float,std::allocator<float> > >::value
PUBLIC	?value@?$implementation_level@V?$vector@NV?$allocator@N@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::vector<double,std::allocator<double> > >::value
PUBLIC	?value@?$implementation_level@V?$vector@GV?$allocator@G@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::vector<unsigned short,std::allocator<unsigned short> > >::value
PUBLIC	?value@?$implementation_level@V?$vector@FV?$allocator@F@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::vector<short,std::allocator<short> > >::value
PUBLIC	?value@?$implementation_level@V?$vector@_JV?$allocator@_J@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::vector<__int64,std::allocator<__int64> > >::value
PUBLIC	?value@?$implementation_level@V?$vector@_KV?$allocator@_K@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::vector<unsigned __int64,std::allocator<unsigned __int64> > >::value
PUBLIC	?value@?$implementation_level@V?$vector@_WV?$allocator@_W@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::vector<wchar_t,std::allocator<wchar_t> > >::value
PUBLIC	?has_fixed_range@rand48@boost@@2_NB		; boost::rand48::has_fixed_range
PUBLIC	?min_value@rand48@boost@@2JB			; boost::rand48::min_value
PUBLIC	?max_value@rand48@boost@@2JB			; boost::rand48::max_value
PUBLIC	?has_fixed_range@?$linear_congruential@_K$0FNOOMOGGN@$0L@$0BAAAAAAAAAAAA@$0A@@random@boost@@2_NB ; boost::random::linear_congruential<unsigned __int64,25214903917,11,281474976710656,0>::has_fixed_range
PUBLIC	?min_value@?$linear_congruential@_K$0FNOOMOGGN@$0L@$0BAAAAAAAAAAAA@$0A@@random@boost@@2_KB ; boost::random::linear_congruential<unsigned __int64,25214903917,11,281474976710656,0>::min_value
PUBLIC	?max_value@?$linear_congruential@_K$0FNOOMOGGN@$0L@$0BAAAAAAAAAAAA@$0A@@random@boost@@2_KB ; boost::random::linear_congruential<unsigned __int64,25214903917,11,281474976710656,0>::max_value
PUBLIC	?multiplier@?$linear_congruential@_K$0FNOOMOGGN@$0L@$0BAAAAAAAAAAAA@$0A@@random@boost@@2_KB ; boost::random::linear_congruential<unsigned __int64,25214903917,11,281474976710656,0>::multiplier
PUBLIC	?increment@?$linear_congruential@_K$0FNOOMOGGN@$0L@$0BAAAAAAAAAAAA@$0A@@random@boost@@2_KB ; boost::random::linear_congruential<unsigned __int64,25214903917,11,281474976710656,0>::increment
PUBLIC	?modulus@?$linear_congruential@_K$0FNOOMOGGN@$0L@$0BAAAAAAAAAAAA@$0A@@random@boost@@2_KB ; boost::random::linear_congruential<unsigned __int64,25214903917,11,281474976710656,0>::modulus
PUBLIC	?has_fixed_range@?$linear_congruential@J$0JMEO@$0A@$0HPPPPPKL@$0A@@random@boost@@2_NB ; boost::random::linear_congruential<long,40014,0,2147483563,0>::has_fixed_range
PUBLIC	?min_value@?$linear_congruential@J$0JMEO@$0A@$0HPPPPPKL@$0A@@random@boost@@2JB ; boost::random::linear_congruential<long,40014,0,2147483563,0>::min_value
PUBLIC	?max_value@?$linear_congruential@J$0JMEO@$0A@$0HPPPPPKL@$0A@@random@boost@@2JB ; boost::random::linear_congruential<long,40014,0,2147483563,0>::max_value
PUBLIC	?multiplier@?$linear_congruential@J$0JMEO@$0A@$0HPPPPPKL@$0A@@random@boost@@2JB ; boost::random::linear_congruential<long,40014,0,2147483563,0>::multiplier
PUBLIC	?increment@?$linear_congruential@J$0JMEO@$0A@$0HPPPPPKL@$0A@@random@boost@@2JB ; boost::random::linear_congruential<long,40014,0,2147483563,0>::increment
PUBLIC	?modulus@?$linear_congruential@J$0JMEO@$0A@$0HPPPPPKL@$0A@@random@boost@@2JB ; boost::random::linear_congruential<long,40014,0,2147483563,0>::modulus
PUBLIC	?has_fixed_range@?$linear_congruential@K$0FFG@$0CENGJ@$0KOFCJ@$0A@@random@boost@@2_NB ; boost::random::linear_congruential<unsigned long,1366,150889,714025,0>::has_fixed_range
PUBLIC	?min_value@?$linear_congruential@K$0FFG@$0CENGJ@$0KOFCJ@$0A@@random@boost@@2KB ; boost::random::linear_congruential<unsigned long,1366,150889,714025,0>::min_value
PUBLIC	?max_value@?$linear_congruential@K$0FFG@$0CENGJ@$0KOFCJ@$0A@@random@boost@@2KB ; boost::random::linear_congruential<unsigned long,1366,150889,714025,0>::max_value
PUBLIC	?multiplier@?$linear_congruential@K$0FFG@$0CENGJ@$0KOFCJ@$0A@@random@boost@@2KB ; boost::random::linear_congruential<unsigned long,1366,150889,714025,0>::multiplier
PUBLIC	?increment@?$linear_congruential@K$0FFG@$0CENGJ@$0KOFCJ@$0A@@random@boost@@2KB ; boost::random::linear_congruential<unsigned long,1366,150889,714025,0>::increment
PUBLIC	?modulus@?$linear_congruential@K$0FFG@$0CENGJ@$0KOFCJ@$0A@@random@boost@@2KB ; boost::random::linear_congruential<unsigned long,1366,150889,714025,0>::modulus
PUBLIC	?is_specialized@?$fibonacci_validation@N$0CFP@$0BBB@@random@boost@@2_NB ; boost::random::fibonacci_validation<double,607,273>::is_specialized
PUBLIC	?is_specialized@?$fibonacci_validation@N$0EPP@$0BKC@@random@boost@@2_NB ; boost::random::fibonacci_validation<double,1279,418>::is_specialized
PUBLIC	?is_specialized@?$fibonacci_validation@N$0IOJ@$0EOE@@random@boost@@2_NB ; boost::random::fibonacci_validation<double,2281,1252>::is_specialized
PUBLIC	?is_specialized@?$fibonacci_validation@N$0MJB@$0CEA@@random@boost@@2_NB ; boost::random::fibonacci_validation<double,3217,576>::is_specialized
PUBLIC	?is_specialized@?$fibonacci_validation@N$0BBEH@$0IDC@@random@boost@@2_NB ; boost::random::fibonacci_validation<double,4423,2098>::is_specialized
PUBLIC	?is_specialized@?$fibonacci_validation@N$0CFNJ@$0BFHO@@random@boost@@2_NB ; boost::random::fibonacci_validation<double,9689,5502>::is_specialized
PUBLIC	?is_specialized@?$fibonacci_validation@N$0ENOB@$0CGHC@@random@boost@@2_NB ; boost::random::fibonacci_validation<double,19937,9842>::is_specialized
PUBLIC	?is_specialized@?$fibonacci_validation@N$0FKKJ@$0DEJO@@random@boost@@2_NB ; boost::random::fibonacci_validation<double,23209,13470>::is_specialized
PUBLIC	?is_specialized@?$fibonacci_validation@N$0KNNB@$0FCCK@@random@boost@@2_NB ; boost::random::fibonacci_validation<double,44497,21034>::is_specialized
PUBLIC	?has_fixed_range@?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@2_NB ; boost::random::linear_feedback_shift<unsigned long,32,31,13,12,0>::has_fixed_range
PUBLIC	?word_size@?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@2HB ; boost::random::linear_feedback_shift<unsigned long,32,31,13,12,0>::word_size
PUBLIC	?exponent1@?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@2HB ; boost::random::linear_feedback_shift<unsigned long,32,31,13,12,0>::exponent1
PUBLIC	?exponent2@?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@2HB ; boost::random::linear_feedback_shift<unsigned long,32,31,13,12,0>::exponent2
PUBLIC	?step_size@?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@2HB ; boost::random::linear_feedback_shift<unsigned long,32,31,13,12,0>::step_size
PUBLIC	?has_fixed_range@?$xor_combine@V?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@$0A@V?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@23@$0A@$0A@@random@boost@@2_NB ; boost::random::xor_combine<boost::random::linear_feedback_shift<unsigned long,32,31,13,12,0>,0,boost::random::linear_feedback_shift<unsigned long,32,29,2,4,0>,0,0>::has_fixed_range
PUBLIC	?shift1@?$xor_combine@V?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@$0A@V?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@23@$0A@$0A@@random@boost@@2HB ; boost::random::xor_combine<boost::random::linear_feedback_shift<unsigned long,32,31,13,12,0>,0,boost::random::linear_feedback_shift<unsigned long,32,29,2,4,0>,0,0>::shift1
PUBLIC	?shift2@?$xor_combine@V?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@$0A@V?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@23@$0A@$0A@@random@boost@@2HB ; boost::random::xor_combine<boost::random::linear_feedback_shift<unsigned long,32,31,13,12,0>,0,boost::random::linear_feedback_shift<unsigned long,32,29,2,4,0>,0,0>::shift2
PUBLIC	?has_fixed_range@?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@random@boost@@2_NB ; boost::random::linear_feedback_shift<unsigned long,32,29,2,4,0>::has_fixed_range
PUBLIC	?word_size@?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@random@boost@@2HB ; boost::random::linear_feedback_shift<unsigned long,32,29,2,4,0>::word_size
PUBLIC	?exponent1@?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@random@boost@@2HB ; boost::random::linear_feedback_shift<unsigned long,32,29,2,4,0>::exponent1
PUBLIC	?exponent2@?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@random@boost@@2HB ; boost::random::linear_feedback_shift<unsigned long,32,29,2,4,0>::exponent2
PUBLIC	?step_size@?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@random@boost@@2HB ; boost::random::linear_feedback_shift<unsigned long,32,29,2,4,0>::step_size
PUBLIC	?value@?$is_arithmetic_impl@Uinput@iostreams@boost@@@detail@boost@@2_NB ; boost::detail::is_arithmetic_impl<boost::iostreams::input>::value
PUBLIC	?value@?$is_abstract_imp@Uinput@iostreams@boost@@@detail@boost@@2_NB ; boost::detail::is_abstract_imp<boost::iostreams::input>::value
PUBLIC	?value@?$is_convertible_basic_impl@AAUinput@iostreams@boost@@U123@@detail@boost@@2_NB ; boost::detail::is_convertible_basic_impl<boost::iostreams::input &,boost::iostreams::input>::value
PUBLIC	?value@?$ice_or@$00$0A@$0A@$0A@$0A@$0A@$0A@@type_traits@boost@@2_NB ; boost::type_traits::ice_or<1,0,0,0,0,0,0>::value
PUBLIC	?value@?$ice_not@$0A@@type_traits@boost@@2_NB	; boost::type_traits::ice_not<0>::value
PUBLIC	?value@?$is_convertible_impl@Uinput@iostreams@boost@@U123@@detail@boost@@2_NB ; boost::detail::is_convertible_impl<boost::iostreams::input,boost::iostreams::input>::value
PUBLIC	?value@?$is_arithmetic_impl@Uoutput@iostreams@boost@@@detail@boost@@2_NB ; boost::detail::is_arithmetic_impl<boost::iostreams::output>::value
PUBLIC	?value@?$is_abstract_imp@Uoutput@iostreams@boost@@@detail@boost@@2_NB ; boost::detail::is_abstract_imp<boost::iostreams::output>::value
PUBLIC	?value@?$is_convertible_basic_impl@AAUinput@iostreams@boost@@Uoutput@23@@detail@boost@@2_NB ; boost::detail::is_convertible_basic_impl<boost::iostreams::input &,boost::iostreams::output>::value
PUBLIC	?value@?$ice_and@$0A@$00$00$00$00$00$00@type_traits@boost@@2_NB ; boost::type_traits::ice_and<0,1,1,1,1,1,1>::value
PUBLIC	?value@?$is_convertible_impl@Uinput@iostreams@boost@@Uoutput@23@@detail@boost@@2_NB ; boost::detail::is_convertible_impl<boost::iostreams::input,boost::iostreams::output>::value
PUBLIC	?word_size@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::word_size
PUBLIC	?state_size@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::state_size
PUBLIC	?shift_size@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::shift_size
PUBLIC	?mask_bits@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::mask_bits
PUBLIC	?parameter_a@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2KB ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::parameter_a
PUBLIC	?output_u@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::output_u
PUBLIC	?output_s@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::output_s
PUBLIC	?output_b@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2KB ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::output_b
PUBLIC	?output_t@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::output_t
PUBLIC	?output_c@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2KB ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::output_c
PUBLIC	?output_l@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::output_l
PUBLIC	?has_fixed_range@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2_NB ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::has_fixed_range
PUBLIC	?is_const@?$cv_traits_imp@PAH@detail@boost@@2_NB ; boost::detail::cv_traits_imp<int *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAH@detail@boost@@2_NB ; boost::detail::cv_traits_imp<int *>::is_volatile
PUBLIC	?value@?$is_ununsigned_helper@H@detail@boost@@2_NB ; boost::detail::is_ununsigned_helper<int>::value
PUBLIC	?value@?$is_unsigned_imp@H@detail@boost@@2_NB	; boost::detail::is_unsigned_imp<int>::value
PUBLIC	?has_fixed_range@?$backward_compatible_uniform_01@V?$pass_through_engine@AAV?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@@detail@random@boost@@N@detail@boost@@2_NB ; boost::detail::backward_compatible_uniform_01<boost::random::detail::pass_through_engine<boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566> &>,double>::has_fixed_range
PUBLIC	?has_fixed_range@?$backward_compatible_uniform_01@V?$pass_through_engine@V?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@@detail@random@boost@@N@detail@boost@@2_NB ; boost::detail::backward_compatible_uniform_01<boost::random::detail::pass_through_engine<boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566> >,double>::has_fixed_range
PUBLIC	?value@?$implementation_level@V?$list@_NV?$allocator@_N@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::list<bool,std::allocator<bool> > >::value
PUBLIC	?value@?$implementation_level@V?$list@DV?$allocator@D@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::list<char,std::allocator<char> > >::value
PUBLIC	?value@?$implementation_level@V?$list@CV?$allocator@C@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::list<signed char,std::allocator<signed char> > >::value
PUBLIC	?value@?$implementation_level@V?$list@EV?$allocator@E@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::list<unsigned char,std::allocator<unsigned char> > >::value
PUBLIC	?value@?$implementation_level@V?$list@HV?$allocator@H@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::list<int,std::allocator<int> > >::value
PUBLIC	?value@?$implementation_level@V?$list@IV?$allocator@I@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::list<unsigned int,std::allocator<unsigned int> > >::value
PUBLIC	?value@?$implementation_level@V?$list@JV?$allocator@J@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::list<long,std::allocator<long> > >::value
PUBLIC	?value@?$implementation_level@V?$list@KV?$allocator@K@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::list<unsigned long,std::allocator<unsigned long> > >::value
PUBLIC	?value@?$implementation_level@V?$list@MV?$allocator@M@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::list<float,std::allocator<float> > >::value
PUBLIC	?value@?$implementation_level@V?$list@NV?$allocator@N@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::list<double,std::allocator<double> > >::value
PUBLIC	?value@?$implementation_level@V?$list@GV?$allocator@G@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::list<unsigned short,std::allocator<unsigned short> > >::value
PUBLIC	?value@?$implementation_level@V?$list@FV?$allocator@F@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::list<short,std::allocator<short> > >::value
PUBLIC	?value@?$implementation_level@V?$list@_JV?$allocator@_J@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::list<__int64,std::allocator<__int64> > >::value
PUBLIC	?value@?$implementation_level@V?$list@_KV?$allocator@_K@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::list<unsigned __int64,std::allocator<unsigned __int64> > >::value
PUBLIC	?value@?$implementation_level@V?$list@_WV?$allocator@_W@std@@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::list<wchar_t,std::allocator<wchar_t> > >::value
PUBLIC	?value@?$implementation_level@Uversion_type@archive@boost@@@serialization@boost@@2HB ; boost::serialization::implementation_level<boost::archive::version_type>::value
PUBLIC	?value@?$implementation_level@Uclass_id_type@archive@boost@@@serialization@boost@@2HB ; boost::serialization::implementation_level<boost::archive::class_id_type>::value
PUBLIC	?value@?$implementation_level@Uclass_id_reference_type@archive@boost@@@serialization@boost@@2HB ; boost::serialization::implementation_level<boost::archive::class_id_reference_type>::value
PUBLIC	?value@?$implementation_level@Uclass_id_optional_type@archive@boost@@@serialization@boost@@2HB ; boost::serialization::implementation_level<boost::archive::class_id_optional_type>::value
PUBLIC	?value@?$implementation_level@Uclass_name_type@archive@boost@@@serialization@boost@@2HB ; boost::serialization::implementation_level<boost::archive::class_name_type>::value
PUBLIC	?value@?$implementation_level@Uobject_id_type@archive@boost@@@serialization@boost@@2HB ; boost::serialization::implementation_level<boost::archive::object_id_type>::value
PUBLIC	?value@?$implementation_level@Uobject_reference_type@archive@boost@@@serialization@boost@@2HB ; boost::serialization::implementation_level<boost::archive::object_reference_type>::value
PUBLIC	?value@?$implementation_level@Utracking_type@archive@boost@@@serialization@boost@@2HB ; boost::serialization::implementation_level<boost::archive::tracking_type>::value
PUBLIC	?value@?$implementation_level@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::value
PUBLIC	?value@?$implementation_level@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@serialization@boost@@2HB ; boost::serialization::implementation_level<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::value
PUBLIC	?value@?$int_@$0A@@mpl@boost@@2HB		; boost::mpl::int_<0>::value
PUBLIC	?value@?$is_convertible_basic_impl@AAUoutput@iostreams@boost@@Uinput@23@@detail@boost@@2_NB ; boost::detail::is_convertible_basic_impl<boost::iostreams::output &,boost::iostreams::input>::value
PUBLIC	?value@?$is_convertible_impl@Uoutput@iostreams@boost@@Uinput@23@@detail@boost@@2_NB ; boost::detail::is_convertible_impl<boost::iostreams::output,boost::iostreams::input>::value
PUBLIC	?is_const@?$cv_traits_imp@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *>::is_volatile
PUBLIC	?is_const@?$cv_traits_imp@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::is_volatile
PUBLIC	?value@?$is_abstract_imp@D@detail@boost@@2_NB	; boost::detail::is_abstract_imp<char>::value
PUBLIC	?is_const@?$cv_traits_imp@PBV?$iterator_range@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::iterator_range<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > > const *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PBV?$iterator_range@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::iterator_range<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > > const *>::is_volatile
PUBLIC	?is_const@?$cv_traits_imp@PAUtracking_type@archive@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::archive::tracking_type *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAUtracking_type@archive@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::archive::tracking_type *>::is_volatile
PUBLIC	?value@?$is_pointer_helper@Utracking_type@archive@boost@@@detail@boost@@2_NB ; boost::detail::is_pointer_helper<boost::archive::tracking_type>::value
PUBLIC	?value@?$result_@Utracking_type@archive@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB ; boost::detail::is_mem_fun_pointer_select<0>::result_<boost::archive::tracking_type>::value
PUBLIC	?value@?$is_pointer_impl@Utracking_type@archive@boost@@@detail@boost@@2_NB ; boost::detail::is_pointer_impl<boost::archive::tracking_type>::value
PUBLIC	?is_const@?$cv_traits_imp@PAUversion_type@archive@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::archive::version_type *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAUversion_type@archive@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::archive::version_type *>::is_volatile
PUBLIC	?value@?$is_pointer_helper@Uversion_type@archive@boost@@@detail@boost@@2_NB ; boost::detail::is_pointer_helper<boost::archive::version_type>::value
PUBLIC	?value@?$result_@Uversion_type@archive@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB ; boost::detail::is_mem_fun_pointer_select<0>::result_<boost::archive::version_type>::value
PUBLIC	?value@?$is_pointer_impl@Uversion_type@archive@boost@@@detail@boost@@2_NB ; boost::detail::is_pointer_impl<boost::archive::version_type>::value
PUBLIC	?is_const@?$cv_traits_imp@PAUobject_id_type@archive@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::archive::object_id_type *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAUobject_id_type@archive@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::archive::object_id_type *>::is_volatile
PUBLIC	?value@?$is_pointer_helper@Uobject_id_type@archive@boost@@@detail@boost@@2_NB ; boost::detail::is_pointer_helper<boost::archive::object_id_type>::value
PUBLIC	?value@?$result_@Uobject_id_type@archive@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB ; boost::detail::is_mem_fun_pointer_select<0>::result_<boost::archive::object_id_type>::value
PUBLIC	?value@?$is_pointer_impl@Uobject_id_type@archive@boost@@@detail@boost@@2_NB ; boost::detail::is_pointer_impl<boost::archive::object_id_type>::value
PUBLIC	?is_const@?$cv_traits_imp@PAUclass_id_type@archive@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::archive::class_id_type *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAUclass_id_type@archive@boost@@@detail@boost@@2_NB ; boost::detail::cv_traits_imp<boost::archive::class_id_type *>::is_volatile
PUBLIC	?value@?$is_pointer_helper@Uclass_id_type@archive@boost@@@detail@boost@@2_NB ; boost::detail::is_pointer_helper<boost::archive::class_id_type>::value
PUBLIC	?value@?$result_@Uclass_id_type@archive@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB ; boost::detail::is_mem_fun_pointer_select<0>::result_<boost::archive::class_id_type>::value
PUBLIC	?value@?$is_pointer_impl@Uclass_id_type@archive@boost@@@detail@boost@@2_NB ; boost::detail::is_pointer_impl<boost::archive::class_id_type>::value
PUBLIC	?is_const@?$cv_traits_imp@PAI@detail@boost@@2_NB ; boost::detail::cv_traits_imp<unsigned int *>::is_const
PUBLIC	?is_volatile@?$cv_traits_imp@PAI@detail@boost@@2_NB ; boost::detail::cv_traits_imp<unsigned int *>::is_volatile
PUBLIC	?value@?$is_pointer_helper@I@detail@boost@@2_NB	; boost::detail::is_pointer_helper<unsigned int>::value
PUBLIC	?value@?$result_@I@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB ; boost::detail::is_mem_fun_pointer_select<0>::result_<unsigned int>::value
PUBLIC	?value@?$is_pointer_impl@I@detail@boost@@2_NB	; boost::detail::is_pointer_impl<unsigned int>::value
PUBLIC	?value@?$is_base_and_derived_impl@Ubasic_traits@serialization@boost@@I@detail@boost@@2_NB ; boost::detail::is_base_and_derived_impl<boost::serialization::basic_traits,unsigned int>::value
PUBLIC	?value@?$is_arithmetic_impl@I@detail@boost@@2_NB ; boost::detail::is_arithmetic_impl<unsigned int>::value
PUBLIC	?value@?$implementation_level@I@serialization@boost@@2HB ; boost::serialization::implementation_level<unsigned int>::value
PUBLIC	?value@?$is_pointer_helper@H@detail@boost@@2_NB	; boost::detail::is_pointer_helper<int>::value
PUBLIC	?value@?$result_@H@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB ; boost::detail::is_mem_fun_pointer_select<0>::result_<int>::value
PUBLIC	?value@?$is_pointer_impl@H@detail@boost@@2_NB	; boost::detail::is_pointer_impl<int>::value
PUBLIC	?value@?$is_base_and_derived_impl@Ubasic_traits@serialization@boost@@H@detail@boost@@2_NB ; boost::detail::is_base_and_derived_impl<boost::serialization::basic_traits,int>::value
PUBLIC	?value@?$is_arithmetic_impl@H@detail@boost@@2_NB ; boost::detail::is_arithmetic_impl<int>::value
PUBLIC	?value@?$implementation_level@H@serialization@boost@@2HB ; boost::serialization::implementation_level<int>::value
PUBLIC	?value@?$is_pointer_helper@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@boost@@2_NB ; boost::detail::is_pointer_helper<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::value
PUBLIC	?value@?$result_@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB ; boost::detail::is_mem_fun_pointer_select<0>::result_<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::value
PUBLIC	?value@?$is_pointer_impl@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@boost@@2_NB ; boost::detail::is_pointer_impl<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::value
;	COMDAT ?value@?$is_pointer_impl@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_impl@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@boost@@2_NB DB 00H ; boost::detail::is_pointer_impl<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::value
CONST	ENDS
;	COMDAT ?value@?$result_@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$result_@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB DB 00H ; boost::detail::is_mem_fun_pointer_select<0>::result_<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::value
CONST	ENDS
;	COMDAT ?value@?$is_pointer_helper@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_helper@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@boost@@2_NB DB 00H ; boost::detail::is_pointer_helper<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@H@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@H@serialization@boost@@2HB DD 01H ; boost::serialization::implementation_level<int>::value
CONST	ENDS
;	COMDAT ?value@?$is_arithmetic_impl@H@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_arithmetic_impl@H@detail@boost@@2_NB DB 01H	; boost::detail::is_arithmetic_impl<int>::value
CONST	ENDS
;	COMDAT ?value@?$is_base_and_derived_impl@Ubasic_traits@serialization@boost@@H@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_base_and_derived_impl@Ubasic_traits@serialization@boost@@H@detail@boost@@2_NB DB 00H ; boost::detail::is_base_and_derived_impl<boost::serialization::basic_traits,int>::value
CONST	ENDS
;	COMDAT ?value@?$is_pointer_impl@H@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_impl@H@detail@boost@@2_NB DB 00H	; boost::detail::is_pointer_impl<int>::value
CONST	ENDS
;	COMDAT ?value@?$result_@H@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$result_@H@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB DB 00H ; boost::detail::is_mem_fun_pointer_select<0>::result_<int>::value
CONST	ENDS
;	COMDAT ?value@?$is_pointer_helper@H@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_helper@H@detail@boost@@2_NB DB 00H	; boost::detail::is_pointer_helper<int>::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@I@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@I@serialization@boost@@2HB DD 01H ; boost::serialization::implementation_level<unsigned int>::value
CONST	ENDS
;	COMDAT ?value@?$is_arithmetic_impl@I@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_arithmetic_impl@I@detail@boost@@2_NB DB 01H	; boost::detail::is_arithmetic_impl<unsigned int>::value
CONST	ENDS
;	COMDAT ?value@?$is_base_and_derived_impl@Ubasic_traits@serialization@boost@@I@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_base_and_derived_impl@Ubasic_traits@serialization@boost@@I@detail@boost@@2_NB DB 00H ; boost::detail::is_base_and_derived_impl<boost::serialization::basic_traits,unsigned int>::value
CONST	ENDS
;	COMDAT ?value@?$is_pointer_impl@I@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_impl@I@detail@boost@@2_NB DB 00H	; boost::detail::is_pointer_impl<unsigned int>::value
CONST	ENDS
;	COMDAT ?value@?$result_@I@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$result_@I@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB DB 00H ; boost::detail::is_mem_fun_pointer_select<0>::result_<unsigned int>::value
CONST	ENDS
;	COMDAT ?value@?$is_pointer_helper@I@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_helper@I@detail@boost@@2_NB DB 00H	; boost::detail::is_pointer_helper<unsigned int>::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAI@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAI@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<unsigned int *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAI@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAI@detail@boost@@2_NB DB 00H	; boost::detail::cv_traits_imp<unsigned int *>::is_const
CONST	ENDS
;	COMDAT ?value@?$is_pointer_impl@Uclass_id_type@archive@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_impl@Uclass_id_type@archive@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_pointer_impl<boost::archive::class_id_type>::value
CONST	ENDS
;	COMDAT ?value@?$result_@Uclass_id_type@archive@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$result_@Uclass_id_type@archive@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB DB 00H ; boost::detail::is_mem_fun_pointer_select<0>::result_<boost::archive::class_id_type>::value
CONST	ENDS
;	COMDAT ?value@?$is_pointer_helper@Uclass_id_type@archive@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_helper@Uclass_id_type@archive@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_pointer_helper<boost::archive::class_id_type>::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAUclass_id_type@archive@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAUclass_id_type@archive@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::archive::class_id_type *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAUclass_id_type@archive@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAUclass_id_type@archive@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::archive::class_id_type *>::is_const
CONST	ENDS
;	COMDAT ?value@?$is_pointer_impl@Uobject_id_type@archive@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_impl@Uobject_id_type@archive@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_pointer_impl<boost::archive::object_id_type>::value
CONST	ENDS
;	COMDAT ?value@?$result_@Uobject_id_type@archive@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$result_@Uobject_id_type@archive@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB DB 00H ; boost::detail::is_mem_fun_pointer_select<0>::result_<boost::archive::object_id_type>::value
CONST	ENDS
;	COMDAT ?value@?$is_pointer_helper@Uobject_id_type@archive@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_helper@Uobject_id_type@archive@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_pointer_helper<boost::archive::object_id_type>::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAUobject_id_type@archive@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAUobject_id_type@archive@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::archive::object_id_type *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAUobject_id_type@archive@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAUobject_id_type@archive@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::archive::object_id_type *>::is_const
CONST	ENDS
;	COMDAT ?value@?$is_pointer_impl@Uversion_type@archive@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_impl@Uversion_type@archive@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_pointer_impl<boost::archive::version_type>::value
CONST	ENDS
;	COMDAT ?value@?$result_@Uversion_type@archive@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$result_@Uversion_type@archive@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB DB 00H ; boost::detail::is_mem_fun_pointer_select<0>::result_<boost::archive::version_type>::value
CONST	ENDS
;	COMDAT ?value@?$is_pointer_helper@Uversion_type@archive@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_helper@Uversion_type@archive@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_pointer_helper<boost::archive::version_type>::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAUversion_type@archive@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAUversion_type@archive@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::archive::version_type *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAUversion_type@archive@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAUversion_type@archive@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::archive::version_type *>::is_const
CONST	ENDS
;	COMDAT ?value@?$is_pointer_impl@Utracking_type@archive@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_impl@Utracking_type@archive@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_pointer_impl<boost::archive::tracking_type>::value
CONST	ENDS
;	COMDAT ?value@?$result_@Utracking_type@archive@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$result_@Utracking_type@archive@boost@@@?$is_mem_fun_pointer_select@$0A@@detail@boost@@2_NB DB 00H ; boost::detail::is_mem_fun_pointer_select<0>::result_<boost::archive::tracking_type>::value
CONST	ENDS
;	COMDAT ?value@?$is_pointer_helper@Utracking_type@archive@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pointer_helper@Utracking_type@archive@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_pointer_helper<boost::archive::tracking_type>::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAUtracking_type@archive@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAUtracking_type@archive@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::archive::tracking_type *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAUtracking_type@archive@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAUtracking_type@archive@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::archive::tracking_type *>::is_const
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PBV?$iterator_range@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PBV?$iterator_range@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<boost::iterator_range<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > > const *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PBV?$iterator_range@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PBV?$iterator_range@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@boost@@@detail@boost@@2_NB DB 01H ; boost::detail::cv_traits_imp<boost::iterator_range<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > > const *>::is_const
CONST	ENDS
;	COMDAT ?value@?$is_abstract_imp@D@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_abstract_imp@D@detail@boost@@2_NB DB 00H	; boost::detail::is_abstract_imp<char>::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>::is_const
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@detail@boost@@2_NB DB 01H ; boost::detail::cv_traits_imp<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *>::is_const
CONST	ENDS
;	COMDAT ?value@?$is_convertible_impl@Uoutput@iostreams@boost@@Uinput@23@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_impl@Uoutput@iostreams@boost@@Uinput@23@@detail@boost@@2_NB DB 00H ; boost::detail::is_convertible_impl<boost::iostreams::output,boost::iostreams::input>::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_basic_impl@AAUoutput@iostreams@boost@@Uinput@23@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_basic_impl@AAUoutput@iostreams@boost@@Uinput@23@@detail@boost@@2_NB DB 00H ; boost::detail::is_convertible_basic_impl<boost::iostreams::output &,boost::iostreams::input>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$0A@@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$0A@@mpl@boost@@2HB DD 00H		; boost::mpl::int_<0>::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@serialization@boost@@2HB DD 01H ; boost::serialization::implementation_level<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@serialization@boost@@2HB DD 01H ; boost::serialization::implementation_level<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@Utracking_type@archive@boost@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@Utracking_type@archive@boost@@@serialization@boost@@2HB DD 01H ; boost::serialization::implementation_level<boost::archive::tracking_type>::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@Uobject_reference_type@archive@boost@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@Uobject_reference_type@archive@boost@@@serialization@boost@@2HB DD 01H ; boost::serialization::implementation_level<boost::archive::object_reference_type>::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@Uobject_id_type@archive@boost@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@Uobject_id_type@archive@boost@@@serialization@boost@@2HB DD 01H ; boost::serialization::implementation_level<boost::archive::object_id_type>::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@Uclass_name_type@archive@boost@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@Uclass_name_type@archive@boost@@@serialization@boost@@2HB DD 01H ; boost::serialization::implementation_level<boost::archive::class_name_type>::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@Uclass_id_optional_type@archive@boost@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@Uclass_id_optional_type@archive@boost@@@serialization@boost@@2HB DD 01H ; boost::serialization::implementation_level<boost::archive::class_id_optional_type>::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@Uclass_id_reference_type@archive@boost@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@Uclass_id_reference_type@archive@boost@@@serialization@boost@@2HB DD 01H ; boost::serialization::implementation_level<boost::archive::class_id_reference_type>::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@Uclass_id_type@archive@boost@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@Uclass_id_type@archive@boost@@@serialization@boost@@2HB DD 01H ; boost::serialization::implementation_level<boost::archive::class_id_type>::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@Uversion_type@archive@boost@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@Uversion_type@archive@boost@@@serialization@boost@@2HB DD 01H ; boost::serialization::implementation_level<boost::archive::version_type>::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$list@_WV?$allocator@_W@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$list@_WV?$allocator@_W@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::list<wchar_t,std::allocator<wchar_t> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$list@_KV?$allocator@_K@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$list@_KV?$allocator@_K@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::list<unsigned __int64,std::allocator<unsigned __int64> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$list@_JV?$allocator@_J@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$list@_JV?$allocator@_J@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::list<__int64,std::allocator<__int64> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$list@FV?$allocator@F@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$list@FV?$allocator@F@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::list<short,std::allocator<short> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$list@GV?$allocator@G@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$list@GV?$allocator@G@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::list<unsigned short,std::allocator<unsigned short> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$list@NV?$allocator@N@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$list@NV?$allocator@N@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::list<double,std::allocator<double> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$list@MV?$allocator@M@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$list@MV?$allocator@M@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::list<float,std::allocator<float> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$list@KV?$allocator@K@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$list@KV?$allocator@K@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::list<unsigned long,std::allocator<unsigned long> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$list@JV?$allocator@J@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$list@JV?$allocator@J@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::list<long,std::allocator<long> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$list@IV?$allocator@I@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$list@IV?$allocator@I@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::list<unsigned int,std::allocator<unsigned int> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$list@HV?$allocator@H@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$list@HV?$allocator@H@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::list<int,std::allocator<int> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$list@EV?$allocator@E@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$list@EV?$allocator@E@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::list<unsigned char,std::allocator<unsigned char> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$list@CV?$allocator@C@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$list@CV?$allocator@C@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::list<signed char,std::allocator<signed char> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$list@DV?$allocator@D@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$list@DV?$allocator@D@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::list<char,std::allocator<char> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$list@_NV?$allocator@_N@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$list@_NV?$allocator@_N@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::list<bool,std::allocator<bool> > >::value
CONST	ENDS
;	COMDAT ?has_fixed_range@?$backward_compatible_uniform_01@V?$pass_through_engine@V?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@@detail@random@boost@@N@detail@boost@@2_NB
CONST	SEGMENT
?has_fixed_range@?$backward_compatible_uniform_01@V?$pass_through_engine@V?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@@detail@random@boost@@N@detail@boost@@2_NB DB 00H ; boost::detail::backward_compatible_uniform_01<boost::random::detail::pass_through_engine<boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566> >,double>::has_fixed_range
CONST	ENDS
;	COMDAT ?has_fixed_range@?$backward_compatible_uniform_01@V?$pass_through_engine@AAV?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@@detail@random@boost@@N@detail@boost@@2_NB
CONST	SEGMENT
?has_fixed_range@?$backward_compatible_uniform_01@V?$pass_through_engine@AAV?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@@detail@random@boost@@N@detail@boost@@2_NB DB 00H ; boost::detail::backward_compatible_uniform_01<boost::random::detail::pass_through_engine<boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566> &>,double>::has_fixed_range
CONST	ENDS
;	COMDAT ?value@?$is_unsigned_imp@H@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_unsigned_imp@H@detail@boost@@2_NB DB 00H	; boost::detail::is_unsigned_imp<int>::value
CONST	ENDS
;	COMDAT ?value@?$is_ununsigned_helper@H@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_ununsigned_helper@H@detail@boost@@2_NB DB 00H ; boost::detail::is_ununsigned_helper<int>::value
CONST	ENDS
;	COMDAT ?is_volatile@?$cv_traits_imp@PAH@detail@boost@@2_NB
CONST	SEGMENT
?is_volatile@?$cv_traits_imp@PAH@detail@boost@@2_NB DB 00H ; boost::detail::cv_traits_imp<int *>::is_volatile
CONST	ENDS
;	COMDAT ?is_const@?$cv_traits_imp@PAH@detail@boost@@2_NB
CONST	SEGMENT
?is_const@?$cv_traits_imp@PAH@detail@boost@@2_NB DB 00H	; boost::detail::cv_traits_imp<int *>::is_const
CONST	ENDS
;	COMDAT ?has_fixed_range@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2_NB
CONST	SEGMENT
?has_fixed_range@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2_NB DB 00H ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::has_fixed_range
CONST	ENDS
;	COMDAT ?output_l@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB
CONST	SEGMENT
?output_l@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB DD 012H ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::output_l
CONST	ENDS
;	COMDAT ?output_c@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2KB
CONST	SEGMENT
?output_c@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2KB DD 0efc60000H ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::output_c
CONST	ENDS
;	COMDAT ?output_t@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB
CONST	SEGMENT
?output_t@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB DD 0fH ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::output_t
CONST	ENDS
;	COMDAT ?output_b@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2KB
CONST	SEGMENT
?output_b@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2KB DD 09d2c5680H ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::output_b
CONST	ENDS
;	COMDAT ?output_s@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB
CONST	SEGMENT
?output_s@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB DD 07H ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::output_s
CONST	ENDS
;	COMDAT ?output_u@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB
CONST	SEGMENT
?output_u@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB DD 0bH ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::output_u
CONST	ENDS
;	COMDAT ?parameter_a@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2KB
CONST	SEGMENT
?parameter_a@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2KB DD 09908b0dfH ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::parameter_a
CONST	ENDS
;	COMDAT ?mask_bits@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB
CONST	SEGMENT
?mask_bits@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB DD 01fH ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::mask_bits
CONST	ENDS
;	COMDAT ?shift_size@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB
CONST	SEGMENT
?shift_size@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB DD 018dH ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::shift_size
CONST	ENDS
;	COMDAT ?state_size@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB
CONST	SEGMENT
?state_size@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB DD 0270H ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::state_size
CONST	ENDS
;	COMDAT ?word_size@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB
CONST	SEGMENT
?word_size@?$mersenne_twister@K$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0MHHGGGNO@@random@boost@@2HB DD 020H ; boost::random::mersenne_twister<unsigned long,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18,3346425566>::word_size
CONST	ENDS
;	COMDAT ?value@?$is_convertible_impl@Uinput@iostreams@boost@@Uoutput@23@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_impl@Uinput@iostreams@boost@@Uoutput@23@@detail@boost@@2_NB DB 00H ; boost::detail::is_convertible_impl<boost::iostreams::input,boost::iostreams::output>::value
CONST	ENDS
;	COMDAT ?value@?$ice_and@$0A@$00$00$00$00$00$00@type_traits@boost@@2_NB
CONST	SEGMENT
?value@?$ice_and@$0A@$00$00$00$00$00$00@type_traits@boost@@2_NB DB 00H ; boost::type_traits::ice_and<0,1,1,1,1,1,1>::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_basic_impl@AAUinput@iostreams@boost@@Uoutput@23@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_basic_impl@AAUinput@iostreams@boost@@Uoutput@23@@detail@boost@@2_NB DB 00H ; boost::detail::is_convertible_basic_impl<boost::iostreams::input &,boost::iostreams::output>::value
CONST	ENDS
;	COMDAT ?value@?$is_abstract_imp@Uoutput@iostreams@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_abstract_imp@Uoutput@iostreams@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_abstract_imp<boost::iostreams::output>::value
CONST	ENDS
;	COMDAT ?value@?$is_arithmetic_impl@Uoutput@iostreams@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_arithmetic_impl@Uoutput@iostreams@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_arithmetic_impl<boost::iostreams::output>::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_impl@Uinput@iostreams@boost@@U123@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_impl@Uinput@iostreams@boost@@U123@@detail@boost@@2_NB DB 01H ; boost::detail::is_convertible_impl<boost::iostreams::input,boost::iostreams::input>::value
CONST	ENDS
;	COMDAT ?value@?$ice_not@$0A@@type_traits@boost@@2_NB
CONST	SEGMENT
?value@?$ice_not@$0A@@type_traits@boost@@2_NB DB 01H	; boost::type_traits::ice_not<0>::value
CONST	ENDS
;	COMDAT ?value@?$ice_or@$00$0A@$0A@$0A@$0A@$0A@$0A@@type_traits@boost@@2_NB
CONST	SEGMENT
?value@?$ice_or@$00$0A@$0A@$0A@$0A@$0A@$0A@@type_traits@boost@@2_NB DB 01H ; boost::type_traits::ice_or<1,0,0,0,0,0,0>::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_basic_impl@AAUinput@iostreams@boost@@U123@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_basic_impl@AAUinput@iostreams@boost@@U123@@detail@boost@@2_NB DB 01H ; boost::detail::is_convertible_basic_impl<boost::iostreams::input &,boost::iostreams::input>::value
CONST	ENDS
;	COMDAT ?value@?$is_abstract_imp@Uinput@iostreams@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_abstract_imp@Uinput@iostreams@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_abstract_imp<boost::iostreams::input>::value
CONST	ENDS
;	COMDAT ?value@?$is_arithmetic_impl@Uinput@iostreams@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_arithmetic_impl@Uinput@iostreams@boost@@@detail@boost@@2_NB DB 00H ; boost::detail::is_arithmetic_impl<boost::iostreams::input>::value
CONST	ENDS
;	COMDAT ?step_size@?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@random@boost@@2HB
CONST	SEGMENT
?step_size@?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@random@boost@@2HB DD 04H ; boost::random::linear_feedback_shift<unsigned long,32,29,2,4,0>::step_size
CONST	ENDS
;	COMDAT ?exponent2@?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@random@boost@@2HB
CONST	SEGMENT
?exponent2@?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@random@boost@@2HB DD 02H ; boost::random::linear_feedback_shift<unsigned long,32,29,2,4,0>::exponent2
CONST	ENDS
;	COMDAT ?exponent1@?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@random@boost@@2HB
CONST	SEGMENT
?exponent1@?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@random@boost@@2HB DD 01dH ; boost::random::linear_feedback_shift<unsigned long,32,29,2,4,0>::exponent1
CONST	ENDS
;	COMDAT ?word_size@?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@random@boost@@2HB
CONST	SEGMENT
?word_size@?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@random@boost@@2HB DD 020H ; boost::random::linear_feedback_shift<unsigned long,32,29,2,4,0>::word_size
CONST	ENDS
;	COMDAT ?has_fixed_range@?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@random@boost@@2_NB
CONST	SEGMENT
?has_fixed_range@?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@random@boost@@2_NB DB 00H ; boost::random::linear_feedback_shift<unsigned long,32,29,2,4,0>::has_fixed_range
CONST	ENDS
;	COMDAT ?shift2@?$xor_combine@V?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@$0A@V?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@23@$0A@$0A@@random@boost@@2HB
CONST	SEGMENT
?shift2@?$xor_combine@V?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@$0A@V?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@23@$0A@$0A@@random@boost@@2HB DD 00H ; boost::random::xor_combine<boost::random::linear_feedback_shift<unsigned long,32,31,13,12,0>,0,boost::random::linear_feedback_shift<unsigned long,32,29,2,4,0>,0,0>::shift2
CONST	ENDS
;	COMDAT ?shift1@?$xor_combine@V?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@$0A@V?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@23@$0A@$0A@@random@boost@@2HB
CONST	SEGMENT
?shift1@?$xor_combine@V?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@$0A@V?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@23@$0A@$0A@@random@boost@@2HB DD 00H ; boost::random::xor_combine<boost::random::linear_feedback_shift<unsigned long,32,31,13,12,0>,0,boost::random::linear_feedback_shift<unsigned long,32,29,2,4,0>,0,0>::shift1
CONST	ENDS
;	COMDAT ?has_fixed_range@?$xor_combine@V?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@$0A@V?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@23@$0A@$0A@@random@boost@@2_NB
CONST	SEGMENT
?has_fixed_range@?$xor_combine@V?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@$0A@V?$linear_feedback_shift@K$0CA@$0BN@$01$03$0A@@23@$0A@$0A@@random@boost@@2_NB DB 00H ; boost::random::xor_combine<boost::random::linear_feedback_shift<unsigned long,32,31,13,12,0>,0,boost::random::linear_feedback_shift<unsigned long,32,29,2,4,0>,0,0>::has_fixed_range
CONST	ENDS
;	COMDAT ?step_size@?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@2HB
CONST	SEGMENT
?step_size@?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@2HB DD 0cH ; boost::random::linear_feedback_shift<unsigned long,32,31,13,12,0>::step_size
CONST	ENDS
;	COMDAT ?exponent2@?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@2HB
CONST	SEGMENT
?exponent2@?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@2HB DD 0dH ; boost::random::linear_feedback_shift<unsigned long,32,31,13,12,0>::exponent2
CONST	ENDS
;	COMDAT ?exponent1@?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@2HB
CONST	SEGMENT
?exponent1@?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@2HB DD 01fH ; boost::random::linear_feedback_shift<unsigned long,32,31,13,12,0>::exponent1
CONST	ENDS
;	COMDAT ?word_size@?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@2HB
CONST	SEGMENT
?word_size@?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@2HB DD 020H ; boost::random::linear_feedback_shift<unsigned long,32,31,13,12,0>::word_size
CONST	ENDS
;	COMDAT ?has_fixed_range@?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@2_NB
CONST	SEGMENT
?has_fixed_range@?$linear_feedback_shift@K$0CA@$0BP@$0N@$0M@$0A@@random@boost@@2_NB DB 00H ; boost::random::linear_feedback_shift<unsigned long,32,31,13,12,0>::has_fixed_range
CONST	ENDS
;	COMDAT ?is_specialized@?$fibonacci_validation@N$0KNNB@$0FCCK@@random@boost@@2_NB
CONST	SEGMENT
?is_specialized@?$fibonacci_validation@N$0KNNB@$0FCCK@@random@boost@@2_NB DB 01H ; boost::random::fibonacci_validation<double,44497,21034>::is_specialized
CONST	ENDS
;	COMDAT ?is_specialized@?$fibonacci_validation@N$0FKKJ@$0DEJO@@random@boost@@2_NB
CONST	SEGMENT
?is_specialized@?$fibonacci_validation@N$0FKKJ@$0DEJO@@random@boost@@2_NB DB 01H ; boost::random::fibonacci_validation<double,23209,13470>::is_specialized
CONST	ENDS
;	COMDAT ?is_specialized@?$fibonacci_validation@N$0ENOB@$0CGHC@@random@boost@@2_NB
CONST	SEGMENT
?is_specialized@?$fibonacci_validation@N$0ENOB@$0CGHC@@random@boost@@2_NB DB 01H ; boost::random::fibonacci_validation<double,19937,9842>::is_specialized
CONST	ENDS
;	COMDAT ?is_specialized@?$fibonacci_validation@N$0CFNJ@$0BFHO@@random@boost@@2_NB
CONST	SEGMENT
?is_specialized@?$fibonacci_validation@N$0CFNJ@$0BFHO@@random@boost@@2_NB DB 01H ; boost::random::fibonacci_validation<double,9689,5502>::is_specialized
CONST	ENDS
;	COMDAT ?is_specialized@?$fibonacci_validation@N$0BBEH@$0IDC@@random@boost@@2_NB
CONST	SEGMENT
?is_specialized@?$fibonacci_validation@N$0BBEH@$0IDC@@random@boost@@2_NB DB 01H ; boost::random::fibonacci_validation<double,4423,2098>::is_specialized
CONST	ENDS
;	COMDAT ?is_specialized@?$fibonacci_validation@N$0MJB@$0CEA@@random@boost@@2_NB
CONST	SEGMENT
?is_specialized@?$fibonacci_validation@N$0MJB@$0CEA@@random@boost@@2_NB DB 01H ; boost::random::fibonacci_validation<double,3217,576>::is_specialized
CONST	ENDS
;	COMDAT ?is_specialized@?$fibonacci_validation@N$0IOJ@$0EOE@@random@boost@@2_NB
CONST	SEGMENT
?is_specialized@?$fibonacci_validation@N$0IOJ@$0EOE@@random@boost@@2_NB DB 01H ; boost::random::fibonacci_validation<double,2281,1252>::is_specialized
CONST	ENDS
;	COMDAT ?is_specialized@?$fibonacci_validation@N$0EPP@$0BKC@@random@boost@@2_NB
CONST	SEGMENT
?is_specialized@?$fibonacci_validation@N$0EPP@$0BKC@@random@boost@@2_NB DB 01H ; boost::random::fibonacci_validation<double,1279,418>::is_specialized
CONST	ENDS
;	COMDAT ?is_specialized@?$fibonacci_validation@N$0CFP@$0BBB@@random@boost@@2_NB
CONST	SEGMENT
?is_specialized@?$fibonacci_validation@N$0CFP@$0BBB@@random@boost@@2_NB DB 01H ; boost::random::fibonacci_validation<double,607,273>::is_specialized
CONST	ENDS
;	COMDAT ?modulus@?$linear_congruential@K$0FFG@$0CENGJ@$0KOFCJ@$0A@@random@boost@@2KB
CONST	SEGMENT
?modulus@?$linear_congruential@K$0FFG@$0CENGJ@$0KOFCJ@$0A@@random@boost@@2KB DD 0ae529H ; boost::random::linear_congruential<unsigned long,1366,150889,714025,0>::modulus
CONST	ENDS
;	COMDAT ?increment@?$linear_congruential@K$0FFG@$0CENGJ@$0KOFCJ@$0A@@random@boost@@2KB
CONST	SEGMENT
?increment@?$linear_congruential@K$0FFG@$0CENGJ@$0KOFCJ@$0A@@random@boost@@2KB DD 024d69H ; boost::random::linear_congruential<unsigned long,1366,150889,714025,0>::increment
CONST	ENDS
;	COMDAT ?multiplier@?$linear_congruential@K$0FFG@$0CENGJ@$0KOFCJ@$0A@@random@boost@@2KB
CONST	SEGMENT
?multiplier@?$linear_congruential@K$0FFG@$0CENGJ@$0KOFCJ@$0A@@random@boost@@2KB DD 0556H ; boost::random::linear_congruential<unsigned long,1366,150889,714025,0>::multiplier
CONST	ENDS
;	COMDAT ?max_value@?$linear_congruential@K$0FFG@$0CENGJ@$0KOFCJ@$0A@@random@boost@@2KB
CONST	SEGMENT
?max_value@?$linear_congruential@K$0FFG@$0CENGJ@$0KOFCJ@$0A@@random@boost@@2KB DD 0ae528H ; boost::random::linear_congruential<unsigned long,1366,150889,714025,0>::max_value
CONST	ENDS
;	COMDAT ?min_value@?$linear_congruential@K$0FFG@$0CENGJ@$0KOFCJ@$0A@@random@boost@@2KB
CONST	SEGMENT
?min_value@?$linear_congruential@K$0FFG@$0CENGJ@$0KOFCJ@$0A@@random@boost@@2KB DD 00H ; boost::random::linear_congruential<unsigned long,1366,150889,714025,0>::min_value
CONST	ENDS
;	COMDAT ?has_fixed_range@?$linear_congruential@K$0FFG@$0CENGJ@$0KOFCJ@$0A@@random@boost@@2_NB
CONST	SEGMENT
?has_fixed_range@?$linear_congruential@K$0FFG@$0CENGJ@$0KOFCJ@$0A@@random@boost@@2_NB DB 01H ; boost::random::linear_congruential<unsigned long,1366,150889,714025,0>::has_fixed_range
CONST	ENDS
;	COMDAT ?modulus@?$linear_congruential@J$0JMEO@$0A@$0HPPPPPKL@$0A@@random@boost@@2JB
CONST	SEGMENT
?modulus@?$linear_congruential@J$0JMEO@$0A@$0HPPPPPKL@$0A@@random@boost@@2JB DD 07fffffabH ; boost::random::linear_congruential<long,40014,0,2147483563,0>::modulus
CONST	ENDS
;	COMDAT ?increment@?$linear_congruential@J$0JMEO@$0A@$0HPPPPPKL@$0A@@random@boost@@2JB
CONST	SEGMENT
?increment@?$linear_congruential@J$0JMEO@$0A@$0HPPPPPKL@$0A@@random@boost@@2JB DD 00H ; boost::random::linear_congruential<long,40014,0,2147483563,0>::increment
CONST	ENDS
;	COMDAT ?multiplier@?$linear_congruential@J$0JMEO@$0A@$0HPPPPPKL@$0A@@random@boost@@2JB
CONST	SEGMENT
?multiplier@?$linear_congruential@J$0JMEO@$0A@$0HPPPPPKL@$0A@@random@boost@@2JB DD 09c4eH ; boost::random::linear_congruential<long,40014,0,2147483563,0>::multiplier
CONST	ENDS
;	COMDAT ?max_value@?$linear_congruential@J$0JMEO@$0A@$0HPPPPPKL@$0A@@random@boost@@2JB
CONST	SEGMENT
?max_value@?$linear_congruential@J$0JMEO@$0A@$0HPPPPPKL@$0A@@random@boost@@2JB DD 07fffffaaH ; boost::random::linear_congruential<long,40014,0,2147483563,0>::max_value
CONST	ENDS
;	COMDAT ?min_value@?$linear_congruential@J$0JMEO@$0A@$0HPPPPPKL@$0A@@random@boost@@2JB
CONST	SEGMENT
?min_value@?$linear_congruential@J$0JMEO@$0A@$0HPPPPPKL@$0A@@random@boost@@2JB DD 01H ; boost::random::linear_congruential<long,40014,0,2147483563,0>::min_value
CONST	ENDS
;	COMDAT ?has_fixed_range@?$linear_congruential@J$0JMEO@$0A@$0HPPPPPKL@$0A@@random@boost@@2_NB
CONST	SEGMENT
?has_fixed_range@?$linear_congruential@J$0JMEO@$0A@$0HPPPPPKL@$0A@@random@boost@@2_NB DB 01H ; boost::random::linear_congruential<long,40014,0,2147483563,0>::has_fixed_range
CONST	ENDS
;	COMDAT ?modulus@?$linear_congruential@_K$0FNOOMOGGN@$0L@$0BAAAAAAAAAAAA@$0A@@random@boost@@2_KB
CONST	SEGMENT
?modulus@?$linear_congruential@_K$0FNOOMOGGN@$0L@$0BAAAAAAAAAAAA@$0A@@random@boost@@2_KB DQ 0001000000000000H ; boost::random::linear_congruential<unsigned __int64,25214903917,11,281474976710656,0>::modulus
CONST	ENDS
;	COMDAT ?increment@?$linear_congruential@_K$0FNOOMOGGN@$0L@$0BAAAAAAAAAAAA@$0A@@random@boost@@2_KB
CONST	SEGMENT
?increment@?$linear_congruential@_K$0FNOOMOGGN@$0L@$0BAAAAAAAAAAAA@$0A@@random@boost@@2_KB DQ 000000000000000bH ; boost::random::linear_congruential<unsigned __int64,25214903917,11,281474976710656,0>::increment
CONST	ENDS
;	COMDAT ?multiplier@?$linear_congruential@_K$0FNOOMOGGN@$0L@$0BAAAAAAAAAAAA@$0A@@random@boost@@2_KB
CONST	SEGMENT
?multiplier@?$linear_congruential@_K$0FNOOMOGGN@$0L@$0BAAAAAAAAAAAA@$0A@@random@boost@@2_KB DQ 00000005deece66dH ; boost::random::linear_congruential<unsigned __int64,25214903917,11,281474976710656,0>::multiplier
CONST	ENDS
;	COMDAT ?max_value@?$linear_congruential@_K$0FNOOMOGGN@$0L@$0BAAAAAAAAAAAA@$0A@@random@boost@@2_KB
CONST	SEGMENT
?max_value@?$linear_congruential@_K$0FNOOMOGGN@$0L@$0BAAAAAAAAAAAA@$0A@@random@boost@@2_KB DQ 0000ffffffffffffH ; boost::random::linear_congruential<unsigned __int64,25214903917,11,281474976710656,0>::max_value
CONST	ENDS
;	COMDAT ?min_value@?$linear_congruential@_K$0FNOOMOGGN@$0L@$0BAAAAAAAAAAAA@$0A@@random@boost@@2_KB
CONST	SEGMENT
?min_value@?$linear_congruential@_K$0FNOOMOGGN@$0L@$0BAAAAAAAAAAAA@$0A@@random@boost@@2_KB DQ 0000000000000000H ; boost::random::linear_congruential<unsigned __int64,25214903917,11,281474976710656,0>::min_value
CONST	ENDS
;	COMDAT ?has_fixed_range@?$linear_congruential@_K$0FNOOMOGGN@$0L@$0BAAAAAAAAAAAA@$0A@@random@boost@@2_NB
CONST	SEGMENT
?has_fixed_range@?$linear_congruential@_K$0FNOOMOGGN@$0L@$0BAAAAAAAAAAAA@$0A@@random@boost@@2_NB DB 01H ; boost::random::linear_congruential<unsigned __int64,25214903917,11,281474976710656,0>::has_fixed_range
CONST	ENDS
;	COMDAT ?max_value@rand48@boost@@2JB
CONST	SEGMENT
?max_value@rand48@boost@@2JB DD 07fffffffH		; boost::rand48::max_value
CONST	ENDS
;	COMDAT ?min_value@rand48@boost@@2JB
CONST	SEGMENT
?min_value@rand48@boost@@2JB DD 00H			; boost::rand48::min_value
CONST	ENDS
;	COMDAT ?has_fixed_range@rand48@boost@@2_NB
CONST	SEGMENT
?has_fixed_range@rand48@boost@@2_NB DB 01H		; boost::rand48::has_fixed_range
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$vector@_WV?$allocator@_W@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$vector@_WV?$allocator@_W@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::vector<wchar_t,std::allocator<wchar_t> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$vector@_KV?$allocator@_K@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$vector@_KV?$allocator@_K@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::vector<unsigned __int64,std::allocator<unsigned __int64> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$vector@_JV?$allocator@_J@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$vector@_JV?$allocator@_J@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::vector<__int64,std::allocator<__int64> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$vector@FV?$allocator@F@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$vector@FV?$allocator@F@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::vector<short,std::allocator<short> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$vector@GV?$allocator@G@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$vector@GV?$allocator@G@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::vector<unsigned short,std::allocator<unsigned short> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$vector@NV?$allocator@N@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$vector@NV?$allocator@N@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::vector<double,std::allocator<double> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$vector@MV?$allocator@M@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$vector@MV?$allocator@M@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::vector<float,std::allocator<float> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$vector@KV?$allocator@K@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$vector@KV?$allocator@K@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::vector<unsigned long,std::allocator<unsigned long> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$vector@JV?$allocator@J@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$vector@JV?$allocator@J@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::vector<long,std::allocator<long> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$vector@IV?$allocator@I@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$vector@IV?$allocator@I@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::vector<unsigned int,std::allocator<unsigned int> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$vector@HV?$allocator@H@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$vector@HV?$allocator@H@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::vector<int,std::allocator<int> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$vector@EV?$allocator@E@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$vector@EV?$allocator@E@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::vector<unsigned char,std::allocator<unsigned char> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$vector@CV?$allocator@C@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$vector@CV?$allocator@C@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::vector<signed char,std::allocator<signed char> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$vector@DV?$allocator@D@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$vector@DV?$allocator@D@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::vector<char,std::allocator<char> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@V?$vector@_NV?$allocator@_N@std@@@std@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@V?$vector@_NV?$allocator@_N@std@@@std@@@serialization@boost@@2HB DD 02H ; boost::serialization::implementation_level<std::vector<bool,std::allocator<bool> > >::value
CONST	ENDS
;	COMDAT ?value@?$implementation_level@Ucollection_size_type@serialization@boost@@@serialization@boost@@2HB
CONST	SEGMENT
?value@?$implementation_level@Ucollection_size_type@serialization@boost@@@serialization@boost@@2HB DD 01H ; boost::serialization::implementation_level<boost::serialization::collection_size_type>::value
CONST	ENDS
;	COMDAT ?value@?$is_pod_impl@Ua128@align@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pod_impl@Ua128@align@boost@@@detail@boost@@2_NB DB 01H ; boost::detail::is_pod_impl<boost::align::a128>::value
CONST	ENDS
;	COMDAT ?value@?$is_pod_impl@Ua64@align@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pod_impl@Ua64@align@boost@@@detail@boost@@2_NB DB 01H ; boost::detail::is_pod_impl<boost::align::a64>::value
CONST	ENDS
;	COMDAT ?value@?$is_pod_impl@Ua32@align@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pod_impl@Ua32@align@boost@@@detail@boost@@2_NB DB 01H ; boost::detail::is_pod_impl<boost::align::a32>::value
CONST	ENDS
;	COMDAT ?value@?$is_pod_impl@Ua16@align@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pod_impl@Ua16@align@boost@@@detail@boost@@2_NB DB 01H ; boost::detail::is_pod_impl<boost::align::a16>::value
CONST	ENDS
;	COMDAT ?value@?$is_pod_impl@Ua8@align@boost@@@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pod_impl@Ua8@align@boost@@@detail@boost@@2_NB DB 01H ; boost::detail::is_pod_impl<boost::align::a8>::value
CONST	ENDS
;	COMDAT ?found@?$type_with_alignment_imp@$07@detail@boost@@0IB
CONST	SEGMENT
?found@?$type_with_alignment_imp@$07@detail@boost@@0IB DD 08H ; boost::detail::type_with_alignment_imp<8>::found
CONST	ENDS
;	COMDAT ?value@?$is_aligned@$07$07@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_aligned@$07$07@detail@boost@@2_NB DB 01H	; boost::detail::is_aligned<8,8>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@T?$lower_alignment@$07@detail@boost@@@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@T?$lower_alignment@$07@detail@boost@@@detail@boost@@2IB DD 08H ; boost::detail::alignment_of_impl<boost::detail::lower_alignment<8> >::value
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@_J@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@_J@detail@boost@@2IB DD 08H	; boost::detail::alignment_of_impl<__int64>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@J@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@J@detail@boost@@2IB DD 04H	; boost::detail::alignment_of_impl<long>::value
CONST	ENDS
;	COMDAT ?value@?$integral_c@I$03@mpl@boost@@2IB
CONST	SEGMENT
?value@?$integral_c@I$03@mpl@boost@@2IB DD 04H		; boost::mpl::integral_c<unsigned int,4>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@H@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@H@detail@boost@@2IB DD 04H	; boost::detail::alignment_of_impl<int>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_logic@$03$03@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_logic@$03$03@detail@boost@@2IB DD 04H ; boost::detail::alignment_logic<4,4>::value
CONST	ENDS
;	COMDAT ?value@?$integral_c@I$01@mpl@boost@@2IB
CONST	SEGMENT
?value@?$integral_c@I$01@mpl@boost@@2IB DD 02H		; boost::mpl::integral_c<unsigned int,2>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@F@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@F@detail@boost@@2IB DD 02H	; boost::detail::alignment_of_impl<short>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_logic@$01$01@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_logic@$01$01@detail@boost@@2IB DD 02H ; boost::detail::alignment_logic<2,2>::value
CONST	ENDS
;	COMDAT ?value@?$integral_c@I$00@mpl@boost@@2IB
CONST	SEGMENT
?value@?$integral_c@I$00@mpl@boost@@2IB DD 01H		; boost::mpl::integral_c<unsigned int,1>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@D@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@D@detail@boost@@2IB DD 01H	; boost::detail::alignment_of_impl<char>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_logic@$00$00@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_logic@$00$00@detail@boost@@2IB DD 01H ; boost::detail::alignment_logic<1,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_c@I$07@mpl@boost@@2IB
CONST	SEGMENT
?value@?$integral_c@I$07@mpl@boost@@2IB DD 08H		; boost::mpl::integral_c<unsigned int,8>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_of_impl@Tmax_align@detail@boost@@@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_of_impl@Tmax_align@detail@boost@@@detail@boost@@2IB DD 08H ; boost::detail::alignment_of_impl<boost::detail::max_align>::value
CONST	ENDS
;	COMDAT ?value@?$alignment_logic@$07$07@detail@boost@@2IB
CONST	SEGMENT
?value@?$alignment_logic@$07$07@detail@boost@@2IB DD 08H ; boost::detail::alignment_logic<8,8>::value
CONST	ENDS
;	COMDAT ?value@?$integral_c@I$0A@@mpl@boost@@2IB
CONST	SEGMENT
?value@?$integral_c@I$0A@@mpl@boost@@2IB DD 00H		; boost::mpl::integral_c<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?value@?$is_pod_impl@$$CDX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pod_impl@$$CDX@detail@boost@@2_NB DB 01H	; boost::detail::is_pod_impl<void const volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_pod_impl@$$CCX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pod_impl@$$CCX@detail@boost@@2_NB DB 01H	; boost::detail::is_pod_impl<void volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_pod_impl@$$CBX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pod_impl@$$CBX@detail@boost@@2_NB DB 01H	; boost::detail::is_pod_impl<void const >::value
CONST	ENDS
;	COMDAT ?value@?$is_pod_impl@X@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_pod_impl@X@detail@boost@@2_NB DB 01H	; boost::detail::is_pod_impl<void>::value
CONST	ENDS
;	COMDAT ?value@?$is_scalar_impl@$$CDX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_scalar_impl@$$CDX@detail@boost@@2_NB DB 00H	; boost::detail::is_scalar_impl<void const volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_scalar_impl@$$CCX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_scalar_impl@$$CCX@detail@boost@@2_NB DB 00H	; boost::detail::is_scalar_impl<void volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_scalar_impl@$$CBX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_scalar_impl@$$CBX@detail@boost@@2_NB DB 00H	; boost::detail::is_scalar_impl<void const >::value
CONST	ENDS
;	COMDAT ?value@?$is_scalar_impl@X@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_scalar_impl@X@detail@boost@@2_NB DB 00H	; boost::detail::is_scalar_impl<void>::value
CONST	ENDS
;	COMDAT ?value@?$is_member_function_pointer_impl@$$CDX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_member_function_pointer_impl@$$CDX@detail@boost@@2_NB DB 00H ; boost::detail::is_member_function_pointer_impl<void const volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_member_function_pointer_impl@$$CCX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_member_function_pointer_impl@$$CCX@detail@boost@@2_NB DB 00H ; boost::detail::is_member_function_pointer_impl<void volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_member_function_pointer_impl@$$CBX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_member_function_pointer_impl@$$CBX@detail@boost@@2_NB DB 00H ; boost::detail::is_member_function_pointer_impl<void const >::value
CONST	ENDS
;	COMDAT ?value@?$is_member_function_pointer_impl@X@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_member_function_pointer_impl@X@detail@boost@@2_NB DB 00H ; boost::detail::is_member_function_pointer_impl<void>::value
CONST	ENDS
;	COMDAT ?value@?$arg@$04@mpl@boost@@2HB
CONST	SEGMENT
?value@?$arg@$04@mpl@boost@@2HB DD 05H			; boost::mpl::arg<5>::value
CONST	ENDS
;	COMDAT ?value@?$arg@$03@mpl@boost@@2HB
CONST	SEGMENT
?value@?$arg@$03@mpl@boost@@2HB DD 04H			; boost::mpl::arg<4>::value
CONST	ENDS
;	COMDAT ?value@?$arg@$02@mpl@boost@@2HB
CONST	SEGMENT
?value@?$arg@$02@mpl@boost@@2HB DD 03H			; boost::mpl::arg<3>::value
CONST	ENDS
;	COMDAT ?value@?$arg@$01@mpl@boost@@2HB
CONST	SEGMENT
?value@?$arg@$01@mpl@boost@@2HB DD 02H			; boost::mpl::arg<2>::value
CONST	ENDS
;	COMDAT ?value@?$arg@$00@mpl@boost@@2HB
CONST	SEGMENT
?value@?$arg@$00@mpl@boost@@2HB DD 01H			; boost::mpl::arg<1>::value
CONST	ENDS
;	COMDAT ?value@?$arg@$0?0@mpl@boost@@2HB
CONST	SEGMENT
?value@?$arg@$0?0@mpl@boost@@2HB DD 0ffffffffH		; boost::mpl::arg<-1>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$0M@@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$0M@@mpl@boost@@2HB DD 0cH		; boost::mpl::int_<12>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$0L@@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$0L@@mpl@boost@@2HB DD 0bH		; boost::mpl::int_<11>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$09@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$09@mpl@boost@@2HB DD 0aH			; boost::mpl::int_<10>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$08@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$08@mpl@boost@@2HB DD 09H			; boost::mpl::int_<9>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$07@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$07@mpl@boost@@2HB DD 08H			; boost::mpl::int_<8>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$06@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$06@mpl@boost@@2HB DD 07H			; boost::mpl::int_<7>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$05@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$05@mpl@boost@@2HB DD 06H			; boost::mpl::int_<6>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$04@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$04@mpl@boost@@2HB DD 05H			; boost::mpl::int_<5>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$03@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$03@mpl@boost@@2HB DD 04H			; boost::mpl::int_<4>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$02@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$02@mpl@boost@@2HB DD 03H			; boost::mpl::int_<3>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$01@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$01@mpl@boost@@2HB DD 02H			; boost::mpl::int_<2>::value
CONST	ENDS
;	COMDAT ?value@?$int_@$00@mpl@boost@@2HB
CONST	SEGMENT
?value@?$int_@$00@mpl@boost@@2HB DD 01H			; boost::mpl::int_<1>::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$0BF@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$0BF@@detail@iostreams@boost@@2HB DD 013H ; boost::iostreams::detail::select_by_size<21>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$0BF@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$0BF@@detail@iostreams@boost@@2HB DD 013H ; boost::iostreams::detail::select_by_size<21>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$0BE@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$0BE@@detail@iostreams@boost@@2HB DD 012H ; boost::iostreams::detail::select_by_size<20>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$0BE@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$0BE@@detail@iostreams@boost@@2HB DD 012H ; boost::iostreams::detail::select_by_size<20>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$0BD@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$0BD@@detail@iostreams@boost@@2HB DD 011H ; boost::iostreams::detail::select_by_size<19>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$0BD@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$0BD@@detail@iostreams@boost@@2HB DD 011H ; boost::iostreams::detail::select_by_size<19>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$0BC@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$0BC@@detail@iostreams@boost@@2HB DD 010H ; boost::iostreams::detail::select_by_size<18>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$0BC@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$0BC@@detail@iostreams@boost@@2HB DD 010H ; boost::iostreams::detail::select_by_size<18>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$0BB@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$0BB@@detail@iostreams@boost@@2HB DD 0fH ; boost::iostreams::detail::select_by_size<17>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$0BB@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$0BB@@detail@iostreams@boost@@2HB DD 0fH ; boost::iostreams::detail::select_by_size<17>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$0BA@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$0BA@@detail@iostreams@boost@@2HB DD 0eH ; boost::iostreams::detail::select_by_size<16>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$0BA@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$0BA@@detail@iostreams@boost@@2HB DD 0eH ; boost::iostreams::detail::select_by_size<16>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$0P@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$0P@@detail@iostreams@boost@@2HB DD 0dH ; boost::iostreams::detail::select_by_size<15>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$0P@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$0P@@detail@iostreams@boost@@2HB DD 0dH ; boost::iostreams::detail::select_by_size<15>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$0O@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$0O@@detail@iostreams@boost@@2HB DD 0cH ; boost::iostreams::detail::select_by_size<14>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$0O@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$0O@@detail@iostreams@boost@@2HB DD 0cH ; boost::iostreams::detail::select_by_size<14>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$0N@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$0N@@detail@iostreams@boost@@2HB DD 0bH ; boost::iostreams::detail::select_by_size<13>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$0N@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$0N@@detail@iostreams@boost@@2HB DD 0bH ; boost::iostreams::detail::select_by_size<13>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$0M@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$0M@@detail@iostreams@boost@@2HB DD 0aH ; boost::iostreams::detail::select_by_size<12>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$0M@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$0M@@detail@iostreams@boost@@2HB DD 0aH ; boost::iostreams::detail::select_by_size<12>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$0L@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$0L@@detail@iostreams@boost@@2HB DD 09H ; boost::iostreams::detail::select_by_size<11>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$0L@@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$0L@@detail@iostreams@boost@@2HB DD 09H ; boost::iostreams::detail::select_by_size<11>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$09@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$09@detail@iostreams@boost@@2HB DD 08H ; boost::iostreams::detail::select_by_size<10>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$09@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$09@detail@iostreams@boost@@2HB DD 08H ; boost::iostreams::detail::select_by_size<10>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$08@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$08@detail@iostreams@boost@@2HB DD 07H ; boost::iostreams::detail::select_by_size<9>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$08@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$08@detail@iostreams@boost@@2HB DD 07H ; boost::iostreams::detail::select_by_size<9>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$07@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$07@detail@iostreams@boost@@2HB DD 06H ; boost::iostreams::detail::select_by_size<8>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$07@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$07@detail@iostreams@boost@@2HB DD 06H ; boost::iostreams::detail::select_by_size<8>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$06@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$06@detail@iostreams@boost@@2HB DD 05H ; boost::iostreams::detail::select_by_size<7>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$06@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$06@detail@iostreams@boost@@2HB DD 05H ; boost::iostreams::detail::select_by_size<7>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$05@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$05@detail@iostreams@boost@@2HB DD 04H ; boost::iostreams::detail::select_by_size<6>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$05@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$05@detail@iostreams@boost@@2HB DD 04H ; boost::iostreams::detail::select_by_size<6>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$04@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$04@detail@iostreams@boost@@2HB DD 03H ; boost::iostreams::detail::select_by_size<5>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$04@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$04@detail@iostreams@boost@@2HB DD 03H ; boost::iostreams::detail::select_by_size<5>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$03@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$03@detail@iostreams@boost@@2HB DD 02H ; boost::iostreams::detail::select_by_size<4>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$03@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$03@detail@iostreams@boost@@2HB DD 02H ; boost::iostreams::detail::select_by_size<4>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$02@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$02@detail@iostreams@boost@@2HB DD 01H ; boost::iostreams::detail::select_by_size<3>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$02@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$02@detail@iostreams@boost@@2HB DD 01H ; boost::iostreams::detail::select_by_size<3>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$01@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$01@detail@iostreams@boost@@2HB DD 00H ; boost::iostreams::detail::select_by_size<2>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$01@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$01@detail@iostreams@boost@@2HB DD 00H ; boost::iostreams::detail::select_by_size<2>::type::value
CONST	ENDS
;	COMDAT ?value@?$select_by_size@$00@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@?$select_by_size@$00@detail@iostreams@boost@@2HB DD 0ffffffffH ; boost::iostreams::detail::select_by_size<1>::value
CONST	ENDS
;	COMDAT ?value@type@?$select_by_size@$00@detail@iostreams@boost@@2HB
CONST	SEGMENT
?value@type@?$select_by_size@$00@detail@iostreams@boost@@2HB DD 0ffffffffH ; boost::iostreams::detail::select_by_size<1>::type::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_impl@$$CDX$$CDX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_impl@$$CDX$$CDX@detail@boost@@2_NB DB 01H ; boost::detail::is_convertible_impl<void const volatile ,void const volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_impl@$$CDX$$CCX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_impl@$$CDX$$CCX@detail@boost@@2_NB DB 01H ; boost::detail::is_convertible_impl<void const volatile ,void volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_impl@$$CDX$$CBX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_impl@$$CDX$$CBX@detail@boost@@2_NB DB 01H ; boost::detail::is_convertible_impl<void const volatile ,void const >::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_impl@$$CDXX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_impl@$$CDXX@detail@boost@@2_NB DB 01H ; boost::detail::is_convertible_impl<void const volatile ,void>::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_impl@$$CCX$$CDX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_impl@$$CCX$$CDX@detail@boost@@2_NB DB 01H ; boost::detail::is_convertible_impl<void volatile ,void const volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_impl@$$CCX$$CCX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_impl@$$CCX$$CCX@detail@boost@@2_NB DB 01H ; boost::detail::is_convertible_impl<void volatile ,void volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_impl@$$CCX$$CBX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_impl@$$CCX$$CBX@detail@boost@@2_NB DB 01H ; boost::detail::is_convertible_impl<void volatile ,void const >::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_impl@$$CCXX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_impl@$$CCXX@detail@boost@@2_NB DB 01H ; boost::detail::is_convertible_impl<void volatile ,void>::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_impl@$$CBX$$CDX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_impl@$$CBX$$CDX@detail@boost@@2_NB DB 01H ; boost::detail::is_convertible_impl<void const ,void const volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_impl@$$CBX$$CCX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_impl@$$CBX$$CCX@detail@boost@@2_NB DB 01H ; boost::detail::is_convertible_impl<void const ,void volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_impl@$$CBX$$CBX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_impl@$$CBX$$CBX@detail@boost@@2_NB DB 01H ; boost::detail::is_convertible_impl<void const ,void const >::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_impl@$$CBXX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_impl@$$CBXX@detail@boost@@2_NB DB 01H ; boost::detail::is_convertible_impl<void const ,void>::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_impl@X$$CDX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_impl@X$$CDX@detail@boost@@2_NB DB 01H ; boost::detail::is_convertible_impl<void,void const volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_impl@X$$CCX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_impl@X$$CCX@detail@boost@@2_NB DB 01H ; boost::detail::is_convertible_impl<void,void volatile >::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_impl@X$$CBX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_impl@X$$CBX@detail@boost@@2_NB DB 01H ; boost::detail::is_convertible_impl<void,void const >::value
CONST	ENDS
;	COMDAT ?value@?$is_convertible_impl@XX@detail@boost@@2_NB
CONST	SEGMENT
?value@?$is_convertible_impl@XX@detail@boost@@2_NB DB 01H ; boost::detail::is_convertible_impl<void,void>::value
CONST	ENDS
;	COMDAT ?value@?$ice_not@$00@type_traits@boost@@2_NB
CONST	SEGMENT
?value@?$ice_not@$00@type_traits@boost@@2_NB DB 00H	; boost::type_traits::ice_not<1>::value
CONST	ENDS
;	COMDAT ?value@?$ice_and@$00$00$00$00$00$00$00@type_traits@boost@@2_NB
CONST	SEGMENT
?value@?$ice_and@$00$00$00$00$00$00$00@type_traits@boost@@2_NB DB 01H ; boost::type_traits::ice_and<1,1,1,1,1,1,1>::value
CONST	ENDS
;	COMDAT ?value@?$ice_or@$0A@$0A@$0A@$0A@$0A@$0A@$0A@@type_traits@boost@@2_NB
CONST	SEGMENT
?value@?$ice_or@$0A@$0A@$0A@$0A@$0A@$0A@$0A@@type_traits@boost@@2_NB DB 00H ; boost::type_traits::ice_or<0,0,0,0,0,0,0>::value
CONST	ENDS
;	COMDAT ?const_max@?$integer_traits_base@_K$0A@$0?0@detail@boost@@2_KB
CONST	SEGMENT
?const_max@?$integer_traits_base@_K$0A@$0?0@detail@boost@@2_KB DQ ffffffffffffffffH ; boost::detail::integer_traits_base<unsigned __int64,0,-1>::const_max
CONST	ENDS
;	COMDAT ?const_min@?$integer_traits_base@_K$0A@$0?0@detail@boost@@2_KB
CONST	SEGMENT
?const_min@?$integer_traits_base@_K$0A@$0?0@detail@boost@@2_KB DQ 0000000000000000H ; boost::detail::integer_traits_base<unsigned __int64,0,-1>::const_min
CONST	ENDS
;	COMDAT ?is_integral@?$integer_traits_base@_K$0A@$0?0@detail@boost@@2_NB
CONST	SEGMENT
?is_integral@?$integer_traits_base@_K$0A@$0?0@detail@boost@@2_NB DB 01H ; boost::detail::integer_traits_base<unsigned __int64,0,-1>::is_integral
CONST	ENDS
;	COMDAT ?const_max@?$integer_traits_base@_J$0?IAAAAAAAAAAAAAAA@$0HPPPPPPPPPPPPPPP@@detail@boost@@2_JB
CONST	SEGMENT
?const_max@?$integer_traits_base@_J$0?IAAAAAAAAAAAAAAA@$0HPPPPPPPPPPPPPPP@@detail@boost@@2_JB DQ 7fffffffffffffffH ; boost::detail::integer_traits_base<__int64,-9223372036854775808,9223372036854775807>::const_max
CONST	ENDS
;	COMDAT ?const_min@?$integer_traits_base@_J$0?IAAAAAAAAAAAAAAA@$0HPPPPPPPPPPPPPPP@@detail@boost@@2_JB
CONST	SEGMENT
?const_min@?$integer_traits_base@_J$0?IAAAAAAAAAAAAAAA@$0HPPPPPPPPPPPPPPP@@detail@boost@@2_JB DQ 8000000000000000H ; boost::detail::integer_traits_base<__int64,-9223372036854775808,9223372036854775807>::const_min
CONST	ENDS
;	COMDAT ?is_integral@?$integer_traits_base@_J$0?IAAAAAAAAAAAAAAA@$0HPPPPPPPPPPPPPPP@@detail@boost@@2_NB
CONST	SEGMENT
?is_integral@?$integer_traits_base@_J$0?IAAAAAAAAAAAAAAA@$0HPPPPPPPPPPPPPPP@@detail@boost@@2_NB DB 01H ; boost::detail::integer_traits_base<__int64,-9223372036854775808,9223372036854775807>::is_integral
CONST	ENDS
;	COMDAT ?const_max@?$integer_traits_base@K$0A@$0PPPPPPPP@@detail@boost@@2KB
CONST	SEGMENT
?const_max@?$integer_traits_base@K$0A@$0PPPPPPPP@@detail@boost@@2KB DD 0ffffffffH ; boost::detail::integer_traits_base<unsigned long,0,4294967295>::const_max
CONST	ENDS
;	COMDAT ?const_min@?$integer_traits_base@K$0A@$0PPPPPPPP@@detail@boost@@2KB
CONST	SEGMENT
?const_min@?$integer_traits_base@K$0A@$0PPPPPPPP@@detail@boost@@2KB DD 00H ; boost::detail::integer_traits_base<unsigned long,0,4294967295>::const_min
CONST	ENDS
;	COMDAT ?is_integral@?$integer_traits_base@K$0A@$0PPPPPPPP@@detail@boost@@2_NB
CONST	SEGMENT
?is_integral@?$integer_traits_base@K$0A@$0PPPPPPPP@@detail@boost@@2_NB DB 01H ; boost::detail::integer_traits_base<unsigned long,0,4294967295>::is_integral
CONST	ENDS
;	COMDAT ?const_max@?$integer_traits_base@J$0?IAAAAAAA@$0HPPPPPPP@@detail@boost@@2JB
CONST	SEGMENT
?const_max@?$integer_traits_base@J$0?IAAAAAAA@$0HPPPPPPP@@detail@boost@@2JB DD 07fffffffH ; boost::detail::integer_traits_base<long,-2147483648,2147483647>::const_max
CONST	ENDS
;	COMDAT ?const_min@?$integer_traits_base@J$0?IAAAAAAA@$0HPPPPPPP@@detail@boost@@2JB
CONST	SEGMENT
?const_min@?$integer_traits_base@J$0?IAAAAAAA@$0HPPPPPPP@@detail@boost@@2JB DD 080000000H ; boost::detail::integer_traits_base<long,-2147483648,2147483647>::const_min
CONST	ENDS
;	COMDAT ?is_integral@?$integer_traits_base@J$0?IAAAAAAA@$0HPPPPPPP@@detail@boost@@2_NB
CONST	SEGMENT
?is_integral@?$integer_traits_base@J$0?IAAAAAAA@$0HPPPPPPP@@detail@boost@@2_NB DB 01H ; boost::detail::integer_traits_base<long,-2147483648,2147483647>::is_integral
CONST	ENDS
;	COMDAT ?const_max@?$integer_traits_base@I$0A@$0PPPPPPPP@@detail@boost@@2IB
CONST	SEGMENT
?const_max@?$integer_traits_base@I$0A@$0PPPPPPPP@@detail@boost@@2IB DD 0ffffffffH ; boost::detail::integer_traits_base<unsigned int,0,4294967295>::const_max
CONST	ENDS
;	COMDAT ?const_min@?$integer_traits_base@I$0A@$0PPPPPPPP@@detail@boost@@2IB
CONST	SEGMENT
?const_min@?$integer_traits_base@I$0A@$0PPPPPPPP@@detail@boost@@2IB DD 00H ; boost::detail::integer_traits_base<unsigned int,0,4294967295>::const_min
CONST	ENDS
;	COMDAT ?is_integral@?$integer_traits_base@I$0A@$0PPPPPPPP@@detail@boost@@2_NB
CONST	SEGMENT
?is_integral@?$integer_traits_base@I$0A@$0PPPPPPPP@@detail@boost@@2_NB DB 01H ; boost::detail::integer_traits_base<unsigned int,0,4294967295>::is_integral
CONST	ENDS
;	COMDAT ?const_max@?$integer_traits_base@H$0?IAAAAAAA@$0HPPPPPPP@@detail@boost@@2HB
CONST	SEGMENT
?const_max@?$integer_traits_base@H$0?IAAAAAAA@$0HPPPPPPP@@detail@boost@@2HB DD 07fffffffH ; boost::detail::integer_traits_base<int,-2147483648,2147483647>::const_max
CONST	ENDS
;	COMDAT ?const_min@?$integer_traits_base@H$0?IAAAAAAA@$0HPPPPPPP@@detail@boost@@2HB
CONST	SEGMENT
?const_min@?$integer_traits_base@H$0?IAAAAAAA@$0HPPPPPPP@@detail@boost@@2HB DD 080000000H ; boost::detail::integer_traits_base<int,-2147483648,2147483647>::const_min
CONST	ENDS
;	COMDAT ?is_integral@?$integer_traits_base@H$0?IAAAAAAA@$0HPPPPPPP@@detail@boost@@2_NB
CONST	SEGMENT
?is_integral@?$integer_traits_base@H$0?IAAAAAAA@$0HPPPPPPP@@detail@boost@@2_NB DB 01H ; boost::detail::integer_traits_base<int,-2147483648,2147483647>::is_integral
CONST	ENDS
;	COMDAT ?const_max@?$integer_traits_base@G$0A@$0PPPP@@detail@boost@@2GB
CONST	SEGMENT
?const_max@?$integer_traits_base@G$0A@$0PPPP@@detail@boost@@2GB DW 0ffffH ; boost::detail::integer_traits_base<unsigned short,0,65535>::const_max
CONST	ENDS
;	COMDAT ?const_min@?$integer_traits_base@G$0A@$0PPPP@@detail@boost@@2GB
CONST	SEGMENT
?const_min@?$integer_traits_base@G$0A@$0PPPP@@detail@boost@@2GB DW 00H ; boost::detail::integer_traits_base<unsigned short,0,65535>::const_min
CONST	ENDS
;	COMDAT ?is_integral@?$integer_traits_base@G$0A@$0PPPP@@detail@boost@@2_NB
CONST	SEGMENT
?is_integral@?$integer_traits_base@G$0A@$0PPPP@@detail@boost@@2_NB DB 01H ; boost::detail::integer_traits_base<unsigned short,0,65535>::is_integral
CONST	ENDS
;	COMDAT ?const_max@?$integer_traits_base@F$0?IAAA@$0HPPP@@detail@boost@@2FB
CONST	SEGMENT
?const_max@?$integer_traits_base@F$0?IAAA@$0HPPP@@detail@boost@@2FB DW 07fffH ; boost::detail::integer_traits_base<short,-32768,32767>::const_max
CONST	ENDS
;	COMDAT ?const_min@?$integer_traits_base@F$0?IAAA@$0HPPP@@detail@boost@@2FB
CONST	SEGMENT
?const_min@?$integer_traits_base@F$0?IAAA@$0HPPP@@detail@boost@@2FB DW 08000H ; boost::detail::integer_traits_base<short,-32768,32767>::const_min
CONST	ENDS
;	COMDAT ?is_integral@?$integer_traits_base@F$0?IAAA@$0HPPP@@detail@boost@@2_NB
CONST	SEGMENT
?is_integral@?$integer_traits_base@F$0?IAAA@$0HPPP@@detail@boost@@2_NB DB 01H ; boost::detail::integer_traits_base<short,-32768,32767>::is_integral
CONST	ENDS
;	COMDAT ?const_max@?$integer_traits_base@_W$0A@$0PPPP@@detail@boost@@2_WB
CONST	SEGMENT
?const_max@?$integer_traits_base@_W$0A@$0PPPP@@detail@boost@@2_WB DW 0ffffH ; boost::detail::integer_traits_base<wchar_t,0,65535>::const_max
CONST	ENDS
;	COMDAT ?const_min@?$integer_traits_base@_W$0A@$0PPPP@@detail@boost@@2_WB
CONST	SEGMENT
?const_min@?$integer_traits_base@_W$0A@$0PPPP@@detail@boost@@2_WB DW 00H ; boost::detail::integer_traits_base<wchar_t,0,65535>::const_min
CONST	ENDS
;	COMDAT ?is_integral@?$integer_traits_base@_W$0A@$0PPPP@@detail@boost@@2_NB
CONST	SEGMENT
?is_integral@?$integer_traits_base@_W$0A@$0PPPP@@detail@boost@@2_NB DB 01H ; boost::detail::integer_traits_base<wchar_t,0,65535>::is_integral
CONST	ENDS
;	COMDAT ?const_max@?$integer_traits_base@E$0A@$0PP@@detail@boost@@2EB
CONST	SEGMENT
?const_max@?$integer_traits_base@E$0A@$0PP@@detail@boost@@2EB DB 0ffH ; boost::detail::integer_traits_base<unsigned char,0,255>::const_max
CONST	ENDS
;	COMDAT ?const_min@?$integer_traits_base@E$0A@$0PP@@detail@boost@@2EB
CONST	SEGMENT
?const_min@?$integer_traits_base@E$0A@$0PP@@detail@boost@@2EB DB 00H ; boost::detail::integer_traits_base<unsigned char,0,255>::const_min
CONST	ENDS
;	COMDAT ?is_integral@?$integer_traits_base@E$0A@$0PP@@detail@boost@@2_NB
CONST	SEGMENT
?is_integral@?$integer_traits_base@E$0A@$0PP@@detail@boost@@2_NB DB 01H ; boost::detail::integer_traits_base<unsigned char,0,255>::is_integral
CONST	ENDS
;	COMDAT ?const_max@?$integer_traits_base@C$0?IA@$0HP@@detail@boost@@2CB
CONST	SEGMENT
?const_max@?$integer_traits_base@C$0?IA@$0HP@@detail@boost@@2CB DB 07fH ; boost::detail::integer_traits_base<signed char,-128,127>::const_max
CONST	ENDS
;	COMDAT ?const_min@?$integer_traits_base@C$0?IA@$0HP@@detail@boost@@2CB
CONST	SEGMENT
?const_min@?$integer_traits_base@C$0?IA@$0HP@@detail@boost@@2CB DB 080H ; boost::detail::integer_traits_base<signed char,-128,127>::const_min
CONST	ENDS
;	COMDAT ?is_integral@?$integer_traits_base@C$0?IA@$0HP@@detail@boost@@2_NB
CONST	SEGMENT
?is_integral@?$integer_traits_base@C$0?IA@$0HP@@detail@boost@@2_NB DB 01H ; boost::detail::integer_traits_base<signed char,-128,127>::is_integral
CONST	ENDS
;	COMDAT ?const_max@?$integer_traits_base@D$0?IA@$0HP@@detail@boost@@2DB
CONST	SEGMENT
?const_max@?$integer_traits_base@D$0?IA@$0HP@@detail@boost@@2DB DB 07fH ; boost::detail::integer_traits_base<char,-128,127>::const_max
CONST	ENDS
;	COMDAT ?const_min@?$integer_traits_base@D$0?IA@$0HP@@detail@boost@@2DB
CONST	SEGMENT
?const_min@?$integer_traits_base@D$0?IA@$0HP@@detail@boost@@2DB DB 080H ; boost::detail::integer_traits_base<char,-128,127>::const_min
CONST	ENDS
;	COMDAT ?is_integral@?$integer_traits_base@D$0?IA@$0HP@@detail@boost@@2_NB
CONST	SEGMENT
?is_integral@?$integer_traits_base@D$0?IA@$0HP@@detail@boost@@2_NB DB 01H ; boost::detail::integer_traits_base<char,-128,127>::is_integral
CONST	ENDS
;	COMDAT ?const_max@?$integer_traits_base@_N$0A@$00@detail@boost@@2_NB
CONST	SEGMENT
?const_max@?$integer_traits_base@_N$0A@$00@detail@boost@@2_NB DB 01H ; boost::detail::integer_traits_base<bool,0,1>::const_max
CONST	ENDS
;	COMDAT ?const_min@?$integer_traits_base@_N$0A@$00@detail@boost@@2_NB
CONST	SEGMENT
?const_min@?$integer_traits_base@_N$0A@$00@detail@boost@@2_NB DB 00H ; boost::detail::integer_traits_base<bool,0,1>::const_min
CONST	ENDS
;	COMDAT ?is_integral@?$integer_traits_base@_N$0A@$00@detail@boost@@2_NB
CONST	SEGMENT
?is_integral@?$integer_traits_base@_N$0A@$00@detail@boost@@2_NB DB 01H ; boost::detail::integer_traits_base<bool,0,1>::is_integral
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?value@?$bool_@$0A@@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$bool_@$0A@@mpl@boost@@2_NB DB 00H		; boost::mpl::bool_<0>::value
CONST	ENDS
;	COMDAT ?value@?$bool_@$00@mpl@boost@@2_NB
CONST	SEGMENT
?value@?$bool_@$00@mpl@boost@@2_NB DB 01H		; boost::mpl::bool_<1>::value
CONST	ENDS
;	COMDAT ?value@integral_c_tag@mpl@boost@@2HB
CONST	SEGMENT
?value@integral_c_tag@mpl@boost@@2HB DD 00H		; boost::mpl::integral_c_tag::value
CONST	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
;	COMDAT ?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB
CONST	SEGMENT
?_Value@?$_Is_swap_move@U_Swap_move_tag@std@@@std@@2_NB DB 01H ; std::_Is_swap_move<std::_Swap_move_tag>::_Value
CONST	ENDS
PUBLIC	??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@I_N@Z ; DRAMsimII::Queue<DRAMsimII::Command>::Queue<DRAMsimII::Command>
PUBLIC	??0Bank@DRAMsimII@@QAE@ABVSettings@1@ABVTimingSpecification@1@ABVSystemConfiguration@1@@Z ; DRAMsimII::Bank::Bank
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__allmul:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\bank.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCcsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0Bank@DRAMsimII@@QAE@ABVSettings@1@ABVTimingSpecification@1@ABVSystemConfiguration@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_settings$ = 8						; size = 4
_timingVal$ = 12					; size = 4
_systemConfigVal$ = 16					; size = 4
??0Bank@DRAMsimII@@QAE@ABVSettings@1@ABVTimingSpecification@1@ABVSystemConfiguration@1@@Z PROC ; DRAMsimII::Bank::Bank, COMDAT
; _this$ = ecx

; 51   : {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _timingVal$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _systemConfigVal$[ebp]
	mov	DWORD PTR [eax+4], ecx
	push	0
	mov	eax, DWORD PTR _settings$[ebp]
	mov	ecx, DWORD PTR [eax+244]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@I_N@Z ; DRAMsimII::Queue<DRAMsimII::Command>::Queue<DRAMsimII::Command>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], -100		; ffffff9cH
	mov	DWORD PTR [eax+52], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], -100		; ffffff9cH
	mov	DWORD PTR [eax+60], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], -100		; ffffff9cH
	mov	DWORD PTR [eax+68], -1
	mov	eax, DWORD PTR _settings$[ebp]
	mov	ecx, DWORD PTR [eax+388]
	xor	edx, edx
	push	-1
	push	-1
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], eax
	mov	DWORD PTR [ecx+76], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], 0
	mov	DWORD PTR [eax+92], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+96], 0
	mov	DWORD PTR [eax+100], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], 0
	mov	DWORD PTR [eax+108], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+112], 0
	mov	DWORD PTR [eax+116], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+120], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+124], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+128], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+136], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+140], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+144], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+148], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Bank@DRAMsimII@@QAE@ABVSettings@1@ABVTimingSpecification@1@ABVSystemConfiguration@1@@Z ENDP ; DRAMsimII::Bank::Bank
_TEXT	ENDS
PUBLIC	??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@ABV01@@Z ; DRAMsimII::Queue<DRAMsimII::Command>::Queue<DRAMsimII::Command>
PUBLIC	??0Bank@DRAMsimII@@QAE@ABV01@ABVTimingSpecification@1@ABVSystemConfiguration@1@@Z ; DRAMsimII::Bank::Bank
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0Bank@DRAMsimII@@QAE@ABV01@ABVTimingSpecification@1@ABVSystemConfiguration@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_rhs$ = 8						; size = 4
_timingVal$ = 12					; size = 4
_systemConfigVal$ = 16					; size = 4
??0Bank@DRAMsimII@@QAE@ABV01@ABVTimingSpecification@1@ABVSystemConfiguration@1@@Z PROC ; DRAMsimII::Bank::Bank, COMDAT
; _this$ = ecx

; 78   : {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _timingVal$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _systemConfigVal$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@ABV01@@Z ; DRAMsimII::Queue<DRAMsimII::Command>::Queue<DRAMsimII::Command>
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	ecx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+52], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+56], edx
	mov	ecx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+60], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+64], edx
	mov	ecx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+68], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	ecx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+88], edx
	mov	ecx, DWORD PTR [ecx+92]
	mov	DWORD PTR [eax+92], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+96], edx
	mov	ecx, DWORD PTR [ecx+100]
	mov	DWORD PTR [eax+100], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	DWORD PTR [eax+104], edx
	mov	ecx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+108], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR [eax+112], edx
	mov	ecx, DWORD PTR [ecx+116]
	mov	DWORD PTR [eax+116], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [eax+120], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	dl, BYTE PTR [ecx+124]
	mov	BYTE PTR [eax+124], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	DWORD PTR [eax+128], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR [eax+132], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR [eax+136], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR [eax+140], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	mov	DWORD PTR [eax+144], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR [eax+148], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Bank@DRAMsimII@@QAE@ABV01@ABVTimingSpecification@1@ABVSystemConfiguration@1@@Z ENDP ; DRAMsimII::Bank::Bank
_TEXT	ENDS
PUBLIC	??0Bank@DRAMsimII@@QAE@ABV01@@Z			; DRAMsimII::Bank::Bank
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0Bank@DRAMsimII@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_rhs$ = 8						; size = 4
??0Bank@DRAMsimII@@QAE@ABV01@@Z PROC			; DRAMsimII::Bank::Bank, COMDAT
; _this$ = ecx

; 105  : {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@ABV01@@Z ; DRAMsimII::Queue<DRAMsimII::Command>::Queue<DRAMsimII::Command>
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	ecx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+52], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+56], edx
	mov	ecx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+60], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+64], edx
	mov	ecx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+68], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	ecx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+88], edx
	mov	ecx, DWORD PTR [ecx+92]
	mov	DWORD PTR [eax+92], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR [eax+96], edx
	mov	ecx, DWORD PTR [ecx+100]
	mov	DWORD PTR [eax+100], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	DWORD PTR [eax+104], edx
	mov	ecx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+108], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR [eax+112], edx
	mov	ecx, DWORD PTR [ecx+116]
	mov	DWORD PTR [eax+116], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [eax+120], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	dl, BYTE PTR [ecx+124]
	mov	BYTE PTR [eax+124], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	DWORD PTR [eax+128], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR [eax+132], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR [eax+136], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR [eax+140], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	mov	DWORD PTR [eax+144], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR [eax+148], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0Bank@DRAMsimII@@QAE@ABV01@@Z ENDP			; DRAMsimII::Bank::Bank
_TEXT	ENDS
PUBLIC	??0Bank@DRAMsimII@@AAE@ABVTimingSpecification@1@ABVSystemConfiguration@1@@Z ; DRAMsimII::Bank::Bank
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0Bank@DRAMsimII@@AAE@ABVTimingSpecification@1@ABVSystemConfiguration@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_timingVal$ = 8						; size = 4
_systemConfigVal$ = 12					; size = 4
??0Bank@DRAMsimII@@AAE@ABVTimingSpecification@1@ABVSystemConfiguration@1@@Z PROC ; DRAMsimII::Bank::Bank, COMDAT
; _this$ = ecx

; 132  : {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _timingVal$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _systemConfigVal$[ebp]
	mov	DWORD PTR [eax+4], ecx
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@I_N@Z ; DRAMsimII::Queue<DRAMsimII::Command>::Queue<DRAMsimII::Command>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
	mov	DWORD PTR [eax+52], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0
	mov	DWORD PTR [eax+60], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
	mov	DWORD PTR [eax+68], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0
	mov	DWORD PTR [eax+76], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], 0
	mov	DWORD PTR [eax+92], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+96], 0
	mov	DWORD PTR [eax+100], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], 0
	mov	DWORD PTR [eax+108], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+112], 0
	mov	DWORD PTR [eax+116], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+120], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+124], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+128], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+136], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+140], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+144], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+148], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0Bank@DRAMsimII@@AAE@ABVTimingSpecification@1@ABVSystemConfiguration@1@@Z ENDP ; DRAMsimII::Bank::Bank
_TEXT	ENDS
PUBLIC	?tRAS@TimingSpecification@DRAMsimII@@QBEHXZ	; DRAMsimII::TimingSpecification::tRAS
PUBLIC	?tAL@TimingSpecification@DRAMsimII@@QBEHXZ	; DRAMsimII::TimingSpecification::tAL
PUBLIC	?tRCD@TimingSpecification@DRAMsimII@@QBEHXZ	; DRAMsimII::TimingSpecification::tRCD
PUBLIC	??$max@_J@std@@YAAB_JAB_J0@Z			; std::max<__int64>
PUBLIC	?tRC@TimingSpecification@DRAMsimII@@QBEHXZ	; DRAMsimII::TimingSpecification::tRC
PUBLIC	?getRow@Address@DRAMsimII@@QBEIXZ		; DRAMsimII::Address::getRow
PUBLIC	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ	; DRAMsimII::Event::getAddress
PUBLIC	??_C@_1GA@LGOHCJAN@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAT?$AAi?$AAm?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAl?$AAa?$AAs?$AAt?$AAP?$AAr?$AAe?$AAc?$AAh?$AAa?$AAr?$AAg?$AAe?$AAT?$AAi?$AAm?$AAe@ ; `string'
PUBLIC	?tRP@TimingSpecification@DRAMsimII@@QBEHXZ	; DRAMsimII::TimingSpecification::tRP
PUBLIC	??_C@_1BG@JHKGMDAP@?$AA?$CB?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAe?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?1??issueRAS@Bank@DRAMsimII@@QAEX_JPBVCommand@3@@Z@4JA ; `DRAMsimII::Bank::issueRAS'::`2'::__LINE__Var
PUBLIC	?issueRAS@Bank@DRAMsimII@@QAEX_JPBVCommand@2@@Z	; DRAMsimII::Bank::issueRAS
EXTRN	__imp___wassert:PROC
;	COMDAT ??_C@_1GA@LGOHCJAN@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAT?$AAi?$AAm?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAl?$AAa?$AAs?$AAt?$AAP?$AAr?$AAe?$AAc?$AAh?$AAa?$AAr?$AAg?$AAe?$AAT?$AAi?$AAm?$AAe@
CONST	SEGMENT
??_C@_1GA@LGOHCJAN@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAT?$AAi?$AAm?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAl?$AAa?$AAs?$AAt?$AAP?$AAr?$AAe?$AAc?$AAh?$AAa?$AAr?$AAg?$AAe?$AAT?$AAi?$AAm?$AAe@ DB 'c'
	DB	00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H, ' ', 00H, '>', 00H, '='
	DB	00H, ' ', 00H, 'l', 00H, 'a', 00H, 's', 00H, 't', 00H, 'P', 00H
	DB	'r', 00H, 'e', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'g'
	DB	00H, 'e', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H, ' ', 00H
	DB	'+', 00H, ' ', 00H, 't', 00H, 'i', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, '.', 00H, 't', 00H, 'R', 00H, 'P', 00H, '(', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@JHKGMDAP@?$AA?$CB?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAe?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@JHKGMDAP@?$AA?$CB?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAe?$AAd?$AA?$AA@ DB '!'
	DB	00H, 'a', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
CONST	SEGMENT
??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'u', 00H, 's'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'c', 00H, 'u', 00H, 'm', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, 's', 00H, '\', 00H, 'v', 00H, 'i'
	DB	00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, '2'
	DB	00H, '0', 00H, '0', 00H, '8', 00H, '\', 00H, 'p', 00H, 'r', 00H
	DB	'o', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, 's', 00H, '\'
	DB	00H, 'd', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 's', 00H, 'i', 00H
	DB	'm', 00H, 'i', 00H, 'i', 00H, 'h', 00H, 'g', 00H, '\', 00H, 's'
	DB	00H, 'r', 00H, 'c', 00H, '\', 00H, 'b', 00H, 'a', 00H, 'n', 00H
	DB	'k', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??issueRAS@Bank@DRAMsimII@@QAEX_JPBVCommand@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??issueRAS@Bank@DRAMsimII@@QAEX_JPBVCommand@3@@Z@4JA DD 08aH ; `DRAMsimII::Bank::issueRAS'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCcsu /ZI
_DATA	ENDS
;	COMDAT ?issueRAS@Bank@DRAMsimII@@QAEX_JPBVCommand@2@@Z
_TEXT	SEGMENT
tv194 = -276						; size = 8
$T160253 = -264						; size = 8
$T160254 = -248						; size = 8
$T160255 = -232						; size = 8
$T160256 = -216						; size = 8
_this$ = -8						; size = 4
_currentTime$ = 8					; size = 8
_currentCommand$ = 16					; size = 4
?issueRAS@Bank@DRAMsimII@@QAEX_JPBVCommand@2@@Z PROC	; DRAMsimII::Bank::issueRAS, COMDAT
; _this$ = ecx

; 138  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 139  : 	// make sure activates follow precharges
; 140  : 	assert(!activated);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+124]
	test	ecx, ecx
	je	SHORT $LN3@issueRAS
	mov	edx, DWORD PTR ?__LINE__Var@?1??issueRAS@Bank@DRAMsimII@@QAEX_JPBVCommand@3@@Z@4JA
	add	edx, 2
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1BG@JHKGMDAP@?$AA?$CB?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAe?$AAd?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@issueRAS:

; 141  : 	assert(currentTime >= lastPrechargeTime + timing.tRP());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tRP@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tRP
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+72]
	mov	ecx, DWORD PTR [ecx+76]
	adc	ecx, edx
	mov	DWORD PTR tv194[ebp], eax
	mov	DWORD PTR tv194[ebp+4], ecx
	mov	edx, DWORD PTR _currentTime$[ebp+4]
	cmp	edx, DWORD PTR tv194[ebp+4]
	jg	SHORT $LN4@issueRAS
	jl	SHORT $LN5@issueRAS
	mov	eax, DWORD PTR _currentTime$[ebp]
	cmp	eax, DWORD PTR tv194[ebp]
	jae	SHORT $LN4@issueRAS
$LN5@issueRAS:
	mov	ecx, DWORD PTR ?__LINE__Var@?1??issueRAS@Bank@DRAMsimII@@QAEX_JPBVCommand@3@@Z@4JA
	add	ecx, 3
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1GA@LGOHCJAN@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAT?$AAi?$AAm?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAl?$AAa?$AAs?$AAt?$AAP?$AAr?$AAe?$AAc?$AAh?$AAa?$AAr?$AAg?$AAe?$AAT?$AAi?$AAm?$AAe@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@issueRAS:

; 142  : 
; 143  : 	activated = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+124], 1

; 144  : 
; 145  : 	lastRASTime = currentTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _currentTime$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	edx, DWORD PTR _currentTime$[ebp+4]
	mov	DWORD PTR [eax+52], edx

; 146  : 	openRowID = currentCommand->getAddress().getRow();

	mov	ecx, DWORD PTR _currentCommand$[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getRow@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getRow
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+120], eax

; 147  : 	RASCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+128], ecx

; 148  : 
; 149  : 	// calculate when the next few commands can happen
; 150  : 	nextActivateTime = max(nextActivateTime, currentTime + timing.tRC());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tRC@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tRC
	cdq
	add	eax, DWORD PTR _currentTime$[ebp]
	mov	ecx, DWORD PTR _currentTime$[ebp+4]
	adc	ecx, edx
	mov	DWORD PTR $T160253[ebp], eax
	mov	DWORD PTR $T160253[ebp+4], ecx
	lea	edx, DWORD PTR $T160253[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 88					; 00000058H
	push	eax
	call	??$max@_J@std@@YAAB_JAB_J0@Z		; std::max<__int64>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+88], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+92], eax

; 151  : 	nextReadTime = max(nextReadTime, currentTime + timing.tRCD() - timing.tAL());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tRCD@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tRCD
	cdq
	mov	esi, eax
	add	esi, DWORD PTR _currentTime$[ebp]
	mov	edi, DWORD PTR _currentTime$[ebp+4]
	adc	edi, edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?tAL@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tAL
	cdq
	sub	esi, eax
	sbb	edi, edx
	mov	DWORD PTR $T160254[ebp], esi
	mov	DWORD PTR $T160254[ebp+4], edi
	lea	edx, DWORD PTR $T160254[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 96					; 00000060H
	push	eax
	call	??$max@_J@std@@YAAB_JAB_J0@Z		; std::max<__int64>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+96], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+100], eax

; 152  : 	nextWriteTime = max(nextWriteTime, currentTime + timing.tRCD() - timing.tAL());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tRCD@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tRCD
	cdq
	mov	esi, eax
	add	esi, DWORD PTR _currentTime$[ebp]
	mov	edi, DWORD PTR _currentTime$[ebp+4]
	adc	edi, edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?tAL@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tAL
	cdq
	sub	esi, eax
	sbb	edi, edx
	mov	DWORD PTR $T160255[ebp], esi
	mov	DWORD PTR $T160255[ebp+4], edi
	lea	edx, DWORD PTR $T160255[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 104				; 00000068H
	push	eax
	call	??$max@_J@std@@YAAB_JAB_J0@Z		; std::max<__int64>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+104], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+108], eax

; 153  : 	nextPrechargeTime = max(nextPrechargeTime, currentTime + timing.tRAS());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tRAS@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tRAS
	cdq
	add	eax, DWORD PTR _currentTime$[ebp]
	mov	ecx, DWORD PTR _currentTime$[ebp+4]
	adc	ecx, edx
	mov	DWORD PTR $T160256[ebp], eax
	mov	DWORD PTR $T160256[ebp+4], ecx
	lea	edx, DWORD PTR $T160256[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	call	??$max@_J@std@@YAAB_JAB_J0@Z		; std::max<__int64>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+112], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+116], eax

; 154  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?issueRAS@Bank@DRAMsimII@@QAEX_JPBVCommand@2@@Z ENDP	; DRAMsimII::Bank::issueRAS
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\address.h
_TEXT	ENDS
;	COMDAT ?getRow@Address@DRAMsimII@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getRow@Address@DRAMsimII@@QBEIXZ PROC			; DRAMsimII::Address::getRow, COMDAT
; _this$ = ecx

; 89   : 		unsigned getRow() const { return row; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getRow@Address@DRAMsimII@@QBEIXZ ENDP			; DRAMsimII::Address::getRow
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\event.h
_TEXT	ENDS
;	COMDAT ?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ PROC	; DRAMsimII::Event::getAddress, COMDAT
; _this$ = ecx

; 89   : 		const Address &getAddress() const { return address; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ENDP	; DRAMsimII::Event::getAddress
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\timingspecification.h
_TEXT	ENDS
;	COMDAT ?tAL@TimingSpecification@DRAMsimII@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?tAL@TimingSpecification@DRAMsimII@@QBEHXZ PROC		; DRAMsimII::TimingSpecification::tAL, COMDAT
; _this$ = ecx

; 64   : 		int tAL() const { return t_al; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?tAL@TimingSpecification@DRAMsimII@@QBEHXZ ENDP		; DRAMsimII::TimingSpecification::tAL
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?tRAS@TimingSpecification@DRAMsimII@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?tRAS@TimingSpecification@DRAMsimII@@QBEHXZ PROC	; DRAMsimII::TimingSpecification::tRAS, COMDAT
; _this$ = ecx

; 69   : 		int tRAS() const { return t_ras; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?tRAS@TimingSpecification@DRAMsimII@@QBEHXZ ENDP	; DRAMsimII::TimingSpecification::tRAS
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?tRCD@TimingSpecification@DRAMsimII@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?tRCD@TimingSpecification@DRAMsimII@@QBEHXZ PROC	; DRAMsimII::TimingSpecification::tRCD, COMDAT
; _this$ = ecx

; 75   : 		int tRCD() const { return t_rcd; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?tRCD@TimingSpecification@DRAMsimII@@QBEHXZ ENDP	; DRAMsimII::TimingSpecification::tRCD
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?tRP@TimingSpecification@DRAMsimII@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?tRP@TimingSpecification@DRAMsimII@@QBEHXZ PROC		; DRAMsimII::TimingSpecification::tRP, COMDAT
; _this$ = ecx

; 76   : 		int tRP() const { return t_rp; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?tRP@TimingSpecification@DRAMsimII@@QBEHXZ ENDP		; DRAMsimII::TimingSpecification::tRP
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?tRC@TimingSpecification@DRAMsimII@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?tRC@TimingSpecification@DRAMsimII@@QBEHXZ PROC		; DRAMsimII::TimingSpecification::tRC, COMDAT
; _this$ = ecx

; 82   : 		int tRC() const { return t_rc; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?tRC@TimingSpecification@DRAMsimII@@QBEHXZ ENDP		; DRAMsimII::TimingSpecification::tRC
_TEXT	ENDS
PUBLIC	??_C@_1CE@OMDKJDFC@?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAe?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAr?$AAu?$AAe?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??issuePRE@Bank@DRAMsimII@@QAEX_JPBVCommand@3@@Z@4JA ; `DRAMsimII::Bank::issuePRE'::`2'::__LINE__Var
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??_C@_0BG@GJDAHMDK@Unhandled?5CAS?5variant?$AA@	; `string'
PUBLIC	?tWR@TimingSpecification@DRAMsimII@@QBEHXZ	; DRAMsimII::TimingSpecification::tWR
PUBLIC	?tCWD@TimingSpecification@DRAMsimII@@QBEHXZ	; DRAMsimII::TimingSpecification::tCWD
PUBLIC	?tRTP@TimingSpecification@DRAMsimII@@QBEHXZ	; DRAMsimII::TimingSpecification::tRTP
PUBLIC	?tBurst@TimingSpecification@DRAMsimII@@QBEHXZ	; DRAMsimII::TimingSpecification::tBurst
PUBLIC	?tCCD@TimingSpecification@DRAMsimII@@QBEHXZ	; DRAMsimII::TimingSpecification::tCCD
PUBLIC	?getCommandType@Command@DRAMsimII@@QBE?AW4CommandType@12@XZ ; DRAMsimII::Command::getCommandType
PUBLIC	?issuePRE@Bank@DRAMsimII@@QAEX_JPBVCommand@2@@Z	; DRAMsimII::Bank::issuePRE
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z:PROC
;	COMDAT ??_C@_1CE@OMDKJDFC@?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAe?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAr?$AAu?$AAe?$AA?$AA@
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\bank.cpp
CONST	SEGMENT
??_C@_1CE@OMDKJDFC@?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAe?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAr?$AAu?$AAe?$AA?$AA@ DB 'a'
	DB	00H, 'c', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??issuePRE@Bank@DRAMsimII@@QAEX_JPBVCommand@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??issuePRE@Bank@DRAMsimII@@QAEX_JPBVCommand@3@@Z@4JA DD 0a0H ; `DRAMsimII::Bank::issuePRE'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BG@GJDAHMDK@Unhandled?5CAS?5variant?$AA@
CONST	SEGMENT
??_C@_0BG@GJDAHMDK@Unhandled?5CAS?5variant?$AA@ DB 'Unhandled CAS variant'
	DB	00H						; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?issuePRE@Bank@DRAMsimII@@QAEX_JPBVCommand@2@@Z
_TEXT	SEGMENT
tv66 = -288						; size = 4
$T160274 = -280						; size = 8
$T160275 = -264						; size = 8
$T160276 = -248						; size = 8
$T160277 = -232						; size = 8
$T160279 = -216						; size = 8
_this$ = -8						; size = 4
_currentTime$ = 8					; size = 8
_currentCommand$ = 16					; size = 4
?issuePRE@Bank@DRAMsimII@@QAEX_JPBVCommand@2@@Z PROC	; DRAMsimII::Bank::issuePRE, COMDAT
; _this$ = ecx

; 160  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 	switch (currentCommand->getCommandType())

	mov	ecx, DWORD PTR _currentCommand$[ebp]
	call	?getCommandType@Command@DRAMsimII@@QBE?AW4CommandType@12@XZ ; DRAMsimII::Command::getCommandType
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 2
	je	SHORT $LN4@issuePRE
	cmp	DWORD PTR tv66[ebp], 4
	je	$LN3@issuePRE
	cmp	DWORD PTR tv66[ebp], 6
	je	$LN2@issuePRE
	jmp	$LN1@issuePRE
$LN4@issuePRE:

; 162  : 	{
; 163  : 	case Command::READ_AND_PRECHARGE:
; 164  : 		//lastPrechargeTime = max(currentTime + timing.tAL() + timing.tCAS() + timing.tBurst() + timing.tRTP(), lastRASTime + timing.tRAS());
; 165  : 		// see figure 11.28 in Memory Systems: Cache, DRAM, Disk by Bruce Jacob, et al.
; 166  : 		lastPrechargeTime = max(lastPrechargeTime, max(currentTime + (timing.tAL() - timing.tCCD() + timing.tBurst() + timing.tRTP()), lastRASTime + timing.tRAS()));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tRAS@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tRAS
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+48]
	mov	ecx, DWORD PTR [ecx+52]
	adc	ecx, edx
	mov	DWORD PTR $T160274[ebp], eax
	mov	DWORD PTR $T160274[ebp+4], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?tAL@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tAL
	mov	esi, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tCCD@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tCCD
	sub	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?tBurst@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tBurst
	add	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?tRTP@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tRTP
	add	eax, esi
	cdq
	add	eax, DWORD PTR _currentTime$[ebp]
	mov	ecx, DWORD PTR _currentTime$[ebp+4]
	adc	ecx, edx
	mov	DWORD PTR $T160275[ebp], eax
	mov	DWORD PTR $T160275[ebp+4], ecx
	lea	edx, DWORD PTR $T160274[ebp]
	push	edx
	lea	eax, DWORD PTR $T160275[ebp]
	push	eax
	call	??$max@_J@std@@YAAB_JAB_J0@Z		; std::max<__int64>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	push	ecx
	call	??$max@_J@std@@YAAB_JAB_J0@Z		; std::max<__int64>
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+72], ecx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+76], eax

; 167  : 		break;

	jmp	$LN5@issuePRE
$LN3@issuePRE:

; 168  : 	case Command::WRITE_AND_PRECHARGE:
; 169  : 		// see figure 11.29 in Memory Systems: Cache, DRAM, Disk by Bruce Jacob, et al.
; 170  : 		// obeys minimum timing, but also supports tRAS lockout
; 171  : 		lastPrechargeTime = max(lastPrechargeTime, max(currentTime + (timing.tAL() + timing.tCWD() + timing.tBurst() + timing.tWR()), lastRASTime + timing.tRAS()));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tRAS@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tRAS
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+48]
	mov	ecx, DWORD PTR [ecx+52]
	adc	ecx, edx
	mov	DWORD PTR $T160276[ebp], eax
	mov	DWORD PTR $T160276[ebp+4], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?tAL@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tAL
	mov	esi, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tCWD@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tCWD
	add	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?tBurst@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tBurst
	add	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?tWR@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tWR
	add	eax, esi
	cdq
	add	eax, DWORD PTR _currentTime$[ebp]
	mov	ecx, DWORD PTR _currentTime$[ebp+4]
	adc	ecx, edx
	mov	DWORD PTR $T160277[ebp], eax
	mov	DWORD PTR $T160277[ebp+4], ecx
	lea	edx, DWORD PTR $T160276[ebp]
	push	edx
	lea	eax, DWORD PTR $T160277[ebp]
	push	eax
	call	??$max@_J@std@@YAAB_JAB_J0@Z		; std::max<__int64>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	push	ecx
	call	??$max@_J@std@@YAAB_JAB_J0@Z		; std::max<__int64>
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+72], ecx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+76], eax

; 172  : 		break;

	jmp	SHORT $LN5@issuePRE
$LN2@issuePRE:

; 173  : 	case Command::PRECHARGE:
; 174  : 		lastPrechargeTime = max(lastPrechargeTime, currentTime);

	lea	eax, DWORD PTR _currentTime$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	push	ecx
	call	??$max@_J@std@@YAAB_JAB_J0@Z		; std::max<__int64>
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+72], ecx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+76], eax

; 175  : 		break;

	jmp	SHORT $LN5@issuePRE
$LN1@issuePRE:

; 176  : 	default:
; 177  : 		cerr << "Unhandled CAS variant" << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	push	OFFSET ??_C@_0BG@GJDAHMDK@Unhandled?5CAS?5variant?$AA@
	mov	ecx, DWORD PTR __imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@issuePRE:

; 178  : 		break;
; 179  : 	}	
; 180  : 
; 181  : 	// make sure precharges follow activates
; 182  : 	// technically, you can pre after pre, but there's no good reason for this
; 183  : 	assert(activated == true);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+124]
	cmp	ecx, 1
	je	SHORT $LN9@issuePRE
	mov	edx, DWORD PTR ?__LINE__Var@?1??issuePRE@Bank@DRAMsimII@@QAEX_JPBVCommand@3@@Z@4JA
	add	edx, 23					; 00000017H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1CE@OMDKJDFC@?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAe?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAr?$AAu?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@issuePRE:

; 184  : 	activated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+124], 0

; 185  : 
; 186  : 	// calculate when the next few commands can happen
; 187  : 	nextActivateTime = max(nextActivateTime, lastPrechargeTime + timing.tRP());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tRP@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tRP
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+72]
	mov	ecx, DWORD PTR [ecx+76]
	adc	ecx, edx
	mov	DWORD PTR $T160279[ebp], eax
	mov	DWORD PTR $T160279[ebp+4], ecx
	lea	edx, DWORD PTR $T160279[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 88					; 00000058H
	push	eax
	call	??$max@_J@std@@YAAB_JAB_J0@Z		; std::max<__int64>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+88], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+92], eax

; 188  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?issuePRE@Bank@DRAMsimII@@QAEX_JPBVCommand@2@@Z ENDP	; DRAMsimII::Bank::issuePRE
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\command.h
_TEXT	ENDS
;	COMDAT ?getCommandType@Command@DRAMsimII@@QBE?AW4CommandType@12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getCommandType@Command@DRAMsimII@@QBE?AW4CommandType@12@XZ PROC ; DRAMsimII::Command::getCommandType, COMDAT
; _this$ = ecx

; 79   : 		CommandType getCommandType() const { return commandType; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+80]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getCommandType@Command@DRAMsimII@@QBE?AW4CommandType@12@XZ ENDP ; DRAMsimII::Command::getCommandType
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\timingspecification.h
_TEXT	ENDS
;	COMDAT ?tCCD@TimingSpecification@DRAMsimII@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?tCCD@TimingSpecification@DRAMsimII@@QBEHXZ PROC	; DRAMsimII::TimingSpecification::tCCD, COMDAT
; _this$ = ecx

; 66   : 		int tCCD() const { return t_ccd; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?tCCD@TimingSpecification@DRAMsimII@@QBEHXZ ENDP	; DRAMsimII::TimingSpecification::tCCD
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?tBurst@TimingSpecification@DRAMsimII@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?tBurst@TimingSpecification@DRAMsimII@@QBEHXZ PROC	; DRAMsimII::TimingSpecification::tBurst, COMDAT
; _this$ = ecx

; 67   : 		int tBurst() const { return t_burst; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?tBurst@TimingSpecification@DRAMsimII@@QBEHXZ ENDP	; DRAMsimII::TimingSpecification::tBurst
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?tRTP@TimingSpecification@DRAMsimII@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?tRTP@TimingSpecification@DRAMsimII@@QBEHXZ PROC	; DRAMsimII::TimingSpecification::tRTP, COMDAT
; _this$ = ecx

; 68   : 		int tRTP() const { return t_rtp; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?tRTP@TimingSpecification@DRAMsimII@@QBEHXZ ENDP	; DRAMsimII::TimingSpecification::tRTP
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?tCWD@TimingSpecification@DRAMsimII@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?tCWD@TimingSpecification@DRAMsimII@@QBEHXZ PROC	; DRAMsimII::TimingSpecification::tCWD, COMDAT
; _this$ = ecx

; 70   : 		int tCWD() const { return t_cwd; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?tCWD@TimingSpecification@DRAMsimII@@QBEHXZ ENDP	; DRAMsimII::TimingSpecification::tCWD
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?tWR@TimingSpecification@DRAMsimII@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?tWR@TimingSpecification@DRAMsimII@@QBEHXZ PROC		; DRAMsimII::TimingSpecification::tWR, COMDAT
; _this$ = ecx

; 71   : 		int tWR() const { return t_wr; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?tWR@TimingSpecification@DRAMsimII@@QBEHXZ ENDP		; DRAMsimII::TimingSpecification::tWR
_TEXT	ENDS
PUBLIC	??$max@H@std@@YAABHABH0@Z			; std::max<int>
PUBLIC	?tCAS@TimingSpecification@DRAMsimII@@QBEHXZ	; DRAMsimII::TimingSpecification::tCAS
PUBLIC	?tCMD@TimingSpecification@DRAMsimII@@QBEHXZ	; DRAMsimII::TimingSpecification::tCMD
PUBLIC	?getLength@Command@DRAMsimII@@QBEIXZ		; DRAMsimII::Command::getLength
PUBLIC	??_C@_1GG@LDLONLDE@?$AAo?$AAp?$AAe?$AAn?$AAR?$AAo?$AAw?$AAI?$AAD?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt@ ; `string'
PUBLIC	?__LINE__Var@?1??issueCAS@Bank@DRAMsimII@@QAEX_JPBVCommand@3@@Z@4JA ; `DRAMsimII::Bank::issueCAS'::`2'::__LINE__Var
PUBLIC	?issueCAS@Bank@DRAMsimII@@QAEX_JPBVCommand@2@@Z	; DRAMsimII::Bank::issueCAS
;	COMDAT ??_C@_1GG@LDLONLDE@?$AAo?$AAp?$AAe?$AAn?$AAR?$AAo?$AAw?$AAI?$AAD?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt@
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\bank.cpp
CONST	SEGMENT
??_C@_1GG@LDLONLDE@?$AAo?$AAp?$AAe?$AAn?$AAR?$AAo?$AAw?$AAI?$AAD?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt@ DB 'o'
	DB	00H, 'p', 00H, 'e', 00H, 'n', 00H, 'R', 00H, 'o', 00H, 'w', 00H
	DB	'I', 00H, 'D', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'c'
	DB	00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'd'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'A', 00H
	DB	'd', 00H, 'd', 00H, 'r', 00H, 'e', 00H, 's', 00H, 's', 00H, '('
	DB	00H, ')', 00H, '.', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'R', 00H
	DB	'o', 00H, 'w', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??issueCAS@Bank@DRAMsimII@@QAEX_JPBVCommand@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??issueCAS@Bank@DRAMsimII@@QAEX_JPBVCommand@3@@Z@4JA DD 0c2H ; `DRAMsimII::Bank::issueCAS'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCcsu /ZI
_DATA	ENDS
;	COMDAT ?issueCAS@Bank@DRAMsimII@@QAEX_JPBVCommand@2@@Z
_TEXT	SEGMENT
$T160295 = -240						; size = 8
$T160296 = -224						; size = 4
$T160297 = -212						; size = 4
_this$ = -8						; size = 4
_currentTime$ = 8					; size = 8
_currentCommand$ = 16					; size = 4
?issueCAS@Bank@DRAMsimII@@QAEX_JPBVCommand@2@@Z PROC	; DRAMsimII::Bank::issueCAS, COMDAT
; _this$ = ecx

; 194  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 195  : 	//assert(activated);
; 196  : 	assert(openRowID == currentCommand->getAddress().getRow());

	mov	ecx, DWORD PTR _currentCommand$[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getRow@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getRow
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+120], eax
	je	SHORT $LN3@issueCAS
	mov	edx, DWORD PTR ?__LINE__Var@?1??issueCAS@Bank@DRAMsimII@@QAEX_JPBVCommand@3@@Z@4JA
	add	edx, 2
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1GG@LDLONLDE@?$AAo?$AAp?$AAe?$AAn?$AAR?$AAo?$AAw?$AAI?$AAD?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@issueCAS:

; 197  : 
; 198  : 	//lastCASTime = currentTime + timing.tAL();
; 199  : 	lastCASTime = currentTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _currentTime$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	edx, DWORD PTR _currentTime$[ebp+4]
	mov	DWORD PTR [eax+60], edx

; 200  : 
; 201  : 	lastCASLength = currentCommand->getLength();

	mov	ecx, DWORD PTR _currentCommand$[ebp]
	call	?getLength@Command@DRAMsimII@@QBEIXZ	; DRAMsimII::Command::getLength
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+80], eax

; 202  : 
; 203  : 	CASCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+136], ecx

; 204  : 
; 205  : 	// calculate when the next few commands can happen
; 206  : 	/// @todo which is correct?
; 207  : 	//nextPrechargeTime = max(nextPrechargeTime, currentTime + timing.tAL() + timing.tBurst() + timing.tRTP() - timing.tCCD());
; 208  : 	nextPrechargeTime = max(nextPrechargeTime, currentTime + timing.tAL() + timing.tCAS() + timing.tBurst() + max(0,timing.tRTP() - timing.tCMD()));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tRTP@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tRTP
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?tCMD@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tCMD
	sub	esi, eax
	mov	DWORD PTR $T160296[ebp], esi
	mov	DWORD PTR $T160297[ebp], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?tAL@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tAL
	cdq
	mov	esi, eax
	add	esi, DWORD PTR _currentTime$[ebp]
	mov	edi, DWORD PTR _currentTime$[ebp+4]
	adc	edi, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tCAS@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tCAS
	cdq
	add	esi, eax
	adc	edi, edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?tBurst@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tBurst
	cdq
	add	esi, eax
	adc	edi, edx
	lea	edx, DWORD PTR $T160296[ebp]
	push	edx
	lea	eax, DWORD PTR $T160297[ebp]
	push	eax
	call	??$max@H@std@@YAABHABH0@Z		; std::max<int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]
	cdq
	add	esi, eax
	adc	edi, edx
	mov	DWORD PTR $T160295[ebp], esi
	mov	DWORD PTR $T160295[ebp+4], edi
	lea	ecx, DWORD PTR $T160295[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	call	??$max@_J@std@@YAAB_JAB_J0@Z		; std::max<__int64>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+112], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+116], eax

; 209  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?issueCAS@Bank@DRAMsimII@@QAEX_JPBVCommand@2@@Z ENDP	; DRAMsimII::Bank::issueCAS
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\command.h
_TEXT	ENDS
;	COMDAT ?getLength@Command@DRAMsimII@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getLength@Command@DRAMsimII@@QBEIXZ PROC		; DRAMsimII::Command::getLength, COMDAT
; _this$ = ecx

; 81   : 		unsigned getLength() const { return length; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+88]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getLength@Command@DRAMsimII@@QBEIXZ ENDP		; DRAMsimII::Command::getLength
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\timingspecification.h
_TEXT	ENDS
;	COMDAT ?tCAS@TimingSpecification@DRAMsimII@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?tCAS@TimingSpecification@DRAMsimII@@QBEHXZ PROC	; DRAMsimII::TimingSpecification::tCAS, COMDAT
; _this$ = ecx

; 65   : 		int tCAS() const { return t_cas; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?tCAS@TimingSpecification@DRAMsimII@@QBEHXZ ENDP	; DRAMsimII::TimingSpecification::tCAS
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?tCMD@TimingSpecification@DRAMsimII@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?tCMD@TimingSpecification@DRAMsimII@@QBEHXZ PROC	; DRAMsimII::TimingSpecification::tCMD, COMDAT
; _this$ = ecx

; 73   : 		int tCMD() const { return t_cmd; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?tCMD@TimingSpecification@DRAMsimII@@QBEHXZ ENDP	; DRAMsimII::TimingSpecification::tCMD
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??issueCASW@Bank@DRAMsimII@@QAEX_JPBVCommand@3@@Z@4JA ; `DRAMsimII::Bank::issueCASW'::`2'::__LINE__Var
PUBLIC	?issueCASW@Bank@DRAMsimII@@QAEX_JPBVCommand@2@@Z ; DRAMsimII::Bank::issueCASW
;	COMDAT ?__LINE__Var@?1??issueCASW@Bank@DRAMsimII@@QAEX_JPBVCommand@3@@Z@4JA
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\bank.cpp
_DATA	SEGMENT
?__LINE__Var@?1??issueCASW@Bank@DRAMsimII@@QAEX_JPBVCommand@3@@Z@4JA DD 0d7H ; `DRAMsimII::Bank::issueCASW'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCcsu /ZI
_DATA	ENDS
;	COMDAT ?issueCASW@Bank@DRAMsimII@@QAEX_JPBVCommand@2@@Z
_TEXT	SEGMENT
$T160307 = -216						; size = 8
_this$ = -8						; size = 4
_currentTime$ = 8					; size = 8
_currentCommand$ = 16					; size = 4
?issueCASW@Bank@DRAMsimII@@QAEX_JPBVCommand@2@@Z PROC	; DRAMsimII::Bank::issueCASW, COMDAT
; _this$ = ecx

; 215  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 	//assert(activated);
; 217  : 	assert(openRowID == currentCommand->getAddress().getRow());

	mov	ecx, DWORD PTR _currentCommand$[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getRow@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getRow
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+120], eax
	je	SHORT $LN3@issueCASW
	mov	edx, DWORD PTR ?__LINE__Var@?1??issueCASW@Bank@DRAMsimII@@QAEX_JPBVCommand@3@@Z@4JA
	add	edx, 2
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1GG@LDLONLDE@?$AAo?$AAp?$AAe?$AAn?$AAR?$AAo?$AAw?$AAI?$AAD?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@issueCASW:

; 218  : 
; 219  : 	//lastCASWTime = currentTime + timing.tAL();
; 220  : 	lastCASWTime = currentTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _currentTime$[ebp]
	mov	DWORD PTR [eax+64], ecx
	mov	edx, DWORD PTR _currentTime$[ebp+4]
	mov	DWORD PTR [eax+68], edx

; 221  : 
; 222  : 	lastCASWLength = currentCommand->getLength();

	mov	ecx, DWORD PTR _currentCommand$[ebp]
	call	?getLength@Command@DRAMsimII@@QBEIXZ	; DRAMsimII::Command::getLength
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+84], eax

; 223  : 
; 224  : 	CASWCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+144], ecx

; 225  : 
; 226  : 	// calculate when the next few commands can happen
; 227  : 	nextPrechargeTime = max(nextPrechargeTime, currentTime + timing.tAL() + timing.tCWD() + timing.tBurst() + timing.tWR());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tAL@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tAL
	cdq
	mov	esi, eax
	add	esi, DWORD PTR _currentTime$[ebp]
	mov	edi, DWORD PTR _currentTime$[ebp+4]
	adc	edi, edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?tCWD@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tCWD
	cdq
	add	esi, eax
	adc	edi, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?tBurst@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tBurst
	cdq
	add	esi, eax
	adc	edi, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tWR@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tWR
	cdq
	add	esi, eax
	adc	edi, edx
	mov	DWORD PTR $T160307[ebp], esi
	mov	DWORD PTR $T160307[ebp+4], edi
	lea	ecx, DWORD PTR $T160307[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	call	??$max@_J@std@@YAAB_JAB_J0@Z		; std::max<__int64>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+112], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+116], eax

; 228  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?issueCASW@Bank@DRAMsimII@@QAEX_JPBVCommand@2@@Z ENDP	; DRAMsimII::Bank::issueCASW
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??issueREF@Bank@DRAMsimII@@QAEXXZ@4JA ; `DRAMsimII::Bank::issueREF'::`2'::__LINE__Var
PUBLIC	?issueREF@Bank@DRAMsimII@@QAEXXZ		; DRAMsimII::Bank::issueREF
;	COMDAT ?__LINE__Var@?1??issueREF@Bank@DRAMsimII@@QAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??issueREF@Bank@DRAMsimII@@QAEXXZ@4JA DD 0eaH ; `DRAMsimII::Bank::issueREF'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCcsu /ZI
_DATA	ENDS
;	COMDAT ?issueREF@Bank@DRAMsimII@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?issueREF@Bank@DRAMsimII@@QAEXXZ PROC			; DRAMsimII::Bank::issueREF, COMDAT
; _this$ = ecx

; 234  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 235  : 	assert(!activated);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+124]
	test	ecx, ecx
	je	SHORT $LN1@issueREF
	mov	edx, DWORD PTR ?__LINE__Var@?1??issueREF@Bank@DRAMsimII@@QAEXXZ@4JA
	add	edx, 1
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1BG@JHKGMDAP@?$AA?$CB?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAe?$AAd?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@issueREF:

; 236  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?issueREF@Bank@DRAMsimII@@QAEXXZ ENDP			; DRAMsimII::Bank::issueREF
_TEXT	ENDS
PUBLIC	?next@Bank@DRAMsimII@@QBE_JW4CommandType@Command@2@@Z ; DRAMsimII::Bank::next
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?next@Bank@DRAMsimII@@QBE_JW4CommandType@Command@2@@Z
_TEXT	SEGMENT
tv64 = -208						; size = 4
_this$ = -8						; size = 4
_nextCommandType$ = 8					; size = 4
?next@Bank@DRAMsimII@@QBE_JW4CommandType@Command@2@@Z PROC ; DRAMsimII::Bank::next, COMDAT
; _this$ = ecx

; 242  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 243  : 	switch (nextCommandType)

	mov	eax, DWORD PTR _nextCommandType$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 12			; 0000000cH
	ja	SHORT $LN1@next
	mov	ecx, DWORD PTR tv64[ebp]
	movzx	edx, BYTE PTR $LN11@next[ecx]
	jmp	DWORD PTR $LN12@next[edx*4]
$LN6@next:

; 244  : 	{
; 245  : 	case Command::ACTIVATE:
; 246  : 		return nextActivateTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+88]
	mov	edx, DWORD PTR [ecx+92]
	jmp	SHORT $LN9@next

; 247  : 		break;

	jmp	SHORT $LN9@next
$LN5@next:

; 248  : 	case Command::READ:
; 249  : 	case Command::READ_AND_PRECHARGE:
; 250  : 		return nextReadTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+96]
	mov	edx, DWORD PTR [ecx+100]
	jmp	SHORT $LN9@next

; 251  : 		break;

	jmp	SHORT $LN9@next
$LN4@next:

; 252  : 	case Command::WRITE:
; 253  : 	case Command::WRITE_AND_PRECHARGE:
; 254  : 		return nextWriteTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+104]
	mov	edx, DWORD PTR [ecx+108]
	jmp	SHORT $LN9@next

; 255  : 		break;

	jmp	SHORT $LN9@next
$LN3@next:

; 256  : 	case Command::PRECHARGE:
; 257  : 		return nextPrechargeTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+112]
	mov	edx, DWORD PTR [ecx+116]
	jmp	SHORT $LN9@next

; 258  : 		break;

	jmp	SHORT $LN9@next
$LN2@next:

; 259  : 	case Command::REFRESH_ALL:
; 260  : 		return 0;

	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN9@next

; 261  : 		break;

	jmp	SHORT $LN9@next
$LN1@next:

; 262  : 	default:
; 263  : 		return TICK_MAX;

	or	eax, -1
	mov	edx, 2147483647				; 7fffffffH
$LN9@next:

; 264  : 		break;
; 265  : 	}
; 266  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN12@next:
	DD	$LN6@next
	DD	$LN5@next
	DD	$LN4@next
	DD	$LN3@next
	DD	$LN2@next
	DD	$LN1@next
$LN11@next:
	DB	0
	DB	1
	DB	1
	DB	2
	DB	2
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
?next@Bank@DRAMsimII@@QBE_JW4CommandType@Command@2@@Z ENDP ; DRAMsimII::Bank::next
_TEXT	ENDS
PUBLIC	?tWTR@TimingSpecification@DRAMsimII@@QBEHXZ	; DRAMsimII::TimingSpecification::tWTR
PUBLIC	?resetToTime@Bank@DRAMsimII@@QAEX_J@Z		; DRAMsimII::Bank::resetToTime
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?resetToTime@Bank@DRAMsimII@@QAEX_J@Z
_TEXT	SEGMENT
$T160317 = -272						; size = 8
$T160318 = -256						; size = 4
$T160319 = -244						; size = 4
$T160320 = -232						; size = 8
$T160321 = -216						; size = 8
_this$ = -8						; size = 4
_time$ = 8						; size = 8
?resetToTime@Bank@DRAMsimII@@QAEX_J@Z PROC		; DRAMsimII::Bank::resetToTime, COMDAT
; _this$ = ecx

; 275  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 276  : 	lastRASTime = time - timing.tRC();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tRC@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tRC
	cdq
	mov	ecx, DWORD PTR _time$[ebp]
	sub	ecx, eax
	mov	eax, DWORD PTR _time$[ebp+4]
	sbb	eax, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx
	mov	DWORD PTR [edx+52], eax

; 277  : 	lastPrechargeTime = time - timing.tRP();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tRP@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tRP
	cdq
	mov	ecx, DWORD PTR _time$[ebp]
	sub	ecx, eax
	mov	eax, DWORD PTR _time$[ebp+4]
	sbb	eax, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], ecx
	mov	DWORD PTR [edx+76], eax

; 278  : 	lastCASTime = time - timing.tCAS() - timing.tBurst();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tCAS@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tCAS
	cdq
	mov	esi, DWORD PTR _time$[ebp]
	sub	esi, eax
	mov	edi, DWORD PTR _time$[ebp+4]
	sbb	edi, edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?tBurst@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tBurst
	cdq
	sub	esi, eax
	sbb	edi, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], esi
	mov	DWORD PTR [edx+60], edi

; 279  : 	lastCASWTime = time - timing.tCWD() - timing.tWTR() - timing.tBurst();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tCWD@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tCWD
	cdq
	mov	esi, DWORD PTR _time$[ebp]
	sub	esi, eax
	mov	edi, DWORD PTR _time$[ebp+4]
	sbb	edi, edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?tWTR@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tWTR
	cdq
	sub	esi, eax
	sbb	edi, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?tBurst@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tBurst
	cdq
	sub	esi, eax
	sbb	edi, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], esi
	mov	DWORD PTR [eax+68], edi

; 280  : 
; 281  : 	nextPrechargeTime = lastCASWTime + timing.tAL() + timing.tCWD() + timing.tBurst() + timing.tWR();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tAL@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tAL
	cdq
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	esi, DWORD PTR [ecx+64]
	mov	edi, DWORD PTR [ecx+68]
	adc	edi, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?tCWD@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tCWD
	cdq
	add	esi, eax
	adc	edi, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tBurst@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tBurst
	cdq
	add	esi, eax
	adc	edi, edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?tWR@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tWR
	cdq
	add	esi, eax
	adc	edi, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+112], esi
	mov	DWORD PTR [edx+116], edi

; 282  : 	nextPrechargeTime = max(nextPrechargeTime,lastCASTime + timing.tAL() + timing.tCAS() + timing.tBurst() + max(0,timing.tRTP() - timing.tCMD()));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tRTP@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tRTP
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?tCMD@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tCMD
	sub	esi, eax
	mov	DWORD PTR $T160318[ebp], esi
	mov	DWORD PTR $T160319[ebp], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?tAL@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tAL
	cdq
	mov	esi, eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esi, DWORD PTR [eax+56]
	mov	edi, DWORD PTR [eax+60]
	adc	edi, edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?tCAS@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tCAS
	cdq
	add	esi, eax
	adc	edi, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?tBurst@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tBurst
	cdq
	add	esi, eax
	adc	edi, edx
	lea	eax, DWORD PTR $T160318[ebp]
	push	eax
	lea	ecx, DWORD PTR $T160319[ebp]
	push	ecx
	call	??$max@H@std@@YAABHABH0@Z		; std::max<int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]
	cdq
	add	esi, eax
	adc	edi, edx
	mov	DWORD PTR $T160317[ebp], esi
	mov	DWORD PTR $T160317[ebp+4], edi
	lea	edx, DWORD PTR $T160317[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	call	??$max@_J@std@@YAAB_JAB_J0@Z		; std::max<__int64>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+112], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+116], eax

; 283  : 	nextActivateTime = lastPrechargeTime + timing.tRP();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tRP@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tRP
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+72]
	mov	ecx, DWORD PTR [ecx+76]
	adc	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], eax
	mov	DWORD PTR [edx+92], ecx

; 284  : 
; 285  : 	nextActivateTime = max(nextActivateTime, lastRASTime + timing.tRC());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tRC@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tRC
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+48]
	mov	ecx, DWORD PTR [ecx+52]
	adc	ecx, edx
	mov	DWORD PTR $T160320[ebp], eax
	mov	DWORD PTR $T160320[ebp+4], ecx
	lea	edx, DWORD PTR $T160320[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 88					; 00000058H
	push	eax
	call	??$max@_J@std@@YAAB_JAB_J0@Z		; std::max<__int64>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+88], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+92], eax

; 286  : 	nextReadTime = lastRASTime + timing.tRCD() - timing.tAL();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tRCD@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tRCD
	cdq
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	esi, DWORD PTR [ecx+48]
	mov	edi, DWORD PTR [ecx+52]
	adc	edi, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?tAL@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tAL
	cdq
	sub	esi, eax
	sbb	edi, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+96], esi
	mov	DWORD PTR [eax+100], edi

; 287  : 	nextWriteTime = lastRASTime + timing.tRCD() - timing.tAL();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tRCD@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tRCD
	cdq
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	esi, DWORD PTR [ecx+48]
	mov	edi, DWORD PTR [ecx+52]
	adc	edi, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?tAL@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tAL
	cdq
	sub	esi, eax
	sbb	edi, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], esi
	mov	DWORD PTR [eax+108], edi

; 288  : 	nextPrechargeTime = max(nextPrechargeTime, lastRASTime + timing.tRAS());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tRAS@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tRAS
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+48]
	mov	ecx, DWORD PTR [ecx+52]
	adc	ecx, edx
	mov	DWORD PTR $T160321[ebp], eax
	mov	DWORD PTR $T160321[ebp+4], ecx
	lea	edx, DWORD PTR $T160321[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	call	??$max@_J@std@@YAAB_JAB_J0@Z		; std::max<__int64>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+112], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+116], eax

; 289  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resetToTime@Bank@DRAMsimII@@QAEX_J@Z ENDP		; DRAMsimII::Bank::resetToTime
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\timingspecification.h
_TEXT	ENDS
;	COMDAT ?tWTR@TimingSpecification@DRAMsimII@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?tWTR@TimingSpecification@DRAMsimII@@QBEHXZ PROC	; DRAMsimII::TimingSpecification::tWTR, COMDAT
; _this$ = ecx

; 80   : 		int tWTR() const { return t_wtr; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+64]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?tWTR@TimingSpecification@DRAMsimII@@QBEHXZ ENDP	; DRAMsimII::TimingSpecification::tWTR
_TEXT	ENDS
PUBLIC	?getSeniorityAgeLimit@SystemConfiguration@DRAMsimII@@QBEIXZ ; DRAMsimII::SystemConfiguration::getSeniorityAgeLimit
PUBLIC	?getEnqueueTime@Event@DRAMsimII@@QBE_JXZ	; DRAMsimII::Event::getEnqueueTime
PUBLIC	?getCommandOrderingAlgorithm@SystemConfiguration@DRAMsimII@@QBE?AW4CommandOrderingAlgorithm@2@XZ ; DRAMsimII::SystemConfiguration::getCommandOrderingAlgorithm
PUBLIC	??_C@_1KI@HDCFBBCA@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@ ; `string'
PUBLIC	??_C@_1KM@GLMKHBLI@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@ ; `string'
PUBLIC	?getBank@Address@DRAMsimII@@QBEIXZ		; DRAMsimII::Address::getBank
PUBLIC	??_C@_1KM@NPMPHOJP@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@ ; `string'
PUBLIC	?getRank@Address@DRAMsimII@@QBEIXZ		; DRAMsimII::Address::getRank
PUBLIC	??_C@_1LI@GHPONGPE@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@ ; `string'
PUBLIC	?__LINE__Var@?1??openPageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@3@_J@Z@4JA ; `DRAMsimII::Bank::openPageAggressiveInsertCheck'::`2'::__LINE__Var
PUBLIC	?getChannel@Address@DRAMsimII@@QBEIXZ		; DRAMsimII::Address::getChannel
PUBLIC	?read@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPAVCommand@2@H@Z ; DRAMsimII::Queue<DRAMsimII::Command>::read
PUBLIC	?isBasicPrecharge@Command@DRAMsimII@@QBE_NXZ	; DRAMsimII::Command::isBasicPrecharge
PUBLIC	??A?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@1@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator[]
PUBLIC	?size@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEIXZ ; DRAMsimII::Queue<DRAMsimII::Command>::size
PUBLIC	?isReadOrWrite@Command@DRAMsimII@@QBE_NXZ	; DRAMsimII::Command::isReadOrWrite
PUBLIC	?back@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@XZ ; DRAMsimII::Queue<DRAMsimII::Command>::back
PUBLIC	?freecount@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEIXZ ; DRAMsimII::Queue<DRAMsimII::Command>::freecount
PUBLIC	?openPageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@2@_J@Z ; DRAMsimII::Bank::openPageAggressiveInsertCheck
;	COMDAT ??_C@_1KI@HDCFBBCA@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\bank.cpp
CONST	SEGMENT
??_C@_1KI@HDCFBBCA@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@ DB 'c'
	DB	00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'd'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'A', 00H
	DB	'd', 00H, 'd', 00H, 'r', 00H, 'e', 00H, 's', 00H, 's', 00H, '('
	DB	00H, ')', 00H, '.', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'R', 00H
	DB	'o', 00H, 'w', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'm', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 's', 00H, 'a', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, '-', 00H, '>', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'A'
	DB	00H, 'd', 00H, 'd', 00H, 'r', 00H, 'e', 00H, 's', 00H, 's', 00H
	DB	'(', 00H, ')', 00H, '.', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'R'
	DB	00H, 'o', 00H, 'w', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1KM@GLMKHBLI@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@
CONST	SEGMENT
??_C@_1KM@GLMKHBLI@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@ DB 'c'
	DB	00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'd'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'A', 00H
	DB	'd', 00H, 'd', 00H, 'r', 00H, 'e', 00H, 's', 00H, 's', 00H, '('
	DB	00H, ')', 00H, '.', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'B', 00H
	DB	'a', 00H, 'n', 00H, 'k', 00H, '(', 00H, ')', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'T', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 's', 00H, 'a', 00H, 'c', 00H, 't', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, '-', 00H, '>', 00H, 'g', 00H, 'e', 00H, 't'
	DB	00H, 'A', 00H, 'd', 00H, 'd', 00H, 'r', 00H, 'e', 00H, 's', 00H
	DB	's', 00H, '(', 00H, ')', 00H, '.', 00H, 'g', 00H, 'e', 00H, 't'
	DB	00H, 'B', 00H, 'a', 00H, 'n', 00H, 'k', 00H, '(', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1KM@NPMPHOJP@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@
CONST	SEGMENT
??_C@_1KM@NPMPHOJP@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@ DB 'c'
	DB	00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'd'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'A', 00H
	DB	'd', 00H, 'd', 00H, 'r', 00H, 'e', 00H, 's', 00H, 's', 00H, '('
	DB	00H, ')', 00H, '.', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'R', 00H
	DB	'a', 00H, 'n', 00H, 'k', 00H, '(', 00H, ')', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'T', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 's', 00H, 'a', 00H, 'c', 00H, 't', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, '-', 00H, '>', 00H, 'g', 00H, 'e', 00H, 't'
	DB	00H, 'A', 00H, 'd', 00H, 'd', 00H, 'r', 00H, 'e', 00H, 's', 00H
	DB	's', 00H, '(', 00H, ')', 00H, '.', 00H, 'g', 00H, 'e', 00H, 't'
	DB	00H, 'R', 00H, 'a', 00H, 'n', 00H, 'k', 00H, '(', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1LI@GHPONGPE@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@
CONST	SEGMENT
??_C@_1LI@GHPONGPE@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@ DB 'c'
	DB	00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'd'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'A', 00H
	DB	'd', 00H, 'd', 00H, 'r', 00H, 'e', 00H, 's', 00H, 's', 00H, '('
	DB	00H, ')', 00H, '.', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'C', 00H
	DB	'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l', 00H, '('
	DB	00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, 'T', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 's', 00H, 'a', 00H
	DB	'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, '-', 00H, '>'
	DB	00H, 'g', 00H, 'e', 00H, 't', 00H, 'A', 00H, 'd', 00H, 'd', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 's', 00H, '(', 00H, ')', 00H, '.'
	DB	00H, 'g', 00H, 'e', 00H, 't', 00H, 'C', 00H, 'h', 00H, 'a', 00H
	DB	'n', 00H, 'n', 00H, 'e', 00H, 'l', 00H, '(', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??openPageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@3@_J@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??openPageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@3@_J@Z@4JA DD 012fH ; `DRAMsimII::Bank::openPageAggressiveInsertCheck'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCcsu /ZI
_DATA	ENDS
;	COMDAT ?openPageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@2@_J@Z
_TEXT	SEGMENT
tv373 = -280						; size = 8
tv370 = -272						; size = 8
_currentCommand$136363 = -68				; size = 4
_currentIndex$136359 = -56				; size = 4
_currentRow$136358 = -44				; size = 4
_i$136351 = -32						; size = 4
_availableSlots$136348 = -20				; size = 4
_this$ = -8						; size = 4
_incomingTransaction$ = 8				; size = 4
_time$ = 12						; size = 8
?openPageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@2@_J@Z PROC ; DRAMsimII::Bank::openPageAggressiveInsertCheck, COMDAT
; _this$ = ecx

; 303  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 304  : 	if (perBankQueue.freecount() >= 3)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?freecount@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEIXZ ; DRAMsimII::Queue<DRAMsimII::Command>::freecount
	cmp	eax, 3
	jb	SHORT $LN19@openPageAg

; 305  : 	{
; 306  : 		return true;

	mov	al, 1
	jmp	$LN20@openPageAg

; 307  : 	}
; 308  : 	else 

	jmp	$LN20@openPageAg
$LN19@openPageAg:

; 309  : 	{
; 310  : 		unsigned availableSlots = perBankQueue.freecount();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?freecount@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEIXZ ; DRAMsimII::Queue<DRAMsimII::Command>::freecount
	mov	DWORD PTR _availableSlots$136348[ebp], eax

; 311  : 
; 312  : 		// if the queue ends with a R/W(+P), then all that is needed is A, R/W
; 313  : 		if (perBankQueue.back()->isReadOrWrite())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?back@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@XZ ; DRAMsimII::Queue<DRAMsimII::Command>::back
	mov	ecx, eax
	call	?isReadOrWrite@Command@DRAMsimII@@QBE_NXZ ; DRAMsimII::Command::isReadOrWrite
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@openPageAg

; 314  : 		{
; 315  : 			if (availableSlots >= 2)

	cmp	DWORD PTR _availableSlots$136348[ebp], 2
	jb	SHORT $LN17@openPageAg

; 316  : 				return true;

	mov	al, 1
	jmp	$LN20@openPageAg
$LN17@openPageAg:

; 317  : 		}
; 318  : 
; 319  : 		for (unsigned i = 0; i < perBankQueue.size() - 1; i++)

	mov	DWORD PTR _i$136351[ebp], 0
	jmp	SHORT $LN15@openPageAg
$LN14@openPageAg:
	mov	eax, DWORD PTR _i$136351[ebp]
	add	eax, 1
	mov	DWORD PTR _i$136351[ebp], eax
$LN15@openPageAg:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?size@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEIXZ ; DRAMsimII::Queue<DRAMsimII::Command>::size
	sub	eax, 1
	cmp	DWORD PTR _i$136351[ebp], eax
	jae	SHORT $LN13@openPageAg

; 320  : 		{
; 321  : 			if (perBankQueue[i]->isReadOrWrite() && perBankQueue[i+1] && perBankQueue[i+1]->isBasicPrecharge())

	mov	eax, DWORD PTR _i$136351[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@1@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator[]
	mov	ecx, eax
	call	?isReadOrWrite@Command@DRAMsimII@@QBE_NXZ ; DRAMsimII::Command::isReadOrWrite
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@openPageAg
	mov	eax, DWORD PTR _i$136351[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@1@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator[]
	test	eax, eax
	je	SHORT $LN12@openPageAg
	mov	eax, DWORD PTR _i$136351[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@1@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator[]
	mov	ecx, eax
	call	?isBasicPrecharge@Command@DRAMsimII@@QBE_NXZ ; DRAMsimII::Command::isBasicPrecharge
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@openPageAg

; 322  : 			{
; 323  : 				availableSlots++;

	mov	eax, DWORD PTR _availableSlots$136348[ebp]
	add	eax, 1
	mov	DWORD PTR _availableSlots$136348[ebp], eax

; 324  : 				if (availableSlots >= 3)

	cmp	DWORD PTR _availableSlots$136348[ebp], 3
	jb	SHORT $LN12@openPageAg

; 325  : 					return true;

	mov	al, 1
	jmp	$LN20@openPageAg
$LN12@openPageAg:

; 326  : 			}
; 327  : 		}

	jmp	$LN14@openPageAg
$LN13@openPageAg:

; 328  : 
; 329  : 		if (availableSlots == 0)

	cmp	DWORD PTR _availableSlots$136348[ebp], 0
	jne	SHORT $LN10@openPageAg

; 330  : 			return false;

	xor	al, al
	jmp	$LN20@openPageAg
$LN10@openPageAg:

; 331  : 
; 332  : 		const unsigned currentRow = incomingTransaction->getAddress().getRow();

	mov	ecx, DWORD PTR _incomingTransaction$[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getRow@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getRow
	mov	DWORD PTR _currentRow$136358[ebp], eax

; 333  : 
; 334  : 		// look in the bank_q and see if there's a precharge for this row to insert before		
; 335  : 		// go from tail to head
; 336  : 		for (int currentIndex = perBankQueue.size() - 1; currentIndex >= 0; --currentIndex)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?size@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEIXZ ; DRAMsimII::Queue<DRAMsimII::Command>::size
	sub	eax, 1
	mov	DWORD PTR _currentIndex$136359[ebp], eax
	jmp	SHORT $LN9@openPageAg
$LN8@openPageAg:
	mov	eax, DWORD PTR _currentIndex$136359[ebp]
	sub	eax, 1
	mov	DWORD PTR _currentIndex$136359[ebp], eax
$LN9@openPageAg:
	cmp	DWORD PTR _currentIndex$136359[ebp], 0
	jl	$LN7@openPageAg

; 337  : 		{	
; 338  : 			const Command *currentCommand = perBankQueue.read(currentIndex);

	mov	eax, DWORD PTR _currentIndex$136359[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?read@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPAVCommand@2@H@Z ; DRAMsimII::Queue<DRAMsimII::Command>::read
	mov	DWORD PTR _currentCommand$136363[ebp], eax

; 339  : 
; 340  : 			// channel, rank, bank, row all match, insert just before this precharge command
; 341  : 			if (currentCommand->isReadOrWrite() && (currentCommand->getAddress().getRow() == currentRow))

	mov	ecx, DWORD PTR _currentCommand$136363[ebp]
	call	?isReadOrWrite@Command@DRAMsimII@@QBE_NXZ ; DRAMsimII::Command::isReadOrWrite
	movzx	eax, al
	test	eax, eax
	je	$LN6@openPageAg
	mov	ecx, DWORD PTR _currentCommand$136363[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getRow@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getRow
	cmp	eax, DWORD PTR _currentRow$136358[ebp]
	jne	$LN6@openPageAg

; 342  : 			{
; 343  : 				assert(currentCommand->getAddress().getChannel() == incomingTransaction->getAddress().getChannel());

	mov	ecx, DWORD PTR _currentCommand$136363[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getChannel@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getChannel
	mov	esi, eax
	mov	ecx, DWORD PTR _incomingTransaction$[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getChannel@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getChannel
	cmp	esi, eax
	je	SHORT $LN22@openPageAg
	mov	eax, DWORD PTR ?__LINE__Var@?1??openPageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@3@_J@Z@4JA
	add	eax, 40					; 00000028H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1LI@GHPONGPE@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN22@openPageAg:

; 344  : 				assert(currentCommand->getAddress().getRank() == incomingTransaction->getAddress().getRank());

	mov	ecx, DWORD PTR _currentCommand$136363[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getRank@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getRank
	mov	esi, eax
	mov	ecx, DWORD PTR _incomingTransaction$[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getRank@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getRank
	cmp	esi, eax
	je	SHORT $LN23@openPageAg
	mov	eax, DWORD PTR ?__LINE__Var@?1??openPageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@3@_J@Z@4JA
	add	eax, 41					; 00000029H
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1KM@NPMPHOJP@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN23@openPageAg:

; 345  : 				assert(currentCommand->getAddress().getBank() == incomingTransaction->getAddress().getBank());

	mov	ecx, DWORD PTR _currentCommand$136363[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getBank@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getBank
	mov	esi, eax
	mov	ecx, DWORD PTR _incomingTransaction$[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getBank@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getBank
	cmp	esi, eax
	je	SHORT $LN24@openPageAg
	mov	eax, DWORD PTR ?__LINE__Var@?1??openPageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@3@_J@Z@4JA
	add	eax, 42					; 0000002aH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1KM@GLMKHBLI@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN24@openPageAg:

; 346  : 				assert(currentCommand->getAddress().getRow() == incomingTransaction->getAddress().getRow());

	mov	ecx, DWORD PTR _currentCommand$136363[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getRow@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getRow
	mov	esi, eax
	mov	ecx, DWORD PTR _incomingTransaction$[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getRow@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getRow
	cmp	esi, eax
	je	SHORT $LN25@openPageAg
	mov	eax, DWORD PTR ?__LINE__Var@?1??openPageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@3@_J@Z@4JA
	add	eax, 43					; 0000002bH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1KI@HDCFBBCA@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN25@openPageAg:

; 347  : 
; 348  : 				return true;

	mov	al, 1
	jmp	$LN20@openPageAg
	jmp	SHORT $LN5@openPageAg
$LN6@openPageAg:

; 349  : 			}
; 350  : 			// strict order may add to the end of the queue only
; 351  : 			// if this has not happened already then this method of insertion fails
; 352  : 			else if (systemConfig.getCommandOrderingAlgorithm() == STRICT_ORDER)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?getCommandOrderingAlgorithm@SystemConfiguration@DRAMsimII@@QBE?AW4CommandOrderingAlgorithm@2@XZ ; DRAMsimII::SystemConfiguration::getCommandOrderingAlgorithm
	test	eax, eax
	jne	SHORT $LN4@openPageAg

; 353  : 			{
; 354  : 				return false;

	xor	al, al
	jmp	SHORT $LN20@openPageAg
	jmp	SHORT $LN5@openPageAg
$LN4@openPageAg:

; 355  : 			}
; 356  : 			// then this command has been delayed by too many times and no more
; 357  : 			// commands can preempt it
; 358  : 			else if (time - currentCommand->getEnqueueTime() > systemConfig.getSeniorityAgeLimit())

	mov	ecx, DWORD PTR _currentCommand$136363[ebp]
	call	?getEnqueueTime@Event@DRAMsimII@@QBE_JXZ ; DRAMsimII::Event::getEnqueueTime
	mov	esi, DWORD PTR _time$[ebp]
	sub	esi, eax
	mov	edi, DWORD PTR _time$[ebp+4]
	sbb	edi, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?getSeniorityAgeLimit@SystemConfiguration@DRAMsimII@@QBEIXZ ; DRAMsimII::SystemConfiguration::getSeniorityAgeLimit
	xor	ecx, ecx
	mov	DWORD PTR tv370[ebp], esi
	mov	DWORD PTR tv370[ebp+4], edi
	mov	DWORD PTR tv373[ebp], eax
	mov	DWORD PTR tv373[ebp+4], ecx
	mov	edx, DWORD PTR tv370[ebp+4]
	cmp	edx, DWORD PTR tv373[ebp+4]
	jl	SHORT $LN5@openPageAg
	jg	SHORT $LN26@openPageAg
	mov	eax, DWORD PTR tv370[ebp]
	cmp	eax, DWORD PTR tv373[ebp]
	jbe	SHORT $LN5@openPageAg
$LN26@openPageAg:

; 359  : 			{
; 360  : 				return false;

	xor	al, al
	jmp	SHORT $LN20@openPageAg
$LN5@openPageAg:

; 361  : 			}
; 362  : 		}

	jmp	$LN8@openPageAg
$LN7@openPageAg:

; 363  : 		// if the correct row is already open, just insert there
; 364  : 		// already guaranteed not to have RAW/WAR errors
; 365  : 		if (activated && openRowID == currentRow)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+124]
	test	ecx, ecx
	je	SHORT $LN1@openPageAg
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	cmp	ecx, DWORD PTR _currentRow$136358[ebp]
	jne	SHORT $LN1@openPageAg

; 366  : 		{	
; 367  : 			return true;

	mov	al, 1
	jmp	SHORT $LN20@openPageAg
$LN1@openPageAg:

; 368  : 		}
; 369  : 		return false;

	xor	al, al
$LN20@openPageAg:

; 370  : 	}
; 371  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?openPageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@2@_J@Z ENDP ; DRAMsimII::Bank::openPageAggressiveInsertCheck
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\address.h
_TEXT	ENDS
;	COMDAT ?getChannel@Address@DRAMsimII@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getChannel@Address@DRAMsimII@@QBEIXZ PROC		; DRAMsimII::Address::getChannel, COMDAT
; _this$ = ecx

; 86   : 		unsigned getChannel() const { return channel; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getChannel@Address@DRAMsimII@@QBEIXZ ENDP		; DRAMsimII::Address::getChannel
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?getRank@Address@DRAMsimII@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getRank@Address@DRAMsimII@@QBEIXZ PROC			; DRAMsimII::Address::getRank, COMDAT
; _this$ = ecx

; 87   : 		unsigned getRank() const { return rank; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getRank@Address@DRAMsimII@@QBEIXZ ENDP			; DRAMsimII::Address::getRank
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?getBank@Address@DRAMsimII@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getBank@Address@DRAMsimII@@QBEIXZ PROC			; DRAMsimII::Address::getBank, COMDAT
; _this$ = ecx

; 88   : 		unsigned getBank() const { return bank; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getBank@Address@DRAMsimII@@QBEIXZ ENDP			; DRAMsimII::Address::getBank
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\event.h
_TEXT	ENDS
;	COMDAT ?getEnqueueTime@Event@DRAMsimII@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getEnqueueTime@Event@DRAMsimII@@QBE_JXZ PROC		; DRAMsimII::Event::getEnqueueTime, COMDAT
; _this$ = ecx

; 86   : 		tick getEnqueueTime() const { return enqueueTime; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR [ecx+20]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getEnqueueTime@Event@DRAMsimII@@QBE_JXZ ENDP		; DRAMsimII::Event::getEnqueueTime
_TEXT	ENDS
EXTRN	@_RTC_Check_4_to_1@4:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\command.h
;	COMDAT ?isBasicPrecharge@Command@DRAMsimII@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isBasicPrecharge@Command@DRAMsimII@@QBE_NXZ PROC	; DRAMsimII::Command::isBasicPrecharge, COMDAT
; _this$ = ecx

; 86   : 		bool isBasicPrecharge() const { return commandType == PRECHARGE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+80], 6
	sete	cl
	call	@_RTC_Check_4_to_1@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isBasicPrecharge@Command@DRAMsimII@@QBE_NXZ ENDP	; DRAMsimII::Command::isBasicPrecharge
_TEXT	ENDS
PUBLIC	?isWrite@Command@DRAMsimII@@QBE_NXZ		; DRAMsimII::Command::isWrite
PUBLIC	?isRead@Command@DRAMsimII@@QBE_NXZ		; DRAMsimII::Command::isRead
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?isReadOrWrite@Command@DRAMsimII@@QBE_NXZ
_TEXT	SEGMENT
tv72 = -208						; size = 4
_this$ = -8						; size = 4
?isReadOrWrite@Command@DRAMsimII@@QBE_NXZ PROC		; DRAMsimII::Command::isReadOrWrite, COMDAT
; _this$ = ecx

; 88   : 		bool isReadOrWrite() const { return isRead() || isWrite(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isRead@Command@DRAMsimII@@QBE_NXZ	; DRAMsimII::Command::isRead
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@isReadOrWr
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isWrite@Command@DRAMsimII@@QBE_NXZ	; DRAMsimII::Command::isWrite
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@isReadOrWr
	mov	DWORD PTR tv72[ebp], 0
	jmp	SHORT $LN4@isReadOrWr
$LN3@isReadOrWr:
	mov	DWORD PTR tv72[ebp], 1
$LN4@isReadOrWr:
	mov	ecx, DWORD PTR tv72[ebp]
	call	@_RTC_Check_4_to_1@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isReadOrWrite@Command@DRAMsimII@@QBE_NXZ ENDP		; DRAMsimII::Command::isReadOrWrite
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?isRead@Command@DRAMsimII@@QBE_NXZ
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
?isRead@Command@DRAMsimII@@QBE_NXZ PROC			; DRAMsimII::Command::isRead, COMDAT
; _this$ = ecx

; 83   : 		bool isRead() const { return ((commandType == READ) || (commandType == READ_AND_PRECHARGE)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 1
	je	SHORT $LN3@isRead
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+80], 2
	je	SHORT $LN3@isRead
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@isRead
$LN3@isRead:
	mov	DWORD PTR tv68[ebp], 1
$LN4@isRead:
	mov	ecx, DWORD PTR tv68[ebp]
	call	@_RTC_Check_4_to_1@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isRead@Command@DRAMsimII@@QBE_NXZ ENDP			; DRAMsimII::Command::isRead
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?isWrite@Command@DRAMsimII@@QBE_NXZ
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
?isWrite@Command@DRAMsimII@@QBE_NXZ PROC		; DRAMsimII::Command::isWrite, COMDAT
; _this$ = ecx

; 84   : 		bool isWrite() const { return ((commandType == WRITE) || (commandType == WRITE_AND_PRECHARGE)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 3
	je	SHORT $LN3@isWrite
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+80], 4
	je	SHORT $LN3@isWrite
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@isWrite
$LN3@isWrite:
	mov	DWORD PTR tv68[ebp], 1
$LN4@isWrite:
	mov	ecx, DWORD PTR tv68[ebp]
	call	@_RTC_Check_4_to_1@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isWrite@Command@DRAMsimII@@QBE_NXZ ENDP		; DRAMsimII::Command::isWrite
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\systemconfiguration.h
_TEXT	ENDS
;	COMDAT ?getCommandOrderingAlgorithm@SystemConfiguration@DRAMsimII@@QBE?AW4CommandOrderingAlgorithm@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getCommandOrderingAlgorithm@SystemConfiguration@DRAMsimII@@QBE?AW4CommandOrderingAlgorithm@2@XZ PROC ; DRAMsimII::SystemConfiguration::getCommandOrderingAlgorithm, COMDAT
; _this$ = ecx

; 90   : 		CommandOrderingAlgorithm getCommandOrderingAlgorithm() const { return commandOrderingAlgorithm; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+288]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getCommandOrderingAlgorithm@SystemConfiguration@DRAMsimII@@QBE?AW4CommandOrderingAlgorithm@2@XZ ENDP ; DRAMsimII::SystemConfiguration::getCommandOrderingAlgorithm
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?getSeniorityAgeLimit@SystemConfiguration@DRAMsimII@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getSeniorityAgeLimit@SystemConfiguration@DRAMsimII@@QBEIXZ PROC ; DRAMsimII::SystemConfiguration::getSeniorityAgeLimit, COMDAT
; _this$ = ecx

; 101  : 		unsigned getSeniorityAgeLimit() const { return seniorityAgeLimit; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+320]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getSeniorityAgeLimit@SystemConfiguration@DRAMsimII@@QBEIXZ ENDP ; DRAMsimII::SystemConfiguration::getSeniorityAgeLimit
_TEXT	ENDS
PUBLIC	??_C@_1CK@MPGBLAIM@?$AA?$CB?$AAt?$AAo?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAH?$AAo?$AAs?$AAt?$AA?$CI?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	?getHost@Command@DRAMsimII@@QBEPAVTransaction@2@XZ ; DRAMsimII::Command::getHost
PUBLIC	??_C@_1HG@PBNDLKLI@?$AA?$CB?$AAt?$AAo?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe?$AA?9?$AA?$DO?$AAi?$AAs?$AAR?$AAe?$AAa?$AAd?$AAO?$AAr?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAo@ ; `string'
PUBLIC	?remove@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAEPAVCommand@2@H@Z ; DRAMsimII::Queue<DRAMsimII::Command>::remove
PUBLIC	??_C@_1EA@OMKCHEPC@?$AA?$CB?$AAp?$AAe?$AAr?$AAB?$AAa?$AAn?$AAk?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA?$DO?$AAi?$AAs?$AAP?$AAr?$AAe?$AAc?$AAh?$AAa?$AAr?$AAg?$AAe?$AA?$CI?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	?isPrecharge@Command@DRAMsimII@@QBE_NXZ		; DRAMsimII::Command::isPrecharge
PUBLIC	??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??collapse@Bank@DRAMsimII@@QAEXXZ@4JA ; `DRAMsimII::Bank::collapse'::`2'::__LINE__Var
PUBLIC	?collapse@Bank@DRAMsimII@@QAEXXZ		; DRAMsimII::Bank::collapse
EXTRN	?setAutoPrecharge@Command@DRAMsimII@@QBEX_N@Z:PROC ; DRAMsimII::Command::setAutoPrecharge
;	COMDAT ??_C@_1CK@MPGBLAIM@?$AA?$CB?$AAt?$AAo?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAH?$AAo?$AAs?$AAt?$AA?$CI?$AA?$CJ?$AA?$AA@
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\bank.cpp
CONST	SEGMENT
??_C@_1CK@MPGBLAIM@?$AA?$CB?$AAt?$AAo?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAH?$AAo?$AAs?$AAt?$AA?$CI?$AA?$CJ?$AA?$AA@ DB '!'
	DB	00H, 't', 00H, 'o', 00H, 'D', 00H, 'e', 00H, 'l', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, '-', 00H, '>', 00H, 'g', 00H, 'e', 00H, 't'
	DB	00H, 'H', 00H, 'o', 00H, 's', 00H, 't', 00H, '(', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1HG@PBNDLKLI@?$AA?$CB?$AAt?$AAo?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe?$AA?9?$AA?$DO?$AAi?$AAs?$AAR?$AAe?$AAa?$AAd?$AAO?$AAr?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAo@
CONST	SEGMENT
??_C@_1HG@PBNDLKLI@?$AA?$CB?$AAt?$AAo?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe?$AA?9?$AA?$DO?$AAi?$AAs?$AAR?$AAe?$AAa?$AAd?$AAO?$AAr?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAo@ DB '!'
	DB	00H, 't', 00H, 'o', 00H, 'D', 00H, 'e', 00H, 'l', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, '-', 00H, '>', 00H, 'i', 00H, 's', 00H, 'R'
	DB	00H, 'e', 00H, 'a', 00H, 'd', 00H, 'O', 00H, 'r', 00H, 'W', 00H
	DB	'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '(', 00H, ')', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'D', 00H
	DB	'e', 00H, 'l', 00H, 'e', 00H, 't', 00H, 'e', 00H, '-', 00H, '>'
	DB	00H, 'i', 00H, 's', 00H, 'B', 00H, 'a', 00H, 's', 00H, 'i', 00H
	DB	'c', 00H, 'P', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 'h', 00H, 'a'
	DB	00H, 'r', 00H, 'g', 00H, 'e', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@OMKCHEPC@?$AA?$CB?$AAp?$AAe?$AAr?$AAB?$AAa?$AAn?$AAk?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA?$DO?$AAi?$AAs?$AAP?$AAr?$AAe?$AAc?$AAh?$AAa?$AAr?$AAg?$AAe?$AA?$CI?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@OMKCHEPC@?$AA?$CB?$AAp?$AAe?$AAr?$AAB?$AAa?$AAn?$AAk?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA?$DO?$AAi?$AAs?$AAP?$AAr?$AAe?$AAc?$AAh?$AAa?$AAr?$AAg?$AAe?$AA?$CI?$AA?$CJ?$AA?$AA@ DB '!'
	DB	00H, 'p', 00H, 'e', 00H, 'r', 00H, 'B', 00H, 'a', 00H, 'n', 00H
	DB	'k', 00H, 'Q', 00H, 'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, '['
	DB	00H, 'i', 00H, ']', 00H, '-', 00H, '>', 00H, 'i', 00H, 's', 00H
	DB	'P', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, 'g', 00H, 'e', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ DB 'f', 00H, 'a', 00H
	DB	'l', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??collapse@Bank@DRAMsimII@@QAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??collapse@Bank@DRAMsimII@@QAEXXZ@4JA DD 0179H ; `DRAMsimII::Bank::collapse'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCcsu /ZI
_DATA	ENDS
;	COMDAT ?collapse@Bank@DRAMsimII@@QAEXXZ
_TEXT	SEGMENT
tv212 = -256						; size = 4
$T160365 = -248						; size = 4
$T160366 = -236						; size = 4
_toDelete$136392 = -32					; size = 4
_i$136382 = -20						; size = 4
_this$ = -8						; size = 4
?collapse@Bank@DRAMsimII@@QAEXXZ PROC			; DRAMsimII::Bank::collapse, COMDAT
; _this$ = ecx

; 377  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 378  : 	for (unsigned i = 0; i < perBankQueue.size() - 1; i++)

	mov	DWORD PTR _i$136382[ebp], 0
	jmp	SHORT $LN5@collapse
$LN4@collapse:
	mov	eax, DWORD PTR _i$136382[ebp]
	add	eax, 1
	mov	DWORD PTR _i$136382[ebp], eax
$LN5@collapse:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?size@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEIXZ ; DRAMsimII::Queue<DRAMsimII::Command>::size
	sub	eax, 1
	cmp	DWORD PTR _i$136382[ebp], eax
	jae	$LN6@collapse

; 379  : 	{
; 380  : 		if (perBankQueue[i]->isReadOrWrite() && perBankQueue[i+1] && perBankQueue[i+1]->isBasicPrecharge())

	mov	eax, DWORD PTR _i$136382[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@1@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator[]
	mov	ecx, eax
	call	?isReadOrWrite@Command@DRAMsimII@@QBE_NXZ ; DRAMsimII::Command::isReadOrWrite
	movzx	ecx, al
	test	ecx, ecx
	je	$LN2@collapse
	mov	eax, DWORD PTR _i$136382[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@1@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator[]
	test	eax, eax
	je	$LN2@collapse
	mov	eax, DWORD PTR _i$136382[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@1@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator[]
	mov	ecx, eax
	call	?isBasicPrecharge@Command@DRAMsimII@@QBE_NXZ ; DRAMsimII::Command::isBasicPrecharge
	movzx	ecx, al
	test	ecx, ecx
	je	$LN2@collapse

; 381  : 		{
; 382  : 			if (perBankQueue[i]->getAddress().getBank() != perBankQueue[i+1]->getAddress().getBank())

	mov	eax, DWORD PTR _i$136382[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@1@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator[]
	mov	ecx, eax
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getBank@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getBank
	mov	esi, eax
	mov	ecx, DWORD PTR _i$136382[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@1@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator[]
	mov	ecx, eax
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getBank@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getBank
	cmp	esi, eax
	je	SHORT $LN1@collapse

; 383  : 				assert(false);

	xor	eax, eax
	jne	SHORT $LN1@collapse
	mov	ecx, DWORD PTR ?__LINE__Var@?1??collapse@Bank@DRAMsimII@@QAEXXZ@4JA
	add	ecx, 6
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@collapse:

; 384  : 			assert(!perBankQueue[i]->isPrecharge());

	mov	eax, DWORD PTR _i$136382[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@1@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator[]
	mov	ecx, eax
	call	?isPrecharge@Command@DRAMsimII@@QBE_NXZ	; DRAMsimII::Command::isPrecharge
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@collapse
	mov	edx, DWORD PTR ?__LINE__Var@?1??collapse@Bank@DRAMsimII@@QAEXXZ@4JA
	add	edx, 7
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1EA@OMKCHEPC@?$AA?$CB?$AAp?$AAe?$AAr?$AAB?$AAa?$AAn?$AAk?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA?$DO?$AAi?$AAs?$AAP?$AAr?$AAe?$AAc?$AAh?$AAa?$AAr?$AAg?$AAe?$AA?$CI?$AA?$CJ?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@collapse:

; 385  : 			perBankQueue[i]->setAutoPrecharge(true);

	push	1
	mov	eax, DWORD PTR _i$136382[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@1@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator[]
	mov	ecx, eax
	call	?setAutoPrecharge@Command@DRAMsimII@@QBEX_N@Z ; DRAMsimII::Command::setAutoPrecharge

; 386  : 			Command *toDelete = perBankQueue.remove(i+1);

	mov	eax, DWORD PTR _i$136382[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?remove@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAEPAVCommand@2@H@Z ; DRAMsimII::Queue<DRAMsimII::Command>::remove
	mov	DWORD PTR _toDelete$136392[ebp], eax

; 387  : 			assert(!toDelete->isReadOrWrite() && toDelete->isBasicPrecharge());

	mov	ecx, DWORD PTR _toDelete$136392[ebp]
	call	?isReadOrWrite@Command@DRAMsimII@@QBE_NXZ ; DRAMsimII::Command::isReadOrWrite
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN10@collapse
	mov	ecx, DWORD PTR _toDelete$136392[ebp]
	call	?isBasicPrecharge@Command@DRAMsimII@@QBE_NXZ ; DRAMsimII::Command::isBasicPrecharge
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN11@collapse
$LN10@collapse:
	mov	edx, DWORD PTR ?__LINE__Var@?1??collapse@Bank@DRAMsimII@@QAEXXZ@4JA
	add	edx, 10					; 0000000aH
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1HG@PBNDLKLI@?$AA?$CB?$AAt?$AAo?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe?$AA?9?$AA?$DO?$AAi?$AAs?$AAR?$AAe?$AAa?$AAd?$AAO?$AAr?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAo@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@collapse:

; 388  : 			assert(!toDelete->getHost());

	mov	ecx, DWORD PTR _toDelete$136392[ebp]
	call	?getHost@Command@DRAMsimII@@QBEPAVTransaction@2@XZ ; DRAMsimII::Command::getHost
	test	eax, eax
	je	SHORT $LN12@collapse
	mov	eax, DWORD PTR ?__LINE__Var@?1??collapse@Bank@DRAMsimII@@QAEXXZ@4JA
	add	eax, 11					; 0000000bH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1CK@MPGBLAIM@?$AA?$CB?$AAt?$AAo?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAH?$AAo?$AAs?$AAt?$AA?$CI?$AA?$CJ?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@collapse:

; 389  : 			//cerr << *toDelete << endl;
; 390  : 			delete toDelete;

	mov	eax, DWORD PTR _toDelete$136392[ebp]
	mov	DWORD PTR $T160366[ebp], eax
	mov	ecx, DWORD PTR $T160366[ebp]
	mov	DWORD PTR $T160365[ebp], ecx
	cmp	DWORD PTR $T160365[ebp], 0
	je	SHORT $LN13@collapse
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T160365[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T160365[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv212[ebp], eax
	jmp	SHORT $LN2@collapse
$LN13@collapse:
	mov	DWORD PTR tv212[ebp], 0
$LN2@collapse:

; 391  : 		}

	jmp	$LN4@collapse
$LN6@collapse:

; 392  : 	}
; 393  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?collapse@Bank@DRAMsimII@@QAEXXZ ENDP			; DRAMsimII::Bank::collapse
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\command.h
_TEXT	ENDS
;	COMDAT ?getHost@Command@DRAMsimII@@QBEPAVTransaction@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?getHost@Command@DRAMsimII@@QBEPAVTransaction@2@XZ PROC	; DRAMsimII::Command::getHost, COMDAT
; _this$ = ecx

; 80   : 		Transaction *getHost() const { return hostTransaction; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+84]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?getHost@Command@DRAMsimII@@QBEPAVTransaction@2@XZ ENDP	; DRAMsimII::Command::getHost
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?isPrecharge@Command@DRAMsimII@@QBE_NXZ
_TEXT	SEGMENT
tv70 = -208						; size = 4
_this$ = -8						; size = 4
?isPrecharge@Command@DRAMsimII@@QBE_NXZ PROC		; DRAMsimII::Command::isPrecharge, COMDAT
; _this$ = ecx

; 85   : 		bool isPrecharge() const { return ((commandType == READ_AND_PRECHARGE) || (commandType == WRITE_AND_PRECHARGE) || (commandType == PRECHARGE)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 2
	je	SHORT $LN3@isPrecharg
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+80], 4
	je	SHORT $LN3@isPrecharg
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+80], 6
	je	SHORT $LN3@isPrecharg
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@isPrecharg
$LN3@isPrecharg:
	mov	DWORD PTR tv70[ebp], 1
$LN4@isPrecharg:
	mov	ecx, DWORD PTR tv70[ebp]
	call	@_RTC_Check_4_to_1@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isPrecharge@Command@DRAMsimII@@QBE_NXZ ENDP		; DRAMsimII::Command::isPrecharge
_TEXT	ENDS
PUBLIC	?push_front@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE_NPAVCommand@2@@Z ; DRAMsimII::Queue<DRAMsimII::Command>::push_front
PUBLIC	??_C@_1O@PHBBLDEN@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1KE@DIIDACIC@?$AAp?$AAe?$AAr?$AAB?$AAa?$AAn?$AAk?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$FL?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?$FN?$AA?9?$AA?$DO@ ; `string'
PUBLIC	?__LINE__Var@?1??aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@3@_J@Z@4JA ; `DRAMsimII::Bank::aggressiveInsert'::`2'::__LINE__Var
PUBLIC	?insert@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE_NPAVCommand@2@H@Z ; DRAMsimII::Queue<DRAMsimII::Command>::insert
PUBLIC	?isFull@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBE_NXZ ; DRAMsimII::Queue<DRAMsimII::Command>::isFull
PUBLIC	?aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@2@_J@Z ; DRAMsimII::Bank::aggressiveInsert
EXTRN	??3Command@DRAMsimII@@SAXPAX@Z:PROC		; DRAMsimII::Command::operator delete
EXTRN	??8Address@DRAMsimII@@QBE_NABV01@@Z:PROC	; DRAMsimII::Address::operator==
EXTRN	??0Command@DRAMsimII@@QAE@PAVTransaction@1@_J_NIW4CommandType@01@@Z:PROC ; DRAMsimII::Command::Command
EXTRN	??2Command@DRAMsimII@@SAPAXI@Z:PROC		; DRAMsimII::Command::operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_1O@PHBBLDEN@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\bank.cpp
CONST	SEGMENT
??_C@_1O@PHBBLDEN@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@ DB 'r', 00H, 'e'
	DB	00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1KE@DIIDACIC@?$AAp?$AAe?$AAr?$AAB?$AAa?$AAn?$AAk?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$FL?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?$FN?$AA?9?$AA?$DO@
CONST	SEGMENT
??_C@_1KE@DIIDACIC@?$AAp?$AAe?$AAr?$AAB?$AAa?$AAn?$AAk?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$FL?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?$FN?$AA?9?$AA?$DO@ DB 'p'
	DB	00H, 'e', 00H, 'r', 00H, 'B', 00H, 'a', 00H, 'n', 00H, 'k', 00H
	DB	'Q', 00H, 'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, '[', 00H, 'c'
	DB	00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '+'
	DB	00H, ' ', 00H, '1', 00H, ']', 00H, '-', 00H, '>', 00H, 'g', 00H
	DB	'e', 00H, 't', 00H, 'A', 00H, 'd', 00H, 'd', 00H, 'r', 00H, 'e'
	DB	00H, 's', 00H, 's', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'm'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'n', 00H, 's', 00H, 'a', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, '-', 00H, '>', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	'A', 00H, 'd', 00H, 'd', 00H, 'r', 00H, 'e', 00H, 's', 00H, 's'
	DB	00H, '(', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@3@_J@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@3@_J@Z@4JA DD 0192H ; `DRAMsimII::Bank::aggressiveInsert'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@2@_J@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@2@_J@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@2@_J@Z$1
__ehfuncinfo$?aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@2@_J@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@2@_J@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@2@_J@Z
_TEXT	SEGMENT
tv307 = -352						; size = 8
tv304 = -344						; size = 8
tv230 = -340						; size = 4
tv157 = -340						; size = 4
$T160377 = -332						; size = 4
$T160378 = -320						; size = 4
$T160383 = -308						; size = 4
$T160384 = -296						; size = 4
_result$136429 = -89					; size = 1
_result$136414 = -77					; size = 1
_needsPrecharge$136412 = -65				; size = 1
_currentCommand$136410 = -56				; size = 4
_currentIndex$136406 = -44				; size = 4
_currentRow$136405 = -32				; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_incomingTransaction$ = 8				; size = 4
_time$ = 12						; size = 8
?aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@2@_J@Z PROC ; DRAMsimII::Bank::aggressiveInsert, COMDAT
; _this$ = ecx

; 402  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@2@_J@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 403  : 	if (!perBankQueue.isFull())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?isFull@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBE_NXZ ; DRAMsimII::Queue<DRAMsimII::Command>::isFull
	movzx	eax, al
	test	eax, eax
	jne	$LN11@aggressive

; 404  : 	{
; 405  : 		const unsigned currentRow = incomingTransaction->getAddress().getRow();

	mov	ecx, DWORD PTR _incomingTransaction$[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getRow@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getRow
	mov	DWORD PTR _currentRow$136405[ebp], eax

; 406  : 
; 407  : 		// go from the end to the beginning to ensure no starvation or RAW/WAR errors
; 408  : 		for (int currentIndex = perBankQueue.size() - 1; currentIndex >= 0; --currentIndex)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?size@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEIXZ ; DRAMsimII::Queue<DRAMsimII::Command>::size
	sub	eax, 1
	mov	DWORD PTR _currentIndex$136406[ebp], eax
	jmp	SHORT $LN10@aggressive
$LN9@aggressive:
	mov	eax, DWORD PTR _currentIndex$136406[ebp]
	sub	eax, 1
	mov	DWORD PTR _currentIndex$136406[ebp], eax
$LN10@aggressive:
	cmp	DWORD PTR _currentIndex$136406[ebp], 0
	jl	$LN8@aggressive

; 409  : 		{	
; 410  : 			const Command *currentCommand = perBankQueue.read(currentIndex);

	mov	eax, DWORD PTR _currentIndex$136406[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?read@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPAVCommand@2@H@Z ; DRAMsimII::Queue<DRAMsimII::Command>::read
	mov	DWORD PTR _currentCommand$136410[ebp], eax

; 411  : 
; 412  : 			// see if there is an available command to piggyback on
; 413  : 			if (currentCommand->isReadOrWrite() && currentCommand->getAddress().getRow() == currentRow)

	mov	ecx, DWORD PTR _currentCommand$136410[ebp]
	call	?isReadOrWrite@Command@DRAMsimII@@QBE_NXZ ; DRAMsimII::Command::isReadOrWrite
	movzx	eax, al
	test	eax, eax
	je	$LN7@aggressive
	mov	ecx, DWORD PTR _currentCommand$136410[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getRow@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getRow
	cmp	eax, DWORD PTR _currentRow$136405[ebp]
	jne	$LN7@aggressive

; 414  : 			{
; 415  : 				bool needsPrecharge = currentCommand->isPrecharge();

	mov	ecx, DWORD PTR _currentCommand$136410[ebp]
	call	?isPrecharge@Command@DRAMsimII@@QBE_NXZ	; DRAMsimII::Command::isPrecharge
	mov	BYTE PTR _needsPrecharge$136412[ebp], al

; 416  : 
; 417  : 				if (needsPrecharge)

	movzx	eax, BYTE PTR _needsPrecharge$136412[ebp]
	test	eax, eax
	je	SHORT $LN6@aggressive

; 418  : 				{
; 419  : 					currentCommand->setAutoPrecharge(false);

	push	0
	mov	ecx, DWORD PTR _currentCommand$136410[ebp]
	call	?setAutoPrecharge@Command@DRAMsimII@@QBEX_N@Z ; DRAMsimII::Command::setAutoPrecharge
$LN6@aggressive:

; 420  : 				}			
; 421  : 
; 422  : 				// if the precharge was stripped from the n-1 command, add it to this one
; 423  : #ifndef NDEBUG
; 424  : 				bool result = 
; 425  : #endif
; 426  : 					perBankQueue.insert(new Command(incomingTransaction, time, needsPrecharge, timing.tBurst()), currentIndex + 1);

	push	96					; 00000060H
	call	??2Command@DRAMsimII@@SAPAXI@Z		; DRAMsimII::Command::operator new
	add	esp, 4
	mov	DWORD PTR $T160378[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T160378[ebp], 0
	je	SHORT $LN14@aggressive
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tBurst@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tBurst
	push	eax
	movzx	ecx, BYTE PTR _needsPrecharge$136412[ebp]
	push	ecx
	mov	edx, DWORD PTR _time$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _time$[ebp]
	push	eax
	mov	ecx, DWORD PTR _incomingTransaction$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T160378[ebp]
	call	??0Command@DRAMsimII@@QAE@PAVTransaction@1@_J_NIW4CommandType@01@@Z ; DRAMsimII::Command::Command
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN15@aggressive
$LN14@aggressive:
	mov	DWORD PTR tv157[ebp], 0
$LN15@aggressive:
	mov	edx, DWORD PTR tv157[ebp]
	mov	DWORD PTR $T160377[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _currentIndex$136406[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR $T160377[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?insert@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE_NPAVCommand@2@H@Z ; DRAMsimII::Queue<DRAMsimII::Command>::insert
	mov	BYTE PTR _result$136414[ebp], al

; 427  : 				assert(perBankQueue[currentIndex + 1]->getAddress() == incomingTransaction->getAddress());

	mov	ecx, DWORD PTR _incomingTransaction$[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	push	eax
	mov	eax, DWORD PTR _currentIndex$136406[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@1@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator[]
	mov	ecx, eax
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	??8Address@DRAMsimII@@QBE_NABV01@@Z	; DRAMsimII::Address::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN16@aggressive
	mov	edx, DWORD PTR ?__LINE__Var@?1??aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@3@_J@Z@4JA
	add	edx, 25					; 00000019H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1KE@DIIDACIC@?$AAp?$AAe?$AAr?$AAB?$AAa?$AAn?$AAk?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$FL?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?$FN?$AA?9?$AA?$DO@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@aggressive:

; 428  : 				assert(result);

	movzx	eax, BYTE PTR _result$136414[ebp]
	test	eax, eax
	jne	SHORT $LN17@aggressive
	mov	ecx, DWORD PTR ?__LINE__Var@?1??aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@3@_J@Z@4JA
	add	ecx, 26					; 0000001aH
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1O@PHBBLDEN@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@aggressive:

; 429  : 				return true;

	mov	al, 1
	jmp	$LN12@aggressive
	jmp	SHORT $LN5@aggressive
$LN7@aggressive:

; 430  : 			}
; 431  : 			// strict order may add to the end of the queue only
; 432  : 			// if this has not happened already then this method of insertion fails
; 433  : 			else if (systemConfig.getCommandOrderingAlgorithm() == STRICT_ORDER)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?getCommandOrderingAlgorithm@SystemConfiguration@DRAMsimII@@QBE?AW4CommandOrderingAlgorithm@2@XZ ; DRAMsimII::SystemConfiguration::getCommandOrderingAlgorithm
	test	eax, eax
	jne	SHORT $LN4@aggressive

; 434  : 			{
; 435  : 				return false;

	xor	al, al
	jmp	$LN12@aggressive
	jmp	SHORT $LN5@aggressive
$LN4@aggressive:

; 436  : 			}
; 437  : 			else if (time - currentCommand->getEnqueueTime() > systemConfig.getSeniorityAgeLimit())

	mov	ecx, DWORD PTR _currentCommand$136410[ebp]
	call	?getEnqueueTime@Event@DRAMsimII@@QBE_JXZ ; DRAMsimII::Event::getEnqueueTime
	mov	esi, DWORD PTR _time$[ebp]
	sub	esi, eax
	mov	edi, DWORD PTR _time$[ebp+4]
	sbb	edi, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?getSeniorityAgeLimit@SystemConfiguration@DRAMsimII@@QBEIXZ ; DRAMsimII::SystemConfiguration::getSeniorityAgeLimit
	xor	ecx, ecx
	mov	DWORD PTR tv304[ebp], esi
	mov	DWORD PTR tv304[ebp+4], edi
	mov	DWORD PTR tv307[ebp], eax
	mov	DWORD PTR tv307[ebp+4], ecx
	mov	edx, DWORD PTR tv304[ebp+4]
	cmp	edx, DWORD PTR tv307[ebp+4]
	jl	SHORT $LN5@aggressive
	jg	SHORT $LN23@aggressive
	mov	eax, DWORD PTR tv304[ebp]
	cmp	eax, DWORD PTR tv307[ebp]
	jbe	SHORT $LN5@aggressive
$LN23@aggressive:

; 438  : 			{
; 439  : 				return false;

	xor	al, al
	jmp	$LN12@aggressive
$LN5@aggressive:

; 440  : 			}
; 441  : 		}

	jmp	$LN9@aggressive
$LN8@aggressive:

; 442  : 
; 443  : 		// if the correct row is already open, just insert there
; 444  : 		// already guaranteed not to have RAW/WAR errors
; 445  : 		if (activated && openRowID == currentRow)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+124]
	test	ecx, ecx
	je	$LN11@aggressive
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	cmp	ecx, DWORD PTR _currentRow$136405[ebp]
	jne	$LN11@aggressive

; 446  : 		{
; 447  : #ifndef NDEBUG
; 448  : 			bool result =
; 449  : #endif
; 450  : 				perBankQueue.push_front(new Command(incomingTransaction, time, false, timing.tBurst()));

	push	96					; 00000060H
	call	??2Command@DRAMsimII@@SAPAXI@Z		; DRAMsimII::Command::operator new
	add	esp, 4
	mov	DWORD PTR $T160384[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T160384[ebp], 0
	je	SHORT $LN18@aggressive
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?tBurst@TimingSpecification@DRAMsimII@@QBEHXZ ; DRAMsimII::TimingSpecification::tBurst
	push	eax
	push	0
	mov	ecx, DWORD PTR _time$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _time$[ebp]
	push	edx
	mov	eax, DWORD PTR _incomingTransaction$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T160384[ebp]
	call	??0Command@DRAMsimII@@QAE@PAVTransaction@1@_J_NIW4CommandType@01@@Z ; DRAMsimII::Command::Command
	mov	DWORD PTR tv230[ebp], eax
	jmp	SHORT $LN19@aggressive
$LN18@aggressive:
	mov	DWORD PTR tv230[ebp], 0
$LN19@aggressive:
	mov	ecx, DWORD PTR tv230[ebp]
	mov	DWORD PTR $T160383[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T160383[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?push_front@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE_NPAVCommand@2@@Z ; DRAMsimII::Queue<DRAMsimII::Command>::push_front
	mov	BYTE PTR _result$136429[ebp], al

; 451  : 			assert(result);

	movzx	eax, BYTE PTR _result$136429[ebp]
	test	eax, eax
	jne	SHORT $LN20@aggressive
	mov	ecx, DWORD PTR ?__LINE__Var@?1??aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@3@_J@Z@4JA
	add	ecx, 49					; 00000031H
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1O@PHBBLDEN@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN20@aggressive:

; 452  : 
; 453  : 			return true;

	mov	al, 1
	jmp	SHORT $LN12@aggressive
$LN11@aggressive:

; 454  : 		}
; 455  : 	}
; 456  : 
; 457  : 	return false;

	xor	al, al
$LN12@aggressive:

; 458  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@2@_J@Z$0:
	mov	eax, DWORD PTR $T160378[ebp]
	push	eax
	call	??3Command@DRAMsimII@@SAXPAX@Z		; DRAMsimII::Command::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@2@_J@Z$1:
	mov	eax, DWORD PTR $T160384[ebp]
	push	eax
	call	??3Command@DRAMsimII@@SAXPAX@Z		; DRAMsimII::Command::operator delete
	pop	ecx
	ret	0
__ehhandler$?aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@2@_J@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-356]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@2@_J@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?aggressiveInsert@Bank@DRAMsimII@@QAE_NPAVTransaction@2@_J@Z ENDP ; DRAMsimII::Bank::aggressiveInsert
PUBLIC	??_C@_1FM@DKHGLPDB@?$AAp?$AAe?$AAr?$AAB?$AAa?$AAn?$AAk?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$FL?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?$FN?$AA?9?$AA?$DO@ ; `string'
PUBLIC	?isAutoPrecharge@SystemConfiguration@DRAMsimII@@QBE_NXZ ; DRAMsimII::SystemConfiguration::isAutoPrecharge
PUBLIC	?__LINE__Var@?1??closePageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@3@_J@Z@4JA ; `DRAMsimII::Bank::closePageAggressiveInsertCheck'::`2'::__LINE__Var
PUBLIC	?closePageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@2@_J@Z ; DRAMsimII::Bank::closePageAggressiveInsertCheck
;	COMDAT ??_C@_1FM@DKHGLPDB@?$AAp?$AAe?$AAr?$AAB?$AAa?$AAn?$AAk?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$FL?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?$FN?$AA?9?$AA?$DO@
CONST	SEGMENT
??_C@_1FM@DKHGLPDB@?$AAp?$AAe?$AAr?$AAB?$AAa?$AAn?$AAk?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$FL?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?$FN?$AA?9?$AA?$DO@ DB 'p'
	DB	00H, 'e', 00H, 'r', 00H, 'B', 00H, 'a', 00H, 'n', 00H, 'k', 00H
	DB	'Q', 00H, 'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, '[', 00H, 'c'
	DB	00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '+'
	DB	00H, ' ', 00H, '1', 00H, ']', 00H, '-', 00H, '>', 00H, 'i', 00H
	DB	's', 00H, 'P', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 'h', 00H, 'a'
	DB	00H, 'r', 00H, 'g', 00H, 'e', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??closePageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@3@_J@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??closePageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@3@_J@Z@4JA DD 01d3H ; `DRAMsimII::Bank::closePageAggressiveInsertCheck'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCcsu /ZI
_DATA	ENDS
;	COMDAT ?closePageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@2@_J@Z
_TEXT	SEGMENT
tv336 = -256						; size = 8
tv333 = -248						; size = 8
_currentCommand$136446 = -44				; size = 4
_currentIndex$136442 = -32				; size = 4
_currentRow$136441 = -20				; size = 4
_this$ = -8						; size = 4
_incomingTransaction$ = 8				; size = 4
_time$ = 12						; size = 8
?closePageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@2@_J@Z PROC ; DRAMsimII::Bank::closePageAggressiveInsertCheck, COMDAT
; _this$ = ecx

; 467  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 468  : 	if (!perBankQueue.isFull())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?isFull@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBE_NXZ ; DRAMsimII::Queue<DRAMsimII::Command>::isFull
	movzx	eax, al
	test	eax, eax
	jne	$LN11@closePageA

; 469  : 	{
; 470  : 		const unsigned currentRow = incomingTransaction->getAddress().getRow();

	mov	ecx, DWORD PTR _incomingTransaction$[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getRow@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getRow
	mov	DWORD PTR _currentRow$136441[ebp], eax

; 471  : 		// go from the end to the beginning to ensure no starvation or RAW/WAR errors
; 472  : 		for (int currentIndex = perBankQueue.size() - 1; currentIndex >= 0; --currentIndex)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?size@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEIXZ ; DRAMsimII::Queue<DRAMsimII::Command>::size
	sub	eax, 1
	mov	DWORD PTR _currentIndex$136442[ebp], eax
	jmp	SHORT $LN10@closePageA
$LN9@closePageA:
	mov	eax, DWORD PTR _currentIndex$136442[ebp]
	sub	eax, 1
	mov	DWORD PTR _currentIndex$136442[ebp], eax
$LN10@closePageA:
	cmp	DWORD PTR _currentIndex$136442[ebp], 0
	jl	$LN8@closePageA

; 473  : 		{	
; 474  : 			const Command *currentCommand = perBankQueue[currentIndex];

	mov	eax, DWORD PTR _currentIndex$136442[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@1@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator[]
	mov	DWORD PTR _currentCommand$136446[ebp], eax

; 475  : 			// see if there is an available command to piggyback on
; 476  : 			if (currentCommand->isReadOrWrite() && currentCommand->getAddress().getRow() == currentRow)

	mov	ecx, DWORD PTR _currentCommand$136446[ebp]
	call	?isReadOrWrite@Command@DRAMsimII@@QBE_NXZ ; DRAMsimII::Command::isReadOrWrite
	movzx	eax, al
	test	eax, eax
	je	$LN7@closePageA
	mov	ecx, DWORD PTR _currentCommand$136446[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getRow@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getRow
	cmp	eax, DWORD PTR _currentRow$136441[ebp]
	jne	$LN7@closePageA

; 477  : 			{
; 478  : 				assert(currentCommand->getAddress().getChannel() == incomingTransaction->getAddress().getChannel());

	mov	ecx, DWORD PTR _currentCommand$136446[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getChannel@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getChannel
	mov	esi, eax
	mov	ecx, DWORD PTR _incomingTransaction$[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getChannel@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getChannel
	cmp	esi, eax
	je	SHORT $LN14@closePageA
	mov	eax, DWORD PTR ?__LINE__Var@?1??closePageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@3@_J@Z@4JA
	add	eax, 11					; 0000000bH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1LI@GHPONGPE@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@closePageA:

; 479  : 				assert(currentCommand->getAddress().getRank() == incomingTransaction->getAddress().getRank());

	mov	ecx, DWORD PTR _currentCommand$136446[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getRank@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getRank
	mov	esi, eax
	mov	ecx, DWORD PTR _incomingTransaction$[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getRank@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getRank
	cmp	esi, eax
	je	SHORT $LN15@closePageA
	mov	eax, DWORD PTR ?__LINE__Var@?1??closePageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@3@_J@Z@4JA
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1KM@NPMPHOJP@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@closePageA:

; 480  : 				assert(currentCommand->getAddress().getBank() == incomingTransaction->getAddress().getBank());

	mov	ecx, DWORD PTR _currentCommand$136446[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getBank@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getBank
	mov	esi, eax
	mov	ecx, DWORD PTR _incomingTransaction$[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getBank@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getBank
	cmp	esi, eax
	je	SHORT $LN16@closePageA
	mov	eax, DWORD PTR ?__LINE__Var@?1??closePageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@3@_J@Z@4JA
	add	eax, 13					; 0000000dH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1KM@GLMKHBLI@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@closePageA:

; 481  : 				assert(currentCommand->getAddress().getRow() == incomingTransaction->getAddress().getRow());

	mov	ecx, DWORD PTR _currentCommand$136446[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getRow@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getRow
	mov	esi, eax
	mov	ecx, DWORD PTR _incomingTransaction$[ebp]
	call	?getAddress@Event@DRAMsimII@@QBEABVAddress@2@XZ ; DRAMsimII::Event::getAddress
	mov	ecx, eax
	call	?getRow@Address@DRAMsimII@@QBEIXZ	; DRAMsimII::Address::getRow
	cmp	esi, eax
	je	SHORT $LN17@closePageA
	mov	eax, DWORD PTR ?__LINE__Var@?1??closePageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@3@_J@Z@4JA
	add	eax, 14					; 0000000eH
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1KI@HDCFBBCA@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?9?$AA?$DO?$AAg?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?4?$AAg?$AAe?$AAt@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@closePageA:

; 482  : 
; 483  : 				if (!systemConfig.isAutoPrecharge())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?isAutoPrecharge@SystemConfiguration@DRAMsimII@@QBE_NXZ ; DRAMsimII::SystemConfiguration::isAutoPrecharge
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN6@closePageA

; 484  : 				{
; 485  : 					// check that things are in order
; 486  : 					assert(perBankQueue[currentIndex + 1]->isPrecharge());

	mov	eax, DWORD PTR _currentIndex$136442[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@1@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator[]
	mov	ecx, eax
	call	?isPrecharge@Command@DRAMsimII@@QBE_NXZ	; DRAMsimII::Command::isPrecharge
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN6@closePageA
	mov	edx, DWORD PTR ?__LINE__Var@?1??closePageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@3@_J@Z@4JA
	add	edx, 19					; 00000013H
	mov	esi, esp
	push	edx
	push	OFFSET ??_C@_1JM@ODNEBCJL@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1FM@DKHGLPDB@?$AAp?$AAe?$AAr?$AAB?$AAa?$AAn?$AAk?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$FL?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?$FN?$AA?9?$AA?$DO@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@closePageA:

; 487  : 				}
; 488  : 				return true;

	mov	al, 1
	jmp	$LN12@closePageA
	jmp	SHORT $LN5@closePageA
$LN7@closePageA:

; 489  : 			}
; 490  : 			else if (systemConfig.getCommandOrderingAlgorithm() == STRICT_ORDER)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?getCommandOrderingAlgorithm@SystemConfiguration@DRAMsimII@@QBE?AW4CommandOrderingAlgorithm@2@XZ ; DRAMsimII::SystemConfiguration::getCommandOrderingAlgorithm
	test	eax, eax
	jne	SHORT $LN4@closePageA

; 491  : 			{
; 492  : 				return false;

	xor	al, al
	jmp	SHORT $LN12@closePageA
	jmp	SHORT $LN5@closePageA
$LN4@closePageA:

; 493  : 			}
; 494  : 			// don't starve commands
; 495  : 			else if (time - currentCommand->getEnqueueTime() > systemConfig.getSeniorityAgeLimit())

	mov	ecx, DWORD PTR _currentCommand$136446[ebp]
	call	?getEnqueueTime@Event@DRAMsimII@@QBE_JXZ ; DRAMsimII::Event::getEnqueueTime
	mov	esi, DWORD PTR _time$[ebp]
	sub	esi, eax
	mov	edi, DWORD PTR _time$[ebp+4]
	sbb	edi, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?getSeniorityAgeLimit@SystemConfiguration@DRAMsimII@@QBEIXZ ; DRAMsimII::SystemConfiguration::getSeniorityAgeLimit
	xor	ecx, ecx
	mov	DWORD PTR tv333[ebp], esi
	mov	DWORD PTR tv333[ebp+4], edi
	mov	DWORD PTR tv336[ebp], eax
	mov	DWORD PTR tv336[ebp+4], ecx
	mov	edx, DWORD PTR tv333[ebp+4]
	cmp	edx, DWORD PTR tv336[ebp+4]
	jl	SHORT $LN5@closePageA
	jg	SHORT $LN19@closePageA
	mov	eax, DWORD PTR tv333[ebp]
	cmp	eax, DWORD PTR tv336[ebp]
	jbe	SHORT $LN5@closePageA
$LN19@closePageA:

; 496  : 			{
; 497  : 				return false;

	xor	al, al
	jmp	SHORT $LN12@closePageA
$LN5@closePageA:

; 498  : 			}
; 499  : 		}

	jmp	$LN9@closePageA
$LN8@closePageA:

; 500  : 		if (activated && openRowID == currentRow)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+124]
	test	ecx, ecx
	je	SHORT $LN11@closePageA
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	cmp	ecx, DWORD PTR _currentRow$136441[ebp]
	jne	SHORT $LN11@closePageA

; 501  : 		{
; 502  : 			return true;

	mov	al, 1
	jmp	SHORT $LN12@closePageA
$LN11@closePageA:

; 503  : 		}
; 504  : 	}
; 505  : 	return false;

	xor	al, al
$LN12@closePageA:

; 506  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?closePageAggressiveInsertCheck@Bank@DRAMsimII@@QBE_NPBVTransaction@2@_J@Z ENDP ; DRAMsimII::Bank::closePageAggressiveInsertCheck
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\systemconfiguration.h
_TEXT	ENDS
;	COMDAT ?isAutoPrecharge@SystemConfiguration@DRAMsimII@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isAutoPrecharge@SystemConfiguration@DRAMsimII@@QBE_NXZ PROC ; DRAMsimII::SystemConfiguration::isAutoPrecharge, COMDAT
; _this$ = ecx

; 106  : 		bool isAutoPrecharge() const { return autoPrecharge; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+346]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isAutoPrecharge@SystemConfiguration@DRAMsimII@@QBE_NXZ ENDP ; DRAMsimII::SystemConfiguration::isAutoPrecharge
_TEXT	ENDS
PUBLIC	?isEmpty@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBE_NXZ ; DRAMsimII::Queue<DRAMsimII::Command>::isEmpty
PUBLIC	?isEmpty@Bank@DRAMsimII@@QBE_NXZ		; DRAMsimII::Bank::isEmpty
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\bank.cpp
;	COMDAT ?isEmpty@Bank@DRAMsimII@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isEmpty@Bank@DRAMsimII@@QBE_NXZ PROC			; DRAMsimII::Bank::isEmpty, COMDAT
; _this$ = ecx

; 509  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 510  : 	return perBankQueue.isEmpty();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?isEmpty@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBE_NXZ ; DRAMsimII::Queue<DRAMsimII::Command>::isEmpty

; 511  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isEmpty@Bank@DRAMsimII@@QBE_NXZ ENDP			; DRAMsimII::Bank::isEmpty
_TEXT	ENDS
PUBLIC	?isRefresh@Command@DRAMsimII@@QBE_NXZ		; DRAMsimII::Command::isRefresh
PUBLIC	?hasNoReadWrite@Bank@DRAMsimII@@QBE_NXZ		; DRAMsimII::Bank::hasNoReadWrite
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?hasNoReadWrite@Bank@DRAMsimII@@QBE_NXZ
_TEXT	SEGMENT
_i$136467 = -20						; size = 4
_this$ = -8						; size = 4
?hasNoReadWrite@Bank@DRAMsimII@@QBE_NXZ PROC		; DRAMsimII::Bank::hasNoReadWrite, COMDAT
; _this$ = ecx

; 514  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 	for (unsigned i = 0; i < perBankQueue.size(); i++)

	mov	DWORD PTR _i$136467[ebp], 0
	jmp	SHORT $LN4@hasNoReadW
$LN3@hasNoReadW:
	mov	eax, DWORD PTR _i$136467[ebp]
	add	eax, 1
	mov	DWORD PTR _i$136467[ebp], eax
$LN4@hasNoReadW:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?size@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEIXZ ; DRAMsimII::Queue<DRAMsimII::Command>::size
	cmp	DWORD PTR _i$136467[ebp], eax
	jae	SHORT $LN2@hasNoReadW

; 516  : 	{
; 517  : 		if (!perBankQueue[i]->isRefresh())

	mov	eax, DWORD PTR _i$136467[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@1@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator[]
	mov	ecx, eax
	call	?isRefresh@Command@DRAMsimII@@QBE_NXZ	; DRAMsimII::Command::isRefresh
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@hasNoReadW

; 518  : 			return false;

	xor	al, al
	jmp	SHORT $LN5@hasNoReadW
$LN1@hasNoReadW:

; 519  : 	}

	jmp	SHORT $LN3@hasNoReadW
$LN2@hasNoReadW:

; 520  : 	return true;

	mov	al, 1
$LN5@hasNoReadW:

; 521  : 
; 522  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?hasNoReadWrite@Bank@DRAMsimII@@QBE_NXZ ENDP		; DRAMsimII::Bank::hasNoReadWrite
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\command.h
_TEXT	ENDS
;	COMDAT ?isRefresh@Command@DRAMsimII@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isRefresh@Command@DRAMsimII@@QBE_NXZ PROC		; DRAMsimII::Command::isRefresh, COMDAT
; _this$ = ecx

; 87   : 		bool isRefresh() const { return (commandType == REFRESH_ALL); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+80], 12			; 0000000cH
	sete	cl
	call	@_RTC_Check_4_to_1@4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isRefresh@Command@DRAMsimII@@QBE_NXZ ENDP		; DRAMsimII::Command::isRefresh
_TEXT	ENDS
PUBLIC	??4?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAEAAV01@ABV01@@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator=
PUBLIC	??4Bank@DRAMsimII@@QAEAAV01@ABV01@@Z		; DRAMsimII::Bank::operator=
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\bank.cpp
;	COMDAT ??4Bank@DRAMsimII@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_rhs$ = 8						; size = 4
??4Bank@DRAMsimII@@QAEAAV01@ABV01@@Z PROC		; DRAMsimII::Bank::operator=, COMDAT
; _this$ = ecx

; 529  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 530  : 	perBankQueue = rhs.perBankQueue;

	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAEAAV01@ABV01@@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator=

; 531  : 	lastRASTime = rhs.lastRASTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	ecx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+52], ecx

; 532  : 	lastCASTime = rhs.lastCASTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+56], edx
	mov	ecx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+60], ecx

; 533  : 	lastCASWTime = rhs.lastCASWTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+64], edx
	mov	ecx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+68], ecx

; 534  : 	lastPrechargeTime = rhs.lastPrechargeTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+72], edx
	mov	ecx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+76], ecx

; 535  : 	lastCASLength = rhs.lastCASLength;		

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx

; 536  : 	lastCASWLength = rhs.lastCASWLength;		

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], edx

; 537  : 	openRowID = rhs.openRowID;			

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [eax+120], edx

; 538  : 	activated = rhs.activated;			

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	dl, BYTE PTR [ecx+124]
	mov	BYTE PTR [eax+124], dl

; 539  : 	RASCount = rhs.RASCount;			

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	DWORD PTR [eax+128], edx

; 540  : 	totalRASCount = rhs.totalRASCount;		

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR [eax+132], edx

; 541  : 	CASCount = rhs.CASCount;			

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR [eax+136], edx

; 542  : 	totalCASCount = rhs.totalCASCount;		

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR [eax+140], edx

; 543  : 	CASWCount = rhs.CASWCount;			

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	mov	DWORD PTR [eax+144], edx

; 544  : 	totalCASWCount = rhs.totalCASWCount;	

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR [eax+148], edx

; 545  : 
; 546  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 547  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4Bank@DRAMsimII@@QAEAAV01@ABV01@@Z ENDP		; DRAMsimII::Bank::operator=
_TEXT	ENDS
PUBLIC	??8?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBE_NABV01@@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator==
PUBLIC	??8Bank@DRAMsimII@@QBE_NABV01@@Z		; DRAMsimII::Bank::operator==
EXTRN	??8SystemConfiguration@DRAMsimII@@QBE_NABV01@@Z:PROC ; DRAMsimII::SystemConfiguration::operator==
EXTRN	??8TimingSpecification@DRAMsimII@@QBE_NABV01@@Z:PROC ; DRAMsimII::TimingSpecification::operator==
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??8Bank@DRAMsimII@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv159 = -240						; size = 4
tv208 = -236						; size = 4
tv207 = -232						; size = 4
tv197 = -228						; size = 4
tv196 = -224						; size = 4
tv186 = -220						; size = 4
tv185 = -216						; size = 4
tv175 = -212						; size = 4
tv174 = -208						; size = 4
_this$ = -8						; size = 4
_rhs$ = 8						; size = 4
??8Bank@DRAMsimII@@QBE_NABV01@@Z PROC			; DRAMsimII::Bank::operator==, COMDAT
; _this$ = ecx

; 554  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 555  : 	return (timing == rhs.timing && systemConfig == rhs.systemConfig && perBankQueue == rhs.perBankQueue && lastRASTime == rhs.lastRASTime &&
; 556  : 		lastCASTime == rhs.lastCASTime && lastCASWTime == rhs.lastCASWTime && lastPrechargeTime == rhs.lastPrechargeTime &&
; 557  : 		lastCASLength == rhs.lastCASLength && lastCASWLength == rhs.lastCASWLength &&
; 558  : 		openRowID == rhs.openRowID && activated == rhs.activated && RASCount == rhs.RASCount && totalRASCount == rhs.totalRASCount &&
; 559  : 		CASCount == rhs.CASCount && totalCASCount == rhs.totalCASCount && CASWCount == rhs.CASWCount && totalCASWCount == rhs.totalCASWCount);

	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	??8TimingSpecification@DRAMsimII@@QBE_NABV01@@Z ; DRAMsimII::TimingSpecification::operator==
	movzx	eax, al
	test	eax, eax
	je	$LN3@operator
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	??8SystemConfiguration@DRAMsimII@@QBE_NABV01@@Z ; DRAMsimII::SystemConfiguration::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@operator
	mov	edx, DWORD PTR _rhs$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??8?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBE_NABV01@@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator==
	movzx	eax, al
	test	eax, eax
	je	$LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	mov	DWORD PTR tv174[ebp], ecx
	mov	DWORD PTR tv175[ebp], edx
	mov	eax, DWORD PTR tv174[ebp]
	mov	ecx, DWORD PTR tv175[ebp]
	mov	edx, DWORD PTR [eax+48]
	cmp	edx, DWORD PTR [ecx+48]
	jne	$LN3@operator
	mov	eax, DWORD PTR tv174[ebp]
	mov	ecx, DWORD PTR tv175[ebp]
	mov	edx, DWORD PTR [eax+52]
	cmp	edx, DWORD PTR [ecx+52]
	jne	$LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	DWORD PTR tv185[ebp], eax
	mov	DWORD PTR tv186[ebp], ecx
	mov	edx, DWORD PTR tv185[ebp]
	mov	eax, DWORD PTR tv186[ebp]
	mov	ecx, DWORD PTR [edx+56]
	cmp	ecx, DWORD PTR [eax+56]
	jne	$LN3@operator
	mov	edx, DWORD PTR tv185[ebp]
	mov	eax, DWORD PTR tv186[ebp]
	mov	ecx, DWORD PTR [edx+60]
	cmp	ecx, DWORD PTR [eax+60]
	jne	$LN3@operator
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	DWORD PTR tv196[ebp], edx
	mov	DWORD PTR tv197[ebp], eax
	mov	ecx, DWORD PTR tv196[ebp]
	mov	edx, DWORD PTR tv197[ebp]
	mov	eax, DWORD PTR [ecx+64]
	cmp	eax, DWORD PTR [edx+64]
	jne	$LN3@operator
	mov	ecx, DWORD PTR tv196[ebp]
	mov	edx, DWORD PTR tv197[ebp]
	mov	eax, DWORD PTR [ecx+68]
	cmp	eax, DWORD PTR [edx+68]
	jne	$LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	mov	DWORD PTR tv207[ebp], ecx
	mov	DWORD PTR tv208[ebp], edx
	mov	eax, DWORD PTR tv207[ebp]
	mov	ecx, DWORD PTR tv208[ebp]
	mov	edx, DWORD PTR [eax+72]
	cmp	edx, DWORD PTR [ecx+72]
	jne	$LN3@operator
	mov	eax, DWORD PTR tv207[ebp]
	mov	ecx, DWORD PTR tv208[ebp]
	mov	edx, DWORD PTR [eax+76]
	cmp	edx, DWORD PTR [ecx+76]
	jne	$LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+80]
	cmp	edx, DWORD PTR [ecx+80]
	jne	$LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+84]
	cmp	edx, DWORD PTR [ecx+84]
	jne	$LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+120]
	cmp	edx, DWORD PTR [ecx+120]
	jne	$LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+124]
	mov	edx, DWORD PTR _rhs$[ebp]
	movzx	eax, BYTE PTR [edx+124]
	cmp	ecx, eax
	jne	$LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	mov	eax, DWORD PTR [ecx+128]
	cmp	eax, DWORD PTR [edx+128]
	jne	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	mov	eax, DWORD PTR [ecx+132]
	cmp	eax, DWORD PTR [edx+132]
	jne	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	mov	eax, DWORD PTR [ecx+136]
	cmp	eax, DWORD PTR [edx+136]
	jne	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	mov	eax, DWORD PTR [ecx+140]
	cmp	eax, DWORD PTR [edx+140]
	jne	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	mov	eax, DWORD PTR [ecx+144]
	cmp	eax, DWORD PTR [edx+144]
	jne	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	mov	eax, DWORD PTR [ecx+148]
	cmp	eax, DWORD PTR [edx+148]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv159[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv159[ebp], 0
$LN4@operator:
	mov	ecx, DWORD PTR tv159[ebp]
	call	@_RTC_Check_4_to_1@4

; 560  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8Bank@DRAMsimII@@QBE_NABV01@@Z ENDP			; DRAMsimII::Bank::operator==
_TEXT	ENDS
PUBLIC	??$?6VCommand@DRAMsimII@@@DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABV?$Queue@VCommand@DRAMsimII@@@0@@Z ; DRAMsimII::operator<<<DRAMsimII::Command>
PUBLIC	??_C@_03MFAIBKPK@PBQ?$AA@			; `string'
PUBLIC	??_C@_0L@ECHFMGHC@last?5RAS?5?$FL?$AA@		; `string'
PUBLIC	??_C@_06KAELOPMD@?$FN?5act?$FL?$AA@		; `string'
PUBLIC	??_C@_0M@NMKFEDGM@?$FN?5open?5row?$FL?$AA@	; `string'
PUBLIC	??_C@_01LBDDMOBJ@?$FN?$AA@			; `string'
PUBLIC	??6DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVBank@0@@Z ; DRAMsimII::operator<<
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z:PROC
;	COMDAT ??_C@_03MFAIBKPK@PBQ?$AA@
CONST	SEGMENT
??_C@_03MFAIBKPK@PBQ?$AA@ DB 'PBQ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ECHFMGHC@last?5RAS?5?$FL?$AA@
CONST	SEGMENT
??_C@_0L@ECHFMGHC@last?5RAS?5?$FL?$AA@ DB 'last RAS [', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KAELOPMD@?$FN?5act?$FL?$AA@
CONST	SEGMENT
??_C@_06KAELOPMD@?$FN?5act?$FL?$AA@ DB '] act[', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NMKFEDGM@?$FN?5open?5row?$FL?$AA@
CONST	SEGMENT
??_C@_0M@NMKFEDGM@?$FN?5open?5row?$FL?$AA@ DB '] open row[', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01LBDDMOBJ@?$FN?$AA@
CONST	SEGMENT
??_C@_01LBDDMOBJ@?$FN?$AA@ DB ']', 00H			; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??6DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVBank@0@@Z
_TEXT	SEGMENT
tv172 = -200						; size = 4
tv170 = -196						; size = 4
_in$ = 8						; size = 4
_pc$ = 12						; size = 4
??6DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVBank@0@@Z PROC ; DRAMsimII::operator<<, COMDAT

; 566  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 567  : 	return in << "PBQ" << endl << pc.perBankQueue << "last RAS [" << pc.lastRASTime << "] act[" <<
; 568  : 		pc.activated << "] open row[" << pc.openRowID << "]" << endl;	

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	push	OFFSET ??_C@_01LBDDMOBJ@?$FN?$AA@
	mov	edi, esp
	mov	ecx, DWORD PTR _pc$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	push	edx
	push	OFFSET ??_C@_0M@NMKFEDGM@?$FN?5open?5row?$FL?$AA@
	mov	ebx, esp
	mov	eax, DWORD PTR _pc$[ebp]
	movzx	ecx, BYTE PTR [eax+124]
	push	ecx
	push	OFFSET ??_C@_06KAELOPMD@?$FN?5act?$FL?$AA@
	mov	eax, esp
	mov	edx, DWORD PTR _pc$[ebp]
	mov	ecx, DWORD PTR [edx+52]
	push	ecx
	mov	edx, DWORD PTR [edx+48]
	push	edx
	push	OFFSET ??_C@_0L@ECHFMGHC@last?5RAS?5?$FL?$AA@
	mov	ecx, DWORD PTR _pc$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, esp
	mov	edx, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	edx
	push	OFFSET ??_C@_03MFAIBKPK@PBQ?$AA@
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	mov	DWORD PTR tv170[ebp], eax
	mov	DWORD PTR tv172[ebp], ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	mov	ecx, DWORD PTR tv172[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6VCommand@DRAMsimII@@@DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABV?$Queue@VCommand@DRAMsimII@@@0@@Z ; DRAMsimII::operator<<<DRAMsimII::Command>
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_J@Z
	mov	ecx, DWORD PTR tv170[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z
	cmp	ebx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 569  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??6DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABVBank@0@@Z ENDP ; DRAMsimII::operator<<
_TEXT	ENDS
PUBLIC	??1?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::~vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
PUBLIC	??_C@_1CG@MPBPPOOC@?$AAa?$AAt?$AA?$CI?$AAi?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAh?$AAs?$AA?4?$AAa?$AAt?$AA?$CI?$AAi?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAPAVCommand@DRAMsimII@@I@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator[]
PUBLIC	??_C@_1CE@CBFKOEOG@?$AAr?$AAh?$AAs?$AA?4?$AAa?$AAt?$AA?$CI?$AAi?$AA?$CJ?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1JK@CBHCFOLP@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@ ; `string'
PUBLIC	?at@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::at
PUBLIC	?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::reserve
PUBLIC	??0?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@I@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
PUBLIC	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
EXTRN	??0Command@DRAMsimII@@QAE@ABV01@@Z:PROC		; DRAMsimII::Command::Command
;	COMDAT ??_C@_1CG@MPBPPOOC@?$AAa?$AAt?$AA?$CI?$AAi?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAh?$AAs?$AA?4?$AAa?$AAt?$AA?$CI?$AAi?$AA?$CJ?$AA?$AA@
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\queue.h
CONST	SEGMENT
??_C@_1CG@MPBPPOOC@?$AAa?$AAt?$AA?$CI?$AAi?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAh?$AAs?$AA?4?$AAa?$AAt?$AA?$CI?$AAi?$AA?$CJ?$AA?$AA@ DB 'a'
	DB	00H, 't', 00H, '(', 00H, 'i', 00H, ')', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 'r', 00H, 'h', 00H, 's', 00H, '.', 00H, 'a'
	DB	00H, 't', 00H, '(', 00H, 'i', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@CBFKOEOG@?$AAr?$AAh?$AAs?$AA?4?$AAa?$AAt?$AA?$CI?$AAi?$AA?$CJ?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@CBFKOEOG@?$AAr?$AAh?$AAs?$AA?4?$AAa?$AAt?$AA?$CI?$AAi?$AA?$CJ?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'r'
	DB	00H, 'h', 00H, 's', 00H, '.', 00H, 'a', 00H, 't', 00H, '(', 00H
	DB	'i', 00H, ')', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1JK@CBHCFOLP@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
CONST	SEGMENT
??_C@_1JK@CBHCFOLP@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'u', 00H, 's'
	DB	00H, '\', 00H, 'd', 00H, 'o', 00H, 'c', 00H, 'u', 00H, 'm', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, 's', 00H, '\', 00H, 'v', 00H, 'i'
	DB	00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, '2'
	DB	00H, '0', 00H, '0', 00H, '8', 00H, '\', 00H, 'p', 00H, 'r', 00H
	DB	'o', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, 's', 00H, '\'
	DB	00H, 'd', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 's', 00H, 'i', 00H
	DB	'm', 00H, 'i', 00H, 'i', 00H, 'h', 00H, 'g', 00H, '\', 00H, 's'
	DB	00H, 'r', 00H, 'c', 00H, '\', 00H, 'q', 00H, 'u', 00H, 'e', 00H
	DB	'u', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@ABV01@@Z$1
__ehfuncinfo$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv148 = -268						; size = 4
$T160429 = -260						; size = 4
$T160430 = -248						; size = 4
_i$138955 = -44						; size = 4
_i$138944 = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@ABV01@@Z PROC ; DRAMsimII::Queue<DRAMsimII::Command>::Queue<DRAMsimII::Command>, COMDAT
; _this$ = ecx

; 64   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@I@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	dl, BYTE PTR [ecx+32]
	mov	BYTE PTR [eax+32], dl

; 65   : 			entry.reserve(rhs.entry.size());

	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::reserve

; 66   : 
; 67   : 			for (unsigned i = 0; i < rhs.count; i++)

	mov	DWORD PTR _i$138944[ebp], 0
	jmp	SHORT $LN6@Queue
$LN5@Queue:
	mov	eax, DWORD PTR _i$138944[ebp]
	add	eax, 1
	mov	DWORD PTR _i$138944[ebp], eax
$LN6@Queue:
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR _i$138944[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	$LN4@Queue

; 68   : 			{
; 69   : 				assert(rhs.at(i) != NULL);

	mov	eax, DWORD PTR _i$138944[ebp]
	push	eax
	mov	ecx, DWORD PTR _rhs$[ebp]
	call	?at@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::at
	test	eax, eax
	jne	SHORT $LN9@Queue
	mov	esi, esp
	push	69					; 00000045H
	push	OFFSET ??_C@_1JK@CBHCFOLP@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1CE@CBFKOEOG@?$AAr?$AAh?$AAs?$AA?4?$AAa?$AAt?$AA?$CI?$AAi?$AA?$CJ?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@Queue:

; 70   : 				// attempt to copy the contents of this queue
; 71   : 				entry[(head + i) % entry.size()] = new T(*rhs.at(i));

	push	96					; 00000060H
	call	??2Command@DRAMsimII@@SAPAXI@Z		; DRAMsimII::Command::operator new
	add	esp, 4
	mov	DWORD PTR $T160430[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T160430[ebp], 0
	je	SHORT $LN10@Queue
	mov	eax, DWORD PTR _i$138944[ebp]
	push	eax
	mov	ecx, DWORD PTR _rhs$[ebp]
	call	?at@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::at
	push	eax
	mov	ecx, DWORD PTR $T160430[ebp]
	call	??0Command@DRAMsimII@@QAE@ABV01@@Z	; DRAMsimII::Command::Command
	mov	DWORD PTR tv148[ebp], eax
	jmp	SHORT $LN11@Queue
$LN10@Queue:
	mov	DWORD PTR tv148[ebp], 0
$LN11@Queue:
	mov	ecx, DWORD PTR tv148[ebp]
	mov	DWORD PTR $T160429[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+4]
	add	esi, DWORD PTR _i$138944[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, eax
	mov	eax, esi
	xor	edx, edx
	div	ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAPAVCommand@DRAMsimII@@I@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator[]
	mov	edx, DWORD PTR $T160429[ebp]
	mov	DWORD PTR [eax], edx

; 72   : 			}

	jmp	$LN5@Queue
$LN4@Queue:

; 73   : 
; 74   : 			for (unsigned i = 0; i < count; i++)

	mov	DWORD PTR _i$138955[ebp], 0
	jmp	SHORT $LN3@Queue
$LN2@Queue:
	mov	eax, DWORD PTR _i$138955[ebp]
	add	eax, 1
	mov	DWORD PTR _i$138955[ebp], eax
$LN3@Queue:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$138955[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN7@Queue

; 75   : 				assert(at(i) && rhs.at(i));

	mov	eax, DWORD PTR _i$138955[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?at@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::at
	test	eax, eax
	je	SHORT $LN12@Queue
	mov	ecx, DWORD PTR _i$138955[ebp]
	push	ecx
	mov	ecx, DWORD PTR _rhs$[ebp]
	call	?at@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::at
	test	eax, eax
	jne	SHORT $LN13@Queue
$LN12@Queue:
	mov	esi, esp
	push	75					; 0000004bH
	push	OFFSET ??_C@_1JK@CBHCFOLP@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1CG@MPBPPOOC@?$AAa?$AAt?$AA?$CI?$AAi?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAh?$AAs?$AA?4?$AAa?$AAt?$AA?$CI?$AAi?$AA?$CJ?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@Queue:
	jmp	SHORT $LN2@Queue
$LN7@Queue:

; 76   : 		}	

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::~vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
__unwindfunclet$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@ABV01@@Z$1:
	mov	eax, DWORD PTR $T160430[ebp]
	push	eax
	call	??3Command@DRAMsimII@@SAXPAX@Z		; DRAMsimII::Command::operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@ABV01@@Z ENDP ; DRAMsimII::Queue<DRAMsimII::Command>::Queue<DRAMsimII::Command>
PUBLIC	?push@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE_NPAVCommand@2@@Z ; DRAMsimII::Queue<DRAMsimII::Command>::push
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??0Command@DRAMsimII@@QAE@XZ:PROC		; DRAMsimII::Command::Command
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@I_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@I_N@Z$1
__ehfuncinfo$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@I_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@I_N@Z
_TEXT	SEGMENT
tv91 = -244						; size = 4
$T160445 = -236						; size = 4
$T160446 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_size$ = 8						; size = 4
_preallocate$ = 12					; size = 1
??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@I_N@Z PROC ; DRAMsimII::Queue<DRAMsimII::Command>::Queue<DRAMsimII::Command>, COMDAT
; _this$ = ecx

; 88   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@I_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@I@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _preallocate$[ebp]
	mov	BYTE PTR [eax+32], cl

; 89   : 			entry.reserve(size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::reserve

; 90   : 
; 91   : 			if (preallocate)

	movzx	eax, BYTE PTR _preallocate$[ebp]
	test	eax, eax
	je	SHORT $LN4@Queue@2
$LN2@Queue@2:

; 92   : 			{
; 93   : 				while (!isFull())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isFull@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBE_NXZ ; DRAMsimII::Queue<DRAMsimII::Command>::isFull
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@Queue@2

; 94   : 				{
; 95   : 					push(::new T());

	push	96					; 00000060H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T160446[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T160446[ebp], 0
	je	SHORT $LN6@Queue@2
	mov	ecx, DWORD PTR $T160446[ebp]
	call	??0Command@DRAMsimII@@QAE@XZ		; DRAMsimII::Command::Command
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN7@Queue@2
$LN6@Queue@2:
	mov	DWORD PTR tv91[ebp], 0
$LN7@Queue@2:
	mov	eax, DWORD PTR tv91[ebp]
	mov	DWORD PTR $T160445[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T160445[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE_NPAVCommand@2@@Z ; DRAMsimII::Queue<DRAMsimII::Command>::push

; 96   : 				}

	jmp	SHORT $LN2@Queue@2
$LN4@Queue@2:

; 97   : 			}
; 98   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@I_N@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::~vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
__unwindfunclet$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@I_N@Z$1:
	mov	eax, DWORD PTR $T160446[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@I_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@I_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE@I_N@Z ENDP ; DRAMsimII::Queue<DRAMsimII::Command>::Queue<DRAMsimII::Command>
PUBLIC	??_C@_0BG@KEOIJAJD@Input?5pointer?5is?5NULL?$AA@ ; `string'
PUBLIC	??_C@_1BK@CDKDBCEF@?$AAi?$AAt?$AAe?$AAm?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
;	COMDAT ??_C@_0BG@KEOIJAJD@Input?5pointer?5is?5NULL?$AA@
CONST	SEGMENT
??_C@_0BG@KEOIJAJD@Input?5pointer?5is?5NULL?$AA@ DB 'Input pointer is NUL'
	DB	'L', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@CDKDBCEF@?$AAi?$AAt?$AAe?$AAm?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@CDKDBCEF@?$AAi?$AAt?$AAe?$AAm?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'i'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?push@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE_NPAVCommand@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_item$ = 8						; size = 4
?push@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE_NPAVCommand@2@@Z PROC ; DRAMsimII::Queue<DRAMsimII::Command>::push, COMDAT
; _this$ = ecx

; 147  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 			assert(item != NULL);

	cmp	DWORD PTR _item$[ebp], 0
	jne	SHORT $LN7@push
	mov	esi, esp
	push	148					; 00000094H
	push	OFFSET ??_C@_1JK@CBHCFOLP@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1BK@CDKDBCEF@?$AAi?$AAt?$AAe?$AAm?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@push:

; 149  : 			if (count == entry.size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], eax
	jne	SHORT $LN4@push

; 150  : 				return false;

	xor	al, al
	jmp	$LN5@push
	jmp	SHORT $LN5@push
$LN4@push:

; 151  : 			else if (item == NULL)

	cmp	DWORD PTR _item$[ebp], 0
	jne	SHORT $LN2@push

; 152  : 			{
; 153  : 				std::cerr << "Input pointer is NULL" << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	push	OFFSET ??_C@_0BG@KEOIJAJD@Input?5pointer?5is?5NULL?$AA@
	mov	ecx, DWORD PTR __imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 154  : 				return false;

	xor	al, al
	jmp	SHORT $LN5@push

; 155  : 			}
; 156  : 			else

	jmp	SHORT $LN5@push
$LN2@push:

; 157  : 			{
; 158  : 				count++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 159  : 				entry[tail] = item;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAPAVCommand@DRAMsimII@@I@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator[]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax], edx

; 160  : 				tail = (tail + 1) % entry.size(); 	//advance tail_ptr

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+8]
	add	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, eax
	mov	eax, esi
	xor	edx, edx
	div	ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 161  : 				return true;

	mov	al, 1
$LN5@push:

; 162  : 			}
; 163  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE_NPAVCommand@2@@Z ENDP ; DRAMsimII::Queue<DRAMsimII::Command>::push
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?push_front@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE_NPAVCommand@2@@Z
_TEXT	SEGMENT
tv89 = -208						; size = 4
_this$ = -8						; size = 4
_item$ = 8						; size = 4
?push_front@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE_NPAVCommand@2@@Z PROC ; DRAMsimII::Queue<DRAMsimII::Command>::push_front, COMDAT
; _this$ = ecx

; 167  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 			assert(item != NULL);

	cmp	DWORD PTR _item$[ebp], 0
	jne	SHORT $LN7@push_front
	mov	esi, esp
	push	168					; 000000a8H
	push	OFFSET ??_C@_1JK@CBHCFOLP@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1BK@CDKDBCEF@?$AAi?$AAt?$AAe?$AAm?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@push_front:

; 169  : 			if (count == entry.size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], eax
	jne	SHORT $LN4@push_front

; 170  : 				return false;

	xor	al, al
	jmp	$LN5@push_front
	jmp	$LN5@push_front
$LN4@push_front:

; 171  : 			else if (item == NULL)

	cmp	DWORD PTR _item$[ebp], 0
	jne	SHORT $LN2@push_front

; 172  : 			{
; 173  : 				std::cerr << "Input pointer is NULL" << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	push	OFFSET ??_C@_0BG@KEOIJAJD@Input?5pointer?5is?5NULL?$AA@
	mov	ecx, DWORD PTR __imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 174  : 				return false;

	xor	al, al
	jmp	SHORT $LN5@push_front

; 175  : 			}
; 176  : 			else

	jmp	SHORT $LN5@push_front
$LN2@push_front:

; 177  : 			{
; 178  : 				count++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 179  : 				head = ((int)head > 0) ? head - 1 : entry.size() - 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	SHORT $LN8@push_front
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	DWORD PTR tv89[ebp], edx
	jmp	SHORT $LN9@push_front
$LN8@push_front:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	sub	eax, 1
	mov	DWORD PTR tv89[ebp], eax
$LN9@push_front:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR [eax+4], ecx

; 180  : 				entry[head] = item;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAPAVCommand@DRAMsimII@@I@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator[]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax], edx

; 181  : 				return true;

	mov	al, 1
$LN5@push_front:

; 182  : 			}
; 183  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_front@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE_NPAVCommand@2@@Z ENDP ; DRAMsimII::Queue<DRAMsimII::Command>::push_front
_TEXT	ENDS
PUBLIC	??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEABQAVCommand@DRAMsimII@@I@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator[]
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?back@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@XZ
_TEXT	SEGMENT
tv76 = -208						; size = 4
_this$ = -8						; size = 4
?back@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@XZ PROC ; DRAMsimII::Queue<DRAMsimII::Command>::back, COMDAT
; _this$ = ecx

; 237  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 238  : 			return count ? entry[(head + count - 1) % entry.size()] : NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@back
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	esi, DWORD PTR [edx+ecx-1]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, eax
	mov	eax, esi
	xor	edx, edx
	div	ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEABQAVCommand@DRAMsimII@@I@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN4@back
$LN3@back:
	mov	DWORD PTR tv76[ebp], 0
$LN4@back:
	mov	eax, DWORD PTR tv76[ebp]

; 239  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?back@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@XZ ENDP ; DRAMsimII::Queue<DRAMsimII::Command>::back
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?size@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEIXZ PROC ; DRAMsimII::Queue<DRAMsimII::Command>::size, COMDAT
; _this$ = ecx

; 243  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 			return count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 245  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEIXZ ENDP ; DRAMsimII::Queue<DRAMsimII::Command>::size
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?read@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPAVCommand@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
?read@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPAVCommand@2@H@Z PROC ; DRAMsimII::Queue<DRAMsimII::Command>::read, COMDAT
; _this$ = ecx

; 255  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 256  : 			if ((offset >= (int)count) || (offset < 0))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN2@read
	cmp	DWORD PTR _offset$[ebp], 0
	jge	SHORT $LN3@read
$LN2@read:

; 257  : 				return NULL;

	xor	eax, eax
	jmp	SHORT $LN4@read

; 258  : 			else

	jmp	SHORT $LN4@read
$LN3@read:

; 259  : 				return entry[(head + offset) % entry.size()];

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	add	esi, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, eax
	mov	eax, esi
	xor	edx, edx
	div	ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEABQAVCommand@DRAMsimII@@I@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator[]
	mov	eax, DWORD PTR [eax]
$LN4@read:

; 260  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?read@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPAVCommand@2@H@Z ENDP ; DRAMsimII::Queue<DRAMsimII::Command>::read
_TEXT	ENDS
PUBLIC	??_C@_0CF@LLADOICC@Attempting?5to?5insert?5NULL?5into?5q@ ; `string'
PUBLIC	??_C@_1CK@GFDPHMFJ@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ ; `string'
;	COMDAT ??_C@_0CF@LLADOICC@Attempting?5to?5insert?5NULL?5into?5q@
CONST	SEGMENT
??_C@_0CF@LLADOICC@Attempting?5to?5insert?5NULL?5into?5q@ DB 'Attempting '
	DB	'to insert NULL into queue', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@GFDPHMFJ@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@GFDPHMFJ@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ DB 'o'
	DB	00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, '(', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, ')', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?insert@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE_NPAVCommand@2@H@Z
_TEXT	SEGMENT
_i$139225 = -20						; size = 4
_this$ = -8						; size = 4
_item$ = 8						; size = 4
_offset$ = 12						; size = 4
?insert@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE_NPAVCommand@2@H@Z PROC ; DRAMsimII::Queue<DRAMsimII::Command>::insert, COMDAT
; _this$ = ecx

; 310  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 311  : 			assert(offset <= (int)count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jle	SHORT $LN10@insert
	mov	esi, esp
	push	311					; 00000137H
	push	OFFSET ??_C@_1JK@CBHCFOLP@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1CK@GFDPHMFJ@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@insert:

; 312  : 
; 313  : 			if (count == entry.size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], eax
	jne	SHORT $LN7@insert

; 314  : 				return false;

	xor	al, al
	jmp	$LN8@insert
	jmp	$LN8@insert
$LN7@insert:

; 315  : 
; 316  : 			else if (item == NULL)

	cmp	DWORD PTR _item$[ebp], 0
	jne	SHORT $LN5@insert

; 317  : 			{
; 318  : 				std::cerr << "Attempting to insert NULL into queue" << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	push	OFFSET ??_C@_0CF@LLADOICC@Attempting?5to?5insert?5NULL?5into?5q@
	mov	ecx, DWORD PTR __imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 319  : 				return false;

	xor	al, al
	jmp	$LN8@insert

; 320  : 				//_exit(2);
; 321  : 			}
; 322  : 			else

	jmp	$LN8@insert
$LN5@insert:

; 323  : 			{
; 324  : 				// move everything back by one unit
; 325  : 				for (int i = count - 1 ; i >= offset ; --i)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	DWORD PTR _i$139225[ebp], ecx
	jmp	SHORT $LN3@insert
$LN2@insert:
	mov	eax, DWORD PTR _i$139225[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$139225[ebp], eax
$LN3@insert:
	mov	eax, DWORD PTR _i$139225[ebp]
	cmp	eax, DWORD PTR _offset$[ebp]
	jl	SHORT $LN1@insert

; 326  : 					entry[(head + i + 1) % entry.size()] = entry[(head + i) % entry.size()];

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	add	esi, DWORD PTR _i$139225[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, eax
	mov	eax, esi
	xor	edx, edx
	div	ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAPAVCommand@DRAMsimII@@I@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator[]
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$139225[ebp]
	lea	edi, DWORD PTR [eax+ecx+1]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, eax
	mov	eax, edi
	xor	edx, edx
	div	ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAPAVCommand@DRAMsimII@@I@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN2@insert
$LN1@insert:

; 327  : 
; 328  : 				count++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 329  : 
; 330  : 				entry[(head + offset) % entry.size()] = item;

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	add	esi, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, eax
	mov	eax, esi
	xor	edx, edx
	div	ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAPAVCommand@DRAMsimII@@I@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator[]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax], edx

; 331  : 
; 332  : 				tail = (tail + 1) % entry.size();	// advance tail_ptr

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+8]
	add	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, eax
	mov	eax, esi
	xor	edx, edx
	div	ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 333  : 
; 334  : 				return true;

	mov	al, 1
$LN8@insert:

; 335  : 			}
; 336  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?insert@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAE_NPAVCommand@2@H@Z ENDP ; DRAMsimII::Queue<DRAMsimII::Command>::insert
_TEXT	ENDS
PUBLIC	??_C@_1EI@NMEGFHIG@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO@ ; `string'
;	COMDAT ??_C@_1EI@NMEGFHIG@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO@
CONST	SEGMENT
??_C@_1EI@NMEGFHIG@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO@ DB 'o'
	DB	00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, '(', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, ')', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'o', 00H, 'f', 00H, 'f'
	DB	00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, '>', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?remove@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAEPAVCommand@2@H@Z
_TEXT	SEGMENT
_i$139235 = -32						; size = 4
_item$ = -20						; size = 4
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
?remove@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAEPAVCommand@2@H@Z PROC ; DRAMsimII::Queue<DRAMsimII::Command>::remove, COMDAT
; _this$ = ecx

; 339  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 340  : 			assert(offset <= (int)count && offset >= 0);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jg	SHORT $LN6@remove
	cmp	DWORD PTR _offset$[ebp], 0
	jge	SHORT $LN7@remove
$LN6@remove:
	mov	esi, esp
	push	340					; 00000154H
	push	OFFSET ??_C@_1JK@CBHCFOLP@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1EI@NMEGFHIG@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@remove:

; 341  : 
; 342  : 			// first get the item
; 343  : 			T *item = entry[(head + offset) % entry.size()];

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	add	esi, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, eax
	mov	eax, esi
	xor	edx, edx
	div	ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAPAVCommand@DRAMsimII@@I@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _item$[ebp], edx

; 344  : 			count--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 345  : 
; 346  : 			tail = (head + count) % entry.size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, eax
	mov	eax, esi
	xor	edx, edx
	div	ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 347  : 
; 348  : 			// then shift the other items up
; 349  : 			for (unsigned i = (unsigned)offset; i < count; i++)

	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _i$139235[ebp], eax
	jmp	SHORT $LN3@remove
$LN2@remove:
	mov	eax, DWORD PTR _i$139235[ebp]
	add	eax, 1
	mov	DWORD PTR _i$139235[ebp], eax
$LN3@remove:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$139235[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN1@remove

; 350  : 			{
; 351  : 				entry[(head + i) % entry.size()] = entry[(head + i + 1) % entry.size()];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$139235[ebp]
	lea	esi, DWORD PTR [ecx+edx+1]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, eax
	mov	eax, esi
	xor	edx, edx
	div	ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAPAVCommand@DRAMsimII@@I@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator[]
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR [edx+4]
	add	edi, DWORD PTR _i$139235[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, eax
	mov	eax, edi
	xor	edx, edx
	div	ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAPAVCommand@DRAMsimII@@I@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx

; 352  : 			}

	jmp	SHORT $LN2@remove
$LN1@remove:

; 353  : 
; 354  : 
; 355  : 			entry[(head + count) % entry.size()] = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, eax
	mov	eax, esi
	xor	edx, edx
	div	ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAPAVCommand@DRAMsimII@@I@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator[]
	mov	DWORD PTR [eax], 0

; 356  : 
; 357  : 			return item;

	mov	eax, DWORD PTR _item$[ebp]

; 358  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?remove@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAEPAVCommand@2@H@Z ENDP ; DRAMsimII::Queue<DRAMsimII::Command>::remove
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?freecount@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?freecount@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEIXZ PROC ; DRAMsimII::Queue<DRAMsimII::Command>::freecount, COMDAT
; _this$ = ecx

; 362  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 363  : 			return entry.size() - count;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx]

; 364  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?freecount@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEIXZ ENDP ; DRAMsimII::Queue<DRAMsimII::Command>::freecount
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?isFull@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isFull@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBE_NXZ PROC ; DRAMsimII::Queue<DRAMsimII::Command>::isFull, COMDAT
; _this$ = ecx

; 368  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 369  : 			return (entry.size() == count);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	xor	edx, edx
	cmp	eax, DWORD PTR [ecx]
	sete	dl
	mov	ecx, edx
	call	@_RTC_Check_4_to_1@4

; 370  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isFull@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBE_NXZ ENDP ; DRAMsimII::Queue<DRAMsimII::Command>::isFull
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?isEmpty@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isEmpty@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBE_NXZ PROC ; DRAMsimII::Queue<DRAMsimII::Command>::isEmpty, COMDAT
; _this$ = ecx

; 374  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 			return (count == 0);

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	call	@_RTC_Check_4_to_1@4

; 376  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isEmpty@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBE_NXZ ENDP ; DRAMsimII::Queue<DRAMsimII::Command>::isEmpty
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??A?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@1@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_value$ = 8						; size = 4
??A?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@1@I@Z PROC ; DRAMsimII::Queue<DRAMsimII::Command>::operator[], COMDAT
; _this$ = ecx

; 385  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 386  : 			return at(value);

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?at@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::at

; 387  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@1@I@Z ENDP ; DRAMsimII::Queue<DRAMsimII::Command>::operator[]
_TEXT	ENDS
EXTRN	??8Command@DRAMsimII@@QBE_NABV01@@Z:PROC	; DRAMsimII::Command::operator==
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??8?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBE_NABV01@@Z
_TEXT	SEGMENT
_i$139251 = -20						; size = 4
_this$ = -8						; size = 4
_rhs$ = 8						; size = 4
??8?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBE_NABV01@@Z PROC ; DRAMsimII::Queue<DRAMsimII::Command>::operator==, COMDAT
; _this$ = ecx

; 391  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 392  : 			if (count == rhs.count && entry.size() == rhs.entry.size() &&
; 393  : 				head == rhs.head && tail == rhs.tail && pool == rhs.pool)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	$LN11@operator@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	cmp	esi, eax
	jne	$LN11@operator@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	$LN11@operator@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN11@operator@2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	mov	edx, DWORD PTR _rhs$[ebp]
	movzx	eax, BYTE PTR [edx+32]
	cmp	ecx, eax
	jne	$LN11@operator@2

; 394  : 			{
; 395  : 				for (unsigned i = 0; i < count; i++)

	mov	DWORD PTR _i$139251[ebp], 0
	jmp	SHORT $LN10@operator@2
$LN9@operator@2:
	mov	eax, DWORD PTR _i$139251[ebp]
	add	eax, 1
	mov	DWORD PTR _i$139251[ebp], eax
$LN10@operator@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$139251[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	$LN8@operator@2

; 396  : 				{
; 397  : 					if (at(i) && rhs.at(i))

	mov	eax, DWORD PTR _i$139251[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?at@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::at
	test	eax, eax
	je	SHORT $LN7@operator@2
	mov	eax, DWORD PTR _i$139251[ebp]
	push	eax
	mov	ecx, DWORD PTR _rhs$[ebp]
	call	?at@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::at
	test	eax, eax
	je	SHORT $LN7@operator@2

; 398  : 					{
; 399  : 						if (!(*(at(i)) == *(rhs.at(i))))

	mov	eax, DWORD PTR _i$139251[ebp]
	push	eax
	mov	ecx, DWORD PTR _rhs$[ebp]
	call	?at@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::at
	push	eax
	mov	ecx, DWORD PTR _i$139251[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?at@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::at
	mov	ecx, eax
	call	??8Command@DRAMsimII@@QBE_NABV01@@Z	; DRAMsimII::Command::operator==
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN6@operator@2

; 400  : 							return false;

	xor	al, al
	jmp	SHORT $LN12@operator@2
$LN6@operator@2:

; 401  : 					}

	jmp	SHORT $LN5@operator@2
$LN7@operator@2:

; 402  : 					else if (at(i) != NULL && rhs.at(i) == NULL)

	mov	eax, DWORD PTR _i$139251[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?at@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::at
	test	eax, eax
	je	SHORT $LN4@operator@2
	mov	eax, DWORD PTR _i$139251[ebp]
	push	eax
	mov	ecx, DWORD PTR _rhs$[ebp]
	call	?at@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::at
	test	eax, eax
	jne	SHORT $LN4@operator@2

; 403  : 						return false;

	xor	al, al
	jmp	SHORT $LN12@operator@2
	jmp	SHORT $LN5@operator@2
$LN4@operator@2:

; 404  : 					else if (at(i) == NULL && rhs.at(i) != NULL)

	mov	eax, DWORD PTR _i$139251[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?at@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::at
	test	eax, eax
	jne	SHORT $LN5@operator@2
	mov	eax, DWORD PTR _i$139251[ebp]
	push	eax
	mov	ecx, DWORD PTR _rhs$[ebp]
	call	?at@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::at
	test	eax, eax
	je	SHORT $LN5@operator@2

; 405  : 						return false;

	xor	al, al
	jmp	SHORT $LN12@operator@2
$LN5@operator@2:

; 406  : 				}	

	jmp	$LN9@operator@2
$LN8@operator@2:

; 407  : 				return true;

	mov	al, 1
	jmp	SHORT $LN12@operator@2

; 408  : 			}
; 409  : 			else

	jmp	SHORT $LN12@operator@2
$LN11@operator@2:

; 410  : 				return false;

	xor	al, al
$LN12@operator@2:

; 411  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBE_NABV01@@Z ENDP ; DRAMsimII::Queue<DRAMsimII::Command>::operator==
_TEXT	ENDS
PUBLIC	??_C@_1BE@GBOKMHGJ@?$AAr?$AAh?$AAs?$AA?4?$AAa?$AAt?$AA?$CI?$AAi?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::resize
;	COMDAT ??_C@_1BE@GBOKMHGJ@?$AAr?$AAh?$AAs?$AA?4?$AAa?$AAt?$AA?$CI?$AAi?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@GBOKMHGJ@?$AAr?$AAh?$AAs?$AA?4?$AAa?$AAt?$AA?$CI?$AAi?$AA?$CJ?$AA?$AA@ DB 'r'
	DB	00H, 'h', 00H, 's', 00H, '.', 00H, 'a', 00H, 't', 00H, '(', 00H
	DB	'i', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAEAAV01@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAEAAV01@ABV01@@Z$0
__ehfuncinfo$??4?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAEAAV01@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAEAAV01@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??4?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
tv140 = -256						; size = 4
$T160493 = -248						; size = 4
$T160494 = -236						; size = 4
_i$139266 = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_rhs$ = 8						; size = 4
??4?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAEAAV01@ABV01@@Z PROC ; DRAMsimII::Queue<DRAMsimII::Command>::operator=, COMDAT
; _this$ = ecx

; 416  : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 417  : 			if (&rhs == this)

	mov	eax, DWORD PTR _rhs$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN4@operator@3

; 418  : 				return *this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN5@operator@3
$LN4@operator@3:

; 419  : 
; 420  : 			count = rhs.count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 421  : 			head = rhs.head;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 422  : 			tail = rhs.tail;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 423  : 			const_cast<bool&>(pool) = rhs.pool;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	dl, BYTE PTR [ecx+32]
	mov	BYTE PTR [eax+32], dl

; 424  : 
; 425  : 			entry.resize(rhs.entry.size());

	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::resize

; 426  : 
; 427  : 			for (unsigned i = 0; i < rhs.count; i++)

	mov	DWORD PTR _i$139266[ebp], 0
	jmp	SHORT $LN3@operator@3
$LN2@operator@3:
	mov	eax, DWORD PTR _i$139266[ebp]
	add	eax, 1
	mov	DWORD PTR _i$139266[ebp], eax
$LN3@operator@3:
	mov	eax, DWORD PTR _rhs$[ebp]
	mov	ecx, DWORD PTR _i$139266[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	$LN1@operator@3

; 428  : 			{
; 429  : 				assert(rhs.at(i));

	mov	eax, DWORD PTR _i$139266[ebp]
	push	eax
	mov	ecx, DWORD PTR _rhs$[ebp]
	call	?at@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::at
	test	eax, eax
	jne	SHORT $LN7@operator@3
	mov	esi, esp
	push	429					; 000001adH
	push	OFFSET ??_C@_1JK@CBHCFOLP@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1BE@GBOKMHGJ@?$AAr?$AAh?$AAs?$AA?4?$AAa?$AAt?$AA?$CI?$AAi?$AA?$CJ?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@operator@3:

; 430  : 
; 431  : 				entry[(head + i) % entry.size()] = new T(*(rhs.at(i)));

	push	96					; 00000060H
	call	??2Command@DRAMsimII@@SAPAXI@Z		; DRAMsimII::Command::operator new
	add	esp, 4
	mov	DWORD PTR $T160494[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T160494[ebp], 0
	je	SHORT $LN8@operator@3
	mov	eax, DWORD PTR _i$139266[ebp]
	push	eax
	mov	ecx, DWORD PTR _rhs$[ebp]
	call	?at@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::at
	push	eax
	mov	ecx, DWORD PTR $T160494[ebp]
	call	??0Command@DRAMsimII@@QAE@ABV01@@Z	; DRAMsimII::Command::Command
	mov	DWORD PTR tv140[ebp], eax
	jmp	SHORT $LN9@operator@3
$LN8@operator@3:
	mov	DWORD PTR tv140[ebp], 0
$LN9@operator@3:
	mov	ecx, DWORD PTR tv140[ebp]
	mov	DWORD PTR $T160493[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+4]
	add	esi, DWORD PTR _i$139266[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, eax
	mov	eax, esi
	xor	edx, edx
	div	ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAPAVCommand@DRAMsimII@@I@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator[]
	mov	edx, DWORD PTR $T160493[ebp]
	mov	DWORD PTR [eax], edx

; 432  : 			}

	jmp	$LN2@operator@3
$LN1@operator@3:

; 433  : 
; 434  : 			return *this;

	mov	eax, DWORD PTR _this$[ebp]
$LN5@operator@3:

; 435  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAEAAV01@ABV01@@Z$0:
	mov	eax, DWORD PTR $T160494[ebp]
	push	eax
	call	??3Command@DRAMsimII@@SAXPAX@Z		; DRAMsimII::Command::operator delete
	pop	ecx
	ret	0
__ehhandler$??4?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAEAAV01@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAEAAV01@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QAEAAV01@ABV01@@Z ENDP ; DRAMsimII::Queue<DRAMsimII::Command>::operator=
PUBLIC	??_C@_1BM@NKLFDJBH@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BM@NKLFDJBH@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@NKLFDJBH@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@ DB 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, 00H
	DB	00H						; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?at@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?at@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@I@Z PROC ; DRAMsimII::Queue<DRAMsimII::Command>::at, COMDAT
; _this$ = ecx

; 379  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  : 			assert(value < count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jb	SHORT $LN3@at
	mov	esi, esp
	push	380					; 0000017cH
	push	OFFSET ??_C@_1JK@CBHCFOLP@?$AAc?$AA?3?$AA?2?$AAu?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAc?$AAr?$AAi?$AAu?$AAs?$AA?2?$AAd?$AAo?$AAc?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5@
	push	OFFSET ??_C@_1BM@NKLFDJBH@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DM?$AA?5?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@at:

; 381  : 			return read(value);

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPAVCommand@2@H@Z ; DRAMsimII::Queue<DRAMsimII::Command>::read

; 382  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?at@?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@2@I@Z ENDP ; DRAMsimII::Queue<DRAMsimII::Command>::at
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ ; std::_Vector_val<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::~_Vector_val<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
PUBLIC	?_Construct_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIABQAVCommand@DRAMsimII@@@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Construct_n
PUBLIC	??0?$_Vector_val@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE@V?$allocator@PAVCommand@DRAMsimII@@@1@@Z ; std::_Vector_val<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_val<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
PUBLIC	??0?$allocator@PAVCommand@DRAMsimII@@@std@@QAE@XZ ; std::allocator<DRAMsimII::Command *>::allocator<DRAMsimII::Command *>
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@I@Z$0
__ehfuncinfo$??0?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@I@Z
_TEXT	SEGMENT
$T160509 = -236						; size = 4
$T160510 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
??0?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@I@Z PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >, COMDAT
; _this$ = ecx

; 482  : 		{	// construct from _Count * _Ty()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T160509[ebp], esp
	call	??0?$allocator@PAVCommand@DRAMsimII@@@std@@QAE@XZ ; std::allocator<DRAMsimII::Command *>::allocator<DRAMsimII::Command *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE@V?$allocator@PAVCommand@DRAMsimII@@@1@@Z ; std::_Vector_val<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_val<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 483  : 		_Construct_n(_Count, _Ty());

	mov	DWORD PTR $T160510[ebp], 0
	lea	eax, DWORD PTR $T160510[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Construct_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIABQAVCommand@DRAMsimII@@@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Construct_n

; 484  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@I@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@I@Z ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
PUBLIC	?_Tidy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::~vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::~vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
PUBLIC	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::~_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
PUBLIC	?_Destroy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXPAPAVCommand@DRAMsimII@@0@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Destroy
PUBLIC	?deallocate@?$allocator@PAVCommand@DRAMsimII@@@std@@QAEXPAPAVCommand@DRAMsimII@@I@Z ; std::allocator<DRAMsimII::Command *>::deallocate
PUBLIC	??$_Umove@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@0PAPAV23@@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Umove<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
PUBLIC	?begin@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@XZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::begin
PUBLIC	?end@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@XZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::end
PUBLIC	?allocate@?$allocator@PAVCommand@DRAMsimII@@@std@@QAEPAPAVCommand@DRAMsimII@@I@Z ; std::allocator<DRAMsimII::Command *>::allocate
PUBLIC	?capacity@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::capacity
PUBLIC	?_Xlen@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@KAXXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Xlen
PUBLIC	?max_size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::max_size
EXTRN	__imp_?_Orphan_all@_Container_base_secure@std@@QBEXXZ:PROC
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z$0
__tryblocktable$?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z$4
__unwindtable$?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
tv188 = -280						; size = 4
tv185 = -276						; size = 4
tv190 = -272						; size = 4
$T160529 = -264						; size = 4
$T160530 = -252						; size = 4
__Size$142397 = -48					; size = 4
__Ptr$142386 = -36					; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::reserve, COMDAT
; _this$ = ecx

; 602  : 		{	// determine new minimum length of allocated storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 603  : 		if (max_size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::max_size
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN5@reserve

; 604  : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@KAXXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Xlen
	jmp	$LN7@reserve
$LN5@reserve:

; 605  : 		else if (capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN7@reserve

; 606  : 			{	// not enough room, reallocate
; 607  : 			pointer _Ptr = this->_Alval.allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@PAVCommand@DRAMsimII@@@std@@QAEPAPAVCommand@DRAMsimII@@I@Z ; std::allocator<DRAMsimII::Command *>::allocate
	mov	DWORD PTR __Ptr$142386[ebp], eax

; 608  : 
; 609  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 610  : 			_Umove(begin(), end(), _Ptr);

	mov	eax, DWORD PTR __Ptr$142386[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T160529[ebp], esp
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@XZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::end
	mov	DWORD PTR tv190[ebp], eax
	mov	edx, DWORD PTR tv190[ebp]
	mov	DWORD PTR tv185[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T160530[ebp], esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@XZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::begin
	mov	DWORD PTR tv188[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@0PAPAV23@@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Umove<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
	jmp	SHORT $LN8@reserve
__catch$?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z$0:

; 611  : 			_CATCH_ALL
; 612  : 			this->_Alval.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$142386[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@PAVCommand@DRAMsimII@@@std@@QAEXPAPAVCommand@DRAMsimII@@I@Z ; std::allocator<DRAMsimII::Command *>::deallocate

; 613  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 614  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z$1
	ret	0
$LN8@reserve:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z$1:

; 615  : 
; 616  : 			size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	DWORD PTR __Size$142397[ebp], eax

; 617  : 			if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@reserve

; 618  : 				{	// destroy and deallocate old array
; 619  : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXPAPAVCommand@DRAMsimII@@0@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Destroy

; 620  : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@PAVCommand@DRAMsimII@@@std@@QAEXPAPAVCommand@DRAMsimII@@I@Z ; std::allocator<DRAMsimII::Command *>::deallocate
$LN1@reserve:

; 621  : 				}
; 622  : 
; 623  :  #if _HAS_ITERATOR_DEBUGGING
; 624  : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base_secure@std@@QBEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 625  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 626  : 
; 627  : 			_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$142386[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx

; 628  : 			_Mylast = _Ptr + _Size;

	mov	eax, DWORD PTR __Size$142397[ebp]
	mov	ecx, DWORD PTR __Ptr$142386[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 629  : 			_Myfirst = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$142386[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN7@reserve:

; 630  : 			}
; 631  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z$2:
	mov	ecx, DWORD PTR $T160529[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__ehhandler$?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-284]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::reserve
PUBLIC	??1?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::~_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::~_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::~_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
_TEXT	ENDS
PUBLIC	??1?$_Ranit@PAVCommand@DRAMsimII@@HPBQAV12@ABQAV12@@std@@QAE@XZ ; std::_Ranit<DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &>::~_Ranit<DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??1?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::~_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Ranit@PAVCommand@DRAMsimII@@HPBQAV12@ABQAV12@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::~_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
_TEXT	ENDS
PUBLIC	??1?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVCommand@DRAMsimII@@HPBQAV34@ABQAV34@V_Iterator_base@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &,std::_Iterator_base>::~_Iterator_with_base<std::random_access_iterator_tag,DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &,std::_Iterator_base>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??1?$_Ranit@PAVCommand@DRAMsimII@@HPBQAV12@ABQAV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Ranit@PAVCommand@DRAMsimII@@HPBQAV12@ABQAV12@@std@@QAE@XZ PROC ; std::_Ranit<DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &>::~_Ranit<DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVCommand@DRAMsimII@@HPBQAV34@ABQAV34@V_Iterator_base@2@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Ranit@PAVCommand@DRAMsimII@@HPBQAV12@ABQAV12@@std@@QAE@XZ ENDP ; std::_Ranit<DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &>::~_Ranit<DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &>
_TEXT	ENDS
PUBLIC	??1_Iterator_base@std@@QAE@XZ			; std::_Iterator_base::~_Iterator_base
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??1?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVCommand@DRAMsimII@@HPBQAV34@ABQAV34@V_Iterator_base@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVCommand@DRAMsimII@@HPBQAV34@ABQAV34@V_Iterator_base@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &,std::_Iterator_base>::~_Iterator_with_base<std::random_access_iterator_tag,DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &,std::_Iterator_base>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::~_Iterator_base
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVCommand@DRAMsimII@@HPBQAV34@ABQAV34@V_Iterator_base@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &,std::_Iterator_base>::~_Iterator_with_base<std::random_access_iterator_tag,DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &,std::_Iterator_base>
_TEXT	ENDS
PUBLIC	?_Orphan_me@_Iterator_base@std@@QAEXXZ		; std::_Iterator_base::_Orphan_me
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1_Iterator_base@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Iterator_base@std@@QAE@XZ$0
__ehfuncinfo$??1_Iterator_base@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Iterator_base@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??1_Iterator_base@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base@std@@QAE@XZ PROC			; std::_Iterator_base::~_Iterator_base, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy the iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Iterator_base@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 161  : 		_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base@std@@QAEXXZ	; std::_Iterator_base::_Orphan_me

; 162  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Iterator_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Iterator_b:
	DD	1
	DD	$LN6@Iterator_b
$LN6@Iterator_b:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@Iterator_b
$LN4@Iterator_b:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Iterator_base@std@@QAE@XZ$0:
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??1_Iterator_base@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Iterator_base@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base@std@@QAE@XZ ENDP			; std::_Iterator_base::~_Iterator_base
PUBLIC	??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; `string'
PUBLIC	??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ ; `string'
EXTRN	__imp_?_Debug_message@std@@YAXPB_W0I@Z:PROC
;	COMDAT ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ DB 'I'
	DB	00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'O', 00H
	DB	'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, ' '
	DB	00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H, 'P', 00H
	DB	'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
CONST	SEGMENT
??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, '9', 00H, '.', 00H, '0', 00H, '\', 00H, 'v', 00H
	DB	'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u'
	DB	00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H, 't', 00H
	DB	'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?_Orphan_me@_Iterator_base@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$6734 = -20					; size = 4
_this$ = -8						; size = 4
?_Orphan_me@_Iterator_base@std@@QAEXXZ PROC		; std::_Iterator_base::_Orphan_me, COMDAT
; _this$ = ecx

; 180  : 		{	// cut ties with parent

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 		if (_Mycont != 0 && _Mycont->_Myfirstiter != _IGNORE_MYITERLIST)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Orphan_me
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], -3			; fffffffdH
	je	SHORT $LN5@Orphan_me

; 182  : 			{	// adopted, remove self from list
; 183  : 			_Iterator_base **_Pnext =
; 184  : 				(_Iterator_base **)&_Mycont->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnext$6734[ebp], ecx
$LN3@Orphan_me:

; 185  : 			while (*_Pnext != 0 && *_Pnext != this)

	mov	eax, DWORD PTR __Pnext$6734[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Orphan_me
	mov	eax, DWORD PTR __Pnext$6734[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN2@Orphan_me

; 186  : 				_Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$6734[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$6734[ebp], ecx
	jmp	SHORT $LN3@Orphan_me
$LN2@Orphan_me:

; 187  : 
; 188  : 			if (*_Pnext == 0)

	mov	eax, DWORD PTR __Pnext$6734[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@Orphan_me

; 189  : 				_DEBUG_ERROR("ITERATOR LIST CORRUPTED!");

	mov	esi, esp
	push	189					; 000000bdH
	push	OFFSET ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Orphan_me:

; 190  : 			*_Pnext = _Mynextiter;

	mov	eax, DWORD PTR __Pnext$6734[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 191  : 			_Mycont = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@Orphan_me:

; 192  : 			}
; 193  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me@_Iterator_base@std@@QAEXXZ ENDP		; std::_Iterator_base::_Orphan_me
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@XZ
_TEXT	SEGMENT
$T160577 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@XZ PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T160577[ebp], 0

; 641  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
	mov	eax, DWORD PTR $T160577[ebp]
	or	eax, 1
	mov	DWORD PTR $T160577[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 642  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@XZ ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::begin
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@XZ
_TEXT	SEGMENT
$T160582 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@XZ PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T160582[ebp], 0

; 651  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
	mov	eax, DWORD PTR $T160582[ebp]
	or	eax, 1
	mov	DWORD PTR $T160582[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 652  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@XZ ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::end
_TEXT	ENDS
PUBLIC	?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::resize
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::resize, COMDAT
; _this$ = ecx

; 712  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		resize(_Newsize, _Ty());

	push	0
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::resize

; 714  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXI@Z ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::resize
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size, COMDAT
; _this$ = ecx

; 725  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+8]
	sar	eax, 2

; 727  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
_TEXT	ENDS
PUBLIC	??_C@_1CK@POGJDOKA@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAo?$AAs?$AA?5?$AA?$DM?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1MO@DFNMEHFD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAD?$AAR?$AAA?$AAM?$AAs?$AAi?$AAm?$AAI?$AAI?$AA?3?$AA?3?$AAC?$AAo?$AAm@ ; `string'
PUBLIC	??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@ ; `string'
PUBLIC	??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ ; `string'
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReportW:PROC
;	COMDAT ??_C@_1CK@POGJDOKA@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAo?$AAs?$AA?5?$AA?$DM?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@POGJDOKA@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAo?$AAs?$AA?5?$AA?$DM?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@ DB '('
	DB	00H, '"', 00H, '_', 00H, 'P', 00H, 'o', 00H, 's', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '('
	DB	00H, ')', 00H, '"', 00H, ',', 00H, ' ', 00H, '0', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H
	DB	' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@DFNMEHFD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAD?$AAR?$AAA?$AAM?$AAs?$AAi?$AAm?$AAI?$AAI?$AA?3?$AA?3?$AAC?$AAo?$AAm@
CONST	SEGMENT
??_C@_1MO@DFNMEHFD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAD?$AAR?$AAA?$AAM?$AAs?$AAi?$AAm?$AAI?$AAI?$AA?3?$AA?3?$AAC?$AAo?$AAm@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'D', 00H, 'R', 00H
	DB	'A', 00H, 'M', 00H, 's', 00H, 'i', 00H, 'm', 00H, 'I', 00H, 'I'
	DB	00H, ':', 00H, ':', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H
	DB	'a', 00H, 'n', 00H, 'd', 00H, ' ', 00H, '*', 00H, ',', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' '
	DB	00H, 'D', 00H, 'R', 00H, 'A', 00H, 'M', 00H, 's', 00H, 'i', 00H
	DB	'm', 00H, 'I', 00H, 'I', 00H, ':', 00H, ':', 00H, 'C', 00H, 'o'
	DB	00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'd', 00H, ' ', 00H
	DB	'*', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o'
	DB	00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, '[', 00H, ']', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
CONST	SEGMENT
??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@ DB '('
	DB	00H, '"', 00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H
	DB	'a', 00H, 'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+'
	DB	00H, ' ', 00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H
	DB	'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'O', 00H, 'u'
	DB	00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'R', 00H
	DB	'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, ',', 00H, ' '
	DB	00H, '0', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i'
	DB	00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
CONST	SEGMENT
??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, '9', 00H, '.', 00H, '0', 00H, '\', 00H, 'v', 00H
	DB	'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u'
	DB	00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEABQAVCommand@DRAMsimII@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEABQAVCommand@DRAMsimII@@I@Z PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator[], COMDAT
; _this$ = ecx

; 759  : 		{	// subscript nonmutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 760  : 
; 761  :  #if _HAS_ITERATOR_DEBUGGING
; 762  : 		if (size() <= _Pos)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN2@operator@4

; 763  : 			{
; 764  : 			_DEBUG_ERROR("vector subscript out of range");

	mov	esi, esp
	push	764					; 000002fcH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 765  : 			_SCL_SECURE_OUT_OF_RANGE;

	xor	eax, eax
	jne	SHORT $LN5@operator@4
	mov	esi, esp
	push	OFFSET ??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
	push	0
	push	765					; 000002fdH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@operator@4
	int	3
$LN5@operator@4:
	mov	esi, esp
	push	0
	push	765					; 000002fdH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1MO@DFNMEHFD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAD?$AAR?$AAA?$AAM?$AAs?$AAi?$AAm?$AAI?$AAI?$AA?3?$AA?3?$AAC?$AAo?$AAm@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@4:

; 766  : 			}
; 767  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 768  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@4
	xor	eax, eax
	jne	SHORT $LN6@operator@4
	mov	esi, esp
	push	OFFSET ??_C@_1CK@POGJDOKA@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAo?$AAs?$AA?5?$AA?$DM?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
	push	0
	push	768					; 00000300H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN6@operator@4
	int	3
$LN6@operator@4:
	mov	esi, esp
	push	0
	push	768					; 00000300H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1MO@DFNMEHFD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAD?$AAR?$AAA?$AAM?$AAs?$AAi?$AAm?$AAI?$AAI?$AA?3?$AA?3?$AAC?$AAo?$AAm@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@4:

; 769  : 
; 770  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 771  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEABQAVCommand@DRAMsimII@@I@Z ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator[]
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAPAVCommand@DRAMsimII@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAPAVCommand@DRAMsimII@@I@Z PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator[], COMDAT
; _this$ = ecx

; 774  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN2@operator@5

; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");

	mov	esi, esp
	push	779					; 0000030bH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 780  : 			_SCL_SECURE_OUT_OF_RANGE;

	xor	eax, eax
	jne	SHORT $LN5@operator@5
	mov	esi, esp
	push	OFFSET ??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
	push	0
	push	780					; 0000030cH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@operator@5
	int	3
$LN5@operator@5:
	mov	esi, esp
	push	0
	push	780					; 0000030cH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1MO@DFNMEHFD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAD?$AAR?$AAA?$AAM?$AAs?$AAi?$AAm?$AAI?$AAI?$AA?3?$AA?3?$AAC?$AAo?$AAm@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@5:

; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jb	SHORT $LN1@operator@5
	xor	eax, eax
	jne	SHORT $LN6@operator@5
	mov	esi, esp
	push	OFFSET ??_C@_1CK@POGJDOKA@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAo?$AAs?$AA?5?$AA?$DM?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
	push	0
	push	783					; 0000030fH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN6@operator@5
	int	3
$LN6@operator@5:
	mov	esi, esp
	push	0
	push	783					; 0000030fH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1MO@DFNMEHFD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAD?$AAR?$AAA?$AAM?$AAs?$AAi?$AAm?$AAI?$AAI?$AA?3?$AA?3?$AAC?$AAo?$AAm@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@5:

; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 786  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAPAVCommand@DRAMsimII@@I@Z ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator[]
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_empty@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<DRAMsimII::Command *> >::~_Container_base_aux_alloc_empty<std::allocator<DRAMsimII::Command *> >
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??1?$_Vector_val@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Vector_val@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::~_Vector_val<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Container_base_aux_alloc_empty@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<DRAMsimII::Command *> >::~_Container_base_aux_alloc_empty<std::allocator<DRAMsimII::Command *> >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::~_Vector_val<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@PAPAV34@IABQAV34@@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Ufill
PUBLIC	?_Buy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE_NI@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Buy
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Construct_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIABQAVCommand@DRAMsimII@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Construct_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIABQAVCommand@DRAMsimII@@@Z$0
__unwindtable$?_Construct_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIABQAVCommand@DRAMsimII@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Construct_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIABQAVCommand@DRAMsimII@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Construct_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIABQAVCommand@DRAMsimII@@@Z$2
__ehfuncinfo$?_Construct_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIABQAVCommand@DRAMsimII@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Construct_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIABQAVCommand@DRAMsimII@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Construct_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIABQAVCommand@DRAMsimII@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?_Construct_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIABQAVCommand@DRAMsimII@@@Z
_TEXT	SEGMENT
tv80 = -224						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
__Val$ = 12						; size = 4
?_Construct_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIABQAVCommand@DRAMsimII@@@Z PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Construct_n, COMDAT
; _this$ = ecx

; 545  : 		{	// construct from _Count * _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Construct_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIABQAVCommand@DRAMsimII@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 546  : 		if (_Buy(_Count))

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE_NI@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@Construct_

; 547  : 			{	// nonzero, fill it
; 548  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 549  : 			_Mylast = _Ufill(_Myfirst, _Count, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@PAPAV34@IABQAV34@@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Ufill
	mov	DWORD PTR tv80[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv80[ebp]
	mov	DWORD PTR [ecx+12], edx
	jmp	SHORT $LN5@Construct_
__catch$?_Construct_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIABQAVCommand@DRAMsimII@@@Z$0:

; 550  : 			_CATCH_ALL
; 551  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Tidy

; 552  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 553  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN4@Construct_
	ret	0
$LN5@Construct_:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN4@Construct_:

; 554  : 			}
; 555  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Construct_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIABQAVCommand@DRAMsimII@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-228]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Construct_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIABQAVCommand@DRAMsimII@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Construct_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIABQAVCommand@DRAMsimII@@@Z ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Construct_n
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?capacity@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
tv70 = -208						; size = 4
_this$ = -8						; size = 4
?capacity@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::capacity, COMDAT
; _this$ = ecx

; 634  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN3@capacity
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@capacity
$LN3@capacity:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	sub	eax, DWORD PTR [edx+8]
	sar	eax, 2
	mov	DWORD PTR tv70[ebp], eax
$LN4@capacity:
	mov	eax, DWORD PTR tv70[ebp]

; 636  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::capacity
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::erase
PUBLIC	??H?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator+
PUBLIC	?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Insert_n
PUBLIC	??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z$4
	DD	05H
	DD	FLAT:__unwindfunclet$?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z$5
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z
_TEXT	SEGMENT
tv196 = -392						; size = 4
tv203 = -388						; size = 4
tv200 = -384						; size = 4
tv209 = -380						; size = 4
tv198 = -376						; size = 4
tv208 = -372						; size = 4
tv195 = -368						; size = 4
tv207 = -364						; size = 4
tv191 = -364						; size = 4
tv193 = -360						; size = 4
tv187 = -360						; size = 4
tv206 = -356						; size = 4
tv205 = -356						; size = 4
$T160620 = -348						; size = 4
$T160621 = -336						; size = 12
$T160622 = -316						; size = 4
$T160623 = -304						; size = 12
$T160624 = -284						; size = 4
$T160625 = -272						; size = 12
$T160626 = -252						; size = 12
$T160627 = -232						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::resize, COMDAT
; _this$ = ecx

; 717  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 380				; 0000017cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-392]
	mov	ecx, 95					; 0000005fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 		if (size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize

; 719  : 			_Insert_n(end(), _Newsize - size(), _Val);

	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, eax
	push	ecx
	lea	edx, DWORD PTR $T160621[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@XZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::end
	mov	DWORD PTR tv205[ebp], eax
	mov	eax, DWORD PTR tv205[ebp]
	mov	DWORD PTR tv187[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T160620[ebp], esp
	mov	edx, DWORD PTR tv187[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv191[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Insert_n
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T160621[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	jmp	$LN4@resize
$LN3@resize:

; 720  : 		else if (_Newsize < size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	$LN4@resize

; 721  : 			erase(begin() + _Newsize, end());

	lea	eax, DWORD PTR $T160623[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@XZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::end
	mov	DWORD PTR tv206[ebp], eax
	mov	ecx, DWORD PTR tv206[ebp]
	mov	DWORD PTR tv193[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T160622[ebp], esp
	mov	edx, DWORD PTR tv193[ebp]
	push	edx
	call	??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv207[ebp], eax
	mov	eax, DWORD PTR tv207[ebp]
	mov	DWORD PTR tv195[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T160626[ebp]
	push	edx
	lea	eax, DWORD PTR $T160625[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@XZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::begin
	mov	DWORD PTR tv208[ebp], eax
	mov	ecx, DWORD PTR tv208[ebp]
	mov	DWORD PTR tv198[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR tv198[ebp]
	call	??H?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator+
	mov	DWORD PTR tv209[ebp], eax
	mov	edx, DWORD PTR tv209[ebp]
	mov	DWORD PTR tv200[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T160624[ebp], esp
	mov	eax, DWORD PTR tv200[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv203[ebp], eax
	lea	ecx, DWORD PTR $T160627[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::erase
	mov	DWORD PTR tv196[ebp], eax
	lea	ecx, DWORD PTR $T160627[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T160626[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T160625[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T160623[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
$LN4@resize:

; 722  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 392				; 00000188H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z$0:
	lea	ecx, DWORD PTR $T160621[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z$2:
	lea	ecx, DWORD PTR $T160623[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z$3:
	mov	ecx, DWORD PTR $T160622[ebp]
	jmp	??1?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z$4:
	lea	ecx, DWORD PTR $T160625[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z$5:
	lea	ecx, DWORD PTR $T160626[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__ehhandler$?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-396]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?resize@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEXIPAVCommand@DRAMsimII@@@Z ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::resize
PUBLIC	??0?$_Ranit@PAVCommand@DRAMsimII@@HPBQAV12@ABQAV12@@std@@QAE@ABU01@@Z ; std::_Ranit<DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &>::_Ranit<DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@PAVCommand@DRAMsimII@@HPBQAV12@ABQAV12@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVCommand@DRAMsimII@@HPBQAV34@ABQAV34@V_Iterator_base@2@@std@@QAE@ABU01@@Z ; std::_Iterator_with_base<std::random_access_iterator_tag,DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &,std::_Iterator_base>::_Iterator_with_base<std::random_access_iterator_tag,DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &,std::_Iterator_base>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0?$_Ranit@PAVCommand@DRAMsimII@@HPBQAV12@ABQAV12@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Ranit@PAVCommand@DRAMsimII@@HPBQAV12@ABQAV12@@std@@QAE@ABU01@@Z PROC ; std::_Ranit<DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &>::_Ranit<DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVCommand@DRAMsimII@@HPBQAV34@ABQAV34@V_Iterator_base@2@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Ranit@PAVCommand@DRAMsimII@@HPBQAV12@ABQAV12@@std@@QAE@ABU01@@Z ENDP ; std::_Ranit<DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &>::_Ranit<DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &>
_TEXT	ENDS
PUBLIC	??0_Iterator_base@std@@QAE@ABV01@@Z		; std::_Iterator_base::_Iterator_base
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVCommand@DRAMsimII@@HPBQAV34@ABQAV34@V_Iterator_base@2@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVCommand@DRAMsimII@@HPBQAV34@ABQAV34@V_Iterator_base@2@@std@@QAE@ABU01@@Z PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &,std::_Iterator_base>::_Iterator_with_base<std::random_access_iterator_tag,DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &,std::_Iterator_base>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base@std@@QAE@ABV01@@Z	; std::_Iterator_base::_Iterator_base
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVCommand@DRAMsimII@@HPBQAV34@ABQAV34@V_Iterator_base@2@@std@@QAE@ABU01@@Z ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &,std::_Iterator_base>::_Iterator_with_base<std::random_access_iterator_tag,DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &,std::_Iterator_base>
_TEXT	ENDS
PUBLIC	??4_Iterator_base@std@@QAEAAV01@ABV01@@Z	; std::_Iterator_base::operator=
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0_Iterator_base@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base@std@@QAE@ABV01@@Z PROC		; std::_Iterator_base::_Iterator_base, COMDAT
; _this$ = ecx

; 143  : 		{	// copy an iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 144  : 		*this = _Right;

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base@std@@QAEAAV01@ABV01@@Z ; std::_Iterator_base::operator=

; 145  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Iterator_base@std@@QAE@ABV01@@Z ENDP		; std::_Iterator_base::_Iterator_base
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z ; std::_Iterator_base::_Adopt
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z$0
__ehfuncinfo$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??4_Iterator_base@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Lock$6719 = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4_Iterator_base@std@@QAEAAV01@ABV01@@Z PROC		; std::_Iterator_base::operator=, COMDAT
; _this$ = ecx

; 148  : 		{	// assign an iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 149  : 		if (_Mycont != _Right._Mycont)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN1@operator@6

; 150  : 			{	// change parentage
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$6719[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 152  : 			_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base@std@@QAEXXZ	; std::_Iterator_base::_Orphan_me

; 153  : 			_Adopt(_Right._Mycont);

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z ; std::_Iterator_base::_Adopt

; 154  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$6719[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@6:

; 155  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 156  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@operator@6
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN8@operator@6:
	DD	1
	DD	$LN7@operator@6
$LN7@operator@6:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@operator@6
$LN5@operator@6:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$6719[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4_Iterator_base@std@@QAEAAV01@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4_Iterator_base@std@@QAEAAV01@ABV01@@Z ENDP		; std::_Iterator_base::operator=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z$0
__ehfuncinfo$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z
_TEXT	SEGMENT
__Lock$6726 = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z PROC ; std::_Iterator_base::_Adopt, COMDAT
; _this$ = ecx

; 165  : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		if (_Mycont != _Parent)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __Parent$[ebp]
	je	SHORT $LN3@Adopt

; 167  : 			{	// change parentage
; 168  : 			_Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$6726[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 169  : 			_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base@std@@QAEXXZ	; std::_Iterator_base::_Orphan_me

; 170  : 			if (_Parent != 0 && _Parent->_Myfirstiter != _IGNORE_MYITERLIST)

	cmp	DWORD PTR __Parent$[ebp], 0
	je	SHORT $LN1@Adopt
	mov	eax, DWORD PTR __Parent$[ebp]
	cmp	DWORD PTR [eax], -3			; fffffffdH
	je	SHORT $LN1@Adopt

; 171  : 				{	// switch to new parent
; 172  : 				_Mynextiter = _Parent->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 173  : 				((_Container_base_secure *)_Parent)->_Myfirstiter = this;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@Adopt:

; 174  : 				}
; 175  : 			_Mycont = _Parent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent$[ebp]
	mov	DWORD PTR [eax], ecx

; 176  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$6726[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Adopt:

; 177  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Adopt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN9@Adopt:
	DD	1
	DD	$LN8@Adopt
$LN8@Adopt:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN6@Adopt
$LN6@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$6726[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z ENDP ; std::_Iterator_base::_Adopt
PUBLIC	?max_size@?$allocator@PAVCommand@DRAMsimII@@@std@@QBEIXZ ; std::allocator<DRAMsimII::Command *>::max_size
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?max_size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?max_size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::max_size, COMDAT
; _this$ = ecx

; 730  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?max_size@?$allocator@PAVCommand@DRAMsimII@@@std@@QBEIXZ ; std::allocator<DRAMsimII::Command *>::max_size

; 732  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAXPAPAVCommand@DRAMsimII@@0AAV?$allocator@PAVCommand@DRAMsimII@@@0@@Z ; std::_Destroy_range<std::allocator<DRAMsimII::Command *> >
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?_Destroy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXPAPAVCommand@DRAMsimII@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXPAPAVCommand@DRAMsimII@@0@Z PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAXPAPAVCommand@DRAMsimII@@0AAV?$allocator@PAVCommand@DRAMsimII@@@0@@Z ; std::_Destroy_range<std::allocator<DRAMsimII::Command *> >
	add	esp, 12					; 0000000cH

; 1120 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXPAPAVCommand@DRAMsimII@@0@Z ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Destroy
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Tidy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXXZ PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base_secure@std@@QBEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXPAPAVCommand@DRAMsimII@@0@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Destroy

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@PAVCommand@DRAMsimII@@@std@@QAEXPAPAVCommand@DRAMsimII@@I@Z ; std::allocator<DRAMsimII::Command *>::deallocate
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 1135 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXXZ ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Tidy
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z44
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z44
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z44
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z44 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	02cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z44
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z44 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	02cH
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z44
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z44
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T160685 = -292						; size = 44
$T160686 = -240						; size = 32
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@KAXXZ PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	mov	esi, esp
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T160686[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T160686[ebp]
	push	eax
	lea	ecx, DWORD PTR $T160685[ebp]
	call	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T160685[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR $T160686[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@KAXXZ$0:
	mov	esi, esp
	lea	ecx, DWORD PTR $T160686[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?_Xlen@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-300]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@KAXXZ ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Xlen
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R2exception@std@@8
; File c:\program files\microsoft visual studio 9.0\vc\include\stdexcept
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	esi, esp
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 27   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	esi, esp
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 36   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
_TEXT	ENDS
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@

; 31   : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	esi, esp
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 110  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ		; std::logic_error::~logic_error
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1length_error@std@@UAE@XZ		; std::length_error::~length_error
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	??0?$_Container_base_aux_alloc_empty@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE@V?$allocator@PAVCommand@DRAMsimII@@@1@@Z ; std::_Container_base_aux_alloc_empty<std::allocator<DRAMsimII::Command *> >::_Container_base_aux_alloc_empty<std::allocator<DRAMsimII::Command *> >
PUBLIC	??0?$allocator@PAVCommand@DRAMsimII@@@std@@QAE@ABV01@@Z ; std::allocator<DRAMsimII::Command *>::allocator<DRAMsimII::Command *>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE@V?$allocator@PAVCommand@DRAMsimII@@@1@@Z
_TEXT	SEGMENT
$T160729 = -212						; size = 4
_this$ = -8						; size = 4
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE@V?$allocator@PAVCommand@DRAMsimII@@@1@@Z PROC ; std::_Vector_val<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_val<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T160729[ebp], esp
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??0?$allocator@PAVCommand@DRAMsimII@@@std@@QAE@ABV01@@Z ; std::allocator<DRAMsimII::Command *>::allocator<DRAMsimII::Command *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Container_base_aux_alloc_empty@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE@V?$allocator@PAVCommand@DRAMsimII@@@1@@Z ; std::_Container_base_aux_alloc_empty<std::allocator<DRAMsimII::Command *> >::_Container_base_aux_alloc_empty<std::allocator<DRAMsimII::Command *> >
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$allocator@PAVCommand@DRAMsimII@@@std@@QAE@ABV01@@Z ; std::allocator<DRAMsimII::Command *>::allocator<DRAMsimII::Command *>

; 426  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_val@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE@V?$allocator@PAVCommand@DRAMsimII@@@1@@Z ENDP ; std::_Vector_val<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_val<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
_TEXT	ENDS
EXTRN	__imp_??1_Container_base_secure@std@@QAE@XZ:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_empty@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Container_base_aux_alloc_empty@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_empty<std::allocator<DRAMsimII::Command *> >::~_Container_base_aux_alloc_empty<std::allocator<DRAMsimII::Command *> >, COMDAT
; _this$ = ecx

; 627  : 	~_Container_base_aux_alloc_empty() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base_secure@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Container_base_aux_alloc_empty@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<DRAMsimII::Command *> >::~_Container_base_aux_alloc_empty<std::allocator<DRAMsimII::Command *> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVCommand@DRAMsimII@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@PAVCommand@DRAMsimII@@@std@@QAE@XZ PROC	; std::allocator<DRAMsimII::Command *>::allocator<DRAMsimII::Command *>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVCommand@DRAMsimII@@@std@@QAE@XZ ENDP	; std::allocator<DRAMsimII::Command *>::allocator<DRAMsimII::Command *>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVCommand@DRAMsimII@@@std@@QAEXPAPAVCommand@DRAMsimII@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVCommand@DRAMsimII@@@std@@QAEXPAPAVCommand@DRAMsimII@@I@Z PROC ; std::allocator<DRAMsimII::Command *>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVCommand@DRAMsimII@@@std@@QAEXPAPAVCommand@DRAMsimII@@I@Z ENDP ; std::allocator<DRAMsimII::Command *>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@IPAPAV12@@Z ; std::_Allocate<DRAMsimII::Command *>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?allocate@?$allocator@PAVCommand@DRAMsimII@@@std@@QAEPAPAVCommand@DRAMsimII@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVCommand@DRAMsimII@@@std@@QAEPAPAVCommand@DRAMsimII@@I@Z PROC ; std::allocator<DRAMsimII::Command *>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@IPAPAV12@@Z ; std::_Allocate<DRAMsimII::Command *>
	add	esp, 8

; 146  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVCommand@DRAMsimII@@@std@@QAEPAPAVCommand@DRAMsimII@@I@Z ENDP ; std::allocator<DRAMsimII::Command *>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z PROC ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >, COMDAT
; _this$ = ecx

; 321  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >

; 322  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z ENDP ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	?_Orphan_range@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IBEXPAPAVCommand@DRAMsimII@@0@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Orphan_range
PUBLIC	??$unchecked_copy@PAPAVCommand@DRAMsimII@@PAPAV12@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00@Z ; stdext::unchecked_copy<DRAMsimII::Command * *,DRAMsimII::Command * *>
PUBLIC	??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@ ; `string'
PUBLIC	??M?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator<
PUBLIC	??9?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator!=
PUBLIC	?_Make_iter@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Make_iter
;	COMDAT ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
CONST	SEGMENT
??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, 's', 00H, 'i'
	DB	00H, 'd', 00H, 'e', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z$5
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z
_TEXT	SEGMENT
tv238 = -312						; size = 4
tv234 = -312						; size = 4
tv237 = -308						; size = 4
tv233 = -308						; size = 4
$T160748 = -300						; size = 4
$T160749 = -288						; size = 4
$T160757 = -276						; size = 4
__Ptr$144817 = -72					; size = 4
__Last$ = -60						; size = 12
__First$ = -40						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 12
__Last_arg$ = 24					; size = 12
?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T160757[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T160748[ebp], esp
	lea	eax, DWORD PTR __First_arg$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv233[ebp], eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Make_iter
	mov	DWORD PTR tv234[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T160749[ebp], esp
	lea	eax, DWORD PTR __Last_arg$[ebp]
	push	eax
	call	??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv237[ebp], eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Make_iter
	mov	DWORD PTR tv238[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 1031 : 
; 1032 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@erase

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??M?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator<
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@erase
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN1@erase
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __First$[ebp+8]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN1@erase
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Last$[ebp+8]
	jae	SHORT $LN2@erase
$LN1@erase:

; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");

	mov	esi, esp
	push	1038					; 0000040eH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@erase:

; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp+8]
	push	eax
	call	??$unchecked_copy@PAPAVCommand@DRAMsimII@@PAPAV12@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00@Z ; stdext::unchecked_copy<DRAMsimII::Command * *,DRAMsimII::Command * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$144817[ebp], eax

; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IBEXPAPAVCommand@DRAMsimII@@0@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Orphan_range

; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));
; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Ptr$144817[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXPAPAVCommand@DRAMsimII@@0@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Destroy

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$144817[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN3@erase:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
	mov	edx, DWORD PTR $T160757[ebp]
	or	edx, 1
	mov	DWORD PTR $T160757[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR __First_arg$[ebp]
	call	??1?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Last_arg$[ebp]
	call	??1?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1053 : #else
; 1054 : 		return (_First);
; 1055 : #endif
; 1056 : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@erase
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
	npad	3
$LN18@erase:
	DD	2
	DD	$LN17@erase
$LN17@erase:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN14@erase
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN15@erase
$LN15@erase:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN14@erase:
	DB	95					; 0000005fH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z$0:
	lea	ecx, DWORD PTR __Last_arg$[ebp]
	jmp	??1?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z$1:
	lea	ecx, DWORD PTR __First_arg$[ebp]
	jmp	??1?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z$3:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z$5:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z$6:
	mov	eax, DWORD PTR $T160757[ebp]
	and	eax, 1
	je	$LN13@erase
	and	DWORD PTR $T160757[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
$LN13@erase:
	ret	0
__ehhandler$?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-316]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@0@Z ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::erase
PUBLIC	??8?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator==
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??9?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator==
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	call	@_RTC_Check_4_to_1@4

; 217  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator!=
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Compat
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??8?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Compat

; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+8]
	sete	al
	mov	ecx, eax
	call	@_RTC_Check_4_to_1@4

; 212  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator==
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?_Buy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE_NI@Z PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@KAXXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy
$LN2@Buy:

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@PAVCommand@DRAMsimII@@@std@@QAEPAPAVCommand@DRAMsimII@@I@Z ; std::allocator<DRAMsimII::Command *>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], edx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Capacity$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAPAVCommand@DRAMsimII@@PAPAV12@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00@Z ; stdext::_Unchecked_move_backward<DRAMsimII::Command * *,DRAMsimII::Command * *>
PUBLIC	??$fill@PAPAVCommand@DRAMsimII@@PAV12@@std@@YAXPAPAVCommand@DRAMsimII@@0ABQAV12@@Z ; std::fill<DRAMsimII::Command * *,DRAMsimII::Command *>
PUBLIC	??$_Umove@PAPAVCommand@DRAMsimII@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@PAPAV23@00@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Umove<DRAMsimII::Command * *>
PUBLIC	??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@ ; `string'
;	COMDAT ??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@
CONST	SEGMENT
??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 's', 00H, 'e', 00H, 'r', 00H, 't', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, 's'
	DB	00H, 'i', 00H, 'd', 00H, 'e', 00H, ' ', 00H, 'r', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z$2
__catchsym$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z$0
__ehfuncinfo$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z$5
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z$6
__unwindtable$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z$4
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z
_TEXT	SEGMENT
tv134 = -308						; size = 4
__Oldend$144870 = -108					; size = 4
__Tmp$144869 = -96					; size = 4
__Tmp$144859 = -84					; size = 4
__Ncopied$144846 = -72					; size = 4
__Whereoff$144845 = -60					; size = 4
__Newvec$144844 = -48					; size = 4
__Capacity$ = -36					; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 12
__Count$ = 20						; size = 4
__Val$ = 24						; size = 4
?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)

	mov	eax, DWORD PTR __Where$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN15@Insert_n
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+8]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN15@Insert_n
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR __Where$[ebp+8]
	jae	SHORT $LN16@Insert_n
$LN15@Insert_n:

; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");

	mov	esi, esp
	push	1158					; 00000486H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@Insert_n:

; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n
	jmp	$LN13@Insert_n
$LN14@Insert_n:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::max_size
	sub	eax, esi
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN12@Insert_n

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@KAXXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Xlen
	jmp	$LN13@Insert_n
$LN12@Insert_n:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	esi, DWORD PTR __Capacity$[ebp]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::max_size
	sub	eax, esi
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN19@Insert_n
	mov	DWORD PTR tv134[ebp], 0
	jmp	SHORT $LN20@Insert_n
$LN19@Insert_n:
	mov	eax, DWORD PTR __Capacity$[ebp]
	shr	eax, 1
	add	eax, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv134[ebp], eax
$LN20@Insert_n:
	mov	ecx, DWORD PTR tv134[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN9@Insert_n

; 1172 : 				_Capacity = size() + _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN9@Insert_n:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?allocate@?$allocator@PAVCommand@DRAMsimII@@@std@@QAEPAPAVCommand@DRAMsimII@@I@Z ; std::allocator<DRAMsimII::Command *>::allocate
	mov	DWORD PTR __Newvec$144844[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+8]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 2
	mov	DWORD PTR __Whereoff$144845[ebp], ecx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$144846[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Whereoff$144845[ebp]
	mov	eax, DWORD PTR __Newvec$144844[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@PAPAV34@IABQAV34@@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Ufill

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$144846[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$144846[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	eax, DWORD PTR __Newvec$144844[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAVCommand@DRAMsimII@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@PAPAV23@00@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Umove<DRAMsimII::Command * *>

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$144846[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$144846[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR __Whereoff$144845[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$144844[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAVCommand@DRAMsimII@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@PAPAV23@00@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Umove<DRAMsimII::Command * *>
	jmp	SHORT $LN21@Insert_n
__catch$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$144846[ebp], 1
	jle	SHORT $LN7@Insert_n

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$144845[ebp]
	mov	ecx, DWORD PTR __Newvec$144844[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR __Newvec$144844[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXPAPAVCommand@DRAMsimII@@0@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Destroy
$LN7@Insert_n:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$144846[ebp], 0
	jle	SHORT $LN6@Insert_n

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	eax, DWORD PTR __Whereoff$144845[ebp]
	mov	ecx, DWORD PTR __Newvec$144844[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR __Whereoff$144845[ebp]
	mov	eax, DWORD PTR __Newvec$144844[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXPAPAVCommand@DRAMsimII@@0@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Destroy
$LN6@Insert_n:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$144844[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@PAVCommand@DRAMsimII@@@std@@QAEXPAPAVCommand@DRAMsimII@@I@Z ; std::allocator<DRAMsimII::Command *>::deallocate

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, __tryend$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z$1
	ret	0
$LN21@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
__tryend$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z$1:

; 1193 : 
; 1194 : 			_Count += size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN5@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXPAPAVCommand@DRAMsimII@@0@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@PAVCommand@DRAMsimII@@@std@@QAEXPAPAVCommand@DRAMsimII@@I@Z ; std::allocator<DRAMsimII::Command *>::deallocate
$LN5@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base_secure@std@@QBEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$144844[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$144844[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$144844[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	$LN13@Insert_n
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR __Where$[ebp+8]
	sar	ecx, 2
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$144859[ebp], ecx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp+8]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAVCommand@DRAMsimII@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@PAPAV23@00@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Umove<DRAMsimII::Command * *>

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 3

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$144859[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, DWORD PTR __Where$[ebp+8]
	sar	edx, 2
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@PAPAV34@IABQAV34@@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Ufill
	jmp	SHORT $LN23@Insert_n
__catch$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+8]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXPAPAVCommand@DRAMsimII@@0@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, __tryend$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z$3
	ret	0
$LN23@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
__tryend$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IBEXPAPAVCommand@DRAMsimII@@0@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Orphan_range

; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	eax, DWORD PTR __Tmp$144859[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, ecx
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	call	??$fill@PAPAVCommand@DRAMsimII@@PAV12@@std@@YAXPAPAVCommand@DRAMsimII@@0ABQAV12@@Z ; std::fill<DRAMsimII::Command * *,DRAMsimII::Command *>
	add	esp, 12					; 0000000cH

; 1232 : 			}
; 1233 : 		else

	jmp	SHORT $LN13@Insert_n
$LN3@Insert_n:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$144869[ebp], ecx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR __Oldend$144870[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Oldend$144870[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Oldend$144870[ebp]
	sub	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAVCommand@DRAMsimII@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@PAPAV23@00@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Umove<DRAMsimII::Command * *>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IBEXPAPAVCommand@DRAMsimII@@0@Z ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Orphan_range

; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$144870[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Oldend$144870[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Where$[ebp+8]
	push	eax
	call	??$_Unchecked_move_backward@PAPAVCommand@DRAMsimII@@PAPAV12@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00@Z ; stdext::_Unchecked_move_backward<DRAMsimII::Command * *,DRAMsimII::Command * *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$144869[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp+8]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	call	??$fill@PAPAVCommand@DRAMsimII@@PAV12@@std@@YAXPAPAVCommand@DRAMsimII@@0ABQAV12@@Z ; std::fill<DRAMsimII::Command * *,DRAMsimII::Command *>
	add	esp, 12					; 0000000cH
$LN13@Insert_n:

; 1249 : 			}
; 1250 : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
$LN18@Insert_n:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@Insert_n
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN36@Insert_n:
	DD	2
	DD	$LN35@Insert_n
$LN35@Insert_n:
	DD	-84					; ffffffacH
	DD	4
	DD	$LN32@Insert_n
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN33@Insert_n
$LN33@Insert_n:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN32@Insert_n:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z$4:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__ehhandler$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-312]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@IABQAVCommand@DRAMsimII@@@Z ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Insert_n
PUBLIC	??$unchecked_uninitialized_fill_n@PAPAVCommand@DRAMsimII@@IPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@stdext@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?_Ufill@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@PAPAV34@IABQAV34@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@PAPAV34@IABQAV34@@Z PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$unchecked_uninitialized_fill_n@PAPAVCommand@DRAMsimII@@IPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@stdext@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
	add	esp, 16					; 00000010H

; 1255 : 		return (_Ptr + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 1256 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@PAPAV34@IABQAV34@@Z ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Ufill
_TEXT	ENDS
EXTRN	__imp_??0_Container_base_secure@std@@QAE@XZ:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_empty@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE@V?$allocator@PAVCommand@DRAMsimII@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
??0?$_Container_base_aux_alloc_empty@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE@V?$allocator@PAVCommand@DRAMsimII@@@1@@Z PROC ; std::_Container_base_aux_alloc_empty<std::allocator<DRAMsimII::Command *> >::_Container_base_aux_alloc_empty<std::allocator<DRAMsimII::Command *> >, COMDAT
; _this$ = ecx

; 618  : 	explicit _Container_base_aux_alloc_empty(_Alloc) { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_Container_base_secure@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Container_base_aux_alloc_empty@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAE@V?$allocator@PAVCommand@DRAMsimII@@@1@@Z ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<DRAMsimII::Command *> >::_Container_base_aux_alloc_empty<std::allocator<DRAMsimII::Command *> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVCommand@DRAMsimII@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAVCommand@DRAMsimII@@@std@@QAE@ABV01@@Z PROC ; std::allocator<DRAMsimII::Command *>::allocator<DRAMsimII::Command *>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@PAVCommand@DRAMsimII@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<DRAMsimII::Command *>::allocator<DRAMsimII::Command *>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAVCommand@DRAMsimII@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -220						; size = 4
__Count$ = -20						; size = 4
_this$ = -8						; size = 4
?max_size@?$allocator@PAVCommand@DRAMsimII@@@std@@QBEIXZ PROC ; std::allocator<DRAMsimII::Command *>::max_size, COMDAT
; _this$ = ecx

; 164  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 166  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size:
	mov	eax, DWORD PTR tv65[ebp]

; 167  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVCommand@DRAMsimII@@@std@@QBEIXZ ENDP ; std::allocator<DRAMsimII::Command *>::max_size
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator+=
PUBLIC	??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??H?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??H?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV01@H@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??H?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV01@H@Z$0
__ehfuncinfo$??H?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV01@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??H?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV01@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??H?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
$T160818 = -244						; size = 4
__Tmp$ = -40						; size = 12
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??H?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV01@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T160818[ebp], 0

; 381  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator+=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T160818[ebp]
	or	ecx, 1
	mov	DWORD PTR $T160818[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@operator@7
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN9@operator@7:
	DD	1
	DD	$LN8@operator@7
$LN8@operator@7:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN6@operator@7
$LN6@operator@7:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??H?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV01@H@Z$0:
	lea	ecx, DWORD PTR __Tmp$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$??H?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV01@H@Z$1:
	mov	eax, DWORD PTR $T160818[ebp]
	and	eax, 1
	je	$LN5@operator@7
	and	DWORD PTR $T160818[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
$LN5@operator@7:
	ret	0
__ehhandler$??H?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV01@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-252]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??H?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV01@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??H?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator+
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
_TEXT	ENDS
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BAE@MEKPMNPH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@ ; `string'
PUBLIC	??0?$_Ranit@PAVCommand@DRAMsimII@@HPBQAV12@ABQAV12@@std@@QAE@XZ ; std::_Ranit<DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &>::_Ranit<DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &>
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAE@MEKPMNPH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1BAE@MEKPMNPH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 'D', 00H, 'R', 00H, 'A', 00H, 'M', 00H, 's', 00H, 'i'
	DB	00H, 'm', 00H, 'I', 00H, 'I', 00H, ':', 00H, ':', 00H, 'C', 00H
	DB	'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'd', 00H, ' '
	DB	00H, '*', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 'D', 00H, 'R', 00H, 'A', 00H
	DB	'M', 00H, 's', 00H, 'i', 00H, 'm', 00H, 'I', 00H, 'I', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H
	DB	'n', 00H, 'd', 00H, ' ', 00H, '*', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@
CONST	SEGMENT
??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@ DB '('
	DB	00H, '"', 00H, '_', 00H, 'P', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, '(', 00H, '(', 00H, '(', 00H, '_', 00H, 'M'
	DB	00H, 'y', 00H, 'v', 00H, 'e', 00H, 'c', 00H, ' ', 00H, '*', 00H
	DB	')', 00H, '_', 00H, 'P', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ')', 00H, '-', 00H, '>', 00H, '_', 00H
	DB	'M', 00H, 'y', 00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H
	DB	't', 00H, 'r', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '_'
	DB	00H, 'P', 00H, 't', 00H, 'r', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, '(', 00H, '(', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'v'
	DB	00H, 'e', 00H, 'c', 00H, ' ', 00H, '*', 00H, ')', 00H, '_', 00H
	DB	'P', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, ')', 00H, '-', 00H, '>', 00H, '_', 00H, 'M', 00H, 'y', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 't', 00H, ')', 00H, '"', 00H, ','
	DB	00H, ' ', 00H, '0', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z PROC ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >, COMDAT
; _this$ = ecx

; 68   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@PAVCommand@DRAMsimII@@HPBQAV12@ABQAV12@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 69   : 		{	// construct with pointer _Ptr
; 70   : 		_SCL_SECURE_VALIDATE(_Pvector == NULL || (((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast));

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN2@Vector_con
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jbe	SHORT $LN2@Vector_con
$LN1@Vector_con:
	xor	eax, eax
	jne	SHORT $LN5@Vector_con
	mov	esi, esp
	push	OFFSET ??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@
	push	0
	push	70					; 00000046H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@Vector_con
	int	3
$LN5@Vector_con:
	mov	esi, esp
	push	0
	push	70					; 00000046H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1BAE@MEKPMNPH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Vector_con:

; 71   : 		this->_Adopt(_Pvector);

	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z ; std::_Iterator_base::_Adopt

; 72   : 		_Myptr = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 73   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Ranit@PAVCommand@DRAMsimII@@HPBQAV12@ABQAV12@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z ENDP ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
PUBLIC	??_C@_1OG@DBCBKNN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@ ; `string'
PUBLIC	??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1OG@DBCBKNN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1OG@DBCBKNN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 'D', 00H, 'R', 00H, 'A', 00H, 'M', 00H, 's', 00H, 'i'
	DB	00H, 'm', 00H, 'I', 00H, 'I', 00H, ':', 00H, ':', 00H, 'C', 00H
	DB	'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'd', 00H, ' '
	DB	00H, '*', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 'D', 00H, 'R', 00H, 'A', 00H
	DB	'M', 00H, 's', 00H, 'i', 00H, 'm', 00H, 'I', 00H, 'I', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H
	DB	'n', 00H, 'd', 00H, ' ', 00H, '*', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ':', 00H, ':', 00H, '_', 00H, 'C', 00H, 'o', 00H, 'm', 00H
	DB	'p', 00H, 'a', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@
CONST	SEGMENT
??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@ DB '('
	DB	00H, '"', 00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H
	DB	'a', 00H, 'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+'
	DB	00H, ' ', 00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H
	DB	'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H
	DB	'A', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, '"', 00H, ',', 00H, ' ', 00H, '0', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Compat, COMDAT
; _this$ = ecx

; 248  : 		{	// test for compatible iterator pair

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 249  : 		if (this->_Mycont == 0 || this->_Mycont != _Right._Mycont)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Compat
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN3@Compat
$LN1@Compat:

; 250  : 			{
; 251  : 			_DEBUG_ERROR("vector iterators incompatible");

	mov	esi, esp
	push	251					; 000000fbH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 252  : 			_SCL_SECURE_INVALID_ARGUMENT;

	xor	eax, eax
	jne	SHORT $LN5@Compat
	mov	esi, esp
	push	OFFSET ??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@
	push	0
	push	252					; 000000fcH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@Compat
	int	3
$LN5@Compat:
	mov	esi, esp
	push	0
	push	252					; 000000fcH
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1OG@DBCBKNN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Compat:

; 253  : 			}
; 254  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Compat
_TEXT	ENDS
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVCommand@DRAMsimII@@HPBQAV34@ABQAV34@V_Iterator_base@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &,std::_Iterator_base>::_Iterator_with_base<std::random_access_iterator_tag,DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &,std::_Iterator_base>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0?$_Ranit@PAVCommand@DRAMsimII@@HPBQAV12@ABQAV12@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_Ranit@PAVCommand@DRAMsimII@@HPBQAV12@ABQAV12@@std@@QAE@XZ PROC ; std::_Ranit<DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &>::_Ranit<DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVCommand@DRAMsimII@@HPBQAV34@ABQAV34@V_Iterator_base@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@PAVCommand@DRAMsimII@@HPBQAV12@ABQAV12@@std@@QAE@XZ ENDP ; std::_Ranit<DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &>::_Ranit<DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &>
_TEXT	ENDS
PUBLIC	??0_Iterator_base@std@@QAE@XZ			; std::_Iterator_base::_Iterator_base
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVCommand@DRAMsimII@@HPBQAV34@ABQAV34@V_Iterator_base@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVCommand@DRAMsimII@@HPBQAV34@ABQAV34@V_Iterator_base@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &,std::_Iterator_base>::_Iterator_with_base<std::random_access_iterator_tag,DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &,std::_Iterator_base>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::_Iterator_base
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@PAVCommand@DRAMsimII@@HPBQAV34@ABQAV34@V_Iterator_base@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &,std::_Iterator_base>::_Iterator_with_base<std::random_access_iterator_tag,DRAMsimII::Command *,int,DRAMsimII::Command * const *,DRAMsimII::Command * const &,std::_Iterator_base>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Iterator_base@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Iterator_base@std@@QAE@XZ PROC			; std::_Iterator_base::_Iterator_base, COMDAT
; _this$ = ecx

; 138  : 		{	// construct orphaned iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 139  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base@std@@QAE@XZ ENDP			; std::_Iterator_base::_Iterator_base
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?_Make_iter@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Make_iter@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?_Make_iter@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@@Z$0
__ehfuncinfo$?_Make_iter@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Make_iter@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ?_Make_iter@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@@Z
_TEXT	SEGMENT
$T160857 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
?_Make_iter@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@@Z PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Make_iter@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T160857[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@PAPAVCommand@DRAMsimII@@PBV_Container_base_secure@1@@Z ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
	mov	edx, DWORD PTR $T160857[ebp]
	or	edx, 1
	mov	DWORD PTR $T160857[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Make_iter@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@@Z$0:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$?_Make_iter@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@@Z$1:
	mov	eax, DWORD PTR $T160857[ebp]
	and	eax, 1
	je	$LN5@Make_iter
	and	DWORD PTR $T160857[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
$LN5@Make_iter:
	ret	0
__ehhandler$?_Make_iter@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Make_iter@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Make_iter@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@V?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@2@@Z ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Make_iter
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ?_Orphan_range@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IBEXPAPAVCommand@DRAMsimII@@0@Z
_TEXT	SEGMENT
__Pnext$ = -32						; size = 4
__Lock$ = -20						; size = 4
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IBEXPAPAVCommand@DRAMsimII@@0@Z PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1275 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1276 : 		_Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1277 : 		const_iterator **_Pnext = (const_iterator **)&this->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __Pnext$[ebp], eax
$LN5@Orphan_ran:

; 1278 : 		while (*_Pnext != 0)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@Orphan_ran

; 1279 : 			if ((*_Pnext)->_Myptr < _First || _Last < (*_Pnext)->_Myptr)

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Last$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN3@Orphan_ran
$LN2@Orphan_ran:

; 1280 : 				_Pnext = (const_iterator **)&(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx

; 1281 : 			else

	jmp	SHORT $LN1@Orphan_ran
$LN3@Orphan_ran:

; 1282 : 				{	// orphan the iterator
; 1283 : 				(*_Pnext)->_Mycont = 0;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], 0

; 1284 : 				*_Pnext = (const_iterator *)(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN1@Orphan_ran:

; 1285 : 				}

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 1286 : 		}

	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN11@Orphan_ran:
	DD	1
	DD	$LN10@Orphan_ran
$LN10@Orphan_ran:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@Orphan_ran
$LN9@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_range@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IBEXPAPAVCommand@DRAMsimII@@0@Z ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Orphan_range
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator+=
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??Y?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator+=

; 376  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 377  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator+=
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??M?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??M?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator<, COMDAT
; _this$ = ecx

; 220  : 		{	// test if this < _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 221  : 
; 222  :  #if _HAS_ITERATOR_DEBUGGING
; 223  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Compat

; 224  :  #else
; 225  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 226  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 227  : 
; 228  : 		return (_Myptr < _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	sbb	ecx, ecx
	neg	ecx
	call	@_RTC_Check_4_to_1@4

; 229  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??M?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator<
_TEXT	ENDS
PUBLIC	??_C@_1BAC@KBDNDJPK@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$CL?$AA?5?$AA_?$AAO?$AAf?$AAf?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt@ ; `string'
PUBLIC	?_Getmycont@_Iterator_base@std@@QBEPBV_Container_base_secure@2@XZ ; std::_Iterator_base::_Getmycont
PUBLIC	??_C@_1OO@PCFIIDEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1DM@LBMEEJPP@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAH?$AAa?$AAs?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	?_Has_container@_Iterator_base@std@@QBE_NXZ	; std::_Iterator_base::_Has_container
;	COMDAT ??_C@_1BAC@KBDNDJPK@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$CL?$AA?5?$AA_?$AAO?$AAf?$AAf?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt@
CONST	SEGMENT
??_C@_1BAC@KBDNDJPK@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$CL?$AA?5?$AA_?$AAO?$AAf?$AAf?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt@ DB '('
	DB	00H, '"', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'p', 00H, 't', 00H
	DB	'r', 00H, ' ', 00H, '+', 00H, ' ', 00H, '_', 00H, 'O', 00H, 'f'
	DB	00H, 'f', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '(', 00H
	DB	'(', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, ' ', 00H, '*', 00H, ')', 00H, '(', 00H, 't', 00H, 'h', 00H
	DB	'i', 00H, 's', 00H, '-', 00H, '>', 00H, '_', 00H, 'G', 00H, 'e'
	DB	00H, 't', 00H, 'm', 00H, 'y', 00H, 'c', 00H, 'o', 00H, 'n', 00H
	DB	't', 00H, '(', 00H, ')', 00H, ')', 00H, ')', 00H, '-', 00H, '>'
	DB	00H, '_', 00H, 'M', 00H, 'y', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	't', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '_', 00H, 'M'
	DB	00H, 'y', 00H, 'p', 00H, 't', 00H, 'r', 00H, ' ', 00H, '+', 00H
	DB	' ', 00H, '_', 00H, 'O', 00H, 'f', 00H, 'f', 00H, ' ', 00H, '>'
	DB	00H, '=', 00H, ' ', 00H, '(', 00H, '(', 00H, '_', 00H, 'M', 00H
	DB	'y', 00H, 'v', 00H, 'e', 00H, 'c', 00H, ' ', 00H, '*', 00H, ')'
	DB	00H, '(', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H
	DB	'>', 00H, '_', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'm', 00H, 'y'
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, '(', 00H, ')', 00H
	DB	')', 00H, ')', 00H, '-', 00H, '>', 00H, '_', 00H, 'M', 00H, 'y'
	DB	00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't', 00H, '"', 00H
	DB	',', 00H, ' ', 00H, '0', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1OO@PCFIIDEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1OO@PCFIIDEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 'D', 00H, 'R', 00H, 'A', 00H, 'M', 00H, 's', 00H, 'i'
	DB	00H, 'm', 00H, 'I', 00H, 'I', 00H, ':', 00H, ':', 00H, 'C', 00H
	DB	'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'd', 00H, ' '
	DB	00H, '*', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 'D', 00H, 'R', 00H, 'A', 00H
	DB	'M', 00H, 's', 00H, 'i', 00H, 'm', 00H, 'I', 00H, 'I', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H
	DB	'n', 00H, 'd', 00H, ' ', 00H, '*', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '+', 00H, '='
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@LBMEEJPP@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAH?$AAa?$AAs?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@LBMEEJPP@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAH?$AAa?$AAs?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@ DB '('
	DB	00H, '"', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H
	DB	'>', 00H, '_', 00H, 'H', 00H, 'a', 00H, 's', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, 'r', 00H, '(', 00H, ')', 00H, '"', 00H, ',', 00H, ' '
	DB	00H, '0', 00H, ')', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_container@_Iterator_base@std@@QBE_NXZ ; std::_Iterator_base::_Has_container
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@8
	xor	eax, eax
	jne	SHORT $LN6@operator@8
	mov	esi, esp
	push	OFFSET ??_C@_1DM@LBMEEJPP@?$AA?$CI?$AA?$CC?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AA_?$AAH?$AAa?$AAs?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?$CC?$AA?0?$AA?5?$AA0?$AA?$CJ?$AA?$AA@
	push	0
	push	160					; 000000a0H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN6@operator@8
	int	3
$LN6@operator@8:
	mov	esi, esp
	push	0
	push	160					; 000000a0H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1OO@PCFIIDEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@operator@8:

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base@std@@QBEPBV_Container_base_secure@2@XZ ; std::_Iterator_base::_Getmycont
	cmp	esi, DWORD PTR [eax+12]
	ja	SHORT $LN1@operator@8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Off$[ebp]
	lea	esi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getmycont@_Iterator_base@std@@QBEPBV_Container_base_secure@2@XZ ; std::_Iterator_base::_Getmycont
	cmp	esi, DWORD PTR [eax+8]
	jae	SHORT $LN2@operator@8
$LN1@operator@8:
	xor	eax, eax
	jne	SHORT $LN7@operator@8
	mov	esi, esp
	push	OFFSET ??_C@_1BAC@KBDNDJPK@?$AA?$CI?$AA?$CC?$AA_?$AAM?$AAy?$AAp?$AAt?$AAr?$AA?5?$AA?$CL?$AA?5?$AA_?$AAO?$AAf?$AAf?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAt@
	push	0
	push	163					; 000000a3H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN7@operator@8
	int	3
$LN7@operator@8:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	mov	esi, esp
	push	0
	push	163					; 000000a3H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1OO@PCFIIDEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@8:

; 164  : 		_Myptr += _Off;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 165  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 166  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator+=
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Getmycont@_Iterator_base@std@@QBEPBV_Container_base_secure@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getmycont@_Iterator_base@std@@QBEPBV_Container_base_secure@2@XZ PROC ; std::_Iterator_base::_Getmycont, COMDAT
; _this$ = ecx

; 196  : 		{	// This member function always exists when we can get a container pointer

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 197  : 		return _Mycont;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 198  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getmycont@_Iterator_base@std@@QBEPBV_Container_base_secure@2@XZ ENDP ; std::_Iterator_base::_Getmycont
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ?_Has_container@_Iterator_base@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Has_container@_Iterator_base@std@@QBE_NXZ PROC	; std::_Iterator_base::_Has_container, COMDAT
; _this$ = ecx

; 206  : 		{	// This member function always exists when we can get a container pointer

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 207  : 		return _Mycont != 0;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	setne	cl
	call	@_RTC_Check_4_to_1@4

; 208  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Has_container@_Iterator_base@std@@QBE_NXZ ENDP	; std::_Iterator_base::_Has_container
_TEXT	ENDS
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?width@ios_base@std@@QAEHH@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHPBDH@Z:PROC
EXTRN	__imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z:PROC
EXTRN	__imp_?eof@?$char_traits@D@std@@SAHXZ:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?length@?$char_traits@D@std@@SAIPBD@Z:PROC
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\ostream
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv293 = -337						; size = 1
tv286 = -337						; size = 1
tv292 = -336						; size = 4
tv285 = -336						; size = 4
tv291 = -332						; size = 4
tv284 = -332						; size = 4
tv290 = -328						; size = 4
tv288 = -328						; size = 4
tv283 = -328						; size = 4
tv287 = -324						; size = 4
tv136 = -324						; size = 4
tv134 = -324						; size = 4
tv289 = -321						; size = 1
tv282 = -321						; size = 1
$T160887 = -316						; size = 4
$T160888 = -304						; size = 4
$T160889 = -292						; size = 4
$T160890 = -280						; size = 4
$T160891 = -268						; size = 4
__Ok$ = -64						; size = 8
__Pad$ = -48						; size = 4
__Count$ = -36						; size = 4
__State$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 741  : 	{	// insert NTBS into char stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 742  : 	typedef char _Elem;
; 743  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 744  : 	ios_base::iostate _State = ios_base::goodbit;

	mov	DWORD PTR __State$[ebp], 0

; 745  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

	mov	esi, esp
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	DWORD PTR __imp_?length@?$char_traits@D@std@@SAIPBD@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Count$[ebp], eax

; 746  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 747  : 		? 0 : _Ostr.width() - _Count;

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jle	SHORT $LN17@operator@9
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, DWORD PTR __Count$[ebp]
	jle	SHORT $LN17@operator@9
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN18@operator@9
$LN17@operator@9:
	mov	DWORD PTR tv134[ebp], 0
$LN18@operator@9:
	mov	eax, DWORD PTR tv134[ebp]
	mov	DWORD PTR __Pad$[ebp], eax

; 748  : 	const typename _Myos::sentry _Ok(_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 749  : 
; 750  : 	if (!_Ok)

	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN14@operator@9

; 751  : 		_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 752  : 	else

	jmp	$LN13@operator@9
$LN14@operator@9:

; 753  : 		{	// state okay, insert
; 754  : 		_TRY_IO_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 755  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv136[ebp], eax
	mov	eax, DWORD PTR tv136[ebp]
	and	eax, 448				; 000001c0H
	cmp	eax, 64					; 00000040H
	je	$LN11@operator@9
	jmp	SHORT $LN10@operator@9
$LN9@operator@9:

; 756  : 			for (; 0 < _Pad; --_Pad)	// pad on left

	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Pad$[ebp], eax
$LN10@operator@9:
	cmp	DWORD PTR __Pad$[ebp], 0
	jle	$LN11@operator@9

; 757  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 758  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv282[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv283[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv282[ebp]
	push	eax
	mov	ecx, DWORD PTR tv283[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv284[ebp], eax
	mov	ecx, DWORD PTR tv284[ebp]
	mov	DWORD PTR $T160887[ebp], ecx
	mov	esi, esp
	call	DWORD PTR __imp_?eof@?$char_traits@D@std@@SAHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv285[ebp], eax
	mov	edx, DWORD PTR tv285[ebp]
	mov	DWORD PTR $T160888[ebp], edx
	mov	esi, esp
	lea	eax, DWORD PTR $T160887[ebp]
	push	eax
	lea	ecx, DWORD PTR $T160888[ebp]
	push	ecx
	call	DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv286[ebp], al
	movzx	edx, BYTE PTR tv286[ebp]
	test	edx, edx
	je	SHORT $LN7@operator@9

; 759  : 					{	// insertion failed, quit
; 760  : 					_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 761  : 					break;

	jmp	SHORT $LN11@operator@9
$LN7@operator@9:

; 762  : 					}
; 763  : 
; 764  : 		if (_State == ios_base::goodbit

	jmp	$LN9@operator@9
$LN11@operator@9:

; 765  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

	cmp	DWORD PTR __State$[ebp], 0
	jne	SHORT $LN6@operator@9
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv287[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv287[ebp]
	call	DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHPBDH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv288[ebp], eax
	mov	edx, DWORD PTR tv288[ebp]
	cmp	edx, DWORD PTR __Count$[ebp]
	je	SHORT $LN6@operator@9

; 766  : 			_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
$LN6@operator@9:

; 767  : 
; 768  : 		if (_State == ios_base::goodbit)

	cmp	DWORD PTR __State$[ebp], 0
	jne	$LN5@operator@9
	jmp	SHORT $LN4@operator@9
$LN3@operator@9:

; 769  : 			for (; 0 < _Pad; --_Pad)	// pad on right

	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Pad$[ebp], eax
$LN4@operator@9:
	cmp	DWORD PTR __Pad$[ebp], 0
	jle	$LN5@operator@9

; 770  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 771  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv289[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv290[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv289[ebp]
	push	eax
	mov	ecx, DWORD PTR tv290[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv291[ebp], eax
	mov	ecx, DWORD PTR tv291[ebp]
	mov	DWORD PTR $T160889[ebp], ecx
	mov	esi, esp
	call	DWORD PTR __imp_?eof@?$char_traits@D@std@@SAHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv292[ebp], eax
	mov	edx, DWORD PTR tv292[ebp]
	mov	DWORD PTR $T160890[ebp], edx
	mov	esi, esp
	lea	eax, DWORD PTR $T160889[ebp]
	push	eax
	lea	ecx, DWORD PTR $T160890[ebp]
	push	ecx
	call	DWORD PTR __imp_?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv293[ebp], al
	movzx	edx, BYTE PTR tv293[ebp]
	test	edx, edx
	je	SHORT $LN1@operator@9

; 772  : 					{	// insertion failed, quit
; 773  : 					_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 774  : 					break;

	jmp	SHORT $LN5@operator@9
$LN1@operator@9:

; 775  : 					}

	jmp	$LN3@operator@9
$LN5@operator@9:

; 776  : 		_Ostr.width(0);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QAEHH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN19@operator@9
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 777  : 		_CATCH_IO_(_Ostr)

	mov	esi, esp
	push	1
	push	4
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN13@operator@9
	ret	0
$LN19@operator@9:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN13@operator@9:

; 778  : 		}
; 779  : 
; 780  : 	_Ostr.setstate(_State);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 781  : 	return (_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR $T160891[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	mov	eax, DWORD PTR $T160891[ebp]

; 782  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@operator@9
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN28@operator@9:
	DD	1
	DD	$LN27@operator@9
$LN27@operator@9:
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN25@operator@9
$LN25@operator@9:
	DB	95					; 0000005fH
	DB	79					; 0000004fH
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-344]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 95   : 			{	// construct locking and testing stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 96   : 			if (_Ostr.good() && _Ostr.tie() != 0)

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@sentry
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@sentry

; 97   : 				_Ostr.tie()->flush();

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, eax
	call	DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@sentry:

; 98   : 			_Ok = _Ostr.good();	// store test only after flushing tie

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], al

; 99   : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 102  : 			{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 103  : 
; 104  :  #if _HAS_EXCEPTIONS
; 105  : 			if (!_XSTD uncaught_exception())

	mov	esi, esp
	call	DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@sentry@2

; 106  : 				this->_Myostr._Osfx();

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@sentry@2:

; 107  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 115  : 			{	// test if stream state okay

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 116  : 			return (_Ok);

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+4]

; 117  : 			}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
EXTRN	__imp_?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 75   : 			{	// lock the stream buffer, if there

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR [eax], ecx

; 76   : 			if (_Myostr.rdbuf() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@Sentry_bas

; 77   : 				_Myostr.rdbuf()->_Lock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, eax
	call	DWORD PTR __imp_?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Sentry_bas:

; 78   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
EXTRN	__imp_?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 81   : 			{	// destroy after unlocking

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 			if (_Myostr.rdbuf() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@Sentry_bas@2

; 83   : 				_Myostr.rdbuf()->_Unlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, eax
	call	DWORD PTR __imp_?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Sentry_bas@2:

; 84   : 			}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
PUBLIC	??$_Debug_lt@_J_J@std@@YA_NAB_J0PB_WI@Z		; std::_Debug_lt<__int64,__int64>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$max@_J@std@@YAAB_JAB_J0@Z
_TEXT	SEGMENT
tv71 = -208						; size = 4
$T160935 = -200						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@_J@std@@YAAB_JAB_J0@Z PROC			; std::max<__int64>, COMDAT

; 3383 : 	{	// return larger of _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3384 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	push	3384					; 00000d38H
	push	OFFSET ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$_Debug_lt@_J_J@std@@YA_NAB_J0PB_WI@Z	; std::_Debug_lt<__int64,__int64>
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@max
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@max
$LN3@max:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
$LN4@max:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T160935[ebp], edx
	mov	eax, DWORD PTR $T160935[ebp]

; 3385 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$max@_J@std@@YAAB_JAB_J0@Z ENDP			; std::max<__int64>
_TEXT	ENDS
PUBLIC	??$_Debug_lt@HH@std@@YA_NABH0PB_WI@Z		; std::_Debug_lt<int,int>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$max@H@std@@YAABHABH0@Z
_TEXT	SEGMENT
tv71 = -208						; size = 4
$T160940 = -200						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@H@std@@YAABHABH0@Z PROC				; std::max<int>, COMDAT

; 3383 : 	{	// return larger of _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3384 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	push	3384					; 00000d38H
	push	OFFSET ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$_Debug_lt@HH@std@@YA_NABH0PB_WI@Z	; std::_Debug_lt<int,int>
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@max@2
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@max@2
$LN3@max@2:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
$LN4@max@2:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T160940[ebp], edx
	mov	eax, DWORD PTR $T160940[ebp]

; 3385 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$max@H@std@@YAABHABH0@Z ENDP				; std::max<int>
_TEXT	ENDS
PUBLIC	??_C@_01GPOEFGEJ@?7?$AA@			; `string'
PUBLIC	??_C@_08NMFLJNNF@Queue?5S?$FL?$AA@		; `string'
PUBLIC	??_C@_04HCPPBLKA@?$FN?5C?$FL?$AA@		; `string'
PUBLIC	??_C@_04HOKKPEEB@?$FN?5H?$FL?$AA@		; `string'
PUBLIC	??_C@_04GLJGKOFF@?$FN?5T?$FL?$AA@		; `string'
PUBLIC	?dec@std@@YAAAVios_base@1@AAV21@@Z		; std::dec
PUBLIC	??_C@_04GMJPAGIJ@?$FN?5P?$FL?$AA@		; `string'
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@PBX@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z:PROC
;	COMDAT ??_C@_01GPOEFGEJ@?7?$AA@
; File c:\users\crius\documents\visual studio 2008\projects\dramsimiihg\src\queue.h
CONST	SEGMENT
??_C@_01GPOEFGEJ@?7?$AA@ DB 09H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08NMFLJNNF@Queue?5S?$FL?$AA@
CONST	SEGMENT
??_C@_08NMFLJNNF@Queue?5S?$FL?$AA@ DB 'Queue S[', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HCPPBLKA@?$FN?5C?$FL?$AA@
CONST	SEGMENT
??_C@_04HCPPBLKA@?$FN?5C?$FL?$AA@ DB '] C[', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HOKKPEEB@?$FN?5H?$FL?$AA@
CONST	SEGMENT
??_C@_04HOKKPEEB@?$FN?5H?$FL?$AA@ DB '] H[', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GLJGKOFF@?$FN?5T?$FL?$AA@
CONST	SEGMENT
??_C@_04GLJGKOFF@?$FN?5T?$FL?$AA@ DB '] T[', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMJPAGIJ@?$FN?5P?$FL?$AA@
CONST	SEGMENT
??_C@_04GMJPAGIJ@?$FN?5P?$FL?$AA@ DB '] P[', 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??$?6VCommand@DRAMsimII@@@DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABV?$Queue@VCommand@DRAMsimII@@@0@@Z
_TEXT	SEGMENT
tv242 = -232						; size = 4
tv240 = -228						; size = 4
tv238 = -224						; size = 4
tv236 = -220						; size = 4
tv234 = -216						; size = 4
tv232 = -212						; size = 4
tv230 = -208						; size = 4
_i$146944 = -8						; size = 4
_in$ = 8						; size = 4
_theQueue$ = 12						; size = 4
??$?6VCommand@DRAMsimII@@@DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABV?$Queue@VCommand@DRAMsimII@@@0@@Z PROC ; DRAMsimII::operator<<<DRAMsimII::Command>, COMDAT

; 460  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 461  : 		in << "Queue S[" << std::dec << theQueue.entry.size() << "] C[" << std::dec << theQueue.count << "] H[" << std::dec << theQueue.head << "] T[" << std::dec << theQueue.tail << "] P[" << theQueue.pool << "]" << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	push	OFFSET ??_C@_01LBDDMOBJ@?$FN?$AA@
	mov	edi, esp
	mov	ecx, DWORD PTR _theQueue$[ebp]
	movzx	edx, BYTE PTR [ecx+32]
	push	edx
	push	OFFSET ??_C@_04GMJPAGIJ@?$FN?5P?$FL?$AA@
	mov	ebx, esp
	mov	eax, DWORD PTR _theQueue$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	eax, esp
	push	OFFSET ?dec@std@@YAAAVios_base@1@AAV21@@Z ; std::dec
	push	OFFSET ??_C@_04GLJGKOFF@?$FN?5T?$FL?$AA@
	mov	ecx, esp
	mov	edx, DWORD PTR _theQueue$[ebp]
	mov	edx, DWORD PTR [edx+4]
	push	edx
	mov	edx, esp
	push	OFFSET ?dec@std@@YAAAVios_base@1@AAV21@@Z ; std::dec
	push	OFFSET ??_C@_04HOKKPEEB@?$FN?5H?$FL?$AA@
	mov	DWORD PTR tv230[ebp], esi
	mov	esi, esp
	mov	DWORD PTR tv232[ebp], edi
	mov	edi, DWORD PTR _theQueue$[ebp]
	mov	edi, DWORD PTR [edi]
	push	edi
	mov	edi, esp
	push	OFFSET ?dec@std@@YAAAVios_base@1@AAV21@@Z ; std::dec
	push	OFFSET ??_C@_04HCPPBLKA@?$FN?5C?$FL?$AA@
	mov	DWORD PTR tv234[ebp], ebx
	mov	ebx, DWORD PTR _theQueue$[ebp]
	add	ebx, 12					; 0000000cH
	mov	DWORD PTR tv236[ebp], ecx
	mov	ecx, ebx
	mov	DWORD PTR tv238[ebp], eax
	mov	DWORD PTR tv240[ebp], edx
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	mov	ebx, esp
	push	eax
	mov	eax, esp
	push	OFFSET ?dec@std@@YAAAVios_base@1@AAV21@@Z ; std::dec
	push	OFFSET ??_C@_08NMFLJNNF@Queue?5S?$FL?$AA@
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	DWORD PTR tv242[ebp], eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z
	mov	ecx, DWORD PTR tv242[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	cmp	ebx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z
	mov	esi, DWORD PTR tv240[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	mov	esi, DWORD PTR tv236[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAVios_base@1@AAV21@@Z@Z
	mov	esi, DWORD PTR tv238[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	mov	esi, DWORD PTR tv234[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@_N@Z
	mov	esi, DWORD PTR tv232[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	mov	esi, DWORD PTR tv230[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp

; 462  : 		if (theQueue.entry.size())

	mov	ecx, DWORD PTR _theQueue$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEIXZ ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::size
	test	eax, eax
	je	SHORT $LN4@operator@10

; 463  : 		{
; 464  : 			for (unsigned i = 0; i < theQueue.count; i++)

	mov	DWORD PTR _i$146944[ebp], 0
	jmp	SHORT $LN3@operator@10
$LN2@operator@10:
	mov	eax, DWORD PTR _i$146944[ebp]
	add	eax, 1
	mov	DWORD PTR _i$146944[ebp], eax
$LN3@operator@10:
	mov	eax, DWORD PTR _theQueue$[ebp]
	mov	ecx, DWORD PTR _i$146944[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN4@operator@10

; 465  : 			{
; 466  : 				in << "\t" << theQueue[i] << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR _i$146944[ebp]
	push	ecx
	mov	ecx, DWORD PTR _theQueue$[ebp]
	call	??A?$Queue@VCommand@DRAMsimII@@@DRAMsimII@@QBEPBVCommand@1@I@Z ; DRAMsimII::Queue<DRAMsimII::Command>::operator[]
	mov	edi, esp
	push	eax
	push	OFFSET ??_C@_01GPOEFGEJ@?7?$AA@
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@PBX@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 467  : 			}

	jmp	SHORT $LN2@operator@10
$LN4@operator@10:

; 468  : 		}
; 469  : 		return in;

	mov	eax, DWORD PTR _in$[ebp]

; 470  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?6VCommand@DRAMsimII@@@DRAMsimII@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AAV12@ABV?$Queue@VCommand@DRAMsimII@@@0@@Z ENDP ; DRAMsimII::operator<<<DRAMsimII::Command>
_TEXT	ENDS
EXTRN	__imp_?setf@ios_base@std@@QAEHHH@Z:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\ios
;	COMDAT ?dec@std@@YAAAVios_base@1@AAV21@@Z
_TEXT	SEGMENT
__Iosbase$ = 8						; size = 4
?dec@std@@YAAAVios_base@1@AAV21@@Z PROC			; std::dec, COMDAT

; 178  : 	{	// set basefield to dec

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 179  : 	_Iosbase.setf(ios_base::dec, ios_base::basefield);

	mov	esi, esp
	push	3584					; 00000e00H
	push	512					; 00000200H
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	DWORD PTR __imp_?setf@ios_base@std@@QAEHHH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 180  : 	return (_Iosbase);

	mov	eax, DWORD PTR __Iosbase$[ebp]

; 181  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?dec@std@@YAAAVios_base@1@AAV21@@Z ENDP			; std::dec
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z ; stdext::_Unchecked_uninitialized_move<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??$_Umove@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@0PAPAV23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Umove@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@0PAPAV23@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Umove@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@0PAPAV23@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Umove@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@0PAPAV23@@Z$2
__ehfuncinfo$??$_Umove@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@0PAPAV23@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Umove@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@0PAPAV23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Umove@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@0PAPAV23@@Z
_TEXT	SEGMENT
tv139 = -268						; size = 4
tv142 = -264						; size = 4
tv138 = -260						; size = 4
tv145 = -256						; size = 4
$T160949 = -248						; size = 4
$T160950 = -236						; size = 4
$T160951 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Ptr$ = 32						; size = 4
??$_Umove@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@0PAPAV23@@Z PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Umove<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Umove@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@0PAPAV23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T160950[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv145[ebp], eax
	mov	eax, DWORD PTR tv145[ebp]
	mov	DWORD PTR tv138[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T160951[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv142[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Unchecked_uninitialized_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z ; stdext::_Unchecked_uninitialized_move<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv139[ebp], eax
	mov	eax, DWORD PTR tv139[ebp]
	mov	DWORD PTR $T160949[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T160949[ebp]

; 1149 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Umove@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@0PAPAV23@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Umove@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@0PAPAV23@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Umove@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@0PAPAV23@@Z$2:
	mov	ecx, DWORD PTR $T160950[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__ehhandler$??$_Umove@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@0PAPAV23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Umove@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@0PAPAV23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Umove@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@0PAPAV23@@Z ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Umove<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
PUBLIC	??$_Destroy_range@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAXPAPAVCommand@DRAMsimII@@0AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<DRAMsimII::Command *> >
PUBLIC	??$_Ptr_cat@PAPAVCommand@DRAMsimII@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVCommand@DRAMsimII@@0@Z ; std::_Ptr_cat<DRAMsimII::Command * *,DRAMsimII::Command * *>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAXPAPAVCommand@DRAMsimII@@0AAV?$allocator@PAVCommand@DRAMsimII@@@0@@Z
_TEXT	SEGMENT
$T160964 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAXPAPAVCommand@DRAMsimII@@0AAV?$allocator@PAVCommand@DRAMsimII@@@0@@Z PROC ; std::_Destroy_range<std::allocator<DRAMsimII::Command *> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAPAVCommand@DRAMsimII@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVCommand@DRAMsimII@@0@Z ; std::_Ptr_cat<DRAMsimII::Command * *,DRAMsimII::Command * *>
	add	esp, 8
	mov	BYTE PTR $T160964[ebp], al
	movzx	edx, BYTE PTR $T160964[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAXPAPAVCommand@DRAMsimII@@0AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<DRAMsimII::Command *> >
	add	esp, 16					; 00000010H

; 226  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAXPAPAVCommand@DRAMsimII@@0AAV?$allocator@PAVCommand@DRAMsimII@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<DRAMsimII::Command *> >
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Allocate@PAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@IPAPAV12@@Z
_TEXT	SEGMENT
$T160967 = -208						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@IPAPAV12@@Z PROC ; std::_Allocate<DRAMsimII::Command *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	push	0
	lea	ecx, DWORD PTR $T160967[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T160967[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@IPAPAV12@@Z ENDP ; std::_Allocate<DRAMsimII::Command *>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
; File c:\program files\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ		; std::bad_alloc::~bad_alloc
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAPAVCommand@DRAMsimII@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<DRAMsimII::Command * *,DRAMsimII::Command * *,std::random_access_iterator_tag>
PUBLIC	??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@@Z ; std::_Checked_base<DRAMsimII::Command * *>
PUBLIC	??$_Iter_random@PAPAVCommand@DRAMsimII@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCommand@DRAMsimII@@0@Z ; std::_Iter_random<DRAMsimII::Command * *,DRAMsimII::Command * *>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVCommand@DRAMsimII@@PAPAV12@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00@Z
_TEXT	SEGMENT
$T160979 = -221						; size = 1
$T160980 = -209						; size = 1
$T160981 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCommand@DRAMsimII@@PAPAV12@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00@Z PROC ; stdext::unchecked_copy<DRAMsimII::Command * *,DRAMsimII::Command * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T160979[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVCommand@DRAMsimII@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVCommand@DRAMsimII@@0@Z ; std::_Ptr_cat<DRAMsimII::Command * *,DRAMsimII::Command * *>
	add	esp, 8
	mov	BYTE PTR $T160980[ebp], al
	movzx	eax, BYTE PTR $T160979[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T160980[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T160981[ebp]
	push	ecx
	call	??$_Iter_random@PAPAVCommand@DRAMsimII@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCommand@DRAMsimII@@0@Z ; std::_Iter_random<DRAMsimII::Command * *,DRAMsimII::Command * *>
	add	esp, 12					; 0000000cH
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@@Z ; std::_Checked_base<DRAMsimII::Command * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@@Z ; std::_Checked_base<DRAMsimII::Command * *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAPAVCommand@DRAMsimII@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<DRAMsimII::Command * *,DRAMsimII::Command * *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 3607 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCommand@DRAMsimII@@PAPAV12@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00@Z ENDP ; stdext::unchecked_copy<DRAMsimII::Command * *,DRAMsimII::Command * *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<DRAMsimII::Command * *,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVCommand@DRAMsimII@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@PAPAV23@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVCommand@DRAMsimII@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@PAPAV23@00@Z PROC ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Umove<DRAMsimII::Command * *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_uninitialized_move@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<DRAMsimII::Command * *,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >
	add	esp, 16					; 00000010H

; 1149 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAPAVCommand@DRAMsimII@@@?$vector@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@IAEPAPAVCommand@DRAMsimII@@PAPAV23@00@Z ENDP ; std::vector<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Umove<DRAMsimII::Command * *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAPAVCommand@DRAMsimII@@PAV12@@std@@YAXPAPAVCommand@DRAMsimII@@0ABQAV12@@Z ; std::_Fill<DRAMsimII::Command * *,DRAMsimII::Command *>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAPAVCommand@DRAMsimII@@PAV12@@std@@YAXPAPAVCommand@DRAMsimII@@0ABQAV12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAPAVCommand@DRAMsimII@@PAV12@@std@@YAXPAPAVCommand@DRAMsimII@@0ABQAV12@@Z PROC ; std::fill<DRAMsimII::Command * *,DRAMsimII::Command *>, COMDAT

; 3186 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@@Z ; std::_Checked_base<DRAMsimII::Command * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@@Z ; std::_Checked_base<DRAMsimII::Command * *>
	add	esp, 4
	push	eax
	call	??$_Fill@PAPAVCommand@DRAMsimII@@PAV12@@std@@YAXPAPAVCommand@DRAMsimII@@0ABQAV12@@Z ; std::_Fill<DRAMsimII::Command * *,DRAMsimII::Command *>
	add	esp, 12					; 0000000cH

; 3188 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$fill@PAPAVCommand@DRAMsimII@@PAV12@@std@@YAXPAPAVCommand@DRAMsimII@@0ABQAV12@@Z ENDP ; std::fill<DRAMsimII::Command * *,DRAMsimII::Command *>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAPAVCommand@DRAMsimII@@PAPAV12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<DRAMsimII::Command * *,DRAMsimII::Command * *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Move_cat@PAPAVCommand@DRAMsimII@@@std@@YA?AU_Undefined_move_tag@0@ABQAPAVCommand@DRAMsimII@@@Z ; std::_Move_cat<DRAMsimII::Command * *>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$_Unchecked_move_backward@PAPAVCommand@DRAMsimII@@PAPAV12@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00@Z
_TEXT	SEGMENT
$T160988 = -221						; size = 1
$T160989 = -209						; size = 1
$T160990 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAPAVCommand@DRAMsimII@@PAPAV12@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00@Z PROC ; stdext::_Unchecked_move_backward<DRAMsimII::Command * *,DRAMsimII::Command * *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T160988[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAPAVCommand@DRAMsimII@@@std@@YA?AU_Undefined_move_tag@0@ABQAPAVCommand@DRAMsimII@@@Z ; std::_Move_cat<DRAMsimII::Command * *>
	add	esp, 4
	mov	BYTE PTR $T160989[ebp], al
	movzx	edx, BYTE PTR $T160988[ebp]
	push	edx
	movzx	eax, BYTE PTR $T160989[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T160990[ebp]
	push	eax
	call	??$_Iter_random@PAPAVCommand@DRAMsimII@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCommand@DRAMsimII@@0@Z ; std::_Iter_random<DRAMsimII::Command * *,DRAMsimII::Command * *>
	add	esp, 12					; 0000000cH
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@@Z ; std::_Checked_base<DRAMsimII::Command * *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@@Z ; std::_Checked_base<DRAMsimII::Command * *>
	add	esp, 4
	push	eax
	call	??$_Move_backward_opt@PAPAVCommand@DRAMsimII@@PAPAV12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<DRAMsimII::Command * *,DRAMsimII::Command * *,std::random_access_iterator_tag,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 3697 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAPAVCommand@DRAMsimII@@PAPAV12@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00@Z ENDP ; stdext::_Unchecked_move_backward<DRAMsimII::Command * *,DRAMsimII::Command * *>
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAPAVCommand@DRAMsimII@@IPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAPAVCommand@DRAMsimII@@IPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@stdext@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@std@@@Z
_TEXT	SEGMENT
$T160993 = -209						; size = 1
$T160994 = -197						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAPAVCommand@DRAMsimII@@IPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@stdext@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T160993[ebp], al
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVCommand@DRAMsimII@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVCommand@DRAMsimII@@0@Z ; std::_Ptr_cat<DRAMsimII::Command * *,DRAMsimII::Command * *>
	add	esp, 8
	mov	BYTE PTR $T160994[ebp], al
	movzx	eax, BYTE PTR $T160993[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T160994[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAPAVCommand@DRAMsimII@@IPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
	add	esp, 24					; 00000018H

; 943  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_fill_n@PAPAVCommand@DRAMsimII@@IPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@stdext@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
_TEXT	ENDS
PUBLIC	??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
CONST	SEGMENT
??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??$_Debug_lt@_J_J@std@@YA_NAB_J0PB_WI@Z
_TEXT	SEGMENT
tv85 = -200						; size = 4
tv72 = -200						; size = 4
tv84 = -196						; size = 4
tv71 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
__Where$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_lt@_J_J@std@@YA_NAB_J0PB_WI@Z PROC		; std::_Debug_lt<__int64,__int64>, COMDAT

; 260  : 	{	// test if _Left < _Right and operator< is strict weak ordering

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 261  : 	if (!(_Left < _Right))

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv71[ebp]
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN3@Debug_lt
	jg	SHORT $LN6@Debug_lt
	mov	edx, DWORD PTR tv71[ebp]
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jb	SHORT $LN3@Debug_lt
$LN6@Debug_lt:

; 262  : 		return (false);

	xor	al, al
	jmp	SHORT $LN4@Debug_lt
	jmp	SHORT $LN2@Debug_lt
$LN3@Debug_lt:

; 263  : 	else if (_Right < _Left)

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv84[ebp], eax
	mov	DWORD PTR tv85[ebp], ecx
	mov	edx, DWORD PTR tv84[ebp]
	mov	eax, DWORD PTR tv85[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jg	SHORT $LN2@Debug_lt
	jl	SHORT $LN7@Debug_lt
	mov	edx, DWORD PTR tv84[ebp]
	mov	eax, DWORD PTR tv85[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN2@Debug_lt
$LN7@Debug_lt:

; 264  : 		_DEBUG_ERROR2("invalid operator<", _Where, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Debug_lt:

; 265  : 	return (true);

	mov	al, 1
$LN4@Debug_lt:

; 266  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_lt@_J_J@std@@YA_NAB_J0PB_WI@Z ENDP		; std::_Debug_lt<__int64,__int64>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Debug_lt@HH@std@@YA_NABH0PB_WI@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
__Where$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_lt@HH@std@@YA_NABH0PB_WI@Z PROC		; std::_Debug_lt<int,int>, COMDAT

; 260  : 	{	// test if _Left < _Right and operator< is strict weak ordering

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 261  : 	if (!(_Left < _Right))

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jl	SHORT $LN3@Debug_lt@2

; 262  : 		return (false);

	xor	al, al
	jmp	SHORT $LN4@Debug_lt@2
	jmp	SHORT $LN2@Debug_lt@2
$LN3@Debug_lt@2:

; 263  : 	else if (_Right < _Left)

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN2@Debug_lt@2

; 264  : 		_DEBUG_ERROR2("invalid operator<", _Where, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Debug_lt@2:

; 265  : 	return (true);

	mov	al, 1
$LN4@Debug_lt@2:

; 266  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_lt@HH@std@@YA_NABH0PB_WI@Z ENDP		; std::_Debug_lt<int,int>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@U_Undefined_move_tag@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *>,std::_Undefined_move_tag>
PUBLIC	??$_Checked_base@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@AAV10@@Z ; std::_Checked_base<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__unwindtable$??$_Unchecked_uninitialized_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Unchecked_uninitialized_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Unchecked_uninitialized_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Unchecked_uninitialized_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z$2
__ehfuncinfo$??$_Unchecked_uninitialized_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Unchecked_uninitialized_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Unchecked_uninitialized_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z
_TEXT	SEGMENT
tv143 = -280						; size = 4
tv146 = -276						; size = 4
tv142 = -272						; size = 4
tv149 = -268						; size = 4
$T161003 = -260						; size = 4
$T161004 = -245						; size = 1
$T161005 = -233						; size = 1
$T161006 = -224						; size = 4
$T161007 = -212						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Dest$ = 32						; size = 4
__Al$ = 36						; size = 4
??$_Unchecked_uninitialized_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z PROC ; stdext::_Unchecked_uninitialized_move<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Unchecked_uninitialized_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T161004[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAPAVCommand@DRAMsimII@@@std@@YA?AU_Undefined_move_tag@0@ABQAPAVCommand@DRAMsimII@@@Z ; std::_Move_cat<DRAMsimII::Command * *>
	add	esp, 4
	mov	BYTE PTR $T161005[ebp], al
	movzx	edx, BYTE PTR $T161004[ebp]
	push	edx
	movzx	eax, BYTE PTR $T161005[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T161006[ebp], esp
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	push	eax
	call	??$_Checked_base@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@AAV10@@Z ; std::_Checked_base<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
	add	esp, 8
	mov	DWORD PTR tv149[ebp], eax
	mov	edx, DWORD PTR tv149[ebp]
	mov	DWORD PTR tv142[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T161007[ebp], esp
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	push	eax
	call	??$_Checked_base@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@AAV10@@Z ; std::_Checked_base<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
	add	esp, 8
	mov	DWORD PTR tv146[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Uninit_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@U_Undefined_move_tag@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *>,std::_Undefined_move_tag>
	add	esp, 40					; 00000028H
	mov	DWORD PTR tv143[ebp], eax
	mov	edx, DWORD PTR tv143[ebp]
	mov	DWORD PTR $T161003[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T161003[ebp]

; 865  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Unchecked_uninitialized_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Unchecked_uninitialized_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Unchecked_uninitialized_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z$2:
	mov	ecx, DWORD PTR $T161006[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__ehhandler$??$_Unchecked_uninitialized_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-284]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Unchecked_uninitialized_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Unchecked_uninitialized_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z ENDP ; stdext::_Unchecked_uninitialized_move<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAPAVCommand@DRAMsimII@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVCommand@DRAMsimII@@0@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAPAVCommand@DRAMsimII@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVCommand@DRAMsimII@@0@Z PROC ; std::_Ptr_cat<DRAMsimII::Command * *,DRAMsimII::Command * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Ptr_cat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Ptr_cat:
	DD	1
	DD	$LN4@Ptr_cat
$LN4@Ptr_cat:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Ptr_cat
$LN3@Ptr_cat:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Ptr_cat@PAPAVCommand@DRAMsimII@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVCommand@DRAMsimII@@0@Z ENDP ; std::_Ptr_cat<DRAMsimII::Command * *,DRAMsimII::Command * *>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAXPAPAVCommand@DRAMsimII@@0AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAXPAPAVCommand@DRAMsimII@@0AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<DRAMsimII::Command *> >, COMDAT

; 241  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 242  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAXPAPAVCommand@DRAMsimII@@0AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<DRAMsimII::Command *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<DRAMsimII::Command * *>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@@Z
_TEXT	SEGMENT
__Base_tag$ = -5					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@@Z PROC ; std::_Checked_base<DRAMsimII::Command * *>, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<DRAMsimII::Command * *>
	add	esp, 8

; 1166 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Checked_ba
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Checked_ba:
	DD	1
	DD	$LN4@Checked_ba
$LN4@Checked_ba:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Checked_ba
$LN3@Checked_ba:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	0
??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@@Z ENDP ; std::_Checked_base<DRAMsimII::Command * *>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAPAVCommand@DRAMsimII@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCommand@DRAMsimII@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAPAVCommand@DRAMsimII@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCommand@DRAMsimII@@0@Z PROC ; std::_Iter_random<DRAMsimII::Command * *,DRAMsimII::Command * *>, COMDAT

; 993  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_rando
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Iter_rando:
	DD	1
	DD	$LN4@Iter_rando
$LN4@Iter_rando:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_rando
$LN3@Iter_rando:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_random@PAPAVCommand@DRAMsimII@@PAPAV12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCommand@DRAMsimII@@0@Z ENDP ; std::_Iter_random<DRAMsimII::Command * *,DRAMsimII::Command * *>
_TEXT	ENDS
PUBLIC	??$_Debug_pointer@PAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@PB_WI@Z ; std::_Debug_pointer<DRAMsimII::Command *>
PUBLIC	??$_Debug_range@PAPAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@0PB_WI@Z ; std::_Debug_range<DRAMsimII::Command * *>
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$_Copy_opt@PAPAVCommand@DRAMsimII@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -20						; size = 4
__Off$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAPAVCommand@DRAMsimII@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<DRAMsimII::Command * *,DRAMsimII::Command * *,std::random_access_iterator_tag>, COMDAT

; 2494 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);

	push	2497					; 000009c1H
	push	OFFSET ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAPAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@0PB_WI@Z ; std::_Debug_range<DRAMsimII::Command * *>
	add	esp, 16					; 00000010H

; 2498 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN2@Copy_opt

; 2499 : 		_DEBUG_POINTER(_Dest);

	push	2499					; 000009c3H
	push	OFFSET ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Debug_pointer@PAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@PB_WI@Z ; std::_Debug_pointer<DRAMsimII::Command *>
	add	esp, 12					; 0000000cH
$LN2@Copy_opt:

; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Result$[ebp], edx

; 2505 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_opt

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Off$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Copy_opt:

; 2507 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2508 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAPAVCommand@DRAMsimII@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<DRAMsimII::Command * *,DRAMsimII::Command * *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@U_Undefined_move_tag@4@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<DRAMsimII::Command * *,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *>,std::_Undefined_move_tag>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@std@@@Z
_TEXT	SEGMENT
$T161039 = -209						; size = 1
$T161040 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<DRAMsimII::Command * *,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T161039[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Move_cat@PAPAVCommand@DRAMsimII@@@std@@YA?AU_Undefined_move_tag@0@ABQAPAVCommand@DRAMsimII@@@Z ; std::_Move_cat<DRAMsimII::Command * *>
	add	esp, 4
	mov	BYTE PTR $T161040[ebp], al
	movzx	edx, BYTE PTR $T161039[ebp]
	push	edx
	movzx	eax, BYTE PTR $T161040[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@@Z ; std::_Checked_base<DRAMsimII::Command * *>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@@Z ; std::_Checked_base<DRAMsimII::Command * *>
	add	esp, 4
	push	eax
	call	??$_Uninit_move@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@U_Undefined_move_tag@4@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<DRAMsimII::Command * *,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *>,std::_Undefined_move_tag>
	add	esp, 24					; 00000018H

; 865  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_uninitialized_move@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<DRAMsimII::Command * *,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill@PAPAVCommand@DRAMsimII@@PAV12@@std@@YAXPAPAVCommand@DRAMsimII@@0ABQAV12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAPAVCommand@DRAMsimII@@PAV12@@std@@YAXPAPAVCommand@DRAMsimII@@0ABQAV12@@Z PROC ; std::_Fill<DRAMsimII::Command * *,DRAMsimII::Command *>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3157 : 	_DEBUG_RANGE(_First, _Last);

	push	3157					; 00000c55H
	push	OFFSET ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAPAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@0PB_WI@Z ; std::_Debug_range<DRAMsimII::Command * *>
	add	esp, 16					; 00000010H
	jmp	SHORT $LN3@Fill
$LN2@Fill:

; 3158 : 	for (; _First != _Last; ++_First)

	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 4
	mov	DWORD PTR __First$[ebp], eax
$LN3@Fill:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Fill

; 3159 : 		*_First = _Val;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN2@Fill
$LN4@Fill:

; 3160 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill@PAPAVCommand@DRAMsimII@@PAV12@@std@@YAXPAPAVCommand@DRAMsimII@@0ABQAV12@@Z ENDP ; std::_Fill<DRAMsimII::Command * *,DRAMsimII::Command *>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAPAVCommand@DRAMsimII@@@std@@YA?AU_Undefined_move_tag@0@ABQAPAVCommand@DRAMsimII@@@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAPAVCommand@DRAMsimII@@@std@@YA?AU_Undefined_move_tag@0@ABQAPAVCommand@DRAMsimII@@@Z PROC ; std::_Move_cat<DRAMsimII::Command * *>, COMDAT

; 1200 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1203 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Move_cat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Move_cat:
	DD	1
	DD	$LN4@Move_cat
$LN4@Move_cat:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Move_cat
$LN3@Move_cat:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Move_cat@PAPAVCommand@DRAMsimII@@@std@@YA?AU_Undefined_move_tag@0@ABQAPAVCommand@DRAMsimII@@@Z ENDP ; std::_Move_cat<DRAMsimII::Command * *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAPAVCommand@DRAMsimII@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<DRAMsimII::Command * *,DRAMsimII::Command * *,std::random_access_iterator_tag>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$_Move_backward_opt@PAPAVCommand@DRAMsimII@@PAPAV12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T161050 = -209						; size = 1
$T161051 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAPAVCommand@DRAMsimII@@PAPAV12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<DRAMsimII::Command * *,DRAMsimII::Command * *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T161050[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVCommand@DRAMsimII@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVCommand@DRAMsimII@@0@Z ; std::_Ptr_cat<DRAMsimII::Command * *,DRAMsimII::Command * *>
	add	esp, 8
	mov	BYTE PTR $T161051[ebp], al
	movzx	eax, BYTE PTR $T161050[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T161051[ebp]
	push	ecx
	movzx	edx, BYTE PTR __First_dest_cat$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_backward_opt@PAPAVCommand@DRAMsimII@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<DRAMsimII::Command * *,DRAMsimII::Command * *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 2755 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_backward_opt@PAPAVCommand@DRAMsimII@@PAPAV12@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@4@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<DRAMsimII::Command * *,DRAMsimII::Command * *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$unchecked_fill_n@PAPAVCommand@DRAMsimII@@IPAV12@@stdext@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@@Z ; stdext::unchecked_fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_fill_n@PAPAVCommand@DRAMsimII@@IPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAPAVCommand@DRAMsimII@@IPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >, COMDAT

; 418  : 	{	// copy _Count *_Val to raw _First, using _Al, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 419  : 		_STDEXT unchecked_fill_n(_First, _Count, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$unchecked_fill_n@PAPAVCommand@DRAMsimII@@IPAV12@@stdext@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@@Z ; stdext::unchecked_fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *>
	add	esp, 12					; 0000000cH

; 420  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_fill_n@PAPAVCommand@DRAMsimII@@IPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@AAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
$T161057 = -212						; size = 4
__Base_tag$ = -5					; size = 1
___$ReturnUdt$ = 8					; size = 4
__It$ = 12						; size = 4
??$_Checked_base@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@AAV10@@Z PROC ; std::_Checked_base<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >, COMDAT

; 1163 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	DWORD PTR $T161057[ebp], 0

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	movzx	eax, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??$_Checked_base@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@AAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR $T161057[ebp]
	or	eax, 1
	mov	DWORD PTR $T161057[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1166 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Checked_ba@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Checked_ba@2:
	DD	1
	DD	$LN6@Checked_ba@2
$LN6@Checked_ba@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN5@Checked_ba@2
$LN5@Checked_ba@2:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	0
??$_Checked_base@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@AAV10@@Z ENDP ; std::_Checked_base<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__unwindtable$??$_Uninit_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@U_Undefined_move_tag@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninit_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@U_Undefined_move_tag@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@U_Undefined_move_tag@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninit_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@U_Undefined_move_tag@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@U_Undefined_move_tag@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@U_Undefined_move_tag@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@U_Undefined_move_tag@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv134 = -256						; size = 4
tv137 = -252						; size = 4
tv133 = -248						; size = 4
tv140 = -244						; size = 4
$T161064 = -236						; size = 4
$T161065 = -224						; size = 4
$T161066 = -212						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Dest$ = 32						; size = 4
__Al$ = 36						; size = 4
___formal$ = 40						; size = 1
___formal$ = 44						; size = 1
??$_Uninit_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@U_Undefined_move_tag@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@U_Undefined_move_tag@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T161065[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv140[ebp], eax
	mov	eax, DWORD PTR tv140[ebp]
	mov	DWORD PTR tv133[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T161066[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv137[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$unchecked_uninitialized_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv134[ebp], eax
	mov	eax, DWORD PTR tv134[ebp]
	mov	DWORD PTR $T161064[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T161064[ebp]

; 208  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@U_Undefined_move_tag@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninit_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@U_Undefined_move_tag@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninit_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@U_Undefined_move_tag@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
	mov	ecx, DWORD PTR $T161065[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__ehhandler$??$_Uninit_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@U_Undefined_move_tag@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@U_Undefined_move_tag@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@U_Undefined_move_tag@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *>,std::_Undefined_move_tag>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<DRAMsimII::Command * *>, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<DRAMsimII::Command * *>
_TEXT	ENDS
PUBLIC	??$_Debug_range2@PAPAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<DRAMsimII::Command * *>
PUBLIC	??$_Iter_cat@PAPAVCommand@DRAMsimII@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCommand@DRAMsimII@@@Z ; std::_Iter_cat<DRAMsimII::Command * *>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$_Debug_range@PAPAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@0PB_WI@Z
_TEXT	SEGMENT
$T161081 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAPAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@0PB_WI@Z PROC ; std::_Debug_range<DRAMsimII::Command * *>, COMDAT

; 1597 : 	{	// test iterator pair for valid range

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1598 : 	_Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T161081[ebp]
	push	ecx
	call	??$_Iter_cat@PAPAVCommand@DRAMsimII@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCommand@DRAMsimII@@@Z ; std::_Iter_cat<DRAMsimII::Command * *>
	add	esp, 8
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_range2@PAPAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<DRAMsimII::Command * *>
	add	esp, 20					; 00000014H

; 1599 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAPAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@0PB_WI@Z ENDP ; std::_Debug_range<DRAMsimII::Command * *>
_TEXT	ENDS
PUBLIC	??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??$_Debug_pointer@PAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@PAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@PB_WI@Z PROC ; std::_Debug_pointer<DRAMsimII::Command *>, COMDAT

; 1570 : 	{	// test iterator for non-singularity, pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1571 : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin

; 1572 : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Debug_poin:

; 1573 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@PAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@PB_WI@Z ENDP ; std::_Debug_pointer<DRAMsimII::Command *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@std@@@Z ; stdext::unchecked_uninitialized_copy<DRAMsimII::Command * *,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@U_Undefined_move_tag@4@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@U_Undefined_move_tag@4@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<DRAMsimII::Command * *,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@std@@@Z ; stdext::unchecked_uninitialized_copy<DRAMsimII::Command * *,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >
	add	esp, 16					; 00000010H

; 208  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@U_Undefined_move_tag@4@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<DRAMsimII::Command * *,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *>,std::_Undefined_move_tag>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAPAVCommand@DRAMsimII@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -20						; size = 4
__Off$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAPAVCommand@DRAMsimII@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<DRAMsimII::Command * *,DRAMsimII::Command * *,std::random_access_iterator_tag>, COMDAT

; 2698 : 	{	// copy [_First, _Last) backwards to [..., _Dest), pointers to scalars

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2699 : 
; 2700 :  #if _HAS_ITERATOR_DEBUGGING
; 2701 : 	_DEBUG_RANGE(_First, _Last);

	push	2701					; 00000a8dH
	push	OFFSET ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAPAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@0PB_WI@Z ; std::_Debug_range<DRAMsimII::Command * *>
	add	esp, 16					; 00000010H

; 2702 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN2@Copy_backw

; 2703 : 		_DEBUG_POINTER(_Dest);

	push	2703					; 00000a8fH
	push	OFFSET ??_C@_1IC@MEADOCIB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Debug_pointer@PAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@PB_WI@Z ; std::_Debug_pointer<DRAMsimII::Command *>
	add	esp, 12					; 0000000cH
$LN2@Copy_backw:

; 2704 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2705 : 
; 2706 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$[ebp], eax

; 2707 : 	/* if _OutIt is range checked, this will make sure there is enough space for 
; 2708 : 	 * the memmove
; 2709 : 	 */
; 2710 : 	_OutIt _Result = _Dest - _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Dest$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$[ebp], ecx

; 2711 : 	if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Copy_backw

; 2712 : 		_CRT_SECURE_MEMMOVE(&*_Result, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	mov	eax, DWORD PTR __Off$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Off$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR __Result$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Copy_backw:

; 2713 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2714 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@PAPAVCommand@DRAMsimII@@PAPAV12@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<DRAMsimII::Command * *,DRAMsimII::Command * *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAPAVCommand@DRAMsimII@@IPAV12@@std@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *>
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$unchecked_fill_n@PAPAVCommand@DRAMsimII@@IPAV12@@stdext@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@@Z
_TEXT	SEGMENT
$T161090 = -209						; size = 1
$T161091 = -197						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAPAVCommand@DRAMsimII@@IPAV12@@stdext@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@@Z PROC ; stdext::unchecked_fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *>, COMDAT

; 3720 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T161090[ebp], al
	movzx	ecx, BYTE PTR $T161090[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T161091[ebp]
	push	eax
	call	??$_Iter_cat@PAPAVCommand@DRAMsimII@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCommand@DRAMsimII@@@Z ; std::_Iter_cat<DRAMsimII::Command * *>
	add	esp, 8
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Fill_n@PAPAVCommand@DRAMsimII@@IPAV12@@std@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *>
	add	esp, 20					; 00000014H

; 3722 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_fill_n@PAPAVCommand@DRAMsimII@@IPAV12@@stdext@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@@Z ENDP ; stdext::unchecked_fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Checked_base@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@AAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
$T161095 = -200						; size = 4
___$ReturnUdt$ = 8					; size = 4
__It$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Checked_base@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@AAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >, COMDAT

; 1146 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	DWORD PTR $T161095[ebp], 0

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T161095[ebp]
	or	ecx, 1
	mov	DWORD PTR $T161095[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1148 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Checked_base@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@AAV10@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >
PUBLIC	??$_Ptr_cat@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@AAPAPAVCommand@DRAMsimII@@@Z ; std::_Ptr_cat<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *>
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__unwindtable$??$unchecked_uninitialized_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$unchecked_uninitialized_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$unchecked_uninitialized_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$unchecked_uninitialized_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z$2
__ehfuncinfo$??$unchecked_uninitialized_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$unchecked_uninitialized_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z
_TEXT	SEGMENT
tv144 = -280						; size = 4
tv147 = -276						; size = 4
tv143 = -272						; size = 4
tv150 = -268						; size = 4
$T161099 = -260						; size = 4
$T161100 = -245						; size = 1
$T161101 = -233						; size = 1
$T161102 = -224						; size = 4
$T161103 = -212						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Dest$ = 32						; size = 4
__Al$ = 36						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$unchecked_uninitialized_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T161100[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@AAPAPAVCommand@DRAMsimII@@@Z ; std::_Ptr_cat<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *>
	add	esp, 8
	mov	BYTE PTR $T161101[ebp], al
	movzx	eax, BYTE PTR $T161100[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T161101[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T161102[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	push	ecx
	call	??$_Checked_base@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@AAV10@@Z ; std::_Checked_base<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
	add	esp, 8
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR tv150[ebp]
	mov	DWORD PTR tv143[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T161103[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	push	ecx
	call	??$_Checked_base@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@AAV10@@Z ; std::_Checked_base<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
	add	esp, 8
	mov	DWORD PTR tv147[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Uninit_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >
	add	esp, 40					; 00000028H
	mov	DWORD PTR tv144[ebp], eax
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR $T161099[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T161099[ebp]

; 823  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$unchecked_uninitialized_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$??$unchecked_uninitialized_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$??$unchecked_uninitialized_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z$2:
	mov	ecx, DWORD PTR $T161102[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__ehhandler$??$unchecked_uninitialized_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-284]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$unchecked_uninitialized_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$unchecked_uninitialized_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@stdext@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@4@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_cat@PAPAVCommand@DRAMsimII@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCommand@DRAMsimII@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAPAVCommand@DRAMsimII@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCommand@DRAMsimII@@@Z PROC ; std::_Iter_cat<DRAMsimII::Command * *>, COMDAT

; 952  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 955  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_cat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Iter_cat:
	DD	1
	DD	$LN4@Iter_cat
$LN4@Iter_cat:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_cat
$LN3@Iter_cat:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_cat@PAPAVCommand@DRAMsimII@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCommand@DRAMsimII@@@Z ENDP ; std::_Iter_cat<DRAMsimII::Command * *>
_TEXT	ENDS
PUBLIC	??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??$_Debug_range2@PAPAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAPAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<DRAMsimII::Command * *>, COMDAT

; 1585 : 	{	// test iterator pair for valid range, random-access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1586 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang

; 1587 : 		{	// check for non-null pointers, valid range
; 1588 : 		_DEBUG_POINTER2(_First, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Debug_pointer@PAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@PB_WI@Z ; std::_Debug_pointer<DRAMsimII::Command *>
	add	esp, 12					; 0000000cH

; 1589 : 		_DEBUG_POINTER2(_Last, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Debug_pointer@PAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@PB_WI@Z ; std::_Debug_pointer<DRAMsimII::Command *>
	add	esp, 12					; 0000000cH

; 1590 : 		if (_Last < _First)

	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang

; 1591 : 			_DEBUG_ERROR2("invalid iterator range", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Debug_rang:

; 1592 : 		}
; 1593 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range2@PAPAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<DRAMsimII::Command * *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<DRAMsimII::Command * *,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@std@@@Z
_TEXT	SEGMENT
$T161123 = -209						; size = 1
$T161124 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<DRAMsimII::Command * *,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T161123[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAPAVCommand@DRAMsimII@@PAPAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVCommand@DRAMsimII@@0@Z ; std::_Ptr_cat<DRAMsimII::Command * *,DRAMsimII::Command * *>
	add	esp, 8
	mov	BYTE PTR $T161124[ebp], al
	movzx	eax, BYTE PTR $T161123[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T161124[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@@Z ; std::_Checked_base<DRAMsimII::Command * *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@@Z ; std::_Checked_base<DRAMsimII::Command * *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<DRAMsimII::Command * *,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >
	add	esp, 24					; 00000018H

; 823  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@stdext@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<DRAMsimII::Command * *,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAPAVCommand@DRAMsimII@@IPAV12@@std@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *>
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Fill_n@PAPAVCommand@DRAMsimII@@IPAV12@@std@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T161127 = -209						; size = 1
__Last$ = -8						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Fill_n@PAPAVCommand@DRAMsimII@@IPAV12@@std@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *>, COMDAT

; 3250 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3251 : 		// if _OutIt is checked, this will ensure we have enough space
; 3252 : 		_OutIt _Last = _First + _Count; (_Last);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Last$[ebp], edx

; 3253 : 		_Fill_n(_CHECKED_BASE(_First), _Count, _Val,
; 3254 : 			_Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T161127[ebp], al
	movzx	ecx, BYTE PTR $T161127[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Checked_base@PAPAVCommand@DRAMsimII@@@std@@YAPAPAVCommand@DRAMsimII@@AAPAPAV12@@Z ; std::_Checked_base<DRAMsimII::Command * *>
	add	esp, 4
	push	eax
	call	??$_Fill_n@PAPAVCommand@DRAMsimII@@IPAV12@@std@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *>
	add	esp, 16					; 00000010H

; 3255 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill_n@PAPAVCommand@DRAMsimII@@IPAV12@@std@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *>
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@AAPAPAVCommand@DRAMsimII@@@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@AAPAPAVCommand@DRAMsimII@@@Z PROC ; std::_Ptr_cat<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *>, COMDAT

; 1509 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1512 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Ptr_cat@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Ptr_cat@2:
	DD	1
	DD	$LN4@Ptr_cat@2
$LN4@Ptr_cat@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Ptr_cat@2
$LN3@Ptr_cat@2:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Ptr_cat@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@AAPAPAVCommand@DRAMsimII@@@Z ENDP ; std::_Ptr_cat<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *>
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEAAPAVCommand@DRAMsimII@@XZ ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator*
PUBLIC	??G?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEHABV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@@Z ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator-
PUBLIC	??$_Debug_range@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WI@Z ; std::_Debug_range<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
PUBLIC	??_C@_1HO@FAAIACEF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ ; `string'
;	COMDAT ??_C@_1HO@FAAIACEF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
CONST	SEGMENT
??_C@_1HO@FAAIACEF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, '9', 00H, '.', 00H, '0', 00H, '\', 00H, 'v', 00H
	DB	'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u'
	DB	00H, 'd', 00H, 'e', 00H, '\', 00H, 'm', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninit_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv156 = -276						; size = 4
tv153 = -272						; size = 4
tv159 = -268						; size = 4
$T161135 = -260						; size = 4
$T161136 = -248						; size = 4
$T161137 = -236						; size = 4
__Result$ = -32						; size = 4
__Count$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__Dest$ = 32						; size = 4
___formal$ = 36						; size = 4
___formal$ = 40						; size = 1
___formal$ = 44						; size = 1
??$_Uninit_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 146  : 	_DEBUG_RANGE(_First, _Last);

	push	146					; 00000092H
	push	OFFSET ??_C@_1HO@FAAIACEF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T161135[ebp], esp
	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv159[ebp], eax
	mov	ecx, DWORD PTR tv159[ebp]
	mov	DWORD PTR tv153[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T161136[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv156[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Debug_range@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WI@Z ; std::_Debug_range<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
	add	esp, 32					; 00000020H

; 147  : 	_DEBUG_POINTER(_Dest);

	push	147					; 00000093H
	push	OFFSET ??_C@_1HO@FAAIACEF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Debug_pointer@PAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@PB_WI@Z ; std::_Debug_pointer<DRAMsimII::Command *>
	add	esp, 12					; 0000000cH

; 148  : 	size_t _Count = (size_t)(_Last - _First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??G?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEHABV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@@Z ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator-
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Result$[ebp], edx

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??D?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEAAPAVCommand@DRAMsimII@@XZ ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator*
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Uninit_cop:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]
	mov	DWORD PTR $T161137[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T161137[ebp]

; 153  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninit_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Uninit_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
	mov	ecx, DWORD PTR $T161135[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__ehhandler$??$_Uninit_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-280]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@PAPAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@2@@std@@YAPAPAVCommand@DRAMsimII@@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PAPAV12@AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >
PUBLIC	??D?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEABQAVCommand@DRAMsimII@@XZ ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator*
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEAAPAVCommand@DRAMsimII@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEAAPAVCommand@DRAMsimII@@XZ PROC ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator*, COMDAT
; _this$ = ecx

; 338  : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 339  : 		return ((reference)**(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEABQAVCommand@DRAMsimII@@XZ ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator*

; 340  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEAAPAVCommand@DRAMsimII@@XZ ENDP ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator*
_TEXT	ENDS
PUBLIC	??_C@_1OM@OEALLCLK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ ; `string'
;	COMDAT ??_C@_1OM@OEALLCLK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1OM@OEALLCLK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 'D', 00H, 'R', 00H, 'A', 00H, 'M', 00H, 's', 00H, 'i'
	DB	00H, 'm', 00H, 'I', 00H, 'I', 00H, ':', 00H, ':', 00H, 'C', 00H
	DB	'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'd', 00H, ' '
	DB	00H, '*', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 'D', 00H, 'R', 00H, 'A', 00H
	DB	'M', 00H, 's', 00H, 'i', 00H, 'm', 00H, 'I', 00H, 'I', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H
	DB	'n', 00H, 'd', 00H, ' ', 00H, '*', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
CONST	SEGMENT
??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp /RTCcsu /ZI
CONST	ENDS
;	COMDAT ??D?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEABQAVCommand@DRAMsimII@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEABQAVCommand@DRAMsimII@@XZ PROC ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator*, COMDAT
; _this$ = ecx

; 91   : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 92   : 
; 93   :  #if _HAS_ITERATOR_DEBUGGING
; 94   : 		if (this->_Mycont == 0
; 95   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 96   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@operator@11
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR [ecx+8]
	jb	SHORT $LN1@operator@11
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx+8]
	ja	SHORT $LN2@operator@11
$LN1@operator@11:

; 97   : 			{
; 98   : 			_DEBUG_ERROR("vector iterator not dereferencable");

	mov	esi, esp
	push	98					; 00000062H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 99   : 			_SCL_SECURE_OUT_OF_RANGE;

	xor	eax, eax
	jne	SHORT $LN5@operator@11
	mov	esi, esp
	push	OFFSET ??_C@_1FG@CMLDHNON@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
	push	0
	push	99					; 00000063H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@operator@11
	int	3
$LN5@operator@11:
	mov	esi, esp
	push	0
	push	99					; 00000063H
	push	OFFSET ??_C@_1HO@CONDIOEO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	push	OFFSET ??_C@_1OM@OEALLCLK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@11:

; 100  : 			}
; 101  :  #else
; 102  :  		_SCL_SECURE_VALIDATE(this->_Has_container());
; 103  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);
; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 107  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEABQAVCommand@DRAMsimII@@XZ ENDP ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator*
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -20						; size = 4
__Count$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<DRAMsimII::Command * *,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 146  : 	_DEBUG_RANGE(_First, _Last);

	push	146					; 00000092H
	push	OFFSET ??_C@_1HO@FAAIACEF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAPAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@0PB_WI@Z ; std::_Debug_range<DRAMsimII::Command * *>
	add	esp, 16					; 00000010H

; 147  : 	_DEBUG_POINTER(_Dest);

	push	147					; 00000093H
	push	OFFSET ??_C@_1HO@FAAIACEF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Debug_pointer@PAVCommand@DRAMsimII@@@std@@YAXPAPAVCommand@DRAMsimII@@PB_WI@Z ; std::_Debug_pointer<DRAMsimII::Command *>
	add	esp, 12					; 0000000cH

; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Result$[ebp], edx

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@2

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Uninit_cop@2:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAPAVCommand@DRAMsimII@@PAPAV12@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@YAPAPAVCommand@DRAMsimII@@PAPAV12@00AAV?$allocator@PAVCommand@DRAMsimII@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<DRAMsimII::Command * *,DRAMsimII::Command * *,std::allocator<DRAMsimII::Command *> >
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill_n@PAPAVCommand@DRAMsimII@@IPAV12@@std@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_n@PAPAVCommand@DRAMsimII@@IPAV12@@std@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *>, COMDAT

; 3196 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3197 : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN3@Fill_n
$LN2@Fill_n:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 4
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Fill_n:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Fill_n

; 3198 : 		*_First = _Val;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN2@Fill_n
$LN4@Fill_n:

; 3199 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill_n@PAPAVCommand@DRAMsimII@@IPAV12@@std@@YAXPAPAVCommand@DRAMsimII@@IABQAV12@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<DRAMsimII::Command * *,unsigned int,DRAMsimII::Command *>
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator-
; Function compile flags: /Odtp /RTCcsu /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEHABV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??G?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEHABV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@@Z PROC ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator-, COMDAT
; _this$ = ecx

; 397  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 398  : 		return (*(_Mybase *)this - _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??G?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator-

; 399  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEHABV?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@1@@Z ENDP ; std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator-
; Function compile flags: /Odtp /RTCcsu /ZI
_TEXT	ENDS
;	COMDAT ??G?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator-, COMDAT
; _this$ = ecx

; 186  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::_Compat

; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+8]
	sar	eax, 2

; 195  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator-
_TEXT	ENDS
PUBLIC	??$_Debug_range2@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
PUBLIC	??$_Iter_cat@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@@Z ; std::_Iter_cat<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??$_Debug_range@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WI@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WI@Z$2
__ehfuncinfo$??$_Debug_range@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WI@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Debug_range@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Debug_range@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WI@Z
_TEXT	SEGMENT
tv140 = -252						; size = 4
tv137 = -248						; size = 4
tv143 = -244						; size = 4
$T161163 = -233						; size = 1
$T161164 = -224						; size = 4
$T161165 = -212						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__File$ = 32						; size = 4
__Line$ = 36						; size = 4
??$_Debug_range@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WI@Z PROC ; std::_Debug_range<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >, COMDAT

; 1597 : 	{	// test iterator pair for valid range

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Debug_range@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 1598 : 	_Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T161163[ebp]
	push	ecx
	call	??$_Iter_cat@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@@Z ; std::_Iter_cat<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
	add	esp, 8
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T161164[ebp], esp
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv143[ebp], eax
	mov	eax, DWORD PTR tv143[ebp]
	mov	DWORD PTR tv137[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T161165[ebp], esp
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??0?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR tv140[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??$_Debug_range2@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
	add	esp, 36					; 00000024H

; 1599 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WI@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WI@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WI@Z$2:
	mov	ecx, DWORD PTR $T161164[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__ehhandler$??$_Debug_range@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-256]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Debug_range@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Debug_range@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WI@Z ENDP ; std::_Debug_range<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$_Iter_cat@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@@Z PROC ; std::_Iter_cat<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >, COMDAT

; 952  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 955  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_cat@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Iter_cat@2:
	DD	1
	DD	$LN4@Iter_cat@2
$LN4@Iter_cat@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_cat@2
$LN3@Iter_cat@2:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_cat@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@@Z ENDP ; std::_Iter_cat<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
_TEXT	ENDS
PUBLIC	??$_Debug_pointer@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Debug_range2@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$1
__ehfuncinfo$??$_Debug_range2@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Debug_range2@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCcsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Debug_range2@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 12
__Last$ = 20						; size = 12
__File$ = 32						; size = 4
__Line$ = 36						; size = 4
___formal$ = 40						; size = 1
??$_Debug_range2@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >, COMDAT

; 1585 : 	{	// test iterator pair for valid range, random-access iterators

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Debug_range2@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 1586 : 	if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Debug_rang@2

; 1587 : 		{	// check for non-null pointers, valid range
; 1588 : 		_DEBUG_POINTER2(_First, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Debug_pointer@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
	add	esp, 12					; 0000000cH

; 1589 : 		_DEBUG_POINTER2(_Last, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Debug_pointer@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
	add	esp, 12					; 0000000cH

; 1590 : 		if (_Last < _First)

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??M?$_Vector_const_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> >::operator<
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Debug_rang@2

; 1591 : 			_DEBUG_ERROR2("invalid iterator range", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Debug_rang@2:

; 1592 : 		}
; 1593 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@QAE@XZ
__ehhandler$??$_Debug_range2@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Debug_range2@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Debug_range2@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
; Function compile flags: /Odtp /RTCcsu /ZI
;	COMDAT ??$_Debug_pointer@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@PB_WI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Debug_pointer@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@PB_WI@Z PROC ; std::_Debug_pointer<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >, COMDAT

; 1558 : 	{	// test pointer for non-singularity, arbitrary type

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1559 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@V?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@PAVCommand@DRAMsimII@@V?$allocator@PAVCommand@DRAMsimII@@@std@@@0@PB_WI@Z ENDP ; std::_Debug_pointer<std::_Vector_iterator<DRAMsimII::Command *,std::allocator<DRAMsimII::Command *> > >
_TEXT	ENDS
END
